saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "AddV2"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_aggregate: true
        is_commutative: true
      }
      op {
        name: "AssignVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        input_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "BroadcastGradientArgs"
        input_arg {
          name: "s0"
          type_attr: "T"
        }
        input_arg {
          name: "s1"
          type_attr: "T"
        }
        output_arg {
          name: "r0"
          type_attr: "T"
        }
        output_arg {
          name: "r1"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "BroadcastTo"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "DynamicStitch"
        input_arg {
          name: "indices"
          type: DT_INT32
          number_attr: "N"
        }
        input_arg {
          name: "data"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "merged"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type_attr: "index_type"
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "index_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Log"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "PlaceholderWithDefault"
        input_arg {
          name: "input"
          type_attr: "dtype"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ReadVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "Reciprocal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_QINT8
            }
          }
        }
      }
      op {
        name: "ReluGrad"
        input_arg {
          name: "gradients"
          type_attr: "T"
        }
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "backprops"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ResourceApplyAdam"
        input_arg {
          name: "var"
          type: DT_RESOURCE
        }
        input_arg {
          name: "m"
          type: DT_RESOURCE
        }
        input_arg {
          name: "v"
          type: DT_RESOURCE
        }
        input_arg {
          name: "beta1_power"
          type_attr: "T"
        }
        input_arg {
          name: "beta2_power"
          type_attr: "T"
        }
        input_arg {
          name: "lr"
          type_attr: "T"
        }
        input_arg {
          name: "beta1"
          type_attr: "T"
        }
        input_arg {
          name: "beta2"
          type_attr: "T"
        }
        input_arg {
          name: "epsilon"
          type_attr: "T"
        }
        input_arg {
          name: "grad"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "use_nesterov"
          type: "bool"
          default_value {
            b: false
          }
        }
        is_stateful: true
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Select"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "t"
          type_attr: "T"
        }
        input_arg {
          name: "e"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Softmax"
        input_arg {
          name: "logits"
          type_attr: "T"
        }
        output_arg {
          name: "softmax"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "StaticRegexFullMatch"
        input_arg {
          name: "input"
          type: DT_STRING
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "pattern"
          type: "string"
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "TruncatedNormal"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "VarHandleOp"
        output_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
        is_stateful: true
      }
      op {
        name: "VarIsInitializedOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "is_initialized"
          type: DT_BOOL
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "2.2.0"
    tensorflow_git_version: "v2.2.0-rc4-8-g2b96f3662b"
  }
  graph_def {
    node {
      name: "reward"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "actual_move"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 3
            }
          }
        }
      }
    }
    node {
      name: "network/Placeholder"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 9
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.3333333432674408
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal/mul"
      op: "Mul"
      input: "network/truncated_normal/TruncatedNormal"
      input: "network/truncated_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal"
      op: "Add"
      input: "network/truncated_normal/mul"
      input: "network/truncated_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights"
        }
      }
    }
    node {
      name: "network/weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Assign"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "network/truncated_normal"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases"
        }
      }
    }
    node {
      name: "network/biases/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Assign"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "network/Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul"
      op: "MatMul"
      input: "network/Placeholder"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add"
      op: "AddV2"
      input: "network/MatMul"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu"
      op: "Relu"
      input: "network/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_1/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mul"
      op: "Mul"
      input: "network/truncated_normal_1/TruncatedNormal"
      input: "network/truncated_normal_1/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1"
      op: "Add"
      input: "network/truncated_normal_1/mul"
      input: "network/truncated_normal_1/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1"
        }
      }
    }
    node {
      name: "network/weights_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "network/truncated_normal_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1"
        }
      }
    }
    node {
      name: "network/biases_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "network/Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_1"
      op: "AddV2"
      input: "network/MatMul_1"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_1"
      op: "Relu"
      input: "network/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_2/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mul"
      op: "Mul"
      input: "network/truncated_normal_2/TruncatedNormal"
      input: "network/truncated_normal_2/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2"
      op: "Add"
      input: "network/truncated_normal_2/mul"
      input: "network/truncated_normal_2/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2"
        }
      }
    }
    node {
      name: "network/weights_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "network/truncated_normal_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2"
        }
      }
    }
    node {
      name: "network/biases_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "network/Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2"
      op: "MatMul"
      input: "network/Relu_1"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_2"
      op: "AddV2"
      input: "network/MatMul_2"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_2"
      op: "Relu"
      input: "network/add_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000\003\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5773502588272095
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_3/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mul"
      op: "Mul"
      input: "network/truncated_normal_3/TruncatedNormal"
      input: "network/truncated_normal_3/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3"
      op: "Add"
      input: "network/truncated_normal_3/mul"
      input: "network/truncated_normal_3/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 3
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights"
        }
      }
    }
    node {
      name: "network/output_weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "network/truncated_normal_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/output_bias"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias"
        }
      }
    }
    node {
      name: "network/output_bias/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "network/Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_3"
      op: "MatMul"
      input: "network/Relu_2"
      input: "network/MatMul_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_3"
      op: "AddV2"
      input: "network/MatMul_3"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Softmax"
      op: "Softmax"
      input: "network/add_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "Mul"
      op: "Mul"
      input: "actual_move"
      input: "network/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "Sum"
      op: "Sum"
      input: "Mul"
      input: "Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "Log"
      op: "Log"
      input: "Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "mul_1"
      op: "Mul"
      input: "Log"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Neg"
      op: "Neg"
      input: "mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape"
      op: "Shape"
      input: "Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/grad_ys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "gradients/Fill"
      op: "Fill"
      input: "gradients/Shape"
      input: "gradients/grad_ys_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Neg_grad/Neg"
      op: "Neg"
      input: "gradients/Fill"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape"
      op: "Shape"
      input: "Log"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape_1"
      op: "Shape"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/mul_1_grad/Shape"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul"
      op: "Mul"
      input: "gradients/Neg_grad/Neg"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul"
      input: "gradients/mul_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum"
      input: "gradients/mul_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul_1"
      op: "Mul"
      input: "Log"
      input: "gradients/Neg_grad/Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul_1"
      input: "gradients/mul_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum_1"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/Reshape_1"
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape_1"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Log_grad/Reciprocal"
      op: "Reciprocal"
      input: "Sum"
      input: "^gradients/mul_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Log_grad/mul"
      op: "Mul"
      input: "gradients/mul_1_grad/tuple/control_dependency"
      input: "gradients/Log_grad/Reciprocal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/Shape"
      op: "Shape"
      input: "Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Sum_grad/Size"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/add"
      op: "AddV2"
      input: "Sum/reduction_indices"
      input: "gradients/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/mod"
      op: "FloorMod"
      input: "gradients/Sum_grad/add"
      input: "gradients/Sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/range"
      op: "Range"
      input: "gradients/Sum_grad/range/start"
      input: "gradients/Sum_grad/Size"
      input: "gradients/Sum_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/Fill"
      op: "Fill"
      input: "gradients/Sum_grad/Shape_1"
      input: "gradients/Sum_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "gradients/Sum_grad/range"
      input: "gradients/Sum_grad/mod"
      input: "gradients/Sum_grad/Shape"
      input: "gradients/Sum_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/Reshape"
      op: "Reshape"
      input: "gradients/Log_grad/mul"
      input: "gradients/Sum_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Sum_grad/BroadcastTo"
      op: "BroadcastTo"
      input: "gradients/Sum_grad/Reshape"
      input: "gradients/Sum_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape"
      op: "Shape"
      input: "actual_move"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape_1"
      op: "Shape"
      input: "network/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/Mul_grad/Shape"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul"
      op: "Mul"
      input: "gradients/Sum_grad/BroadcastTo"
      input: "network/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum"
      op: "Sum"
      input: "gradients/Mul_grad/Mul"
      input: "gradients/Mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum"
      input: "gradients/Mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul_1"
      op: "Mul"
      input: "actual_move"
      input: "gradients/Sum_grad/BroadcastTo"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum_1"
      op: "Sum"
      input: "gradients/Mul_grad/Mul_1"
      input: "gradients/Mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum_1"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/Reshape_1"
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape_1"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Softmax_grad/mul"
      op: "Mul"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "network/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Softmax_grad/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "gradients/network/Softmax_grad/Sum"
      op: "Sum"
      input: "gradients/network/Softmax_grad/mul"
      input: "gradients/network/Softmax_grad/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/Softmax_grad/sub"
      op: "Sub"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "gradients/network/Softmax_grad/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Softmax_grad/mul_1"
      op: "Mul"
      input: "gradients/network/Softmax_grad/sub"
      input: "network/Softmax"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape"
      op: "Shape"
      input: "network/MatMul_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape_1"
      op: "Shape"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_3_grad/Shape"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum"
      op: "Sum"
      input: "gradients/network/Softmax_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum"
      input: "gradients/network/add_3_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Softmax_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum_1"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape_1"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_3_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      input: "network/MatMul_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_3_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_2"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_3_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_3_grad/MatMul"
      input: "^gradients/network/MatMul_3_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_3_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_3_grad/MatMul"
      input: "^gradients/network/MatMul_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_3_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_3_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_3_grad/MatMul_1"
      input: "^gradients/network/MatMul_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_3_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_2_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_3_grad/tuple/control_dependency"
      input: "network/Relu_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape"
      op: "Shape"
      input: "network/MatMul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape_1"
      op: "Shape"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_2_grad/Shape"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum"
      input: "gradients/network/add_2_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum_1"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape_1"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_1"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul_1"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_1_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      input: "network/Relu_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape"
      op: "Shape"
      input: "network/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape_1"
      op: "Shape"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_1_grad/Shape"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum"
      input: "gradients/network/add_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum_1"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape_1"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul_1"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      input: "network/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape"
      op: "Shape"
      input: "network/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape_1"
      op: "Shape"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_grad/Shape"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum"
      input: "gradients/network/add_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum_1"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape_1"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_grad/tuple/control_dependency"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "network/Placeholder"
      input: "gradients/network/add_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul_1"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "beta1_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta1_power"
        }
      }
    }
    node {
      name: "beta1_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Assign"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "beta1_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta1_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "beta2_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta2_power"
        }
      }
    }
    node {
      name: "beta2_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta2_power/Assign"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "beta2_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam"
        }
      }
    }
    node {
      name: "network/weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "network/weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam_1"
        }
      }
    }
    node {
      name: "network/weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "network/weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam"
        }
      }
    }
    node {
      name: "network/biases/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "network/biases/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam_1"
        }
      }
    }
    node {
      name: "network/biases/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "network/biases/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam"
        }
      }
    }
    node {
      name: "network/weights_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "network/weights_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam"
        }
      }
    }
    node {
      name: "network/biases_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "network/biases_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam"
        }
      }
    }
    node {
      name: "network/weights_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "network/weights_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam"
        }
      }
    }
    node {
      name: "network/biases_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "network/biases_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 3
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam"
        }
      }
    }
    node {
      name: "network/output_weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 3
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam_1"
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "network/output_weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam"
        }
      }
    }
    node {
      name: "network/output_bias/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam_1"
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "network/output_bias/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999747378752e-05
          }
        }
      }
    }
    node {
      name: "Adam/beta1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "Adam/beta2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "Adam/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.99999993922529e-09
          }
        }
      }
    }
    node {
      name: "Adam/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights"
      input: "network/weights/Adam"
      input: "network/weights/Adam_1"
      input: "Adam/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      input: "Adam/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/biases/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases"
      input: "network/biases/Adam"
      input: "network/biases/Adam_1"
      input: "Adam/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      input: "Adam/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/network/add_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/weights_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_1"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam_1"
      input: "Adam/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      input: "Adam/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/biases_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_1"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam_1"
      input: "Adam/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      input: "Adam/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/network/add_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/weights_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_2"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam_1"
      input: "Adam/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      input: "Adam/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/biases_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_2"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam_1"
      input: "Adam/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      input: "Adam/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/network/add_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/output_weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_weights"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam_1"
      input: "Adam/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      input: "Adam/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/network/MatMul_3_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/update_network/output_bias/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_bias"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam_1"
      input: "Adam/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      input: "Adam/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      input: "Adam/learning_rate"
      input: "Adam/beta1"
      input: "Adam/beta2"
      input: "Adam/epsilon"
      input: "gradients/network/add_3_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "Adam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^Adam/update_network/biases/ResourceApplyAdam"
      input: "^Adam/update_network/biases_1/ResourceApplyAdam"
      input: "^Adam/update_network/biases_2/ResourceApplyAdam"
      input: "^Adam/update_network/output_bias/ResourceApplyAdam"
      input: "^Adam/update_network/output_weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights_1/ResourceApplyAdam"
      input: "^Adam/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/mul"
      op: "Mul"
      input: "Adam/ReadVariableOp"
      input: "Adam/beta1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "Adam/mul"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^Adam/AssignVariableOp"
      input: "^Adam/update_network/biases/ResourceApplyAdam"
      input: "^Adam/update_network/biases_1/ResourceApplyAdam"
      input: "^Adam/update_network/biases_2/ResourceApplyAdam"
      input: "^Adam/update_network/output_bias/ResourceApplyAdam"
      input: "^Adam/update_network/output_weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights_1/ResourceApplyAdam"
      input: "^Adam/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^Adam/update_network/biases/ResourceApplyAdam"
      input: "^Adam/update_network/biases_1/ResourceApplyAdam"
      input: "^Adam/update_network/biases_2/ResourceApplyAdam"
      input: "^Adam/update_network/output_bias/ResourceApplyAdam"
      input: "^Adam/update_network/output_weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights_1/ResourceApplyAdam"
      input: "^Adam/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/mul_1"
      op: "Mul"
      input: "Adam/ReadVariableOp_2"
      input: "Adam/beta2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "Adam/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "Adam/mul_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^Adam/AssignVariableOp_1"
      input: "^Adam/update_network/biases/ResourceApplyAdam"
      input: "^Adam/update_network/biases_1/ResourceApplyAdam"
      input: "^Adam/update_network/biases_2/ResourceApplyAdam"
      input: "^Adam/update_network/output_bias/ResourceApplyAdam"
      input: "^Adam/update_network/output_weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights_1/ResourceApplyAdam"
      input: "^Adam/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Adam"
      op: "NoOp"
      input: "^Adam/AssignVariableOp"
      input: "^Adam/AssignVariableOp_1"
      input: "^Adam/update_network/biases/ResourceApplyAdam"
      input: "^Adam/update_network/biases_1/ResourceApplyAdam"
      input: "^Adam/update_network/biases_2/ResourceApplyAdam"
      input: "^Adam/update_network/output_bias/ResourceApplyAdam"
      input: "^Adam/update_network/output_weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights/ResourceApplyAdam"
      input: "^Adam/update_network/weights_1/ResourceApplyAdam"
      input: "^Adam/update_network/weights_2/ResourceApplyAdam"
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^beta1_power/Assign"
      input: "^beta2_power/Assign"
      input: "^network/biases/Adam/Assign"
      input: "^network/biases/Adam_1/Assign"
      input: "^network/biases/Assign"
      input: "^network/biases_1/Adam/Assign"
      input: "^network/biases_1/Adam_1/Assign"
      input: "^network/biases_1/Assign"
      input: "^network/biases_2/Adam/Assign"
      input: "^network/biases_2/Adam_1/Assign"
      input: "^network/biases_2/Assign"
      input: "^network/output_bias/Adam/Assign"
      input: "^network/output_bias/Adam_1/Assign"
      input: "^network/output_bias/Assign"
      input: "^network/output_weights/Adam/Assign"
      input: "^network/output_weights/Adam_1/Assign"
      input: "^network/output_weights/Assign"
      input: "^network/weights/Adam/Assign"
      input: "^network/weights/Adam_1/Assign"
      input: "^network/weights/Assign"
      input: "^network/weights_1/Adam/Assign"
      input: "^network/weights_1/Adam_1/Assign"
      input: "^network/weights_1/Assign"
      input: "^network/weights_2/Adam/Assign"
      input: "^network/weights_2/Adam_1/Assign"
      input: "^network/weights_2/Assign"
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            tensor_content: "\311\306\242\274\243UF>|\177\305<\212{\233>\016Z\277\275\231\225d>\342\253\314>b\2018\2768\277,>+\223\326\275\374\240\364\276\330\253\254=\344+\213>\324S$\275\2118\322<!m\030\277\2300\236\275\262!\242>\315\232\035\275\301:\343\274\206\201\243\274\321u\222<@U\257>\352\355\214\275\n\213I\274\235\232k>\213N0?\346G\271=A\277\305:\017\014\331>\334\\\031\276\241\007\001?k\371\316\276q\026\361>\200vU>%\177\252\276\347D\025>\223D\276=N5g=B7\224>\333\275q\276\237\223\306\276\353\267A\276\203\340C>\2424\236=\352\217\244=u\036\240\2760\2701=\206.\312=\251\007\006\275\n/\261>~\230\r\276A\177\242>\256D\267>\245o\027>\341\253(?\235\005\222\276P\227\240>\331\223H\276\204\310\027\276J>\230\276f\251\357\275e\357\273=\330=Q=\255Uw>?\2203\275\276G\250\276\243\004\276\275\237s`\275:_\225\276\340n\006\277Ci\036\276\34183\276\222-\303>\367GC\276\243\313M=\307V\343\276jg\226\276\270\037!>\341\234\036\275\360s\217=\356\267E\276$\343\266\276\204\265\245>\230\375\030\276!M\330>\311\240\370>\263j\013\277\004\230\206>uj\337>\033T\217>\0013\274\275\257\247\313\276\362\320\226\275N\275s\276_a\300\2745\200\351\276\266\031\213>\303H\340>SF\337\276\224\321\304\276\245\323u>\330q\035?\035\220\242<]sc>\367\202%\277\021\265\230\276Ze\354=\224\213\300=?\254\024\276\276\313\261>?Q\265>]\213C\275H\241Q>G\340\003>\350T\250\2765\316\t>2_6=gt\255=\272\370 \276.\207\006>8\316\347\2751j\007\277\267\214\341=.\222\022\277\366B\305>a\257&\276m\313\275\275\240a\026\277\203\361\301=\256)\260\275\341K\224\276\3547\022\277\227\033l\275\331l\306;BH}\273\014\t\307\276\276\320\241\275\023\205(>%\216\'\275\237\327\222\276q\022\337=\2546\273\2767\016\306>\3632\257>\\\300\276>c\005}\275\362a\227<\316\241\364=\270\023x>\224\306\037>\312\226\036\277;\037\211>\350}\331\274\343\275\220>\302w{=\203u\006\276\013 \253\274\242\343\266\276\"\237\204>NP\221\276\'\257o>\225\\\202=\213 C\275a\230I>\236\337\263>+\016\371<Y\353\366>(p\321\276\224\367\r?\307-\264>\240\255\030\276c\224\244\276\213\n\277\276\246\337z\276=k\246=\327\250\357\275\351\366\320\276WN\025\277\"\205\201>z\200\356=Z]\260\275\250\257\235\276\241\347h>\231k\225<\362\245\210\276\n+\t?9\346O>,c\345\276\030\356\010\277\346\353\362\276\323\345\200\276\274y;\276\021w\207>;\322\202\275\274\177@>?\017 ?2\373\202>Zp\353\276KO\370\274\330F\200>\265\265\277>\'\350v=?\026\303>\3245Z=KV[\275\213\327\305\276IhF>j\313\267\276\032\347\020?\206\341\334\275P9\222>\017\n\033\275h\315\261\276*\337\232\276\332\335\006?\361w#\276~{\243\275\276\245\027\277\365\\&\277z\272\360>f\260\023?\313\366\330\276\373\311\246\276)\325\266=\030\301\226>\357r\275\275\004\221\265>|h\306>\033\366\236>\013\250\240>0\305 >\277W\355\276>\247\322\276\352\177Y\275\\C8<H\300\341\272\246\252H>\033\201\201\276N\026\344>\361l6>\271\240\220\275BOf\275~\350\257\275I,\333\276$9\322\275\246\372\240=\021\363\215>W\314\013\276&\020\265>\251y\232=\211\211\347\276+\232\001>W0\220>\212\263\010\277z\323\215>\370\273\236\276t\005{\276\n\305\341>\334\270\365=\351U\025\277X\320U>t\036_<\026\177\036\276\277\367\027\275\357\200\210\276\233]P=\313c\357>)\261\036?\320\344\240\276\276\364h>\307G\312\275\211\216\300\276T\361.>n\277\316=}_T>_m\331=\022\\\337\276\356\3167\276!\235?\276\004z\024\276\"\232\007\275Y\242x>\217\260\336\276\3166<=#W\271>\357\030\032\276\177\\+\276\341\273\210\274\027\\\356>\304_\260\275}]\366\275\266\303\247\276Y\315x\276\212\354\002\277C\356\036\2754\3448>ND\002\277\364]\301\275\366o\266\274\374m\031\274\001\207\254\276\033\300\224>\331f\337\276\340\377\026?_\003\312>\233\240\250\276([\"\274:e\034\273B8\316\276\210I\322>M&W>\204D\202>\263S\220\275b\236\215\276\255\216\000?\313\313\213\274\200\334\266\276\371\177)\276W\322\231\276kv\275\276t\215\007\276>(\316=\001\253\216\276\230\300\\>\266C\000\277\210\340\244\275!\351\317>SJ\336\276\353\0142=\266\334\352=\323\200\007\277fj\032?S^ \277\301\270\337>t\306\232\276SK\237\276\310l*\276\244\353\004\277\354[:>u=\006\276JUT=\247\035\366>74\260>N]\022?\305\203\273=O!\035=\256$m>=.X>\032\312\230\276\277\2151\276^mI\275uA\234\276\026\253/>5\253\336>-\327B=\347\337\211\276\355i\303\276\262\226a>\013\3566\276_\375\310>\n\027v>\275A(\276\002L=\276\033_\021>\213\236R\275\035,j\276\224\267\202>\022\236\224=\010\377*\276\225N\223\275\372}@;\177m\004?\202\214/>\313Q\'\276ei\217>\337\2767>\262G^\276\341\314\357>\367L\263<H\263\352\276t3\224\275nA\305>\370D\266\276\336\313l>\022\027_>\016\237\235=\240\375\342>\212\r\200\274\345]\267>LG\036\277\2545\016\277\003v\264=\027.\213\276\2511\014\276o&\200>g\2165\276\201W\277=|\312v<\212c\013<h6\355<\032\374\355\275]\312\030=N \233>\362Y\362\273B\373\224>\226\177\007\277\275\223\272>\240\003T>t\357\241\275\226tH\276\314\016\214=M\373\237>\267\324\376>\347\2720>p\237\032\276C#P>\336i\244>&\234\027<7\262\"\276\225e\231\276h\206O\276\357\032\265=\351\0200\273G\021\231>\"^P\276\3155\256>\356\333\267\274\273\350\214\276m_\266\275\257\226\027?\254b\361\274\203\371\177\276\304\031\021>\032\242\215=]\022\246\276\250:6>)\304\326\272_N\246>\372\343\314:u\257\327>\025\267|\276\013\206M>\177\'b>\270\244`\276\334\312E\276\325\266\312>H\273\274\276E\347\036\276\017\322&>8\2705\276\016\341W\274r\315\227\276?K >\331\246\n=\023\334\036>_\375\241\275w\177\345=\264R\265>\212\317t>0\334s\276\212_x\275\354\033\213\276*\246~\276j\224\323>@!\356\275\\\\\322\274\202\005\336>m!j>\357w\314<\220\323\223>k\263\201>\227\260\263\276\344\305k=\336\177W>\177_\237\276\002\3677=\272]\265<?z`>\335\275\227\276\224\347\355>l|1>\360\313\223\274y\365\272>\223\r\277>\246\007E=\350\331\036\275][\210\276\tk\201\276e?\302=130\274\340\372\023?\n\027\316={.\262>V\330\355\276\244\353\251>qr\246\276}D\246>\324\344$\275%\271\t\276\333\200M\275=\312\002>P\367\371\275\277\273\r?\260\242\004?M\345I<\213$\217>1\014\305\276\r\275\007>\220\253^>bx\177>\344i\216>\376\036\023?T\035`=\305}\243\274V\264\027\277C\325\t?\245-\003\276\354l\026?<-\201\276y\361&>Q\235\346\276\345\323\013\275\263\216\035=N\0211>\340L\000\277\235Q3\276R\370\311>\177\016\245>B9\222\276r\365\273\275r\235)\277@\211\314\276w\010>>\326\247\363=\021Z\243>zM\240>(\3210=\242\331\254=\313\033|\276\314\253\243=\212\265)\277\3249\336=\277{z>\r\236\010\276\003\002\037\276\276\225\007\277\323%\315>d\327\322\276K\331\302\275O\263\222>o\317\332>\026}O\276&\252\033?\331\356\264\276\023\344\371>U7\244>\311\035\252<\367\303\325=#=\263>\300\265\252\276\322\265:>\344\372\031>B\274,\275D1\361>\025\350\321\275v`\211\276%)\370\274k\3635\276\\\326\201\276T{\317\2764\307k\276\246\271\202=\367\204S>\275X\325;)N\030\276\366\325\310\274\206C\224>6B\317>\261\026\225>\202\227c\275\031Fw\275\006\034]\276\245lO>\016\200/>\353\356n>+\n\003?\020d\225=\360\346\307\276\226\345\202<\250\\\267>6X*=P\375K\275M\270\221\276\264A\263\275[\342\007?\267\222\213>&\370\234>\333\375\320=5V\253=\230\353\335>=\334\316=riw\276\021e\277>\364Zk>\3459\312\275&\2447\276\273\235\371\275\016\002\023\275\222\257=\276\t\357Y>\255l\257>9\246\351<\330f\336>\222\\@\275\331!\345\274[U\032\277\324\034d\275_Y\272\276\003\275D>\321\214\"\277\315\363\262\275M\341G\274)\201\216>\271T\321\275\365\241\365>\347\273\336\275\366=&>w\330L\276\204E\000?\222\000\'\277\342\023\t?gr\374\274\207\222~>\265b\257\275\262\037a>\271\007\'\277u\312\210\275\tD\n\276a\220\267\275,\025\254>\227\366%>X\301\265=\273\003\274\276\016a\004=`\034\343\276m*\226>Gb\300=\222\306W=/W\275\275\022<\201\276\333\271N=8\245C\276\001\225\254>\021\304\030?\224{\202>M\003#?B\361C>\327^\017?\001\303\002\276\243Zo\275\345:\305\275:\346x>\272\023\256>\223_*\274\005\022\271\276\272g\322;\373\221W>\240\021\031\277\305\257\014?\347\301\244>\364\371\337\275\353\356\331\276\310c\250>\223\037\346>\212\316\337>$\261\344>\351\223\026>\224L\332>\261U`\275\377\037\212=\264\207\205</\365\364\275\337\267\244=\371\263<\276>\'\035\274\325T\371= j\034>\350L\010\277\230@\336\275\\\232\036?\201.\262\276\254L_>\376\347\021\276\343\235\034\277\306\250\264\276\326t[\275\325\215\233>`\367\251>\356\005\232\275!\341\330<\301\356\357\2767:\260\275-(\305>\031\305L>\263\307\207\276\277\303\024>\262\221\324<\035\337\024\277t\030;=~\211\326\274\356\230\276>\311\240\335\276\013\230\207\274\324x\214>LC\206\276\310K\004>\006\367\217\276\3215\036?u|\010>\346\346\246<\253\017|>v\275\252\276\202\323A\276y\311\355\276\245V\017>\001\035\016\276?<\237=\262W\r>\315qu>\371\177\005\276x\250\360>\271\2622>}_\372\276\023\350i\276\371b.\276q|\355>\250\242w>Pw\026\277\212..\277t\325\021>\006<\244\276`\243\245\274z\310\023\277.\177_=\023\211\n>*\224;\275\272\3032>P\017\320\276\342$\275\276\020\233\222=\215:\344\276\331\267$?\246\263\316\276\250\367\206>\000\302\264\276,\255\335>1I\315>\006R\035>\316\203\230\275\315\304\023=\036\335.\277\265*\326>\340\000\311=\016.$>\321\313\366\276\253=\256>U\351\211=\'\0058\275/\375\352\275\t\311\003\276\2672\364\275!\350\002\277B\305\\\276\333Tn>\2643y\276\223)\013\2773I\034>\035\372\013\277\256Z\030>\'7\027\274\316r4\276\316lh>\253c\225\2752\372z<6\330\236>5\301\257\275\001\371\023>\314g\343\276\002\306O\276M\032\205=\320\030\341=]\251z>,\242{;TMQ\276~\2119\275\331+\311\275\265-\345\2754\024\007>.\215\317\276\335K\264>*\336\325\275\326f\016>\271\313w\275 !\246\274\222H\r\277\"s\371\276\007\307>\2760\325P\276U\305\006\276(\242\233>L\025\242>\321,\006\276\036\233\236\276>\377\371\276\335@\211\273\311T\020\276I\377\034?jY\007?\232\326\035\277~\256\003?4\033\316>H\344\324\276\005\342\212\276\250U\365>C\243\357\275*\261\311\276r^\205\276\256\236y>\337\353\263\274\261\261\325>\330\360\201\276U!\345>;\275\240=\262\274\216\275:\302\263>\345\275\264>Ha\231\272{\2618\275\022i\311\276\005\"P\274\200\253\353\276\304t4>\033I\231\274\343\027\003?\226\321\204>O,\232=\316\257\005\275\\\234*>\371\255D\276\322F.>\233\375\261=\272\310;>\307]\237\276\361B\010>d\335\307>D\256\353\276\026M\010\277\365&\206\276\017\225\001?\204\213\036\277N\213\300=\347b\272>\025\245\273=C\007\315\274\364\211M>\206J\224=\240\335G\276\337\251w\276(\003\364>)\257\313\276\033\3028>i\366\217\275\322\326\300=\2204\364\276f\272\035\276\002x\206=\263\332\371>D\236\246>\343<\322>\321\301\037>\364v\001?\3364\237>:\306L\276\301\235\177>LI<\276\211\251\203\276\302\3601\275)7\251>[S\244\275S\"\265>\271\r\025?\345\214\351>z\304\024>W9\246\275\007e\272=\034\321>\276\252\177\322>\210j\216\276[v\344\276"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      input: "^AssignVariableOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "\303\330\030<\225h5<\235\310\033=\236\024^;\333\203!\274\213m\312\273\240\253r<\205\265K<Jo\210<\212\331\r=\250\325\033;\025h:\272N\220r<T}\234<S\357\326<\221\302\274<\206pR<,\200\004\273\203^\327\273\022\030\220<# \204\274\353\240\227<\rB\027<5<\304;\312\007&<\200\275\332:w\361\372<\243d\335\272\245\224)=A\205\002<\217\034\257\271\270\377#=\007ku;\225R)<\311\271A<k\214\220<\n\220\253<_\036\310\273\236;G:\004\022&\273u\316\032<\374\320\007<\002-\005<\030\n\203<*\274\007=\321P\261<\273\034\340\273D\032T<\\\354\210\272\356\010]:*\247\023\274\2448\263<\360\345\223<\366_\202\273\013\345\350:]@\261<:2\343:\002G\273<\325\3548<@\324\275<\033\021\244<]\031\375\270\231\244I=`F\000=a\354r<\301w0=t\r\235\273j\305\247<v\3653<\\\013\262<\014\203n\271\204\262\326;\245:];\221\343\333<\001O\330<\216\304\303<\256\236\001<\233\\\264<\022\342;=\303\373\017=\333\273\242<\007\017\177<\272\350\250;(\303\244<\330\343\307<\366\362\177;\277\352\202;SyR\273lo\362<*\323\256<\363u\224<\2002j\273\250\3414<\005\035\206<G\355\034=]\266\242<6\316\306<F\223\331<\302\306\007=dY\364<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "network/biases"
      input: "^AssignVariableOp_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: "~h\242=\204N3=n\370\000>xc\036\275\034e\316=\332\214\024=\034s\014\276\232o\321<3\273!\275N\274\307=\\\370I\274\233\226\273=\276\310\245\275}O\r=\215\026\236\275\301\361\354\274e }<\206$\024>F\274\241=\357\022\020>\211\377!\274\0052\355\275\214\350\233<\010\370|=\316\320k\275\233v\257\272\363W\027>L\276\017<5::=!.\027=\377ih=\0168\020;:!\303=\214\230%=\224\267\230<*\320\323=\235\322\000>c\314)\274yR\300\275\0030:>\003{\033>\376%v<\016d\355\275\322\234\000\276N\226\264=\342\245\025\275\346\334\203\275\014^\004\276~H5\275<$v\274\024\013\350=\200\'\014\276\3745`\275\331\006\327<\023Y\023\276:\3537=\355\341\341=\377\241g=&\331\265=\222\247W;\274b\204=\210i\216=`a\276\275b\014\365<U\007\243\275\301\247\345=\220*t\275\376,E\275Q\2433\2743\205{=\032\261\316=F\316\226\274\353\341\034\276\250\001E=\204\r\363\275\271R\263\274\374\364\034\274V\264==\275\247\037=\356\305\010>\254\001\216=\247\366\274\274Z\307^<\333\023->-i\037\275\326}\006\276A\241i\275bg\204<:h\035\276mt\370=d\244\272=\300{-\276\037?\027\276\020k\211=\222\010\231<\257\247\001\276o\2539\275\010\264#\276q~\313<f\235Q=\017\236\334\274|\300s=\270\"\003\276\347()\275I\320\373<z\201%>\306\346W\275\364A\246<\354\304\265\275\220\310\272\275\034\340\326\275\340\000\270=\203?\244<\316\240\313\275\344\275\231=\332\t\005\276\n\325U<\353\246\240\275\201\206\025>5\374\r\275Iy+=\256\226\007\276Y\367\253;^\277!\276\007\210B>\362\001\324\274\346|p<\\T\022<\014\3418\275\355\336\213\275\323\325V\275W\270\234\275\247\3575\275\214F\206\274%\320\364=\307\352\324=v\254\265=\023\037\272<\013\313\310=z\017\024=\036\360\333=cF\337\274\257!\211\274\221\357\342\273\274\035\034>\340VC\276\266\0258\274\262\304\254=\307\205k<\213\'\\\275\214\353\201\2746\006\003=\022\326\022\2762\361 \2758\211\360<$[\334\274\027\346\347\275\033!\300\275\020H(\276H\t\256=\314t\t\276\022\031\316\275\366&\000>\262\227)>52n=t\315\325\275;(2=2\344\300<\257\360\254<>\035\305\275\001\377_\275\376\235\307\274g\366\014=\344\311|\272du\004>\267\250\'=\210\262\216\275\003c\233\275m\177\016\276\346b\255\274\030\207!>\214R\277=\300?F\275P;\271=O\364\215\275\027\207\230<\021\344\366=\210\354@\276Q\335\377\275k\304\305<\323\355\344\275~\254\t\274\"\353+\274\220\373\377\275a\222\004\275\213>\256<\310t\027>q3C=[\363\236=Y\007\000\275\203;\375\274\312S\232<7w\">*\3352>\357\325\001>\317Es;\211\377\211=bpL\275\350\203->\204\216q=\311\007\316:\223a\233\275\003f\347=\206D\217<=\024\301\274\257\3374\274\343\345/=\365\r\306=q\272\211\275\347\2736>\270\001\370=\205\257o\275u\327\017=\330d\217\275W\263\270=\001\357L=\2760.\274\2540\365\275\030\026\222\275|h\316\274G?\247\272\037\327\377=\354\246\235\275_\332\013\276\363\220B\275i\211\302\275\310\224\347\273\271\340\245=\2227\367=\'\026\016>)qr\275\356\024\000>\206\333\310\275\376k\021\276\205\031\275=\035E\207\275P\272\252=\377?\014\276\222^\305=\372\200A\274F\316\214=\tK\033>bY\255\275b\030I\275\034\312\016>\020i\t<\372\213g=\255\323O=\277\017\242<7\rB\275\201\343\322\275K\200\361\275\241\r\373\274\302\271\200\275\264\230\314\275\235!I\276 T\333\2747h\010>\326\\\243=\001[\316\275\017R\026\273]\021\230\275l\247=\276\307\033\300=X\213\221=G\n\312\274\262p\357<\313u0>I\347!\273a\220\324<\267\273+>\203r\026\276QC\213=\300i\244\275\005h\004\275\310X\006\2768\017\305=-\205j\275\317i\201;$q\355=\377\240\017=0\275e=\027\242\346<Zv!;\002\r\251=\213\346\361<\317$\356\273\245\372\031\275\210\264\355=\325\232 \275\305\277\267\274\003/\302\275.\247\350\275\355}\201=\312\313\304<\251\017\215\274-h\262=\322\"d\274\362,A\275\321\370\235=n\330\306\275\225\031\023>\n\214U=\276\324\256\275\036uc=\330\275\212=\316c\321\275\374\"m\274\233\277\226<\323\0353\276\316\003\316;\236`\223<8\213\272\274D\274\030\276/\251\263=2\300@=\352z\224:5\342\214\274\033\235!=H\252\035\276m\323\367\274\346\027\255;g\201d\275\304\223\234\274\345<Y=\355C\375\275\201\242W\274\262\307/\276\254r\216=oQ\004>\202\310\177=\212,\232<\030\336\014\276\306\002:\274z\352;=\027w\017>\377\3602\275\000\257\n=/8z\274\244\0245\276P\337\300;b\327\004\275\237Gm<\rBV\275\304}\300\275!\344\010\275\260\262;=\377AX\275\221\264\246;in\311\275\373e\310\274\"3P<\267\351\376\275\310\375\244=\014/\307=A\032\221=\234\242\216\275\2500\204\275\364I\033\276\242\020\331\275\254|\260;\346,%=\235f*>\3304)\274Ku{\275\"\226\213\275\272\340\r=\350\323z\275\204\002\001\275V\222\351\274\307\026\322\275\223N\305\275\327\230B\275g\316\377\275\217\264\373=d\321\300;h+m=x\220\351\274}>\025=\236\r\020=y\374\351=\244`\265=\255u\303=b\302v\274\2777\231\274Gw\324<\263\252\350\275\213o\274=n\017\207=\322\351\014\275t\375\235=W\004\240\275I\232 \276\302\240w\272\343d\005\275\"\345\231=\245\355)\276\222\324\200<P\367\274\275d]\314\275B(\202\275\025\305\246\274\001\253\n\276\000\3067\275\232\344\203=\277\302M\275\350zY=\027R\316=\341x\214\274\032&\020\276v\361>\275Vp\347<\335\233\272\275\010y\021=\210\373\324\274X\363k\273-\177\027>\312B\330\274\347(\362\275\302\210s=\347\3321\274\326\355\217=\035\316\254\275\260\263\217\275\354\212\330\275\002\213\220=\271CU\272\2439!\276\357\231\342\275/Z\003\275\302\024\224\274w\206\222\274\301\212\020\276%\2238< \031\220\275L-A=\313 \024>\347\005\031\275*\260G\275\331@\202<J\303\316;\0029\330=\014\030\317=\247\215\304\274t\367\223\275\360\305\330\275\335\254\021>\n+4\275\353\032\222\274B\327\207\274\256a\024>\247\3613=mkz=\331\021\300=\237\246F>\266\214C<w\335\244=\346\024\305\274h\367)=\205\023d\274A\341\300\275\017\022\377\273\321\212\270\274\023\311l\273\353f\224;\231G\313\274U\213\221\275\273\2115=s\r\007\276\200\206\375<\013\221\221=\273\256\344\274\313q\305\274a\322->O\201T=!\341\201=N\221\202\275A0h=\t\3048>\020\253]<Q=\374<&\243\342<\033-\013\276&@\221\274\364\351 \275\302G\025\276\002{\344\274\t\362\333=>\251/\276\243|\204\274\367+r<\222\022\310=\327\203\000<>+\004\276,-\261\275\020V\003\274\277\347\264\273=\344\205\275p\014\r\276\031\361J<F\223\323\2736\357\024>b\000\253\273;\274\203\274?\201\205\275\360\315B\275\016\030\356=P+\033>/\236\023<:^\017\275Q\2559\276X\357\001>*\305\250<_\207\001>\254\217j\2752\205\325\274\22464=\233\371\376\275\374J\312\275\371\030\004\275k \016\276\243\262\375;\272ye=7;\313<\371\262\266\274\r\013\002\275\n\034\366\275t\242\340<)\255\021=)hp<\313\237D\276\253\3613\276\246]\216\275g\257\366=\344\3047\276\256:\025\276X\364\217;%\340\010\276\022\031\356\274\204\350C>\034E\365\275B\017\033\275\ng\337;\372\304c;t\226(\276aS\202=\322\373\341\275\002\256v<\010\361K\275\216\361e\275\351\264\241\275\340\243/=~\2402<\200\"A\273O1T=\303]\316=\320\0032>L8\345\275\"\241\356<\025\026\252=\212\365\314=m\202\253\275R\0047\275k\344\271=\321\362\274;es\207=\203\234\217\275\272L\237\274\375UN\275\320,!=\270\3347<M\0314\275\246!\217\275\314\200\335\275\353\002\355\274\310\017\026\276B\027\370\274X>\337\275\214kw=\242\230\027\276su\201\275\326\267C=\027&\022\276;R\351=\033\304\225=\220\275\211\275f\\i\275\316m\340\274!\324*\276<\276\353\275\211\\<\2758\334\n=\230\226\205={\340\326<\030:|\275Od\326\275\024\271\214=\177\035\211<]\357#\276-\375\374\274RW\371\275!#\036\272\257\n\013>\2414\300=\345\200\372\275_\326\302;P\377#=\025\2413\274\206\232\333;\022wv\275\023\025J=\374\276\332=\242h\240<\327\341.=\313\212/>{M\217=\213\262\361\275\345.O\275T2\373=o/N\2744g1\276j\310\257;\034\323 >\0249\252\275tr\004>4\230\327<\356\330\002>vd\027=\326\247\234<op\021\276kf1\276%\216\034>\325\356[\275^\333]\275A\006\303\275\327e<<\203\214-\275\240\026\372<\370\250\001=\361\216\t\275\300\310$\275\032\373\004\276\307$\023\276\351\301\005\276_\177\201\275\263\367D\274\232\211/>Id\275=\267\250\373<\351\021c=\242p\373=\032\330\374\272F\335\'\275\312\"(=n\263\216\275\204\357\006>s0\306\273[\"\255\275\005\351\303=\264G\245\271e|N>\332\343\360<\340\252C=\231\266s\273\247\275\374=`\240\301\275\014\357\005\275O\321\352\275\304?M\2762P|=\367]\334<\216U\013>bnZ\274\217L\242\275\216\021\311=\363i\251=O5m<\277p\340;)\213\273=\020$\200\275\365\371\037\276\202\272>=5\350\355\275jJ\001\276|n\215\275\301\372I\275\327\351\210=\262a\004\275\213!4\275\034\034\324=\004\265\317\272t\234\371<w&\205=\257\304\256=~\013\332\275\366SN=&\363\351=2\241S\275\211~\025=\242T)\274\362\234\021>+\215\230=\253\354G\27578\007>?\r=>M\324\004\276W\274\273\275\363F\010\276\r\341\346\275L\201\310<\202\006\316\275]7\323;\330|\346\275H\267\262=S\232\035\276\n\214k=\354\001%\276n\253&\275529\276\206nZ\275(\255q\275;\203\247\275\370\345\">\302\027\223\275[\262?=\321\276\255\275\276\006\207\275\353\'.\274$\366\204\274\036\350\027<=\247\375\275\365Nn=\2417\271\275\374\302\324=.\2676>\376i\201\274\0019\037=#\022/=jD\333;K~\247=m\276\221\275\300\340\253\275\377@\270\275(\\\267<NPw=\007-\021\274\227q\312=a\262+\275\321\\\214=&\276\277\274\275\373\261=2v\200\275\027\035 >\260j\254\275\254\334G>\237\241\306<\215\2446\276\210\3456>\240t/<\251\204\250\275\026\177\247\275\330\335\222\273\222e)<\261\252->\366\"v\275\223\030\252\275\236@^\273u\377\234\274\243\353{<\037\320\014\275$cA>I3<>\344E\233=\371k\024\2758\027\010=6\336\227\274\247\375\244=hF\323\275tM\232\273a\t\243\275\014\250\350\274D\005\006\275\304U\370<\256\325g\275\306\236\352\275\020x!\276\'Y#\276\213\372\343\275%+:\275a\313\233=\374\256\353\275*\320\225\274,n\306\273\365\324\356=\251\312\023\276\010\317 \275J\237\340=\313:\323\274RC9\275\022\273\270=U\"\t\274&ta<\364\353j=\262\340p=\325?\221\274=\254\036\275\362\254\354<\312\377\336=\211C&<\222\000\340;H\340\032>]0*\276G\3303=\242T6\276\227\336,:\233\337-\276\362\323\214=lAY\275$\205z<\'\303\307\274%\312b\274\253C\034<t\211:\275\254\005\013=\253wf\275(\305X\2757\207w=\334i\262=}\260\221=\207\032{\275G\337\276\275\367\251&=\200\320}<\323\350$=\036\t\253\275\210l`=\233v\255\275\273^\244\275\364\3664\2761\300\217=\274\223\205=\010[\222=\023\007,\273\345\213\314\274B\355\014\275\364=(\275 m4>\226\300l=\006\265\016\274|\305\340=\333\233\246\273\340\332\345\274\035\025\252\275\272\255\275=Ba!>\273\177\231\275\034\2530>\r\273\376\274^\276\'=U\023^<)\312\'>DFz\274\031\263\030=p\r\211\274\333\005\342=Q%\256\274\373\325\277<A\016\030>\317\317\210=\rD\376<\"\2563>\235\373\322\275\200\347F>`\330p=\356\322\324\273K\372\005>\273\244\025>\256S\212\271\237\303?>\303\232\247\275\0172\233=\350I7=f?I\276\017e\342\275YT\336\272\032\230\"\273\030\035\371=\214\"\313=\330\'\342\274\241n\033=\304\231R>\203\242\350\275E6\261<\230\256\335=\236\200\205=g\320C\274\322\221\324\275\273e\337<\263N\252\274\322\013\261=o\267\273;\021y\275=c2\335\275LD:\275\034\353`\275-\271e\275\256W\261=s\361-\2765\250\027>`\225o\274\347+\254=\350\321\253=\235\215t\275\225I\333\274\242\314\314=\344\246(\276\253\243\"\276D?8>\007\356\275<a_ =[\207\031\276u\224\336=\240\n\210<\256^*>\313\247\030\275`*\313=\034Fj=\2100\244=\262\032\003\276A8\252\275\020\326!>/^\013\275\333\341+>\220\035\016<D\"{\275dHv=\252\273\223\275k\241\235=D\244\032=\355\036,\276S\243\322=\261_A>\3460\331\275\315\232D>g)&=\275\340T\275\221N\037<+g\030<b#\310=\235\322\'>\361\t\321=\253\226=\276n\210\241\275\371\360\233=\363\330\005=\315e\"\276%\323\006\276\252\207\367\274\037^\377<\034\324\236\275i|\302=\262A\266\275\344\315\276\275%\n3\273\337\250\324\274/\243b=\310m\202<:\317\021>=OD\275_\213\224\275\361L\001>\234_Z\275S\245\254\275\273}(>\331\362\203=\177\354\220=\277y;>\343`<>\353;7\276=,\360\274A|:\275p\206u\275\031\277~\273I\247\003\276\245\355\330<N\201&\275\016\032\234<+\352\200\275\200\t\311=\333\303~=\347 o=c\315\204=\016\205\024=\377\342\312=}\250p=\244\013o\275\007\231\316\275\013\223\226:d \225=\364Y\223<\033$\322\274\341n\320\274\365,\276\275\363-9>\214\342\n<4x\252<\014z\373=HIP<s\201h=R4\227<@Y\231=\252\370B\2755\016\217<{#\301=\005[\016\2751[\244\274\003\247\377=\033}\225\275D\326\361\274\035xd=\303\010H\276!\354\237<1?E\275\355\326E\273I\032G=^\324/\276!I\205\275\232j\355\275\033B)\275\271\334\267\274\010#k\274Z \227\274<\2313\276\250\003\345\274\341\252\214=\365_\306=j\224\337=\r\310!>\3645@=\242\007`<\371\024\t<\226\235\010\275\215\207J\275\r=\275\274\212\251\202=m=B\276&\323\212\275\337\350\000\276Th\223\275\237\311\005>M*\314=g_\020\2755>z=I9\316=^\236\017=\017~\313\275\006\024\343=\227\242/>\350i\025\276H\220\212<@F\016=\264\002\254\274\376\177{=6\"\344<\025\272\211\275*M\260\273r\024\353=\330\3117\2751.*<\367\373X\275\034\300H\275\t\301/=@\304\024>\211\032\210\275\010\354\320=q\376#\276\025B\001\276\235\234\017=\316\377\264<\274-Z<\244 \310\274\307\267\275\273Y\002\025\275\031R\020\276\024\334\351<\366\241\300\274{\325\216\275fB\017\276C\310\212<\270\273\005=\205\004D\273\\\352\236;\002\376A\2757.\315=\270T\270\275\022_\005=\320a\013\275\326=\206\275=4\010\275Q\3308\275\020y\335<\2270\262\275\233\037\024\276\340\330P;\026\352\312=/X\376\275,\212\037\276\"f\236=\354\357\r\274\252\365f=\326\014\351=\n\031\227\275c\217\236<#9\272\275\365J\273\275\033*\222<\213\334\354\2750j2\276\024\320\204\275m\360\307=\347\261\037\275\236\205\036\276\027n\202\275\234\205\242\275\310H\221\275\214\337\004=\243\3462=D\003\312\275\355N\021<\205\004\207\274\3527\264\274\005@\031<\320L\250\272\033\322,>\303\322\030\275egh=\213\365\200\274`\177\275;\343\331\'\275\243\316\271:H\331\235\274\327\310\337\275\351\314\371\275\341xP=zn\243=\323J\014\276T\2310\274(\177\314\275:\257\014>\212\020>\273iv\274\275sq\014\276\023m\364=@\262\205\275\227\327}\274\276\375\353\275+O3>\r=\006\276\364c,>\316%:\275\234\023\204\275\377\217\354<\312\374u=\325_\303\275\250]\027\275\203\3301=\276\1777=}\357\325<L \244=B>\t\275i\304\323<\270\2577\276\332?\n\276\357\257\255;\013_&\274f\354\264=?\027\001>\202\027n\274Y\026\n>G\031\307=t\3200>d\344e\274\2225n=\032\'\r;\033dY\275\315\253\206=\026\001a=\374\340\t\275]\033\200\275g\270\324\275\331\375\036>\261\260V=\314\317\257=\362/\000\276\002`\342\275\203\364\367\275d\t\237=\310\032\2559\010\336\036>\031\004\274\275\200\202k\275\322U\231<\271\003<<//0>D:\202\275 8\005>\357\\\350\274\327\206\t\276\332W5\275\021h\335<\014F\324<\017R\215=[Q\262\274\20073>.+\264\275mf\337\275\371q\337=\303\301\303=\325\023\224=G\346;>\272\357\363\275DP\">\231\320\325=\263E\201<5\361\317=FI\375=}\354\257=u\266\t\275,[\237\275ZW\320<2\243Z=\351P\232\275\265y\271=\010\306I=1`\317=s\243\016=\314]\004>=a+\275mg!\276B\240\r\275\366\376)=P\245\361\275\334(\225=u\003P>!\021J>>-\367\274\252Q\303=0\205\346=;\352\205\275\033a\225\273tq\007\276\233\342\243\275;b\212=\347=d=A\305\331:\241\224\333=B\010l=+P<\274\274[\023=o:Q>\241\334\243\275\314{\335=\336\364#>L\253|\275,\216\010>U\\\023>\250<\304=\036x\023=BC\272;\232W\230=6\311\333;\354\253\025\276\301M6>p\224\235\275\337\215\207\275r]\344\274\007\273\322\275\373\201\340\275\031>\255\275\360\316\245\275\'T8>E\234 \275\344\363m<E>\221\274\221U\277\274\201\235\031\276\037#@=z\353+=\002\323\"=\344\271\303=\212\207\031\275w:\332=\000\217b=\253\301\010\276\245i\032\275\211\356\251\275\021Y\232<\342\341\207=\032]\257\274\316\314f<\263\t\255<S\251C;\244\227\004\276\332\341D\275\002\320E>\373\203\032>\327\007\347=\016\"N\273\231\367\340\274\270e\264\275R\3206=\030\235\026\274\262\337\227=H w\275\3775\027=\224\316\272={\037\214=\331D\272\275q+5>\216(\252\275\022\355\320\274\302\253\277=\035v\303<\016\367\t\274\312\346\356\274$H:\274.|\244=\266\242\0339\255\203\324=\357\037\243=\000\323\326=W\213l\275\256\363\357\275\034\017\260=l}\336\2737j\256\275\220\374->\234&c;\347\204\322\275\361\021\370\275\202\356\000=\344\244\221=_\343p\275\276 _\275\231\270\304\275\336\002^\2754\340\016>PV\377\274Z\340\007>1\360\261\275\221\345O\275\255In=\253\357%=.\014\275=DB\336<T\021\022>*v\275=%\212\000\276\0229P>\246\357\025=\007\231\322\274s\375\007\276Q\344\265=\334Rr\274]\342\373<\030M\027\275\021\323v=\026\n\315<I\031\013>\327F9\276Yp\326=\345\213\363;\326J\253=\034\316.\276\311\026\361=.\'\261=\333\350/\275C\023R>\230\314\336\275\335\236\325\273\016\204\275=\274e%\275EO.=\350g\232=\263\005e<r\315\222\275\303\315\033\276\024,\020>U\337=<\274z\020>\272\316\303\275|Q\350=\374\227&>\265\260v<1\031\017\275\236K4<\023l\310;!\3114=h\271\253=\0001\301=QrQ\276\205\364\\\275R\375\272\275\261\265\221<\307\363\375\275\373\347\331\275\230\312\340<\214\337\277<{\r\347\275\346)\352<W\321O\275\311\223x\275\202A6>\255Q\024>\n\023\016=\207\365\374=<\222\246\275{\023\004>j\254E>t\235/\276(\333\026\276\210\370\347<K}\031=(\354\225=\3219\017>\3729}\275\345.\'\275A\202\221=o\337\345\275\002\346\203\274\034\313C\276\324\215\010=\316\221\000<\373,*\274h!n\275\346~z\273\202\"\n\276k\216\005\276\211\342\'\273\375\324@<\330\314\341\2755T\252\275\230\036\026>\000\205\272\274\360ak=|;!=1\251F=\000C\332:6\357$\274d\030\r=\2674j\275\207T\265=\342\325\016\276\247\322\306\274\332\336\266=\354\376\272\275!0o=I\005^\275\325`\306=\364\tG=\307\203\353\274\327\227C\275\360\037?\275\376\266\\=\020\260\035<\312Q*\2753\252v\274\014\253c=\212w\342=\335q\355\275\302\247\333\275\313\010r\2744\177 \276D\356>\275\324\275\207=\207\032\352=%\363\226\275\036n\314\272\202\3512=\241\031\262\275C\200\302=\373\020\317\275DAe\275l\031\230\275\325\237\216\275\267\345\213=\tT\207=\221\201C\275\311\366\323=\035\020[=\313\032y\274\244%\300=y\370#\276\336\333~\275\243TJ\274Z14={\271\006=\243\235\263=\310\310\035\2755\177\206\275\204\036\264=\t\225\352\274\367\304\231\275\337(b\275\213\214V=0\251\203\275\247\367\205\274l\t\370<\3114]\274\346\356C=\001E\036\276\205\331\355<\204\321\235\275\220\257B\274\366~\232=I\234\022\276\255!)>\201(b\275\366\354\200\275G(\024>\007\016\353\275\214O\233\274\373O/\275\255\006E=\276\225C\276\222\243P\275\003\032\353=o\246\217\275\210\367i=\202@\037>\265fc\275\001M7=\350$\303<Q\375\344\275K\237\006\274\233\013B>\267\"\321\274c\374\003=p)\023>\322\337!>N\334\344<s\215$\275\025D\230=z7\243=\243C\026>\364c\272\275\274\376\326\275[\305]\275\252d#\275\311y4\276 i\027\274\313:\372=\337\361N\276D$\304\274\205\325\n\275O\\8\275\002\232\234<\346\336\213=K\200\006\275\223\267\366;\363\275\262\275\260W\322\275\331GF>\3525\270<\357\330\377\274\3725\362\273\304]\270<.}\366=\002\254Y>\232\240\322=&Q\224\274\372\007\007>\014#$\276^[\242=\260\266\261=\216\030\372\275\235\344\352=\333X\311=\340\341:\276\311xj=\363o`\275\351\257\217=\352s\335=u\326\000=E\2239>\257\257\352\275%)\356=\353\\\223<f\001\356<t\232?\276[\226\252=\254\311.\276\273H\303\274aC\342=9k\341=\242ad\275\265c\037\276`e>\276Y\266>=\215\002o\2755\302\204\275\223b\363\275\000\000\224\275\211\367\357=\224\304\r>\351V\262\274\007\250\007\276!\276.\276\037x\343\273mr\353<\331\036&\274\355\252\343\274z\002.=\360\023\"<8Q\024\276j,,\276\243\377\220;\316{q<\274\025\363\274\036\014\370=*\r\241\275\241\350\265\275U\231\177\275\"\313\264=\377#\017>\007>\014>\352\242\303\275u}4>\333\364 <\370\207\031>3Vi\275R\006+>[r\034\275\364\263\256<\336\315\211\275\311\313\206;1\252\205\275_\205\220=\\5\300\274\362@\311<\223o\017=Sq\350=\\\351\021=\234\271\210=\225\310-=\372qm<\377R(\275B\022\326;\006\363X\274aS\253\275\006-\013>\311\331\006\276\346\221+\275\256\265\222=+\334A=O\005\020\273\r\370\251=\316\216\252=\315\342\306\2740\254\214\274~w;\276\003\256J=\210\2231\275\005n\273=\253\212\233=\347\274\225\274\007^\002\275}:\211\275I\260\272\275\271e\304=\021\037\371=P\316\235\275\000\344\335=\331\353\270:\254g\323\275\327~\243\275\205a\270=`\267:=\302\r\344\273\344\000*=8\244*\276CC[\275R*6\273\257\351\214</9\305\274\324\243\025>\017\371\327\273\317\247Z=E\343\257=R\231\'>\206\025\001>\324\262\023>\030G\344\273\024\357\257=\373\333\300\275A)G\275Z\006\031\275\255\272-=[\254\214\273\325\224\212==z\222\275\034E\207=:\220\333=N\212\353\273\257\321\200=\310\372%\276[\023\t=\020s\241<F\245\340\275\327\205\337<7\206\001\276\216\232r\274f]\340\275h\355\215<^\247\230\275o\334\327=\227\304\323\275\364\370\264;\332\r\345\275\034K\265=\232\373\347= \213\252\275\341\375\222=dmA>\352\t\205= 4(>\314\r.=\254#\\\275g\351E\275n$\035\274\226!\252\275\325C\205\274\304\014\304\274\3403F\275s\342\313<\333\227i=rU{<\237\345\021\276\245\306\236<\203\0061\274\247]\251<\006\230\303=\241\246\205\271M\'\312\275p\2627\275\'h\033=Pu\"\276\250\355\034>TR\330<\376Q\362=Q\036\275<\252!2\275\363q\316=gTN\275\r\245\361\275\244\002$\276\314t\324\274\\e\247\275\213\0339>\307\320\277=\210t\334=\030D\013\276\355d\245=\333\205P\275zs\323\275F\225\020\276ks\376=^\036\341\275.\025\t\275B\261\260\2758G\377=\\\236?\276\356S\202=\330{\331\275\013[C\275l\"\n\276\341\034\010=\275\226\344\275!\356\201\275\216\315\213<\030\021\327=WQ\332<\226\262\355=\267\302_\275\344\006\316\275F*\032\275\356\365\033\275\006d\257\274\254n\301=\226t:\276\207\335\033>\362q\341=\346\214]\272u\356\304\275x\357O\275*S\347=u\271&=f$\306=\377\004%=+T\007\276\272F\030\276 \212\257=\326\221\025=D\264\334<\336\305\330=\267\223\262=w_-=m--=\002s\315=\321\375\261=N C=\233h\344;\365l>>\211\337\007;\000j\001\274\305!\336\275Y\366\230\275\323\354\351\275y\016\024\275\342\310\3009\3102\347\275\013\344:\273\352\002\322<\353~R=|i\270\274\201\260\200=\3478\031>\254\345\325\275\371G\375=\223Z|\2758\"\251\275\261 \234\275H\272\256\275\017\331\223<\177\216\026\275\274\324w=\033\0247=$9&\275\202\373\204\275\312\327\270\2759=Y<\267(\266<K\206\236<~\025F\275\227X\007\276{\262\024\276\233\256\005\275\311,\341<\014\360\343=\272Q\360\272\345\' >\2255\030\2752v\034=\252x\251\273]N\352=\221L\006\276\304\207s:F\315P=\271q\247\274\177\212\\<\221\361\303\274Tu\257=\304\251\240=QhN=w\203\327\275\010K!\275\\\343\237<=\030u=j\006Y\275\035\357\035=\210\362\253=\246\026\232=P\n$>bJ\214=U\237\210=\355\325\221\275\235x\335\275\014\340_\275s\271M;\304\027\003\275\010\240\237<\177\202>\274\020\346\200\273\342*\272\273h\255\261=\003\366\202=\317\034\272\275\347K\026\276\342\346<\275\305\257\317\275\305\335\240=u\317>=\035\213x\2751\264*\276+\221\234=\273c\214\2750\211R<U\317\214\274\361\365\273\275T\260D=\352;}\274E!\246\275*nP=\344\303\033>q\251?\275r8\344\274\272\256\223\275d\203y=\350\022-=\213\356\"\275\250\335\005\2768\222\221=$T)\275\030!\276=\222\010+>%\010]=W\030\342=\224~b>\023=6>\266b\362:\213u\230\275\300ic=t\223\262\275\017\257v=\275\370\267\275]\\\365;\262{\034\274\347B\267=<\315\354\274\356pK\275\214\032\002\275\245\031&>\t\010\356\275)9==\003\n\037=\032\356&=\303YN=4\201\341<zhs\275\257gS\274\203\206\377=\261\207\377\2754gU>\270\327\001\276\222YN>\210\316\334=*\017@\27689\264\275I\002s\275\343\353\220\275\323u3\276H\207\006\275\220:+\276\375y\007=\362B\333=\267\221g=4E8\276\251{\245\275~x\311\275\376\335\306<\202o\024\275\336>\267\275\334\316\211=A\037\020\276\227(<=\214\300\001>O\266=\275\255\010\030>\233\362\030<\321\343\372\275\202\274\247<\350\350X<\371\202\024\275\267w\235\275mJ\002>\017\rG;\373\027:=\013\'\036\276\2272\350<\263\205\004>\016\022\371\275lk\013=\375\216O\275\240\374\004\276\036\013\340<\247\000\230=p\322\310=\2463\026=\013\352\321\275\257\024\271=\371?#\274\201\377\000\276\247\357Y;\366BA\276\276\0008>O.\276\275l\332+>\314\332\337\275\210\242\236=\253Q\322;\364#\262\275\320\350\005>7\324{=A\350\032<z\254\034\275\236\340\201=\321)\031\276\242\027:\2736\250y\273\236\354|\275\322\252\206\275\001\257\304=$\311\370=\272\252$>\262]\223\274[\357U\275G\261\241\275\001\361\256\275\330P\t>\326\266\247\275\303\025\221<\007\335\300\275a\202/=\002\223\003>\n\2172\275\350\247E>\302np<\222o\241\275\367\335;\276h\002\303\275.\331\314\275\230\213P\275\316_\002\274d\245\344\275\343\262\177=\206;\264=9bV\275\300v/>\204\006 \276\020\037\303\275\237!\321\274\006G-\275\271\263t\275\007\200\346\274x\327\027\276\350\257\024\274V-\307<\225k\013=\267\037\230<\005\305Q<\006\361\276=\334\025 \276$\235\357\275\002\003\220\275\232\346G>\316\231\260:\347m\215=n\245\237\274\t\221\315=\261m)\276*R\267\273A\260\017>\335\203\002=\274\034\034=\033r\006=\311V\035=\3210\330\275.\315}=\322\341g<)\230\214\275\266\004T\275\263\010r=\223\3022\276\247\257\300\274\210\010\350\274\233-\245<\252\304,=\270\304\345=\336.\347\274\351\327-\275\245\001\332\275\377I\372<o\250\311=\365 H\275\343\211\007=\r\266\201=\322o\211={\327l=|\234\237=\260Z\311:\342\303\317\275\355V\226<{\265\220\275\004\3645=a\337\376\275\330\241\274<\344\242M:/\201\352=*\211\321\273w*N\275\021\016\216\275\013\235\255\275\345\222\020<\007AY=\263I\">O\010\245\274\031q+\275\032\t\273\275\231\000J\276g\214\370<\376\352\023\27589\013>\351\005\n\276\262z\253<\377\304z;\207\376*\275Y}Z\276\241\'\r\275M\273\234\275\267\260v\275\277!\370<X\256\315=oL\263\274\231\325\361\274H\031\362\274\034\314b<\370\375\024\276{\350\225\274\371\223\246=9\375\027\275\010,k=\240\327\020>\250\312\223<\210\373+\276\337\347\345\275l\210\'=\313\353\271\275\264\331R\275\314\360\303=\035q{\275`\322\335\275\306\300Z;\305]\204<\311\310\006<PA\224=~\256>>\333L_=\355\314\345\274\341\2564</\377L>\242\354n\275\233e\351=\241D`=)\036\206\275\244\200\200=q\016\r=\335\261!>\215L\264=z\334\207=\357\027\n\276W]\340=6{U<\340#3>W^\017\275\317\033\252;\315\"\032;\363/\036>\247b\007>\201\005\231\274\320+C\276$\247N\276\332C\000>5v\251\275S\331\035= \243\004>\263\215\000>\362\035\t>p.\260=\t4\023\275\320\000\244\275\035D\002>\\\3039\276\257\027\225=\277P\277\273\014\234M;@\023J\276\0362\353\274f\275\321\274@\3274\275\t\000\354\275Y\250\220=\260\t\216=\273l\317;\333}\n\276\030\271\013>F\371\210<\332\022K=\003\371\250\275tr\311<\305\217\304<kA(=Om\232=\275\177(\276H\252\243=\255t\302=\320s\016\275\234\t\000;\032\013\371\274\362Z\'\276_\010\013\275\377\264\206:\202\250\332=\334\022\251\274\236\324\231=\246\316\350\275O\037\301\275\254\352\307\27541\034\275@\362\003\276`\t\235= |\017=6\233\362=\\\336\276\274\r@\302<\257\366\007\274\334\245\251=\320L\301\275\211\344\031\274\032\245\363\275{\3574<\330>\'\275{?\027>`\332\317\27470\277\274\345Y\211\275\250\356\336\275\307\244@\276#+\013>\365\363\016\275(\2265\275a\227\371\274_\217w\275\370\264\367\275\233\275\320\274\322\210F>\356{\254=H}\303\275\002%\373\275\n\244\230=\211d\223<\263c>\273\262\317\212=\2140\207=\262\3530>\226>!\275I\302(\276B\200\021>\021\363\325=.\017\364\275\006\242\302=rK\255:\264j\364\275\036\026\244;\2107\005\276\327\236\260<\314,\212\275\203\255a\274\242s\257\275T\224\234=\306\034+\275\\gL\275\262\001\245\274\366D5\276\217\3339\275 \246B\275\357\211/>\350\314\234\275wm\377\272\370\n\352=\361J)\276ZA\024\2767\3133=\235\312\314\275\353\253\321=:\361\305\275F\305\362=\312\373\313=`\'p\274FK\006>\205l->M4\020\276p<3\276\026\007f\276\020D\353\275\252\\\020\275\274?\204\273\316\354}\275\277@S\274k%\244=\332(\236\275\316Bt>T\250G:O\274~\275\315\340\261\275\233\010\322<\341\253\220<d\034\263=;H,=\201\374\325=]\346\345\275\202[\203\273\023\275z\276\004\236\022\2755\325\353\275\034\2211\2735\367\r>?\206\036=\362\t\221\275\241\243\241=\035\354A=t\243 =\003<d\271r\304\t=\003\335\264\275\003\335\212;\250g\200=\311\003\244=b\234\370=U\034\342\275A]|\274\262\342P\274\225(\237\275\340-\3639M\032\242\275\355\340\034\2769_\027>a<\037=\340Gm=\360\016\206=K\022\343\274q\337`\276I\217\035=#\370\000>4\030\245\275\004`\207:u\030\272\275\271]\212\275\370`\242=\363=V<y2\236\275\324\302\363=\210\232\253=\207\266\002<\266\010\337<\257\362\350\275\236\235\206<\036\342\241\275\355\0109\276\253\300\033\2738\214\022\275\277\271K=\017o\247\275\241\255A>\337\226\t\276\276\017\346\275\256J\314=\374\217\006<@S\343\275\244\320\202=\272\311F>\017\214\264\274Tk\211\274\r/(\275\006s\305<\213&\256=JA\250\274\241\336r\275\031\234\237=\361\221$\276\277\207\337= L\301\273\t\301\231<\\\230\332=\026KA\275}\210\353\275\272\302^\275\034y\001\276P5\356=\252\331\237<\232\355\330<\205\264,\274\231\226\n>\234\0243>\3526\337=g\231\025\276\037\216\360=)\216s=\253x\n>e\307\"\275R\212\303\274\213\016;\276~\244\255\275>\264\224=\241\321u=\304K#=\257\n\'>\026\332t\275Q\310,=&\270G\275\261\350R=\262HN=\017\tN=\261\311\327<\353\260\002\272\240b\374=\013\272\221\275\347J\344=\216o\326\273\037\360u\275\260\353\311\274\301\0350\276\272\272\305\2741jU\275\361\336\355\274\325\247\231=9\351\216=\353\n\363<\247cG\274\223*\305\274\005\337\r\276\235\232\325\274\300\016\256\275\370\227\341;FL\323\274\362\206\307\275\014\2134<\270\010J\275\230\300\\=\242\200e=\304\272\347=\264t*=)uh\275!\365\002\276\352X\350=\333&\331=\033;\216=16\347\275j=\315\275\220\231\265\275\207\307\244;\256\254W=\000\361e\275\277c\365\275:-I\276\252\232u\275\'\210\207;\255\365\275;\r\341\036\276P*u\275\036\204\352\275\324xN=\355\210\216\275\003\304\204\275@\366\352<\346\007\333=\274\366\364<\205\355b\275k\216\226=\023\215\004>>\300\352\275\315\234\300\275\307\177[=V\3523=\320\032\266<\013d\202\275>?S\275 \316\004>\030\007\352\275U\245\231=\r\371\256<OQ\265=|\213\'\276\205\343\350=v\200\201\275\332\017\353<Fjr\275\315J\024\276w\367%=\354\211T=Q\316\211=\n\272S=[o\037>\036\241~\275L\n\023>X\032V<\2758\331=={\226\275\334\236\356\275f\361G>\237BC\276\220\013\360<\005\247\265=\006\332\036\274\032\351\360\2756:\020>\016\357\013>OS\323=\351\363\242<\nj\231\275\353ae=\215z&>Wn\020;Z\325\244=r\267\254<\215\003\215\274v\342\251\275ZX\021=8\326+=[\256\371\274W\252\006\275\310\343E=\371\364?>:\r\335=\315C0>h\262\351\274\362\371\242;\"\032\300;\321J\001>\304\311\307<\370p\312=+n\361\274\245\335@=CU.;\263C\r\276\307H\005\275\311P\354=\024v\257=Ke\326\275\226\024\357<&\031Q=\364ij\273Q\352\264=\355H\370<C\352\217\273>@\202\274.A\025\275\321Pa<\267\267\315\275S\300\"\275\340t\313=\357\326\262<\251\371\214\275\302%\204\274t]\202=\366\341\264<\346V\375\274\220T\026\276\314U\274=5\236D=\036\271\014>!\335Y=\307\237G\275\346m_<\370F<>\010\241\357=m\337\257<\331\224\002\275\021\342\322=\024\353\370<\276L5\274\347\2328\276\317F\246<\021\375t=\255\312\252=4`\333\273\355\322\000=?\267\221\275L\2161\276\245\017\315;l\n\257\274@\006\265\275A\t\017=\370\352$>o\303)>\305Xn\274\tT\244\275\250\216\036=S%\331\274\373\225\317\274M\002\232\2751$\022\276~\313\001=j\030\001>\325\257\265;+\363\016>\333\003\333\275B\320m=\004\270\231<\262\351\006>@\273T=\255\302#=\264\215\267\274k\325\r\276\206\006\207\275E-\213=\237\237\330=)1N>\007\\j\275\2615\252=V\266\364=\271\010\010\275o{\027>O\374\354\274F\234\266\275\314\014\273=ah\t\276*\313\035\276H\n\346=\222\251\355\275o\367\022\275\177\300\t>\022\355\262=U3\">D\353i=\227Q\340=dR\326<(\271r\275\242\354\214\275\010g\225=$\337\275\275t\222\265;Wa\020\275\211\216\327\275\036o\273\275Rp\253=\274k\007\274E\271<>\006\t\r=u\n7<=\200Y<v\353]\275\243A\304<t\362\207\275R\363\274\273\2579\205=N\023\013>\235\254\021>\244\3565=\201~3\274]\2068\275?O(<Pf\016\275k\247\241\275\334b\221\275\317\323I\276\353\236!\276?h\240\275\t\231Z=\001\301\240\275h\374\000\276\243\001<>\307\316J=\313\344B=\014\350\031>*\301\217\275T\361M=\204\207\010>\201\360X<!\235\006\276\027\213]\275?\363\243=`9\267\275-rK\275\247\315>\274\2030 \276m\017\006>\014\016\004\276\220\366\357\275\251q\235\275L\334c=\240\203\223\273\347f<=\242\271\017\274\030v9\274\362\224\242=\315\276\251=\020/+\275\246L\221;^=\200<\277-P<\005\030\n>\233\020]\275\242\\e\275\023]d\275\331<\261\275\203\024\246\274*\247\352=\224\333\244\275@\2565>D\313\356\275\263\351\007\276\275u&=\265\201\007\2761~\347\274\024\353\346=\364\003\302;6\370\307\274t\354\301=DzT\272\313&\367=*\327\374<W\307\321=b14\274@\305~\275$\324\375\2752t!\276p\363\224=~o(\274\r\006\212\272\304AH\276BG\034\275\017\235?\276\005]\032\275\251\031f=\031\006\263\275\344\276\250\275\352\214\376=%\366\271\275\311\305V\275\224\345\200=\001\323\214=jyd=D\0267\276C\226\225\274O\275\201<\211\312\266=\230\324\004>N\357D=\221[\254=\221\300#>_-\313\275\033\262\200=\211\3503\275\306q,>7\250\352=?)\002\276D\027\231\275\330\240c=\004\347\260;\241\356>\276\310(q\274\230\352D\276/\n\004\276\000\321*=z\302(>\213\017\205<U\036\355=\266\216\360=\212\261\312\274\355a\323\274\313`\353=&\014\235\275\227\356\262\274?,\276\275\236\320Z\275\343\356\t<\020t\245\275f\260\273\274\220\333\\=\223\231\025\275bg\022\276\320\325\020>F\314\346\275;\314:=\237\307\235<1\026D\273F\224o\274\352\016\312\274SO\020>!\025u\275E\251\351\274P\201\343\275+\367\037>Y\032\005>5g\341\274S\344\203<\353x@>\327\336\331=\232\002\271<^\022\306\275%\007\374=g\327\363\275\245\226\363\275\003\316\216=$A\261\274\007K\005=\270\264\263=\177C\200<\026H\'>\032\216\031>\0010M\276f\315\210:\207\365\216\275\273\021\325=\266\306\264\275\006\020\300\275(@\016>Wp\200=\352\360\211=am;\273=\340\026\276\033\311\273=\031)\234\275\010\370\271=\032(\t=S\204\330<\260\351\250\275m\353\331\275p\207\346=\363\336\202<J9\364=\316\206\023=\336:+=\273\227\262=\214\031@>\267D\036\275\211\2129>\032\360\312= U\025\276\326\270\r\276\312\247\310=\270\014\240<r\221(\273\211E\324=\326c\020=e\347\362=\216\177\241\275e\270\352\275\274\313\207=\010K7\275\272\026C\276\245(\304<\335#\221=\017>1>X\367\252=\323\230\212=\245\021\214\275\231\373\205\275d<\204=A\351\264\275\"\320\210\275\343\251\016>\365\255\275=\362]\306=\0325\375=G\262\257=\3020\030=\347\354\214\275or\207\274m\347\211=\361j\321<M\203\276\275I\251G\275\216\317\335\274\252\343\033\275\021K\223<\276\360\277<`\204\267=8\215\"\2758\206\272=.y)\274\360^\201=\016b\237\274\331y\266=ZW\243\274\034\246w\275f\014\027>Y\303\257\275\216\360\376=p\013\312=\222\263\026=N\321]\274\013R\231=\375\223\353<\017K\013<\372\277\207\275j!M=\033\003-\274\363\363\233=\373^*=\306\r)\276\330(\231=\37358<\034\260\327\275\313?v\275B\331&=Gb\020>\034\t\216=\201\225Y\272\233\002>\274K\002J\275\235\226\236\275\305\334\302\275\342\366\031=\267\200\t\275r\025\271\275\254\206?\274F\202\216\275\305F\357=G+D>8\253\177\275\347n\264\275G\2275=|\025\241\274\212\007\024>%l\202=\nE@>\0241\243=\302e\210=\244q\376=\377*\214\275\347h\350;\022\345\366=5Q\375;}\257\r>\177\206.=\013\243\033\272\250Q\250\275\274\366\317\275\306#\013\274\000=\360<\216e\366=\223O\022\276\217\001\223=D\333\347\275<\240\020\276\010S!\274f\323\237\274E\351\231\275\244qO\274\374\323\214\273\356a_\276\302\032\326\272\023q\'\276M\023\027\276\207\357\364\274BMp\274\235\310R\275\030W\363<v=s;\305z>=\3075\n=}\371\301=C\317\t>\260\2144\276\340\222\255\275\347H\r=\233F3\275y\365\304\275\360\254=;\362\001\">\205P\252=`\335\177=r\330W=\320\003y\275G\210+>`\332\330=7\252\237=\032\376\225=L\321\017>\350\307)>\213\212\220=\032\341\305\275\222\253\'\276\030\255M>\007\326\316<v\353\226\275g\304\266\274\310\005\r\2750j\360\275\370?\242\273sk\031\275N\243\305=_O\314\275v\332M>\375\242\204=Z\341\223\275\322\025W\275\260\373\036=\266\rZ=\333\346\343\275\323\350\232<\211\260#\275\232\'\024>\243\263Q\275\205\350\"\274%\\\216=\036\275\r>!y\257=\310^\262=\tHU\274\0103\326\274\375\250\365=A(\272\275\217\270\327\274h\316\372<\2762\362\275r\317\003\276\260\001\321\274w\261\217=\237\343\373\271-G:\276\034w\003\276E\022\004>a\260\361=\341\372\021\276&\"\263=\334\276\200\275y_\326=\210\367\352\275\023.\350\275\242\0375>\003#%\274?S\361=\361\227\230\273\244Wv\275%\303\016\276\333\211\211<$/\264\275\2741\001\276\224\023\265\275\273\"\356\274TC\332<Z&\304=\270\026\343<!B\\\274\177\340\266=z\370\251\275\301\314\220<xo >\344\317H=\1773\n\275\200\305\362\273\220\325\324\275\203{7>\231\250.<#{k=\316H\010;\024\346\344\275m\302\037\275\330\266\342;BP\366\275\021\307\252=\374F\271\275\375b\304\275]\013|=T^\002\275:\250\201\275\357Zt\275F\300\252=L:\223<\201\rt\274\340\260\373<\311\262*9q\213\206\275\271$V\275\312.\020\275\r\\\034\275\374u\303\274\265\000\312=\204\205\311\27534\336\275\034\203\275\275vT\267\274BX\027\275\202\362\266\275\3668\"=\256\332+\276\333r\224\2748-\233<\222\362\275\275\217\237\256=\2402\362=\0208J\275`\326\036\275t6%>BK_\275\007U\247\275Q\334\260=\356\267\000>\r\244D=T\261\315\275\243\313\206\275Gw\215;\312\355\342=Y/J>\252\305\014\276\"\247\257<\177c7>\254v\344<\307]\346\274V\3448\275\'\337\274<K\\\335<\203\210\014=\023\3449\275!s\r\275\370\314\033\276M.\333=\037\374.>\321)\321\274\351\014L\274\362z\205\275J\277\307\275+/\">\371\334$\275y\317\035\275\247\207\320=\202\341\031>\323\343*\276#\000\005\276\037\303Y>\270\266a=\205\316\354\275\374\r\262=GU\304=\200\211\312\2748\3018<\326\251\253=\032\275\020=\273\354\251<,g\277\275\305S)<\244\245\236=\330C\005\276\231h\221\275\327\220\201<\301O\376\275\236\302\004\276\244\230\003\276\225\366@\275\2328|=\201\'\030\2760\316\021\276\217\025\215<\367\2121>1\224{=\370T\250=$\217F>\312\021\271;\003\371\267=\332T\377\274\326\343\004\276\1771p\275\267\201\276;+\335\344<JQ\240\275C\254\022\275\"\375\311\275\003\370\211\27433\007\276m\265\242<v\317\242\275\263\226\260\273\342{\245\273zL\234=\343\252\217\275\322\221\002>\337\033\200\275\223\334\302=\340C\263\275\024#\000\275\314\261\017\276zH^=j\306\235\274\302\014\342\274\200\017\222\275 \270\330\275\004\212\006\275\002\337<>\240\013\205=\020\220\017=\2260\333\275Iu\034>J\025X\276\022)f\275\3750(\275\037\364\214=\001d\247\275\214\037T;\003{\361<F,\373<C\374a;:\210C>\'\371\355<7\177\035>Q!\030\276#\270\355<\367\226\010;$\266\252\275\030\357\230=\300\333\005>Np\260\274\224\\\375=;z\232\275+\224\305=\244\335\263=\362\217V=\365\304Z<7\270\351\275\236\335\302=\307hF=D\036\233=\360\212\235\275\374m\370\273\200\374\224\275\020\023\254<\223\211B\276t\276\304\275\323\347\362\275\344U\025>&\022\\;\270F\007>^\206\215<\246\245\006\275\022+\331\274D\340#\276V\241c=\204\357U<\242\332\370\275})\346=1\330?\275\205~\301=\327\330\257<0:3=_\242\363\274\223\373\215\275\243V\216<\362F\376<\'X\\>\034\231\214\274\375*\356=cyY<\334\361\357<\035\301~\275\245\n\210\275\020\274\217\275\026s\256<\027\337B\27616\251<_w\007=\230\202\251:\274\037\343=\001\242\363=\310(\227<\335\254Z\2751!\t>\002j\236=\177Pj=y\2453\276\311\3661\276\366\264M>\251\300+\276K\031\321;u2*\276=\235\025>\267\331\204=A\227\372\275\374\240\250=\211\265\234=n\310\244;\330\020\020<\201\217\272<\014\365\304<n\243\254\274\235\243\325<\344\214C=\330\267\370=\0009b=\325k\214=\217pT\276K\364\025;37\262=!\016\023>\224\204\236\275\033\022\223<\342\333\377\274B\023\363;mI3=In#\276t\031\035>I\343\276=\'\003\343<\233\223G>\255\004v\275\326\245\246\274\270X\324\275-\006\030\2769i >\003\246\324<\337\241\360<*\356`=\332\333\262\275\310t\204=!\335M=\356B:\275v\302\t>\026\224\375\275\275n\022=2\024\314<\341\210\022=s$N\276\356\230\304\275\343\201\013;L\347\200=7\315A\276\267\350O=\256\016\212=t\271->5\364\000\273\227)\331=:Ad=;5\226=\207\354y=\"\364\333<)\021\336\2756\236\237\275\243\203`\275MwK\275)?<<\177\330\022\275N\2264>o\321\203\275Y\2140<\006\321\251=\233\302\330=\203\315\226\275\3208\305\274\205\002\263=0\322\014=U\355\211\275AA\236\274x\204\363\275\215Z<\276\276\203\371\275\"\2369\275\357\316\242<i@\315\275\355\245\022>=\235\231\274d\211H<\'\236\360\274y\265\036\276>\010\262\273\324Q)\276\351\317\241<\211\343\377\272\325\331\007>\316\341[<\207\264\006>\t\200\374<\022\276\244\275\306\245+\276\373\372\177\275\321\272\013\276\226\022\">\022c(\275\235\212i=\020\004{=\333\325V\275\001\225+\275}}\233=\352P\331=Be\327=\251\321\246\275\017s\300\275\3738\340\274\020\354\213=\245\2448\275\210\200\202\272\315y\256\275\210\255<=\305\270$\275\361\271\234<\211\363\216\274b(\032\276\313\n\n\276\255\256}\274\337\326\262\275\343\311\024\275\372\277\216\275\t\016\000>\274\350\004={e9=\022>\002>W\324X\275\234\240\003\275\314\201\274=\006;\215\275\263\362\323=\037\2076\276\234\265=\276x.\245=gOL\274\211\027\033>\346\'\030>\346\316)>dr@\274d\327&=+7\023>`\236\230=C\030\251<\242\270O<\344\0213>\227a\243<\375o\006\275\251Y\017\276\320t\212=\022\274\005\2768{&\2765\365\223=\014W\003>\371dc\275\200\346\243\2740\365\306=\272w\270=\027\214\030\274P\341\014=\312g\200\275\305\271\376\275\024X\300\275\273\214)>(\270-=\353\010\210\275\375\021\004\276\301\373W\275\262\202\023\274\341\323\260\275\322\204?>qZ\312=\314#$>Fc;>\243\242\r\276\306u\322\275\274\265|<\rG\275=\217\3208>\267:6=\274\014Y\275\226\334&\275OO\177=\370NR\275\256D?\274\302\302\266\275\320|\300\275G\212y\275_7\023<y\220\260=p\333\360\275\017|\246=\004\315\013=\271\252B=a\312\272=D\223\226=K\333\025\275\213\377\256=y)/>\376\3750\276c\212\276=N\260:=\335b\230=|\375\363\275\262Ct=\217\"\354=R\253\221\275\217\222\237\275\3204\005\275\223\t\"\276\316G\264=`n\033\275\340\274\331=\221\357\014>Xo\r\276\271\202*\274S\250\002=G\323\221<\317~\206\272JOI=V+>\275-\367\006>\306M\230=\252\327\024\276\031\205\266\275\253$T\275\216\277\364\273\342t\006>\310c\273=\224\256\003\275>\205O\276\226\275\031={m\201\275\017\267\001\276\220]-=\362\350\373<e=\324\275\r#Z=@\014\260:q?\251=\260\217\372\274\201\017g<\347f\245<\235\355\315<\373\214\'\276\311\324\241\275\033\267\n>\233\220\036\276y|n=\335\213\037;\221A\003=\023\224\345\275\207\031\266\275\321\020y=T\345\037=CM\'=6CA=\274\r\027\275\373f1\275x\230B\275~\340\027\276\316\361\211\274\256{f\273\326m0\275\216\000O\275\214\220+:\217\267\177=\037PO\276\027\361\022>m\323\264\273\262\2244=g\242\232=\n\030:\275\364\264z;M\256\354\274%\030!=s\312]\273\250\220\331\275F\321v\275\305\251S=a\3539\276g8#\276\302\253P\275V\224D\275\354\021d\275\361ay=k\344\031\275\317PP=\023l\362\274M\202J<\225\021\007>\324+\307\275g\376_=\323v\221=}\256s:\253\204\031>=Pf=(\272\203<\013\241\036<\310m\226\275G\225\317\275\347\370\033>5v<>\374\216\336=5\"3\275-SB\274\270)Q=\316\002e=2\235\216=D\304\226=\257\2612=\325\2312=\r\255\200;\332PN=\363\013\256<\017T_=\327\240\007>:\357\020>\221\320\250=].\030>x\256\330=\341}\257=\264\2563\276\264j\265\274*\202\303=\031ML<|\352+\276\214\372\357=;f\235\275\237l\202\275\026\335\350=\260\212p=\014\364\356\274\200\233\334\275\326;\034>\326n\026>\246n\\=0\322\220\275\212S\337\271\235\264\022\276\036\210b=W\342\334= \022_\275\371\304\246<+P\356\275\216\217\351\273\2568V=\007\322\333=\3430(=\t\004_=\n\376F\276\351v\225\275\317\351\240\275n\002\215=/\217\223\275\004Eb\273\230\325m<\304X\211=\021)\317=\213\345\235=\341\337\005>\035\265f<\274CO=}!I\276dg\023\276\216 a\275P\320\026\276L\260\001=\274\234\227\275\"C\016=\212*\351\275\240\324\026>\321\'5\275z\306\303\275\236w\355=]{\306=\230\026<\274\335\377\366=\006-\231=\316p\037\276\301b{=\275\255\004\276\325\033\266<\r\022\034\275\215A};\203i\232:\341\006\n\275Vo\025\276\370\326$\276\200OS\275KU\221=\277\375\334\275Ob\003>9t\032>R\350\236\275\307\204\207<\366X\337=\305\320\001=M\363Q=!+\240\274\022s[\275\223\264\371<a\304\035\276\241=\352;GG\261\2735\216\r\276[v\305\275\210\225\215\275\r\007\003<\333\274A>2\267\322\275\020\201\230\275;\031\272\275@\r\364=\376\\\010=c\233\321<\304\306\\=\010\020*\276lJ>=\026t\251=+\243\005>\227\336\362\274\024\352\237\274\361\0210>\017\224\'>\244\002o=\270\301\345\275\356\243\276\274\205\322\265\275\243\257\301=\232\273\027\276nA\017\276\270\302\355=g\223`<\221\231\373<\002\332I>\224\024\211=\220\247\234\275$\023\203=[\247\344\275\243a\266=\004|7>\221B\340\274\353v\232<B\201\260\275+Q$>_\327\241\275m\311 \276\250\353\206=V\202\202;?\256\020>_\014\316=\026K\250=\232V\330\274\202\3206\276\251\nu=\3452\251\275|\223\217\273\343\357\212=\356c\366<\32056\275\326*\353\275\307\036A\275\267\240\275\274\312\236\r\275\224\265\302=\363\002 \275;\351\221\274\243\342\036=\301\212j\275k\270\\\2757\206\241\275\275\036\t\2756\334\r\274\276\350\201=\364X\026\275?\302\324<=QM<5\206\331=Gp\006\275\252\360\007\276\213 \364\273S\315\216\275\213r\331\274\334h\343;\001\002\356=h\034\274\274^\230\016\276\272{(\276h\1774\275NW\365=4\275\347;\031\177\255\274\017\371\237<\230\254)>b\221Q\274$\217\221\275\204\257\024>\314\207==\272V\346=,J\004=6^\031\275w#\345\274\352\366\342\275y\000\213\275\311\311\277\274\357\024\201\275M\1772>\226|\276=i@F\276-\ny=\t\367;\275\020ye\275\304n\001\276\234Uv\275\305*8>\237\350\033\276\006\233\010\276\331\353/\276\023\375\200=\370\013\307\275dF\006>\022\037=\276\355\t\017\275\003:\220\273\'\211\036>\254Y->\24513<\326\246v\275}\245\233;\272\036r=\020\310\345=\236\375\360<\245V\327<\016\374\334=u\347^=\322r+=\326\247\311\273\310\020\307=\014\221\230\275\3508\257\275\\\014^\275\327\007\343\275>\200\200=\036\250\235;\005\371\026=\311\226X=\251\205-\276 \347j=\234\376M\276D\227\212\275\323\335\344<\273x\266\275\223\366\022\274\345U\254<dN\336<\023\331:=\342\032\220=T>\320<H\026)>\013\211+>\253\271\342=\3117\026;o\372\312=f\025=\275)9\217\274\315\025\035>\330\033\016\2764{\036\276\265\017\252;\007w\001>L\246\026=\341`\026\276\364\305\204=\231\366\227\275\267\007\376=@\374\215\274\351jR\2756\315\200=\244\216\225\274\034\3573\275<\276\272=\004\213\305\274\255\270\263\275\'\304\026\276g\231\025\2766\304\314=\277&\034>\206\237\231:\340\027S<\035\230\233\274\177\360E>\253\276/>\311\221\310\275!p\343=\210+\345\275\214\360\337\274\034\002\261\274\300G\374=\300\000\024=\220e =%\246\004>\223!\037>\177\036\034>\242\n\207\275*\372\245<\314\222\316\275\016\030\267\274\225|\025>\351\227\021=e\261\203=\342Gp=\320\304\374;\374\202\370=\247Vw=M\227\244=\326\277\207\275n\031\010\275\267\001)\275\014\340 =+\023f\275^\005)>D\321:>\3729\254\275\'\030w=\246f\277=?\\F\275\345\3173<\237*\364=gD\030\274\031D\367\275\204\355\201=\250\031\204=\363\000Z=\237\273\350=\200\024\246\275\r\354\377\274\347\225\016\276>p\243=\027(\360\275Z\312\210\274S\227\026\275\254\237y=\317\022\027>?Z/\274\226\211,\274\366\220\335<E\026\304<\217.\210<?\014\017\276>3\262=\022\273z\274\267Z\017>ay@=\372\025w=q\344\031\274\220\205\376\275\007\325\376<\030\331Y\275l\262\'\274\317\223\r>\367\177\301\275,\321\266=q\306\010>\367\265\261\275^\346x=\254l\232\270\360\321]\273\032!\250=\214\352\320=X9I=\254\247\034=\365\363\022=\2557T<\223!h=\'\032\346\274\271\240M=\351f\010>\010\305\242\275\n\246Z\274\223B\022\2769\274\205\2759-!>W\3750>)1q=\'\217\230\275\203\304\024>w\214\013>\240\333\356=~\344\300=\264\373\030\2756v\310\275V\0235\275\231R\222\274\3229N\276\"\346\025<\336&\362\274\226$\274<\255\0140\276\303\372\223\274\300H\037\276\007\312-=p\025\366=D\n\304<\316\227\027>\r\222T\276,\003\n\276\335\003\014=}\311\331;@\313)=/\334\273=\024|\332=m\217%\276cd>\276\227\006\017=\034\033\004> \205\261\273\375\330\226<;\024\356\275JK\2719\r2w\275\246V\">K\3736=\227@6>\276}\027\274\357\243$<\334\226J\274\222\365\301\273\262@\177=UM\203\275\031\376\021>5&\336\275\037\200\213\275@\307\337=\317\224\214=\334f\027>\010\250\304\275\010\3355\276?\225^\275E\252\317=\002\371\232=5j\251\274k\236\317=2\002\342\275\027k\355\275$N\233=;\206\371\275\0353\360\2752\n\026\275\313 :>z\276\247<\306\205\023<\222\037\367\275I\t\265\274?\221\025=\303\236\372\275e\033\232:\247\344\005=\243\364\266=\216\261\"=\001e\r<^\317\371\274\320\345\302=b\027\220\275\266\235\242<N\303\227\274\333\036\001=\262\350\326\273\210\206\023\276\030\267s\273f\200\306=\304\321\337=6\312\235\275n\337\311\273d\306\036\276J)\014=*\222\037<\322\307\002\275\350\213\276:\256\271\333\273\346\326%>B\245@\276\343\024K<\204\254E=\260\001\007>\263\232\245;\212]Q\276\230S\005>=.A\275#\372\021\276O\033\005\2732\371m\273\002\" >\'\201C=\270\034\326\275\376\305\275\2751@\022\275\273a\343=\036\314)\276?\373\331:\277}\306=\227S\252<\301\336\026=\255\236n=\250(\302=\246\002\341\274\3453{=3lu\275Y\005\327;\260C\002\276\347l\353\275\3325\177=>\377\320\275\271,9\275qs\020\276(\001*;h\230\304\275\276\276;\276\274\t\036\274\016\0239>\326\216\241=\367\346\037<E^\362=0\257p\275\252\244\307\271&\020\200\275\006?\016>B\377\250=\221u]=\030]\274\273\\\333\276\275i\330q=\007\317\237=\327\206\224=\236\313\374\274\013\375\321\275\322r\n=\261RI>Z\321\335\275\365\261\206\275\260\260#\275\205;\273\274\275\332\222\275\034\364\207\274?\357\315=\026\236)>\273\217>\275\272\002\372=\363<P>\263\342M\276I\216\367\274r\272\342\275o\'\017\276`\211\345\275NB\031=RV\257\275\2150\335=v\023i\274\234Y\361<\245n\023\275S\226\227\275\302G\021\276\212\330R>q2E\275\307`6=\313Ho\275F:\302<X\305\361=\025\2622>\n\2052\275A-\023<\257\330\214\274\371\227\203=\272L\353<\243\031Y<\220h\202\275\0201[\275\323\033\273\270<T`\276$\315\311=c,\002\276\033\221f\275\0039\227\275\257\322\254\275\224s\204=t^v\273F\303\323=\001K&>\0204\000>9Y:=\204\276\200\275\022\201D\275\035n\314<u!J\275k]r=\005\035\335=\177\371L\275\036-t\275\367Z\027=1\247\325\273\013\364.=~s\002>M\237\303\275\026?\204\275\r\256\'\276\000\020\312\275\270WA>\207\331\372\274\332$o;\000r\202=-\030\211\275\334\263\234=w\364k\275qa&\276ra|=\353!\007>\264,\"<\277\211\301\275r\235,=\235\206\020\276\325\022[\274\245\307U=\306R\030=\336\304[\272\260\243\360<\315\3450=\252\006e=\276\345\304:\024\0006>\367\322\374\275L\225\314\275\304x\217\275~^ =2\002\360\275\000\357-=\030\377]=H\276\231\273s\222\202=\231r[<\333\213\223\275\235\337\202\274V\333\036>\262\236Z\275\344\177\202<x\026\315=l\357\221=\302\366]\275\217\205\322=\354Kp\274Jr\232\275D\204\242=\277\304\273<\352\231\330=GQ\345;\202Q\251=\024O\234=Bz;\276\322^\371<\2203\026=\014\0238\276\010\217\270\272\001\003\221\273T\031e\272\"\273\025\276\010]\013<\364\200\214<v\034p<\270\371\323\275<7K\276.\214\301=a;\266=\204cp<\365o\033\275]\352\232=zb\313=\233]\202\275\262\255\323=\237\277\036\275\356\257\355;\213\270\275<\227\016,=\365\"\026\2767:\231=\224\027\300=sT\t\276\017\016`\275Z\032\213\275\257\326\010=\264\356\351\275d/\n\275u\367r=K\262\353=\n\177!>v]\302\275q?F\274\250\314\001\276m\200\216=\035\\\233:k\342\312:NQ\241\272\213D\217\275\355\213,\276\263\245\205=\366i\213\275\350j\253\275]z\225=\3602_\273\206\261\246\275]\210->\377xp=\316cl\275wW<\276[\366\010\273$\266\312\274\360R/=F\363\246\274dE\225\275:P\000<\247\345v=a\000\271\272\312x0\273{(?;+\205\023\276\020v;\274^\227\211<\325o\336\275y%U\275\030*\n\274?\336\243=\347(\261\274\\\364<\276*\237\020>\023\304\017:P\311\342<1|\340\275\206\333\202=\310\227\026>H\347\002\276\354\212\221\275\010\362\240=\345\036\256=\037\231\244=\356\201/\275l\334\342=\r\t\252=*\246n\275\002=\005\276\031\211L=\237\363\013<\207J\014\276_\220%\276\316s\313=\345\023P=\311\224\315\275W\260\215=\373\205\007>@2m\274\014\213n\275^\300D\276n\346\273\275(\270\t=\336\363\034\276\372\254\n>\213\3568=\302_\010>r\234\301;\217\257[>\021D\376\275\375\270;\275\312\224\244\275\234\245l=R:B\275\235P$>\274\226\001>\"#\207<\323T\335\272\247h\023=E\246\320=\013\266\213=j\333\313\275\302\372B\275\302^\247\274)\324\273\275\353=\205=\367\\\013=\346gE\275\024\362>=\343\276\'\276W\273\020>\213\3479;\202\377\277\275\271\\\264\275\302\322\260<\217^\300=\006&\025=HF\003>\214}\034\27534\374<e-3>\3351F\275\322f\302=\322\261.\276\246\216\025<>\262\r=\320\376$=\261s\306=\336\002=<s\n\223=\002(n=\235\230\275=2\341\032\272\234\355f\275.d\323=\222\355\276\275|\215\215\275\332`\t=B\003\241=p\265\336=Z\253\331=\264\302\007=\310\341\322\275\314\230\246=\037\324\206\274\263n\311\275\237\r1<\004\302\240=\331(\024\276\311+\207\275\245\366\274\274Ym\220\275G\345\230\275(\325$\276\004&\323=\254\024\212\275*c+=\257\233\255=?\202\340\275\314?\344=\277\252\233<S\016\010\276\020\340\t\275\\1\\\274\034\344\344=\342-\254\274\271)\324<\304x\265=\007\221T\276n\324\240\275p\362s\275@Z\022\275\275\035\253\274\036\272$>\350k\210=\3645\016\274\317NQ>^\200\254\275\035\025\014\276.\\\333\274b\363Z=<\036K\275\227\337\034\276\036\010\217=X\244\223\275|\256\223\272\2403\272\275\355\217\323=\345$\235\275\363E\227=\343\237\227=\020\212\036\276)j@;\214\222\036=\232F\337<\213\\\006\275\030X;\275\304\010\311=$Q2>\317;\271=ZN\203\275\"\t\017>\361\205\215\274\233\307\251\275\277\246\333=\204\213\'=\035\327b<\271\265\006\276\207@\342\275\361)\273\274\204c\254\275\254\255\257\274\024\277\203;\032#*\276\0032\254=\246\3609\276\345\320\213=\233\017\365\275>\211\265\273;\013\304<\2677(>z%\214<\026\306\023>\341\222\273\275\322\210\261\275\307Y\013>\025>J<1\372\177<b\006\264=\337D@<(\370A\276\317n\023=\242Y\300=+SE\274@\014\313=\311-i\275F\350\335=D\271C=\224\334;=9\364\221\275M\213\373\275>\322\220\275\000t,\276O)\013>\271\2560\276 #f>\350\255\317=\177\361\347=\220\033)\274\302B\'>\212\275\000>\330\'\351;\277j\220=8\004\020\275\225,i\276B\235\357=\241ko<!\322\202=\312{\254\275\366\327R\275\215\356\273\274\325\250\021\276\233J\236=s\267\013>\321\326B\275\202\313\310=\223(\300=\213\272\223=\310\306\202<k\243Z\274\305y\254\275\202\207\234=0\336O\275>l\201<\217\017!>\332\352\316=\204\230D>4\275\007=\035G=\274\357X\334\275\357F\363<<<\027>\255\370\230;\317\216\035\275\317\253\310\274\242D\010\276M\033\346=;W&\276\014Iu\274\307\327$\276\216\266\317=\236\350\352\274ta\013>\216[\322=\202\010$\275G\027\346=\212\305\031=\236\352u\275\346\244\335\275\322\211\236<p\217\220=\373y\314\275\324\t\300\275\315\366\355\275k\225t;\362KX\275\346\346\277\275\347\264\337\275w\362\257\275\213\251\355=\322\254|\275Sa\221\275t\0015>\210\010\334=B\254o=S9\024=\333\340=\275\364\033/=\255\336w<\000/|<+~\265=\362Y\230=lA\252<\344)\021>_\305\222=\305\331.=\315m\323\275v\333\336\275\002L7=\213O\314<\256S\374=A\352\242=\036j\013>}P\010\276\002-\211=C\2055\275\220-\341\275\265\264X\275\276\313L=x5\214=`\242\245=*+\256\274x\003\214\275\024c\246=\213\277_\275*\237\'\275\221~\362<\243\303\374=\307\315\310\275x\037\036>\033\250w\2737\312M\275!%\256<M\216\326<f\344\210=\270J\232=\324B7>\207\203\217=\374\322\027>\004y\340=W)\016\275\257w\241\275\377\272\010>\272\310:\274\022\367\020>\231\350\331=\202\007z\275\302\2373<\017\r\022>\t4\002\2757\252\202:\323\n>\275g:\236=-\340\271\275\354~\023\275\000\352\345\272]\367;>\247\265l<8G\217\275\177\214\210=$\307\341\2756|\013=v\237\221\275;\316@=c0\261<T\024\022\276\267\024\254=Z\355z=o-\344<\212\"\317=\205\217j=!\360\230\275F\3531>\372p\231\274Z55\276\035\370\275\272J\377\370=\205\321\337=@\366\311\275\265\241\307<Y\240\242\275jU\033<\212\\\356\274\307\242\022<!\365\320\274D\320\303\275j\0318>:c\231=\243\374\013\274\036\344-\276w\216]=\014D\226=\343g9\275\275\323\354\275V\355K\276M\244\324=&R\363<U\242\275\275n\2759\275\036\375\270\275vN\201\274\300\264\324\275;1\254=\327\n*>\331\366\210= \210\306\2756\356\365\275L\351\204=\013B\025\276=\306\017>1\252\336=IH\331\275\272\020\006\272\345\3047\275\343\233s=\256\343\t\276\205\003\247\275\221\374\255\275\270\032\235=\003g\314=y\205\223\275\332\206\215=\227\262\325=\345!\250\275|\277\025<+\261\'<C\275\237=\263B\347\273\240k\325=\006}.:\325\355\020;\305K\t;\254W-\275^\2378<\352\017\017\276\343R\273=\201b\331\275_\025\370=\351w\t\275gG\216\275\257-\315;\224\227\026=\307\372\361\275\301\345\336\275<7C>\375\317->U\206\224\2746%3\275\'\007\350=r:R=n\343\344\275\222\014Y=\316ge=\';\237\274\247,C>\021Q\263\273\236^\357=\316\320\213\271\376\235o\2755\301\315\274Z\214]=\274*\232\275_\341\331\275\265Z\024;\332\346\344=\013\332\013>\354_3\276F\321x=\233\224\321=\024\220i\275{\216\201\274b \231\275d\217\t\274\377F\301\275\260\220\205\275}\371A\276\304\177\267<\030b\006\276\314h\213=\254\024\346\275\202U\002\275\306\346@=\217P]\275\355b\276\275\332\361\271\275\37747\276\371\353\317\275\347a\370<\252\254\300=l\363\254\275\256yM\275\333#\025>\330]\302=g\242#>`\223n<\205~\002\275W?\230\274\376\030}=\255k\325\275O@\002\273w\364N=\332>+>\236\266\032\276\330\344w<\363\246\300<R\351\014\275\374e\r>\223#\304\275\336d3=\\\024\265\275\346\263\277\275\273\010\255\274(ZF\275\005,\227\275\320YD>M)\341\275+r\330\272=\352#>.\274\337=\203\'\302\275\254\342\214=\025\204\375\2743\316\016\275\272\r\245\275~\030\353\275\372\373\203\275_\334:\275\203&\311=\262^\255\275)\223 <\017j\006\276\013\313\223\275\024\313\275\274\364\252\'=\246=\200=\025\225\274=\234\323\024\276w\312\217\275\361m\216\275fs\214\2755\017\032>\\V@\276\020\3667\276\003;\277\275\244`v\275-\n\234=\247|d=F_\020\275\004\377\252\275\3670\354=\3248\315\275*&\314\275\261\010y\274\222{/>\262~\372\275Q\030==\000\346!>\224\002\272;\037d\225\274\270\034]\275\367\334<=\272[7>]\363\275=\006[\360\273\257\'V\275\205\262P=\340\027\377\275\327\"N>\247\253\335\275D\361d<nW\234=|?\027>\314G\023>}\226\017\274j\r4=\301\327\325\274\344\313\354<\037\320\361=\273^g\275\253i\013\274J\376\266=\330\023\020\276\227Gj=\342\254\373=o\2462>(\303\346=x}\220\274\222\2732>\256\374\332=\024\234\004\276y\267_\275\303\361\276\275\220\373h=\324u\'\276UZW\274`\272J=2\n\324=-d\014\274G.\234=\254\277\326\275\251\337\020=\005eH\276\177\306\201=\t~\\\274\034\270\332\275\036J==\277\300\002>\245]\033\275\353X\206<\211\177\304\275v\234+=\326\203\240=\246x\271=\237\242P=\027\374\023=\262\277\025=\216\205\374\274\243\034\275;\311AQ\274\317\216\235\275H-\023>+V`=\320\336\210\275\352\027\321<\342,\022\274\375\310\001>\313\206x\275c+\032={\341R=\341\204\213=\004\0163<\253qn=\013d\007\276q\275M>\003;]\2755\302\2758\235\200\217\275\006-\217<e\"\330\274z\3212=1t\037\275\331\0317<\277\317\361\275\03204>\303\372\363\275\325\350\022=x\231C;-y\321<Cc\203=\320B\330\275qc\355=1\033\313<?6\230\275\277k\277\274\374\325\225\273\316\013\360\275\032x\003\276\257\272s=s\273&=\243\000\263\275N\307*\275g\312\225\274_[\342\273\211G\022>&Y\363<C0b=\305Q\202\274\002\373\370<\202\237\216=\221e\217;B\315P\275#\353\226=\342\315\354\2740}\315=\356\355&\2765v6\274i#\037\274\303\365F>\250/\207\273\220\305F=\360\021\000>M?\217=5\014\247\274\335\305(=\245\233\320=r\021*\2733\013t\274p\341q\267\257\351\303\275g\300\243=z\037~\275\254b\253\275\263I\310\275\357\371\200=\370g\313\275\023\376\344\274\234~\022=_\233\016>\223\356O=a\204V=q\317k\274\024\236\370=\001 \227=X\202\010=\335\324\227<\321\276)\276\336\344i\274T\003a<\223\223I=\365p\246\274AD\n>\234T\305\275\033\343\037>e\220\230\274\207\265\317=\260\"b;8\273\353=\272\227l<\236\364H;~\272\266\273\364\n\311\274\257i\313\2756?v<\t\236\005\274<&\230<=\344\270\275wx\346=\357T\332\274\016\226\256=3\3242>\336P@\275\n,\257=v\2730>\366\330\354\274`\302\250\275\tP\002\275\005\013\347\275/q\366\275\261G\213=\324\343\324\274\217\275n\275\375P\024=-\343*\276\247\310B\272\253\377\373=\330L\034=\352O\257\275X_\002\276\267t\214=\343\344\022\276\337\330\024>\016\246M>m\361\210<o\242w=\273\206\376\274\337V-=\222G3>\261\274\022>\361X.=ge$>{\010\351\275&c1=\231\3168\276\312k\367=zPW\275`v\235\275\354!\333=\217\216\n\276\000\024 \275Z*:=U\231`\275\252\221\005\2752\347s=|\373\225=\353A\361<\267\241\214\2757B\243\274\225^\254<\311\346\270\275\215T\350\275\020\360\312=\263\232\350\275\256(\246\275\312\325\302<\245\273\002\276D\222\004<\320B\016\273\264-x=\325B\032\275|#G\275\232y\000\276\337\003\274\274\314\317\276\275\371\215\025\276Jd\216\275@\255?\275\256u\004\275\326\027\034=\275\250D\275\341\356T<mZ\264\275\262\236\227=\246\211\'\276\321\336\327=\202p\036\273\347\342\337\274\034\201T\275\023\257\363=R\207\006\276\365\275B>\001\007\303\275Z\032.\276y\211\372\275\222\226\207=\265t\264\275\347$!\275*T\336<\227\n\237<\315\270\\\274P@\220=\201\272\020\275\346s\253\275\007K\325<1wQ=\021\356\001\275\220\217\231<n\220\333\275\322n\023\276|\250\260\275\004u\313<z\310\236=\273\201\312\273\244\024\213\275z\316\341<\227\2369\274\253\007h\275\247\365\">\303w!>1\246\361\274\330\242\357=\211\374\276\275%\265\342\275\264\3529>\304x\214=WR\362=\260\0253\273\327\2241>0^\316\274\0254\026>\2264\267=y/\346=b#\211\2759Df<eU\264\275-\243\206\275/\305*\275\313\000\234<@\300\230=\357A\314;\255t\261=\346\300\330<\355\323\320=`\216u=\225\221\355\273\222<\006\275m\247u=\205\312\213\275\247\204^=w\0267\276\257\221\226\274I1\034>b\327\272=\303\276\305=\332\255Z=\r>y\2758\032/;\033RY=CR%\276\033\244\035>.\353\010>cd\305=\222y.\275US0>w\331\221\274\013\351]\275\327\360\302\275c\215\277<\256\250\317=\347U\207\274S<G>3\'\246\275\377\024\345\275\'\237\214\275\230\225\032\275\347\030\310\275>`\300=K\371\264\275\364\251g=g\362\316\274_9\017\276\363i3=L<d=\2432\336\273Z\356\316;\265\372{\275F+\241=\217\032\305\275L\374+>\025 3\274C_S\274#Ft\273\237\313z=\007\210\t>w\323E\273\273\323\275\275\330\033\001>\240\375Y\275\030\275\362\2745\014\201<\276\345\"<UW~=\226\235\226=&\200==G\222\002=\375Pl=\r%2\275U\t\251=\312\017\035\276\037\007\234\273=!\272=Cw\341\275\242,\350=\375\301\314\275\355\322\010\276\226\303\376\274m-X\273\377\306\220\275S\027\306=pm\024=\255-\336\273\307y\304\275s\316\357\2754\226I\276\315\r\374\275#\312\002\276\306\337\006\276o\236\214\274z\255\"\273&\264%>f\\\261\275( \010\274\240\336\273\275\205\035t\273\206\005$\276\234[0\276\311\023\232=X\310\252\274m\227\342\275k\300\255\275q%\032\276n,8=\350\366\t>\340\326\375\275\220\336g\275O\340u:\274o\375\275\235e\203\275\365\t\224=\t\023\005>\252\377\325=)0\004>;\323\273=\355\000Z\276@\n[\275\2655^=\230x<\275:\247\'\275R\253%\276m\260\227\275\303\036Y=v\212\256\275\253z\303<\036p\244=,\013\"</\307\037\276$\235\205<\373a\355\275\010)\374<G&\332\275w\254\031=y\304\245=\362[\242\275\300\034\304\275d\017%\275\334d\355=\303D\277=\277\216\r\276|N\227=2\337\302\275X\'\235=\2414z;i\031\274\275\021\356\004\276\264K\r\275f_\271\275\2627(=\234\2032\276\356T\227\275a\0331\276\370FV=g_H\275tJ\326\275=\320\004\276O4\006=\027\215\377\274\2554\241=i\223\'<\342\360\366\275\"\034\354\275\316uH\276\347m\246\275a\356\016\275S\002x\275\242\234#>9\346)\275\312VA=\351\312\305\275\211\224\200=PR\305=\315\253^=\272\273\201\274Z\331{=zX\242\275\021T<=\320U\245\275U\376|=\360\315\336\275\314/2\276\202\210\336\275\030pY\275\227n~\274\372\372\034\275\253\376\347\275\340~\004\276\021\206\354\274\313a\035>\361z\246\275\234b\010=Bb\004>G\371\226=T:5>\002\331\021=fX\371\275\265`\334=\340S\327\275\272\212^\275\325\021$\275~\013\032>GPG=-\236\013>\354rZ=\\ \355\274\335.\336=\374l\271;\222\365^\275\352\230 >\351\t\352\275\r/\244=\202>\362\275N\365\300=\356\014\222;\323A\342=\225\357\272\275\002\271R\275t\371\221<\241\260\234\275\260\272\002=\316\343S=hP\020>\036\312\024<jX\307\275\326\323\241=\010\013\203\275\370\275|=\207\372\216\275\"t!<\240\270\r\276\342\026\361;:\376v\274|\276j9?a\347=\305\022\032\276F\324C\275\232R\320;[7\216\274J\321\351=\210S9\275\366\371\276=.\023V=\007L=>9\355\205\275\310\216\260\274\017\350\t\276\231\267\234;\361\277\374=x2\246=\023-6\274\367S\003\275\217\005\024\276y\246&\275\206\357\326=\313f\277\275\265Y?\276Wc{\274\323R\034\276\027UK\275\233\264s=\254\305\016<o\324,>>\t\261;-F\276\274B\356\343\273Nw.=\220A\255\275\2217\257<,!\205=\335\204\375\274\rU\231<\342\371x\275~\023\250=7\366\364\272\364X\372\275o\222,\276\3142\211\275\313\251\367=\'\215\345\275&`#\276\n{\361=\306\330\226\275p\036\233\275\307\273?\275\026\325U\2745\001\031>\321\337\207<\035&\334=\316\224\221\275\323\333e\275\026\224\003\274\270R>\276I.\265<\303\3509=6\314\240\273\232\234\324\275\355W\224\274\303\033\023</\371\365=\031\205D\275\252\216^=B\341\026>\326\026\265<\220\357><S-\005>\224\317~=A\177M\275z\016%\276g\014\375\274\244\336\327=\334h\233\275\246$\352=b\004[;b\272\231;%\212\212=s\374\334\274\023\251\261=<K\344\275\217\354\333=\006Q\n\276\035\027S\275\306r\330<\266\300r=\'\236\005>\361\324\024=\307\027K\275\275*\002=\211&\007=g 6\275\272S\245=\357\3237=\005+\216\275)@)\274\215\275\233\275\256\027\311\275Cr\333\275XA\333\275\007\230\007\2764\302\231\275\n\347\'<:\344\024>\023\325\240\275\253\303 \276-\353\250=\016\242C\274k\345\264=\005\326\355\275\006l\315=\261\341\027>\016\326 >\377{\334=\277\002\214=\010\271\033=\375\217\001\275h\214\275\275\316\235\020>\271\352\236\275i\005\324\275\230\252\313<\211\304\205\275\025\301\307\273\212\333\004\276\214^\260=\271\327\335=t\375<\274z\237\310\275\271\372\n\276\275\013\r\274\205\360,\275u\303\341<\217\334\023>g\272\034\275>\022\200=m\315\333<\323\262\257\275pj\260\274zM\007\276\2579\023\276v\340\020=\030\236\214=\\\322*\276\360S\004\275!m\026=~\246\257=\343\325\245\274\225\353\n>t\261\032>w\014\276=\320\300\312=a\327\006>\016\214.>\222k\r\275Bn\006>c\3719=\354N2\275\220@\324\275@\220\022=c\302\232\275\313C\226\274(\'\270=\277\261\306\274\202\r\014\276X[\365<<K\356\274\305 \027>\256\0030=i`\217=\245\337\226\273\246o\325\275?\016\261=\347\335\321\2759-\005>g\364\270=[\372\230=\026`\230<\314*\030>\032\330\214\275\232\005\334=CF\031\273=\272>=R\345\334\275\356q\245\274\330\345!>\306\2514=\353\256\010\276\210\002\254=Pk\227<\252\021\261\274/\376h<\221.\204\275\226\240{\2729\223\341\274\214\330(;I\236\364<\311\300_=\021\357t<\256\262M<; \366=G\357\314=T\221]=\231,\313=\212R?\275S\r\314\275\347\020L\275\260P\324\275\352\"\213\273\001b5\276w1\233=\314\006\236<Y\267\244=\007\177\026>\317Q\322<\227\007\377\275\013\300\010\276{\334\246=\211\374\021\276fl\004\276\253\311\330=\036!%\275\342\242\014\276\303x\276\275?\275l=\026\007\021\274\227\3754>\326\374v=m\255N\275\202[\010\275$N\226=\324\331\202<\323\367\305=\361!n=\315\352\220=zk6>\030\211\217\275!\306\210\275\261\210b\275\240\257\t\275n\243\231\274\360\210\'<?\253\263=\226O\">\340\361\016\275\272\257\033>\254\235Z<jU\266<\2436!\275\361\244\274\275\253\255z\275\351\177#=>\275\211\275<n\376=\\l\357=\304\236\220\275\t\256\364<)d\216=\327C\260\275}9\262<(\030/\276\263f3>\323\342\347\274.6%;Fa\225\275\366\252\262\275\215I\003\276\216@t=\033\273p<\300OL\275x\240R=\300\271_=\347\030e=\377)I\274[\364\024<\276\027\275<\265f\203=\340\211\021\275J\225\350=\3575\311=SMn=\330\247*\271\006\026\223<\235\335\271\275\211\236D\272\376\354P\274\n\243\330\274I\177\335\274\257\265\031<\253\2770\275\234\256\253=\277\207\016>\222u\251=\003\177i\275t\260\020\275<3\031>M\242\207\275F\221\021>J\241\347=%\331\022>\\\266\016\274\201\035\010>\301Z\035\275X\367\350=\250\310\273\275\206\202\322\274\to]=E\016u\275\266u+<snf=\372F3\276\033\016\025=\322\324\023\276\210\216\337;x\315\303<\320:\031\275\201yz=\272\001\361<\t\025\273=\351\370?\274\203\250\r>2L\362<\232i\270<)P\373\275\205\371\357\275H\033@\275\217\352\233\274/\3050>\014$Y9\354O\213=\324\275b\275\235\241\034>\2652d=B-\274\274\027\317\364\275g\234\210\275\352:\355=/6\267<X\200\264=\335=t;l\314\254\274\323e\022>k|j=\351\266\363\275!$\327;\277\275\026=1F\370=\006\"\227=\324\022\273\275\022\366S\274\305X\323=\232\272-=\241\030v=U\347?\275\333\201\276=\234\tu\275\032\355\211=\263\332H<\321g^=\230i\333\275\017\314\232=\250\265\260\274\273\330\273=\222\013\202=,\355-=L\\\t\275\344\014\232\275%q\224=m\355\256=%5,\276\000E\245;\300\236\033\276\362\363\357<@\222\037>,/\366<(S\246=\231b\373=%gL\275\244 e\2757\325O<\321Y\330\275.\210\255\273\010\303\014\276\334\206\227\275\230\264\035>\033e\327\274\373-\302\274}\2034\274\270\336\270<@(t=\231\330`<\223\203\216=b\006\357\275\304~\216=$\200o<zq\362=\377\246\014>[\017\352;w|\'\275\016\376l<c\014\364\2758y\216=\356\370\210\275u1\323\274\265\n\327\275\364\332\266\275\347\036\314=A.\021>\326;\003\275e<\036>2\355i<\232\226\370\274\2568\346<\264e\225<\332a4\276\224\001\220=\247\215#;1\220\247=\362v8\275\t\300\244\274)I\363<^\244N>\3346T=\315\313\031=R\302\340\274\317\214\225\275f\001\235\275\323\001\003\275\n\010\034\276\343$2>\275FL\274/\364\301\27476\224\275\025\3708\275\223\367&=\006\275\245=q\243\271=C\335\014=\303\333+=\374\373\311\273\326\001\036>_>\217=\332\027\234=\261\'\365=)\203\272=\360\345\316\274w\263\332<(\323\207<\302@\351=\023\311(\275KX\020\276y\370\255\275\030zd\274P\022\241\275a\025V=\367\304\341\275\277\273\247=\373\264\'\275\323\266\247\274\370\355\031>\327\260\017>3\"\353=!\351\235\275\225\035\323=\243\343\'\275\005<\262<\001\224\322=mc_\275\201\215\263\275\270.\004>_\316\262\275\200\276\007<\220\\P\275\245\206\034>\2159\213\273\253\232\032\274\313\034\301\275\301\373D\275O\025\227:<Y\271=\312\033\263\272\226\366J\276\036\303\n\275o\354\377\274\27470\276\nC\036<\377/E=\034+\206\275\252\365\000<}s\253=\312s~\275\215\017\"<\343\021\350\275\305\260D>g\313\030\276p\307\362\275Z\030\034\275\"@\0039\210\303\205<\375\300\243\274\276\347\001>\327\0214;M\'\002>l\200\326\275\026\227\034>\335\227\303\275e\275\013>\250\2003=\265\377\277=\213\"\271\275j\267\010\275O\333\211;\032\302*\275\n\221\320\275\311\312P\275/\236\307\275S\276\260\275\203\222\304\275B\365)\276\205D8<\350{\322\275\302z\311=\336\274\302=\370#H\275\303\221\211\275\325\260\270\275\324H\214\275\206/\321\275\264\234\216\275\031{M\276\264\034\020>lH~\275\276\022\035>k\221\304=\200\023\256\275\037\304\032\275\265\353\n\276\311\033{\275*A\241\273\231\227\277\275\364\254\347=n\235\030\276\266\002\231=\327L\005\275R\360\013\275\n\370\376\275N\345\243\275\261\200\205\275\006x\247;\271\347\211=\210|\254\275)F\025;9>(>\236\363\227=0;\310=\237\327\313\275\300\301&>\1776\252=\211}\225<N\237\001\276\330m\337=g\360\247=\024\346\221\275\363\301\237\275\276\321\026=\'M\307<q{\243<\206\003\217=\264V)\276Z\205\241<t\243\010>4\251B;\375\261\314=\177L\336<_l\013=7Ar\275\364<\016=_\005\204\274x)%\276\330\n\341\275\212]6\275\010\t\217=\021\337\302\275f\350\331\275k\217\330=W\2075=~es=\236Sn\274c\264(\276\224D\240=\261\301\207\275/\344\010\2753e\014>\241\264\037>\034\021\321\275\014\225\373=t*\307\275\200v\274=\212\204\252\274A;\005>~\2636=)\270C>Pg\t\276\030[(>)#\332\275NQ\\=7\326\025=;\267\010\275\211\036R\276G\254\212=\225\375\030>\373I-\276$\320\035<vGL\275\370x_\276\205\220[\275V$\333\275j\237\001>[\305\231<\026\\$=l,\334:\237_\312\275\273a\276=D\216\221\275\260\355\375\273\'\000\364\275}X\210=\353{\334\2753\004\257=\177\020E\275\344\254\223=8\376\210\275+\t\250\275\032u\213\275G\243\344\273\023\341T\275w\237\022=\310\372\352<\304l\345=\374\241\201\275\304\251\252\274\347\247\251=\"\225\332\274_\223\225=O\347R=\356\251\017>})\'>M\236\251:\321;\331\275\277\270\326\274f\315\256\275\200\215\353\275\375\'\252\275\314y\262\274\r\214\343\275r\222P<-\272\001\274\014#Y\276v\211\253\275\023\347r\275\001u\276=\315\'\026>\026\316\003\274\355D\341\275\304\260\277<\373;\250\275\036\251\003\273\nM\263=\366 \274\2759\306\236<\371\362$\271\016\254\340=\013\245S\275\307_/=9/\n\276\004R,\276L\002\205;&\332\341=\350\212\217=[\353\223=S\3477\276\314\204\334=\266~\322<9\333\n\274#EP>\230\274\013>\332\232\356\275D\206\326=\320\"\201\275\014\361\337=A\326d>9\245\205\274\272\237|\275\024\222\022>R\357\252;\016\234K=\376LQ=k\003\247=Bil\275\026\351\230\273\251\267d\276I\'c\274\\eq=\247\227\275\275\370a\252\275gu<\276oVE<}\231\334<\215\356:>\306\351\221\274\373\274\235\275]`\307=\374\021K\275p\345\013=\266\000\246<Ib\020>\026\207D>`1\245=\306\255\204=\373\252\314\275\275\301\274\275\246/\022<9\347Z=\'\217\232<\r\272\000\276\351\364Q\275sy\267\275n\2621\274\353\373\">)\353\264=\013\242d<\354\352\347\275A\330F\274\204\306\342<S\307\232;\031\330\'>\374\244\320=\367W6\275\337G\372\275L\264]=\334J\341=\007\360\210=\361\000\023<4\214_\274%|\217\2748\353&=yM\022\276\025[\357=t\t\360\275\027V\n\275\320\357\266=\372\204\232=\021\311$\276\001\223\245\275\004\013D\275={<\275)\342\324=S\302\255\275\023\326\362\275S\333:>\354\274G==\241\327=\243\324\025>Q\376%\275\036\221\010\275\013\321\271\274@\257U<\032\026\023\276G}\212\275\255\276\254=+_\334\274M\216X=\372\254:=Bd\364\274k\300\006\276\273\002\337<\264\374\305\275ttO\275\317\354\352=&\026\203;d\3211=\265\370_\273\243\231\244\275\r\267,>Y\247\004\276\244A\010\276\234b\224\274\337\007\005\275\330\353\031\272\2038\013\276\005Q\237=\312e\000>mu\347\275\227S\034\2753\220\002\275\250\021\320=C=\336<\315\344\246\272\t\323\266\275\r\350\236=\344\236\014=\303\234Y<\304\330\374\275E\033c\275Q\'\340=V\361 \276\020c\330<\224\347;\276\373g\367\275\025\2629\275`,\354\274\251\216\216<\r\227\021>;\241\237\273\260\326\232;`\242G\276\031,\"=\200s\371=\230\377\375<E\221^:\212x\200=\ru\207=\266\244\224\275\t\252\031=\\m\032\276t\323\267\275\215@\324\275N\231\266=\032v\247<\375\0172=\320=\213\273gP&\276\233\346\263\275\252\237\221\275\340\241\260<\016\2463\273\036\226\355=G\256$=\341\017\233=\004\035\360\274\363\361\325=B\257\035>\305\275\000\276\247.\211\275U*\340=\370\204c<\237\267)={^\034\275\305\271\365\274N\315I\276\352\223\235\274[s\032\276F\330\007<\212\026\325\275D\250\240=rs\233;\362\217\302\274\341\370\005>j\221#=\226\333\324\273\007\217M<\330\210\300=M\303\035\276\026A+<\35101>\220\301\"\275\317~N\275=\330\333\274]\204\362<rj\373\275)V\322=^#~\275[\034B\276i\200\023>\334\316\364\274073<\355rX=PIt=Z\321\346\275\024\336\n>\016BD\275\217\022\026=\261e\353\274\337\262\303\275\025\374\212\275Y\322\303=\373\363\027>jni;\003e\222\275S6P\2755\002\302\275\261\227\241\275\302\236\264\273\322\276\003\276\261\345\362\274@\251h\274T\033\320\275\005\370\304<\366\371\251<M\002\321\275#\203#>\232\346\022\275NMp=\2519x\274\207\317;\275\357\240\036>\252\226\242=\206O\350=I\0306=\024@\336\275?K\377<h\342\242\272\253\343\003\276Qs\223\274\031QE>\240\034D\275\365\315\345\275\374\033O<\226U\333\275\223l\255\274O\177\r>\243\326\373<C\016\021\273_+1>@\317\206\275#ey\274\273\244\315;\301r,\276\346\255@\275\252\352c\275\277\250\235=\252\016\240=\262\340\r\276}\201\365\275\340\352\200\275\222[\346\274 ^\275\275\333\304&\276\301\rU\275b?;\276\0009\007\276\024.\236<\371\254e<\360\363G\276a\nD=\352\356\357=\177\022\003>\371!\305\275\271\022&>\326*\375\2757\261\305\274\'\030\274\275)\335\263\275\367\027\336=\263\225\025>M\274D>\026\3150>\036K\241=\216^\004\276\002hv\274T8\247\275\236\\\372\275?{\347;\250\363\312\275%(\006>\210P8>\202\3462=\317\266\332\275j\307m\274&o\317\275\253}\366=\035\010\201\275\374:>=_\223\035>Zv\240\275\3071\234\275\237D\364;\334\356[>dc4>`\264\252\275\025!\205=7\346o=W\020\203=\317\303/\276\371B#>\365{c=\244\334\322\272~H >x\"\254=\377n\031\275:j\247=\260\263\r\276+\003!>\024\220\361=\250\305\300<&)\201\274n\3473\274PI\002\275(\217\265=\206\200\250;Pw\236\275B\241%>\0209k>\347\200\255\274\242\023\330\275*\337\212\273\230\376\001\276\221\214\257=\016{B=n\2203=W\221\207=\034\205r\276!\226\270\275\233\021M\275/\201\305\275S\324\365=2\350\024\276\363%\202\274\\\2028\275 X\203=\327h\231=\221A=\276\315\210\363\275\212\226\004\276\311Y\\\275\263\020\340=\016\367\270=\2074\356<W\031(>k\320\304\275\336\224\306<\024\241\241=`\366\344\274\'\216\022<Q\355\200=\227\023\245=W\332\216\275\344\357\252<RW\373=\305\n\267=ts\003\274\376\211\207<\226c\300=p\036\034>\211\373F=\266\342\027;\354\347\335\275\1773\250<\365\005\007\275\221\377\r\275\314\264\244\273gys\2758\323\374=\374l\217<\320\252\223<|n\200\275\234\374D\275\363\304\030>\221}f\275k\202\370\275\013jc\274\r\353\275=,\305\300<k#R<\372x\000>M\260\210\275\010{\270\275\251\205\036\275\325\245\204;xm\316<R\310\'\274l\305\271\275\244t\370<t\317\355\274\270\022\277=\r\237:\276\241\314\340:\275\311!=\361n\026\275b\350g\273\216\3463>\257\354,=\217s\032\276<|l\274m\352\306\275\030\202\307\275+Y\\\274\231.D\276\277\314\365=\361\233*\275\270_\270<\000b3\276]:\277\273\036~\0179\246\217?\275\246\300\217=\267D\203\275B\347\004>\302\263\340=\207\232\372=1\350+>R!\024\276_^.>]:\005<k\027.\276\320\345\313=\363\242\270=\356J\314=\016\0053>A\026)>\207**\276i\354\262\275\271[[<e\207\036=V\365\354;),\005>\236\031\273\275H>\'=\352\000\235<\034\357\367=\235\334\306=W\005\310\275\000\254\014\276\354K\375\275\341\246\223<k|\031=\006%\026=X}\254\275\316\262%>>\226\265=N\274\016=\217\241\005\276\016\nC>F\231n=B\310\000\2750~y=\036!\222\274\0176\307\2756W\032>\014\\\226\275\377\307/=\306\253\207=h\010\243\275q#5=\037E\246\274?\264\377=\037\265J>\266U\014\275\260:\001\276\020\304H\276\025\260l=\237e\246;\323\0065\275\035\2001\275s\345\013=\237\375\363=.\331\354=\0350\367<\004\224\033>\305\213\025\2753\237B\274\344\"\3467_\017\224\2757\216m=\327\325\020\276u\345\252<:bX\274\273w\254=\303%\325<\256\361s\274>&L>\032\373\227\275${\206\2755#!\274E\341\021\275\213\315\246\275v%\205=\034\236k= \316.\275\260\334\354=U[\264=#\367\304<6\010#\276\030\276Q\275U89>v\361H=\034/\002>\276q\220\274&j\223\274@8\002\276Q\215!\273m\273\266:t9[\275+f\316<\2652(>\030;\006\2768\326\366</\361\252\274u\305\002>\261q\344=\207B\237\275(\201o=\356\327\017\276\022T\272=:\221\360=\305\275k=\002\326\210\275\341U\216\275i\245\341\274\220\260s\275\373\243;\276\376\276\205\274\255\260X=\377cr=\337\202\323=\3425\333\274\364\347 \275\337\275\362=I]\267\275BBH<\357%\212<u%\201\275E\201!\275\265\241\266\275\235\2172\275khM\275\345\237\r>\025\341\354\275\276\253\023\275D\230\020>\252w\013\275T\316\326\275\376\341\033=l\327\002\276\"KO>\301D)\273\362\2449\275\351\246\300=\354\312\313\275\256M\217=\320\276\304=rR\022=\231\235\n>\262\2004\275>\005\352\275k\276\310\275\347\373\n<(\343\003\276HG\016\276\351\276%>\034\317\345<\250\010\031\276(\300\326=\323\200\315\275\346\275Z\275%\354m=5\006X;\366j\324<\271L.>\366>\354\274\2030\222=\"8\230\2759\216%\275\0309/=p\022C\275\003\332\377=9\364K\276\336J\037\276c/\346;\243\0004\276,\270\307\274;\320\254=\177\211\351=\322\0221\275J\003\241=_8J\274\241\343\240=N\273\004>\323\222\014>\332\200\306=\211?\367\275\031\337L\273\241\031\262\274 a*\274O\206\320\275\275\257)=8\007\335=\264\200\371\274\026\252\212;\024\216:>\256\376\250=S\010Z\275\212\240\237\275\223\037~=\377\020\321=\230*\312\274\260/A\275\361#\247\275\372lR=\341\344P\276u\351{=\357Dp=\263\366\365\275\250.==\354\030\351\274\2626\237\275%\202\211=\256G\320\275\234\010\026\274\032\200\261\275U\307\261\275\321\373\225\274\235\242(>\341|\261\274D\246\002\276\302 \320\274J\220z<F\202\024\275\036y\247=\363Z\304\275\031\005\035\276\337\331\225\275\245\320\364\275h\230\371\274#\250Q\275e\312\334\275\357\340\313\275\313\251\304=\240O\316;\340I\276\273\311o\374=c\234\330<\251k\364=Y?\020>7]\230<!\307J\2741\325\370\273\327\030\232\275#%j\275\305>\373=\305\314\003>6EE=\312m\317<\240J\314=\372\270\300=\r\215\234=B\333+\276\337:V<\\\3516\274!m\341\275cB\016=T\376V=\326\354s\275\026\222\377=1\032S=(\024\221=\355\3670\276\223\370\004>\377#\235<\251\305\330\274\202MJ;d\316\006=B\242\007>\232\322a<\014|[=AV0>\000\304\025>$\376B\275V\370\n\275\"`\327\274J\247\035=\022\036z\274\374\306[=\350\306$\275g\234\023>aK&>k\255\205\275v\237\376\274\336\267\020>\036e\316\274.\324\312\274\351\262\337=>\022\352=\372\343N>\177\211\314=\330\204\2619xe\321\275\276\265\\=\247J\370=S\330\214=\217+\035\275opR=\207\236\021=u\\\317=r\307\211<\306\277\206\275\373}\341\275\320w:>\300\373\025\276p\243M\275E\334{<!*\300<t;a=!\313\304\274\215\2721>\375\204\007\275\274#\223=J\244\013=]o\006\275\037_\270<\300G;\275(\235P=8\010\301\275\240)\244\275\375\031&\275\247\024\271=q\237\'>\231v\251=n\227\004=<\014b=^B\250=r>\343=^7\366\271\265; \276\2537\337<t/y=d&\004=16\220<j\326B>j\265\361\275/\223\371=\270\371%\272\274\2517=\365Z\255=\313\323R\275t\316\023\274DA!\274\235]\000\275\321\0251=\027\253$>\375q\n=\346\3734<\342E\305\272{\240j\275\211\362\\=\247\351d\274\342Y\246\273\255J\375\275\335\001\261\275U\022\245\2756\374m=\316\226\276=?\210\366\275j~\010\276\347=\340=-4\350<{T\025=\003\364\332\275\312\177\203=\362\271\232\2750\256\263\272\271@!\275I\245\035=\005\242\243=\215\261\214=\177\037\353=\374rA\275\005\217\013\276%\315!=\200e \274\251^\326\273\223\275G>aK\020=\2013H>)\032\344\275\221&n=fb]\276\"P\030=\235P\007>\257\255.\275\262~\020\274\272W\036>\267n\033\2752\313}=T\331\020>)\363|=\204\367d\274\305d\033=\364\242\215\275\364\315\035\276\316\2267\276\230V!\275\355[\036\276|\026\r>\002k\255\275\016\207\260\275\211\344(=\364.\265<<Y\317=\372\260\254\274\215;\000\275\377\326-\276N\331\n\276\000=\241=\010Nd\275\216u\366\275&\010\025<0\253\237=\354\224=\276{{)>\030\303\211<\000\225 >\353\343(>c\342B>\371\230R\275\364\305\357\274Rh\275=\311B\271\275dX)\276\2071\030>\212l0\2762\230\243=\202=\367<\031\271\307\275m\006<<\024\337\207=\t\007\240\275\221\233.=\010\231\226<9Mc<\232wT=A\223\267=\343\240S\275\302.\302\274H\363\346\274\036r\276<\366\177T<>\0058>\376y\251=,/\211\2737#\343=\222\034#\274.\342:\276\351\307\227<#\253>\276\'\001x=\r\337C>\375o\007\275\tb\332\273\005o\210=d\333\305=\256\375\210\274\r)0;h\272_\272\210}\033>\266\354\370<\254o\316\275I\247$>=\354O=s\235}=\372\026\255\274\375\024\314\274\254\3033\275\241\317h\275\257h\000>\213wA=\374\254\'\275\266\364\246\275\237\013\024\275\253\264,>\304m\213:\362z\234\275\335\207\023>P\206\022<\2347:;H\341;\275\266\313k=\213\345\014<\227\212\312:L\227\231\274[)\260\275\241\\\273\272-\256\016\274Fl:\276l!\221<=k\202=\263\334^\275\201\367->\212\3631>\234\300\256\274\013\277\r\274\261\253\245\274\307$\227\275\244|(>\301{\333\275\3745\356=\262+\233;\016\033A<\033P\223\274\215]\213=\"&Z=\204{\327=j|\357\274f\233\262=\005\300\332\275\303\364\\=^\274\022\276\225 \023\275Q\320\017>\302\307\032=\224t\213=j\324q\275\014a\272<\326T\254\27550\373\273H\270\352=\t\017<=\361\004\322\275\001\312\375\275\'b\256=\177q\321=\031\342\274=\336\262\031\274[\240\267:\374\274\032<\237\203\365\27570V\273\251\306 >\3268Y\2763\355\253\273\223\260\340\275\223\206$>\221\313\307\275>H\'>\021\304\242\275\216a\017>\230\367\203\273\250\234\037\273\000C\340=M\351\\\275\373\354-\276\316\206\364=,\344\r=\371\252\">D\222\'=1@\242=\0257#>\340\320u=\373\022d\275={=\275\245\306O=\025\363\025\275\022\214\017=t\3124\275\347\363\206=\247Y\227\275\274\256\024=,\302u=\326%;=\020\304\200=\343\333\242\275O\0246>\022\204\230\275\263z\006>\342\026\006<\014\326\034=@\016\352\275w\t\370\275\267*=\275y\273\273=\023\206\300\275\214\207\333\275\206\2553\275\367TH=\367\312\323\275\315\273\n\275\025\274A=\020\354\034>-\3548>O\244\332\275\257\224\354=5\214\001>L\"\304\275Y\'\013\275A$\270\274\367 \013<\"\222o\275s\325*\275\301fS=m\035R\273a\316`\275\322X\366\274m\236\023\276\377\016\241\273\254H\025>\026\267\254\274\006\205\271:T:g\267\033\0274>\374\276Y=#\306\244\275\364\251\206\275\343\275\002=<\326\345=\275\r\333=\254}\036\275\340\325\344\274\377\032\230\274\3422\341\275\204\317\336=\013\215|<N\200\321\274 Z\247\274\376hF=g\n\321\274\203\3273>\241>\313=\242\231U\274\341J\271<\356e.<\207\256\260\275\377E)\276\0238\346=\3375\n\27515\351\275E{\002\276\240\275\374=\336\251\370=\320\037\032\276V\270I=mU<\275#\235\277<\307W\000\276\227,\001\276\260\234h\275\302\004\227<-\375\302=,\312\310<\321&\313<\341E&\274XP\326\275\372\025I=y\"q=\271\322k\275O\331e=FfB\274;\344\250=\302s\r\276\222b\337;\311x\037\276\010\201\032\275\232\3212\275};O\274-;<=\200P\246\275T\0323=\372z\214\275\220\375M\276\021\223%>\276(>\276\377\215\026\275$m2\275GD*>:;\027>\213i\256<]F\\<]\352H\275a\271\244=\252\367%>\232 \033>\314\006M\276\242\341\365\275\352\301m=gs-\275/tJ>Vm\216<\336\256\364\275\247C\237\275\223\226\332=\340\215\304;\353NE\275#\270\216<\345:\317\275@\271\223<\t\317\327=\273\303M\275\023n\221\274\376\345\205\275E\017\t\275e\035\035\276<\223M\275\323\3231\275\004\342\353\275\nz\001>\022+\224=\017\217\342\274\261\373\223=\252\002\321\275\366\010\310<\341\252\'\276\275\235Q\274\225x\244\275[\215\037>\355\013\257=\037K\347=\342\364\235=\343\256\221<\360\356\t\276$\362\334<\273\205r\275\302\013\205=\230\312\315\274#\237\025=s\323\270=\3000\250=\272H\257;],(>\350s\"\274T\211\007\273S\324p=\024u\033\275\004J\237\275\347\235\224\275OTc\274\263\363\201\272\365\034\264;{\035\264==\3576\276\025\3653\275hV\027>:\231\215\274H\271\201<\270_\243=_\177M\276\216\245\334\274x\363f\275\221\337/\276{\205\023\276\320\355\267=xY\033\276\312\252\'\276\276\343\340=\nW\361\275!\233\254\275\276\276 =\001\263\206=i\330K\273\313P\337\275\276\371\203<\327\033\344=\310\322\343=\217\316\201=qS\201\275\344\t\215=\354+\314=b9\354\274{\017\005<7\355\\<\352~U\274{J\201\275\035\357\r>k\324\021>=5\356=y\343\033\274\034\354\230=\200\000\265=\310d\262\275v=G\275\331o\211<,\200t\274\231\322(\276\366\200\004\276\314\244\377=\242\356G\275\031\372\203= sh\275Ht\351\275n\311\365\275R\363S>fI\373\274r;1=\3357\377=w\227\207<N\331->\200X\003\276C\204\255\2743_\235\275\n\276j\273\177Xm\275\251i\210=_\274\001>\264W\270=(\267\026\275\343|\242=\037J\031\276\375]q\274\345f6\274\353a\005\275\224#\260\274\222\311\035<n\245\275=`X\022\276^d\352\275~\311\034>\250\032x\275o\346\314</\333M\275\274\252\367\273\355\365\344=\016\216\027>b\341X=\266\0171\276O*\245<\261L\276\274}$\267<\003\257\205<P\n#>\020\362\226=\357\010\230=7\2175\275\356C\000\276)w8\276H\310\271\274G\001\340<\320\227\345;\036\2445\275\2215\t>\304D\311=d\355\300=\341lh=\2412\371\275\275^\257\274\301\205,>2\375\323\274\242\274\327=\333E\r\275\226\256Y=\313\205G\276\036\250\237=S\254X\275\245\222s<\365\020\311\275pJ*\275\266z\'\275f\007\373\274\013f\025\276\000fK>M\307\324=\334P9\275\271:U:W\2265\276 \237\303:jL\321<\017\004\236\275\274\271\275=\334\323\317\275U\376\256=\252\032\034=[^\361<\340!+\2741\317\204=\006C\277\275\224\375G\272(\244\326=\227\276\334=ja\212=\266\373R=\t\317\001\273Q\263\'>\363\333(\276<\r\206\274\206[\'<x\2317\276\036\217\r\276\317)\010>\226\341=>Nyu;\223\225\356\275\230y\371\275\366f$\275\016\273\210\274\332\341\222\2749\233M\276\230\320g\275g\315\210\274\020\326\224=\214\313\262\274\364=\347=r,\252=\221d#>\344\365\306\275\342Dl\2753B\311=\320\335->\327\372\250=t/\r=~tD>\032=\020\275\371\267\272=\363\241A\275\021(\306=\316:\247\274_\242\265</\302\363=\272N\374\2721\375)\275+hG=`9\004>\335\237\235\275\323\274\270\275\317\266\031=\013\232\254<\353\230\353\274\371\361\266\275\266\004\377<\272b\035\274\201\3775\276V}.\274\023\027l<\270\274\033\275|\346\204=b\335\355=\227\335\332<~\000_\274\373D\236<I\225\265<\0334c;\232\356\003\276H\200\305=@\316\244<-\234\311\274\027l-={\207\337\275F{\263\275\222\346\242<k\344*>\037A\031<\211\237\300=\020\354\323\274$\006\314\275.\201\256=\367\340#=E\310`\275\302\361\225\275\305\266N=\014\376\350=.\3276=\322\263\364\275\265\276\315=\302|_\275h\264\034>\356\005\370\275K\2579\276\356\001\261\275\366\247\016>!\032\022\275\343\363*\275\3510k\275\013\364\034>{8\372\275\312d\272;X\026\233=\004m\363\275\303;v\275R\003\255=\213B\305\274\010\357\022>\217\"#>\332\016?>b\200\005>X\026+<?\025\206\274\006R\275=t\333\000>\223\243\222\275~\351\035=\3238\272=\204\271\240=\343\256\217\275\310\360\023\276o\331\370=*\222=<\316\352\347\275r\2068\274_\365C\274\320:\026\275\312x \275\031\206)=\377\260\236=\370\213H<\267t\272\274\220\251\364\275~\234\267\274\347\370\304\275\234&\004\275\224t\374<P\023\037=\215zn=1*S=~\005-\276\336\312\332=+\310\271=\017V\016\273SY\202=(K\3358\345\227\257=\t\204\350</\226(=C\264\264\275\372\275\265=6u\221\275\352Q\362=\264\266\234=\271\001\206=\275\305<\275\305.*\276\3162\244<\211\020\370<\265\273\005>*#\262=ZE\026\273C}\227=\003\315\226=\233E \276\256u#;w\035d=\236\355\212=\306\257\374\274\214c{\275\033hu<\231H\214<w\351p=\n\241D=2\301\r\2746D\364=G\203\036>\2013\030>s\312\247=H\250\306<\372\"\237=\3525\307\275\2632\260\275\3273$=\340+l\275{\007\006=\023\220(>\020\014\240=\372\267#=\276\364\201=\027\022\274\275~0\001=\275A\336\274\203D(>\212\t\360<g\216\233=\027\025.\275\313mb\2743\327\232<0Y5\276).\322<[\032\016>\317J4;\343\311\272\274rO\231\274\n$\257\274n\340\340\275v\340\267=\327\027\004>-\"\261;\253\222\264=\243\021\334\275G\324\204\275\272\343\020=yb\"\275\306\246s=o\230\204=mg\320\274_\262\231\274\013\273*\275\022\314\222=X\003?\275\002P\316<w\030\245=Z\no\273\362B\337=\320T0<X\270X=\312>\006>\002\253\035\274\031=\260=\320\2674=\243|:<\255@\371=\237\205\235=v\237==\266\332\376;H\002*;*M\224=\\g.=\311v\312<\035\326I=\024\231b=X\033\310\275h`\267=o\323\351=\215*\037\275\344\360\270=\376\207D\276.\273.\275\375?8>\006\317\361<6\026\325\275\266y\227\274\316\372\226=\262\352\341=\250<n=\177\256\256\275\363~\270=\257F\016;B\244\356\275m\317\000<4\312\016<H\371*\276y<G>\310=\020>C@\262=qR\025>\230\322H:\266p\210\275$\350$=a\027\237\275\233N\366<\260W\022>\240\216<=\313\027\202\275&\010=\276-\025\325\274\364\214.\276\230\264\245\275(B\"\275C\224\004\275]\243\242\275>\220*=\212\357\234<\221wq\274\020\327\337=\240\024K=\257\335\320=D\t\024\271\265\037\032\274L\317\316\275g\177Q\2751/\027>v\301\313<\010\035\336<\242\270\020>\256\341\266=+\034\342<l#\341\275]b\273\274}\316}\275\370s\343<\213\n\246=\'\004d\275\374.4\275\341\030W\2746\260\251<\256\027w=\263D]<,(\036=\030P`\275.\351\270=\307\023\360\275\025\272\350\275\253\247\341=\210C\013\276\023\316\355\275\262\210k\275\243\343C=\325\026\">\254\352\240\274\337\231\376\275\207;\270=~C\003\275-\206L=\365\013\326=\275\251g\275\277\376\275=\371\331E\275\312\302/\276\227\356\311=\247B\375\275\034\364\326=\321\233\232= 2\322\275\254+\305=z\010F\275\300\2336=\014 \002<\366y\272<\305K\320\274\300P\027>XB!>\031W\275\275#l\250\274ee\200\275\354\345\244\274@\263\371=\345\357K\275k\027\243=ii\"\275{0\220\274.\"\037=\2231\234\275+$\224\274|\225\236=\037\205\005>\3022\222\275E\212\222\275\021b\"\276\313\0313=\007\031I\276\033r\347<\305\220\336=\232\203\036\275\362\"\256\275\373~\204<(\020S=\275t\233\274&\322\307;\003\207\314<\237z\016=\025R\244=\356\235\002=\261 \245;\264\222\025=O!\315<\372\033\024=\210\305\313<N\374\217=\357\346\'<\267X\">eR\370<\343^>\276\320\253\225\275R[\370<\200\272\003\276\246\250U\2736S`\274\226[\021\275`H\216=g\326\321\275$\177\035\276\351_\025\27694,=\313X(\274\365\032\346\275\013\005\203=\220c-\2754\0313\273\010B+\275\324]2\276\315\007\010>H]\003\276]16>\364\244\207\275\036\216\356=\217\014\320\275\372rK<\000\331\346<\326X\201\275\344#0\275S\200\200\2742\313\232=\274z\237\275Q\016\304\275w[,\275c%\353\273\000\220l<\261K\306\275\177\303q\2745\215\023>j\024\n\276\251\356\261\275\365D\004=\t\330{=\227m\014\276\376\342\204\275\201\337\235\275\331\356\247\273\202\247O\275\243R:\275u\016T=vy\340\274y\222\031\275\240\035\261\274\000r\207\275\234R(>\271T\276=I7D=\314h\350\275hB\371<\010\250\313=\203\\\331=\003}\251<\255\351\006\274\2109\363\274\214\262\260=fR\212\274\014\316\315\275\365)\304=y\341o<\014\335g\274\302\231\204<\225j\221\274,\352\200=\354t\254=\326\024\006>vw\244\274\212\217\354=\223\340\345=E\341 =!z\025\276\223Q\301=\223\t\203\2751\352\320\275\245n\266\273}\3414=Q\345\361\274\271\277\302\275n|\225\274$p?\275\214\3174<4\320\t>}\362r\275\257\330\262\274\022\345\026\276\026\326\271<\213bQ\275|\363\245=\240\254\255=\240\350&\275@e\274=J\003h\275\315\024\335=\201!V\275T\2544=?\343\221\275\254*!=\226\211B=\023\222\233=\344(\007=\270\327\305\275\021\177\034>VK#\275\301\212\232\275\n\231!\276\032c\001>Ao\026\276\230\356\333\273\353\302\014\276\023\220+\276\325\353\254\275\301C\232=\036\351h\275\332V\'\276F\205/>\002\331\026>=\222\201\275\304@\r>}\212\022>\377\365\263<\331\364\370=]\330\301\273\313j\301\275+^\302<\347\357\010\276\370p*\275\001\375\370\275~\271\017>\206\353\006>\t\372\231<\377\225F\275S\303$\276xP3=k]\246=Hh\213=\2755\336=\274X\276;\326\237\333=l[\340<\017\005\235\274\346\241a=\301\014\314=\212\013M=\251\366\273=\213\333\213\274\001\303B=-\352\212;\225#n=4^\335\275k\2466\276+.\363\273L\301\320\275\253\325\340\275{\353\370<\272\215\005=\350\302\'>&M#\276`\274~=\324\317\\\275dw\032<\201\036<=|\317K>p#\221\275\235#^=.\016\372\274\240i\007=\225\000C=\234\325a;u\227\262\273\244,)\275u-\227<|*\310\275\234=\352;\335;\230<\275\301P=u@h=\304\211\310\275\022^N=A[\327=\272\354\220=\336\006\313=V\0148\275,\000\242;\010f\253\274\022\342\276=\360~\001\276\371\227y<\350\331\014=\311\366n<\337#\262=\321\006\362\275x1!\275\r\332\351;\230Z\025>\336n\307<\016Z\026\274i\000\235=|Ri\274\0009\225=$J\r\276=,\211=\222\207\267<\361Pn>\356\355\245=\240wE>4E\277=7\201\031<\354\216\002\275\231^\010=mP\331=%K\016\275\224{\031\2766\226;=\323\361\020>\344\341a\275\254IL>\312\343\260=e\273\371=L\033^\275\026\323\0149Y\336\200\273\177\317\310\275~\214\005\274\247\233\361\273\346|\233\274\276\007\216<%(^\275n\211g\275\004\316\241\275\032\264\007\276\"\027\245=)\235\347:\017\177\244\275j)\026=|\304\003;R\317\026>C\237\005\275\014\260\220\275\316\270/=w\027\277\273}\303\256=\333\3043\276f\320\247<\304\346\374\275\316\220=\276T.\035>\0135T=\376\215\315\275a^\250=-\366\375\273p\357k<\356\3134\275\376\360\345;\204\223b\275\304\237\340=\365\207_\275\213X\333<Z\206\230=\264\227\021=Ak\256\275&\241\014\276\260Y`=\000 \000\275\262\270\017\276L>\236\273\335)\314=\377=8>\020\371\303=E`%\276\r\033\036\275\264)\306<O\035\367\274ry\030\275\267\257O\275\307?\304\275AG$=\014\302b=\3261\245\274\032\237\255\274\\`\337=&L\336=\004x\036>)\3022>\211\273\026\276\014\3706=\332\332\025\275rp7=V%\005=@xu\273<o\355\275\017\360\036=yY,\275 \021*\275\t.\001\275Xz1\275\243\340\310\275\023\333\203\274\035N\001>.\235\035\275\316\3132=\203\017\371\275\'iS\275\202\344e<\237\225A\2764w!>\333\326$\275<\331Q\274\033\333\207<\177\202^\275\270\332\231\275\347,\375=;\317\366<>\367\\\275X\330\254=%\313\t>\322:e=t\"\n=\317\240\254=\233\036$>\312\243\202\275i\014v\273\t\025\001\275a!\211=t*\017>\\\327\352=\306\345\326\275\323:B>\260[\203\274Y\261\245=\220\013\341=\220\023\032>*\207\313=W\211/=]\002\270=2\026k=\022\300\003>\337\002\233\275!\001\235\274\265\3324\275\353\264Q\275\007\'\345<\277\343\310=\336\267\255\274+U\365=\324\330\007\276\253\351|=:t\000=Mr+>\315\333\013\275\205\020\347<\n\200\202=\357\236\020\276\225\313\264=\335@\177=\322\334\217=M\252<\275\276+\035\274\255\336)\275\267\376\031=Q\300\317\274o\317\234\275E\007\031\276\014\"\277\275\037\377\215\275U_\002\276+V\204=\260\r\330\275\322\344\004\276S\210\235<\333o\232<\241+I\275\351Y\343\275\r\362+=\256\232\220<\261\\#<\267\360\225;\322\245g;\314\372\250=B\350r\275\030\344\325\2750\361\326\272 \223\373<\222\017.=\304\001\255<\206\372\364=\277\3035\276*2\315=\372\347\265<L\2654\276<W\260\274\230\275\201=6\260\376=G\236\325=r\034\245<T\320!\275\365A0\276\375\257\203=\234\260\253=I\247\350=\371T\201=\261\374\020\275Q\016F>\000n$\276\210]\213=\356g\212\275\036\372*>\267\332\n\2762/\276\274\347y+=ru\251\274\355A$\275c/\337<\177\020\377<}\037\305\275l\036\354<\'\217\243=\362\236\234=\rp\266\275@]\221<\363`\315\274\276\276\013=q\225W\275wX\270=\220\\\363<\016\3050=(\377\202\274,\302\263\275\326\3418=T\235_\274A\303_\275F[\023<T\270\013>\304\305\037\275+H\324\275z\301{\273\203\020G;\344n\236\275~\022\201\275\266I^\274\242)\314\275/(\323\275Pfi\274\350\025\n>\3406\206\275[z==x.W\2757\027D\275\201\227\253=\361\032\301\274\331+\021\276f ;\275\342\373\320\274\332C\376\275p%\216=\226\324==\033\311f=\214\237B>\214Y\305<\032b\030=\032\307\004\272x\201\037>\020{:\276\304\310\177\274o\247\373\273\300\003\361<\330\030\370=\376 6\275L\r\356\275\266I\307<\010KU=Q\020\221\274\237B\222\2755\320\343\275\224o8<\357\305f\275q`\006\275H\017\t=\324\007a;l*n\274\251\252\340=\357\360\212\275\017\251\024\276+\350.>\314\377\343\274x\357\206<\014\254\266\275\nV\202\275\343\346\245\274~\324\252=\305\214 >|C\240\275E\360\360\274\333\210\032=7(/\274\271M\275=\0063G>\204\343\272\274?Om\275\220\0366\275\342\275i\274@\323\034\275\030\0258>\275\263\035\275\304\312n\274\306O\237=\274\266\244\275|Hb=v\312\022>\027\365\370=\370\266\370\274d3\330=\233\303\215\274\324\0076\275\201A\030=\303\202\250\275\302\025\265=\233\026\010>F\313\345;\300?\244\274\247\254%\274\247\263\r=\r\217\326\275\326\371\376\274;\326\005>2\351\231=\207\241p;\023\210\312\275\004\303\201\275\210/\337\273\031\007\002\276\231(\234\275,V\327\274a\264J\275\010\201\202\275\005<\202<\212\321\260=:\260\336=]<\234\275\031\302&\275?\254\n\276\247\205A\276\244j\034\275\366\2666=\314\256z\274%hI=\230\002F9\033\337F\275x\\\263=\360\205\262\275Xc\364<\037\252\213\275\200\211\363\275}\3767\276\357`#\273\361\005\256<\337\034\240\275[\007\346<\026\374\360\275\354k\002\276\'\276\337=\220Z\255\275\303\247\355<\0028\254\274\3168\251\2742\030\211=\333\007\255\275\332M\241<\001\272\245=\031K\007\275\3375\227<H\016\232=\273/\277\275\006.3\275\207\016\'\276\243\034\333=b+>=4\207\341\274\236+\241\2754\302\032;\206d\302=\301\017\341<\227l\r=\004\2754\276\232\207\017=\206^\027\274\310\224\341=\330{Z=f\256\370=4\037P\276\217\014\250=\204\2411=\326\037(>StA\275!A\207=3iZ=\267!#\275\271\261\030;\032<\224<\333Ep=v\\f=\275\n\307=\366!\024\276x\3707\275{\037\021\276\003\254\177=\265\003\343\274\373$k:\36778>\2331\343=Op$\275L1\321<#.\376\275\025\203\325=\001_\334=\262\345\252\275\323\021\007<\277\026\274=\013\336\'\275\325\3621>j\320\211=\247\236\371=Y\215\344\275}6\'<\235\250\313=\261{\035>-D\025\276m\262\354\274\rM\336<H\363r<\264\320\007\275\010%$>:\232H\275f2\377\274\353A\t>\010\364\277=k2\333=\241)D>\030\376R=Q\315\r\275O\201\310\275\252\333\266=\227E\334<\376\301\201=x\370m=\234\274\212:\007N\332=i\\8=\370\236\016\275\367r\304\274 \177H\274\234\201\371\274:,\236=\261\"\253<5O\251\275\370\261\317\275g\232\303\272\244\003\324=\300\017\214\275e\345[\2755R\005>\314\035\213\274\340\365\273=\271\350\021\276\252\357\310\275lu\307\275\246\350\010\2738\'\225\275L_\223<\276>\004\275v\016V>0\201N>\322\342\030=e0\306<\361\207\375\2755J\035=\321D\001>\rC\351=b\223.\276\312\224\252=\220\261+\276f\202-=w\376\341=r\372)\276\347\036\336\274\320?\214<\232\030 \276\321\037\201=?\272\177=l\227\272=\206c\352\2750\241\312\275\250@\342\275Bj3\276\256\241N=c\257\001>K\220\t\274\t\200\027=\301\204\201\275\\\275\233=\365\367\036<M\331v\275\354\346\235=B\275\027=\201\226\014\275\251\240\007\276\022\224\270=\376\325\373<\271\271\236=1g\016\2766\277\212\275\210s#>5\300\220=\320\362\321\275\200\347\026\276X\244\234<7\314?>\255\035\n>E\001\345=\324\353\377=0\203\212\275i\257\320=e\200\274;@w\211\275\314\010^<\321\331\215=H\330\023\276\230\200\222\275\341C.\275bmT<\333+[=a\333\214\275C\213\033>\026\213\'\276\2617\230\275\2401 ;\365\302\365=\211g\223\275\344\303Q\273\307\355\322=Z`:>\270m\032\275\354\035\200\274\324\264\214\274\227\037N\276\261a\371=\'c\352<\020\237\254\275\264be=RD\027=\372l\342=}T\315<\t\340\221\273;S\245\275\376\036\031>`%\017\276\232h\332\274E`\327\274\265\241j=\213\351\227\275\300\363\033>A|\037=\273\224\217=\320\017@\276\"\304\335=\311\212\235\275\373J\225=\242\354)\274\331O\201\273\341^]=F\330S\272\354K\030\276\221x\331=\320\002\336=T,I>.\217\345=\212\355\220<\332\215\001\276+x\322=v\260\274\275.\327\014>\333\n\212\2753f\t=\362\207\265\275\231V\034\275\316u\301=\004\351E\275d\360o\275\003\014\220<^\363B=\327e\032\276T(~\275\027\255J>\225M\373;\274\022`=\343\005\345\274M\206\006\274#\002\213<\020\233$\274\344\256\250\274\260\224X\274K\3475>\201\007\022\276}i!\276\3719\322\275\036\237\361<\373\303\352=\377\301\352\275\233\334\207\274\263\026\272\275\356\020J=3)p\275(dq\274\344P\211=\366\216\273\274M\026\240\272\375,6>\203m@=\302\265|=6h$\275\354\223\212\2744\010\t\275\3051$\276\021p\374<\r\027\320=/\033j=b\t6\275:2\215<\2370\022=3[\023\275\360|\227\275\251\355\227=\2277`<>\006\r\276\031\276\237\275\254\334!\276\370\004\027\276\372\311\014\275\301\203\245=\010\001\202\274\337\261U\274\202Y\204\274\365\005\254;\301\316p=\177\376V\275\254\313\013\275U5\020\276\326\3507>\324\217\334\273v\2423\274\"\314\237=\374\237\226\274\204\364\027=$qi\275\244\337n\275\220\366\037\275\252\023(\276\227;\332=\325\265\033<\350=\274<p\242E>\257%5>vw\250=L\245\277=\215\002C\274\303.\304=\310p\216=K\225\203\275\n\362\245\2754\213\314\275\271W\007=6x\274;M\013\270<T\342\345=\345\002\304\275\031\205\304=\207\274\256=`\000J=0\372\321:\216\202l\274\215\023\310=}\241(=,?\241\275\326w\303=\240\202\371\274\331\244t\274$v\342\275\364`\035=\316Q\274=k\344\201=\361\200\027>\313\371\311;\001b\306<\006@\257=\230\233\214\275\032\252\n\276u\211\304=%\366\n=Y\312\265=\177<\214<\267Tx=\235\313V=<ZZ\275\202\324\266\273\363\327\223;\177\0209>(s\327=:\315\320\275U\250\274\274\257o\244\275J\360)\276\201\006Q=\325\247\236\274\316\2525=0\377\022\275\022\201\t\276#\242T=Ak\332\273g\247E\276\301\344q=`v\031=)\226\204<\301\355\353\275p\006=\275\203\265\227\274\364\026\271\275*y\321=\356\263#\275o\311\243\274\371:\220\275\364\027\225=\256\313]=\344\233\025\275H\307L\275\304\314\264\275\347\337\006=Y\240\023\276\251\345\226<\3746\211;\300\222<\274\327A\025>\260\336\017\276\331\032\222\275\035\347\254=\314\306\274<\255N\264=o\303\235\275\301\"\211=i\312e\275\322\256\335<\003\264)=\317,F\275|%\336=ys\r>e\325\212;Fx\267\273\006\320\307\275\312\256V\275\253\205h=\\zd\273O\202L>\324\304\327<\2163\202<F\311]<\376\306\004\276Yh\312\275\002\021\274\275i\310\324=\353\364\200\275.\013b\274\305xj<\216O\262=\245\200\220=;|\257\275y\237\r> \032\213=\254\262\013>\023 \313\275\013\\C=1\204l\275\232\245\222\274\326`\226;\325~\352\2746_\030\275\363_\030\276\261\301\233\275\203\230\020\275\2176;\274\306\225\341=\344\245\351=\267&\347=\323\003T\276\216\004\216\274\315\002\210=/\347>\276=\353\357\275~\3466;!\317\312\273\010J\344\274b\352\247=\006\366B\276s\272S\275x\351\304<\364\246\237=\007\205\r>W\245\272<\305.\336\274\370(\347\275E\227G\275K\376\374=\257a\037\275\260y3\2765s\213\274)\010\376;\332P\034<1\t\252\275\200\224\213=J7\251\275o>!=N\030d\275{\307a<\377\023\006=h\200\030=\366\212<\276\212\\\242\275t.\250=`\014D\274K\026I<\005\016R\275\276BC<;\237\177\274\364\177y=\230\242\300\275\331\316\364\275Q\3713\275m>\000>\330\213\035\275\361\335\315=Z}3>[\262\205\273\340\332^\275\013\224Q\272\237w\355\275k\340\007\275#\254\212=\330\265*>\320\313x=\265\302x<\221TL\275#\"\372;\010J\007=i\363!>w\021\272<\372 \010\276\367 \250\275j\177m\274Z\342\003:\305\315\037=n\t\255=D\217\340=\3069\234=\023\023\001\276\213\016\241\275aE\375\2746\330\343\275\375u\261<k\020\030=\361L\032=\303w\014\275\214\304w=\027\\\027>\346Gz\274\036\030>\276A\334\242=\357T\304\274I\212\276=\235\207\326<\\\376\272\273\242\0074>\334*A\274\272\247P=\223\377(=\036\306I=\325E\356\273\241j*>\327y\221=\207\201z=\021\220D=+\222W\275xK\342\275!\376\323\273~\302\266\275\265\256W=\200\013\306\272\021\266\212=\314Y\023>\353\205\220=\315-g=\350\326\371\273\327#\210\274\277k\301\274\343$\334\275\362~\014>\371\r\030>Br\201\274w%\245\275\262\203\013>\001\271\332\275R\225_\275\303\254\214\275\301t\233\274CE\344\274iA\211\275l\200\217\271\021\301\005>\356\243\223=\035\025\301\275/\230\266<\232\215\246\273\200\2600>\003\260\207=\240\256\317=2L#\275S\365\222=\177*\345\274\004x\312\275N\3338\276\232\240\312\275\327\3526<\227\323\277<z\351r=\354\344F=&\213\322\275\341(\235\275/e/>\233\033,>u\257\216<+\213\332<\314`\264\274\263K\255=^\306\257:\017\250]\275\347\260b<pz\237\275\261\373\325<\nn\007>\371\243\267\274\3539\035>8\202\232=\006\225\030>\264\355\253<\271\202\036>\376\263m\274x)\222\275b\361\033=\272F?\276\314c+\276c}\270\274J\n\\<\217\356r\275\326\034\004>+f\236\275e\233\\=N+\031=\020<\262\275\315\262\314\275\364\377\322=\361\336g=\275\231$\2746\254c\275\273\336\005\275\010\345\207=,O\261\274:\251\334\274\221(\275<\261\"%<#\304I\275E\300!=\201\272\332\275\r\224\233\275\241\335\270=8m4>4\354F\274\312\344\014>\272dL=\027;-\275\023\353\032>%C\235<\204g\004\275\r\251\266\275\022\276\027=\325\377<=\240\037\232=\004\200\244=\274\341\001\276\360\003^\275\344\230\346=\327\242\266=<9\010\275\342\327)\274\263\030\234=g\311\234\273\334E\250\274z\014\034\276\370\363\217<W\225\211<\007\211 \273\326`2=A\307d<7-\277=\217\261\327<\334\364\317=`\216-<\016\252\220=\264O0\276\376\347\356=\271\0254\275\255=`=E}\341=\037\305M<yr\236\2750\325\'\276<\246&\275\014\230;\272\022ha\275\217\033v=\256K\353\274\313r\306\275\373h\205=\247\230\264\275\326\t\233=7\247\021<\004\013\333=\265\333<\276\353e9<4\223\321\275\272\277\330=\252\031\035\276\376\205\230<g/\317\274\002d\315=\027SF\275\033\303\375\275\200~]=\355\220\013;]\022~\275\325\005\024\276\243\342\340;\302\241\322=,xi=\377\364>\273kAq\275 Z\373<\320\265\261=\227[\312=\266\230 \275={\320\275Y\246\366=\201\362.\275JON\275\021\311|\273\036\354\223<\014@\002>\277\313U\274\023\316\230=\r\230\006\2753*\265:\263A\016>\270]h\275\005!\326=\201\355z\275\321\257\005>\345\\\024\276|\0329=]=\002\276=\277\023\2765\222\360\275\025\241\336\275DI8=\332@\322=w\333\023>\355\022\303\274\267\301\003\276\375\206\333\275\357\272\372\273(\372N\275\252V\333\275\264)\006\276\005\244\321\275\214\252k=\245\252\245=\243\253\033>Y\253\005>\303\315\376\275\277o\013=Ys\347\275\247\315\233=0\251\206=\335g\343=\212-\n\276\305\026\255<\346\303+=\336\214\024<,T\230\274w\224\213\274\200\002\322=\252\252\226\275\311\262\263\272\320\331]=k\205:>e\336\021=\311\240&>\3723\375=]K\220=]\215\236<a\351\231=\207?\034\276\277\332G=\261\231)=j\343`=\234\256-\276\227\3045=GG4>\270\253\304\275\361v\023\273\217\023\244:\303\360\021\275\030\221\241=(\277\277=%\354\330\275\271&\304<O\250\216=\257\264\335\275\356\003G\2751\257\022\276X\335\243:~VF>{\262\014\276;\207\030\276\220<\306<\016\\\016=WL+<\211D\021>\203\3446\275\300\354\231<\371\361X=\234E\343=\357$\325\275\254\233\215\275M\335\345\274\364E\347;\036\214\277:?\330\t\276v\346\013\276\307\0214\275or\335\275z%\247\274\303\357\204=\212\025.\276&\316\316\275\267\214\003\276U\326x\2754\224\025=\257\rD\276\373\306\010>\231Pq\275cl\007=\313\240M\275\230\021\343=H\020\202\273\363M\017\275\030\205\217\274eH\023>\247\237/\273^#\336<\034_\000\275/)X=\237\'\371;\216N\253=Ey]\275,\257\023>\227\342\224=\\|\242\275]\377\350\275\305\3535=m\337\300\275\234-\2129<\006\312\274\331\370@<\0066\314=\344So\274\'\271\244=\273\212\224=\271\r\263\275\231n\024=\016\350\314\275<\244\333\275~Y\275\271\324\006\235=3\331\035=*XZ=\250\016Y\275<\313X\275C\214\017\275\241Y\005\275\226\331d\275\350\t\233=Q\320+>\272gK=)\311\003\275-q\203\275\360\232\256\275\331\275\300\274\377i\234=\005C\304<{1\023\276\001w#\275\326\037\025\276\214\342-\276\262\244\206<\247\326\361\274\325\025\213\275\216\005\034>N\316\016>\tE\267=\246\331\351;^\315\036=\0160\231\274h\256\344<I\363\303\273\236\3633=\2208\364=\234N\343\274L\355\374\275t>\364\275\275\024\362\273V\200\020\275\034\246Q\275J}\255=\207e\207\273\026\0056>\334H\032\276\310\347\r>\323\331\273\274\023\272F>A\310\362;\3726\223=Z\244\330=\264\256t\275\222\000\336=\372Mh\275\030l\257\275R\031e\275\344\302k\275\353\223\034=s/\216=s\t\037\275\036T\267<@:C=\204\247\216=J\352\352<\360\354\356\274\032$\213\275_\264\275=\311\345\365=\313g\300\275\220\261A=zi(=\361~\226\274\005\315\002>\304\356K\275\243\017:\2737\023j\275i\233\343=\250\236O\275\304\265\301=\200\335\202\275\2211\342=\3355c=w\340D=\307\007\020\276m\"\310\275\276\335R=3C\270<\375\031\035\275\330\302$\275Im\252\274\262NE\276\030\314\037>\375\022P>!\006\343<-2/>\331\367\300\275\2274\354=\255\237\303\274K\017\371\275\253K\016\276\203&\004>{\032U\275\377\3115\276\241\005#>M\001=\275c\260\027>\353=g\274\026\354\257\275\315\rI\276\265\344\304;\007\332;=\3764\002=\271\315\230<\323\'\363=g\205\265<\225[\020>\304\253\344\275Q\031c=\262>\036\274\233\275a\275\267e\316\275\242\"\372\275\251\364\353<\033\375Z\273\262Y\245=\325\317\354\275\010\242\326<7\037$>u\225i\275Wk\364\274\216\321F>\324\236\002\276i\212>=;P\235<:2\353=\200\245\254=q\3628=q\325\222\275 \321\014\275J\274 \275M\354\"\276\014\010*\276sQ\037=\023\236E\276\311\352J\274\023\257\260=8^\334\274D\301d\2736\327\242\274~v\272:p\341\273<a\320\022\276\241\013\304\275\311\3019=UX~\271\233\031\350\275\024r\352\275\214\216\257\275\356^4\275\255|\266<q\254\033\276n\363\271<\214\274\221=\221\202\305=\327^\250\275\200\376\027>\307\303\331=\301O\371<\313\"\301;(d5=\021\036\203\275\2355)>x(\006\276\250@S<\252\212\317\272_\375\034\276\350\013\360\275\351z\302\274\'\370\001<(\343\334=\323\225\017=IQ5\276\027EY\274\272\204\034=}\234\232\275\003\211\326<\242\327\265\275\237\323\004=\027d*<\254\217\215=yi#>i\235\036>p:(\276\224\315\013>\302k\222<\233\215*=\003P\301=\002+\'\274\253#\204\274\311mX=\007,\310\275/.\347\275\2120E\276\331\300\342\275\006\306\025\276\030i\342\275\024\217\r\276\013v\271=V/\232\274)T\231\274\322\337\024>\372\345\231=\360\rK=[b\316\274\234\215\003>\344x\310=\374\266\251\274\343\3532\275\016\020\346\275U\304\240\275)\006\027<~\3411\276\270b7\276V\005-\274\355\006\261\275w\010\321\274\365\3607=f\257\255\275\316h\206=)\323\200=\017\031=\276\020 \006=\037\312N>\274]\263\275\225~^=\341\022\r\274\036TM\275\006\261\362\273\327\315T=W,\200=?f\017=\256\006S\275T\324\266\273\273\377\r>\324i\314\274d\003&=\353m\330=t\302\212\275^\367s\275i\363\376\275\352\331P\275\271\237\023>\211\017\344\274\260%\237<\030\334H\276g\237R=[\220`\275\315\331\000>\024yO>\226\205\022=\205\2607\272\335\305\363\275\330.&\276\373+\260=\307QB\275\021\351a\275\365\206\312\275\333\021\t>h\237\233=\222.\267\275\0271\206=\324\350\034\276\023\033\334<\025\304e\274\334\321)=D-\235\273aVc\275\206G\322=@\251\317\275\321M\306=\006\210\000\276\021\377\376<x\211L>\253\250!\276\374\016\023\276\231\253\323<h\364\217=\226%\332=\234\335\266=m\014S=\330\216\256=RE\336=5\236\037\272\326\355\212=\246\211\303\275G\000?\273\334\207\025=\272\030A\275+e\037>\240\277\t>u\243(=\"\305R\275\311\007\275\275Rd\310<Rep<\247\024\205=D\027B=\337!\240\275V4\341=I\205\375=\033m\223\275X\302O\275L\225\001\276]\225\264\275\033=\200\275\337\207\220=\001<:\274`e\257=\t\251\\=j\330\007\2754}\017\276\355\225t=\300\305\240\274\227D\025\275n#\220=\340ku;~jh=\037M\034>/\267\001\276Ic\002>\265\2427=+\3623\275\235\201j<t+1\276<H\016\276\211\003\371=^\346\000=\331{\033>M\n\203\275U\317\202=|\nT<,\002\365\275x\2434\274\247i\273\275\310A:>,\334\000>Gi\343\274\364z\234\274\377\002.\272\016\255\266\274R+7=\277\242\006\276\373\017B\275\323\330\004\276Az\354\274t\330I\274\306\200\327<\246\017\355\275\357\270\304<\315\344$=BlJ\275\237\341\305=\251\006\302<&\354N>_-S<\267\374\325=,\326\244=\222\234\026>\224\004\001\275\353Yg>\237#\377\274\367\273^=\3315\236=\214Ge\275\333^\021\274\307g\252\275\347\265\036=g\013r=\2544T;.\264\277=\306MG\275. \344\275OM\270\273\017\r;=p\256b=\t\010\035\2759k\316=9>]=qx`=\275\002(\2765\322!\276%\332\023>=\375\227\274\266\023-\274\272\300O\274q\223e\275w~\035\273.z:\275\211K\266=3>\022>\263\242e=\371\014Q\275\'C\033\276Q_\303=\356\352\025\275B\227\345\274\251\266\372=\276=\246<P\371\372=+r\010\272\264\215\301<\014\252\204=\007\266\343\275\373pX<\345$\245;\372=\340\274\263\265@\275\021\253\223=D\307\333\274\231\020\344\275J\341\003>r\307\371\274\016\303\010=\020\277L=`\231\020\275\245R\014=\316a\265=c\263\037\276>C\237<C\345\213\275\003\302R>\3737\010\275W\'M\275dT\005>\245O\317\274\003\345\251\274\360s\305;\361b\272=v\024\236<\325\372\202\275\307LP\273l\033\227\275\376\334m\275t\350\032>\225\241\315\275n(\277<\"\273\210\275\025\351\343\275\222\213\254\275J\030\n=\311\033\237=\211d\273=\313\2137>\352\245\267\275\323\016+\275\000b\203\275H\306\000>\254\211\\\274\274dn\275\034\372@>\216v=\275`W\003\276\212\275\3409\335\235n=k \036=\032\250\325\274\311\364w\275\3642D>Ps\215;C\2725\275n{+>\343\371M>\350\233/\274\326\3060>\375+\234\275i\2018>_1\357\275\353\373\215<\021t\271<+m\013>\240\333z\275&\267\022\276\003\210l<V\205\232\275mj\020\276\264\0262\276\365\334\177\275A\200\013>*\374F\275\024\374\220=06\037=\262\256\224\275e\220\206\275X\361\205\275Z\343W\275\344!=\276\266\nm;\325\372\354\275\"?\203={`*\2751R@>\002\367\357=\337$\240\275\030f\021\2753t6\275\244\2556\274\267\236w=#\031\265\275R\334\246= \201\235\275\271\364\036\276ME\234<gkI\274\354w\226\275eJ\306\275~73\276\300\257r\275\202\2654\274&p\005>\217m\000\275\006\204\216=\007\226\"\276\234\273\026>\272\372Z>\230J\273<;\3268>\315\260\004\276\2659>\275\334\235\006\276yF\"=hV\224\274{i\016\274\365s\022\276\346X7>\275cf\275N9\224=\2544C>\315\240S\274`\235\266<x\264\223\275\211\234\376<\366S&\275\017\351\250=\010\341 <\265O\333\273\311\320\364\274{y\300=\002\032\024\2765\030g=\220^->\251%\244\275\331\304\263\273\371\204\330\275\272c\356\274\341\210\351\273\225\333;=\305\0023=(\264\222<\032\317\270=\234\035<>>\225&=\026\363B\273\261\342\330=Y2L=d\027\242=|\323\336=E\366\275<\200\246\025\275\317\315u\275\242y\226\274\3003\221\273.7\331\274\265\322#\276[\276\370<\213\030H>\302\347S\275;\201\306=3p\254<\373\267\246=\350*\254\275\302+\274=\212\264\002=\275\310+\275\221\340\225\275\335T\300==[}\275@\027N=\233i\036\276\312c_=u\205\341\2755\335\003>6i\371\275b\001\256\275\253\317F;\227\233\353<\273\030!\275\227o\271\275\301R)>\247v\334\275R\204>\276\277\362\022>\340\013\217\275;Vk=\216\036\356=\t?\314\271\315]\301=\256\244 \276*\342\257<!x\360\2753x\377\275P\204\237\273\377\007\017>\244\2659\275\251\027\032\275\353I-\2752\362\203=4\t\350;\001\331*\276a\272\367\274-]%\276\227?\003\276QV\334=6\252\003>\005\200\016\276\262\265\250=i\265\227\274cH\203=\343\314\241=\217\024:\275\346=\'>\3114@\271\211\000\010\276\376\350\216\273\005\356$<\254\240\200<\325\3239<\301\353\270\275o\231`\275\327\032\200=H},>\305\"\014=\241\266\311==\236\313\274\367\271/\276\202\234\315<Z\207\332\275\221j\266=6\353J\275\027,u=j\241V\275\003q$>\336V-\273\027\3725=\2168k=AZ\216\274b\002\273\2740c\032\276\313\t\202=(q.\275YDB\276w\346\317\274\231)\254;e/7\272\2304B\274\2031\377=\013\273\033>a\026h=A\260$=\314+\206\275\032};=\337\367\240=\316<\365\275\212\217\331=\225L\013<\247|\210\273\214\206q;\357sJ<\351\340\347=>&\331=\226\330\024>\325\002\226:H\355\226;\312\301O\275\275\317\236=\362\0203\276\001dL>\242\353\225=2/\352\274\"`\250=Pk\204\275\276\336\213\275&\373l<28\023\275\031Z\356\275$\211\377\275\251\372s=%!\312=`\257\207\274\210\200\004\2751\2414>\033N\300=\320\325\013\276\235\322%\276s5)<_\246\334\275\342\312I=\222\224\330=\213\212H\275\363\031C<\001\362\006\276\221v\214=\266c\300\274\223\037\320\275\236V\001\272\2312\212\275\205E\034\273\254z\017\275\260\246\017>\326\377\257=\311mO\274\020\367\033>\022\342\210\275\000\262\254=\354\214\n>X1\275=\014\361\214\275K\003\260=TW\303=n\322\210\275\316\232\265=\333\244\340\274\332RI\275\313d\033=\316\251b\275\354\336\030>7\212+\274\244\261E<7\037\244=G\247\003=o\n\006\275\343\013\213=o>\000>\317y\3268\367\361\314\275\255\244\204\275\353&\252;\227\326\233;\300\252\234\274S9C>\030E\343\275>d\266<\332v\247\272K\242H>p\030H\272M\300\367\275\3300.\274\243`.\276\'\302\373<\325\370Y\274y\033@=\357\373\230\275\003\031\346\275\335\365v:|\202\232=\rp\273\274!Y&>\241\263\220=\354\021\325\275.&\251\275\254,5\275\341\306\032\275\032\312\310\274\264v\301<\361\260\232=\013^\213= +\362\275#B\013>\211\224N<\345\031\321<\372\355\317<0\220s=\027\242b=\025q\022<\355\026J\276L\342\217\275\322(\253\275<\277\335=T\0023=\202\315\014>\263\2769=o\013\004\274\357\277\231\274x\032\372\273\303\233<\275v\250\025>s]P\276Vq\266<s\336\234\274\323v\333\275\350\2674\275P\340K\274\023\017\003\276\276\014K=\364ry\274\204,\t=\270\3754\275S\304\034\276U1\374=*\004\020=&\315\331\275\032-\025\275P\222@:\275\306C=nN\003\276~\217\023;\307\234!=\361l,\276\271@1=\nMN>or\267=U\035\031\276\361t\365\275\307\251\336\275\243\021d<\377\337 =t\260\201=\237\344.>\213\274H>1\222\211\275c\200)>s\220\371\275\032Z->\365Ep\274\273^\220=1\342\234\275\317G\220\275+\3009>\016\235\207=\017OB\275\357\371\265\274\316f\353\275\240\333\237\2751\217U=\017 \252\275\262\024\037>*\324\316=e\213\003\276~\035\377<\341M\276<\244I)>\264d\302=%\335_\275?\255\301=\302\347\035>\276\013\005\276kH\205=\363/\035>\354~\013\276 \ry=\365\202N=Z\365\302=m\331\322=\265E\227\275\345J8=\023\332\356<\200\313\036>\260g\207\275%\023K\276\037\253\036\276F\317\'=\270\007\346\275\307\351\037>^\206V\2750\350\240\275\325\037D\276\216\202b\275\010\274\266\272O\357\203=\213\337:=\273k{\275cW\252\2752\301\026="
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "network/weights_1"
      input: "^AssignVariableOp_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "JRI<\177\353+<\360T\322<\037\376\314<\303g\246<\357Mo<\325o\256<\023j\242;\335\014\235<\255g\237;\222\016\033<\037\332\363<.\271\006<,x\332;\345\256j<d\274\221;\246\217\t=hA\270<\034\245\232<\020\031V;!\353\014<t\270\264<\326\ry<s%h;\350\301\235<\354\231%<d\374\020\273\034\273\356<C\250(<\311\\);\n\327#<\214|*;\333N-;\350\377\231<\204\361\377<\026\232\035\273\252\027\347<\217\270\364<\022\t\006=h\311\311;7\335\224<\030\372\201;2\374\233<\264 \242<\246\273\363<6\363\226<\'\0262<\211\211\r\273\024\320\270;\023\006\264<\217\315\343<\266\307\343;\246\361\210<\263y\004<\345\002\370<\360\233F=\251O\312<Q\263o<\266\014B\271\213\323\345;\230\260\004;\n\327#<\301\036\r;0\272b< \034k<\226\210{\272C\205\213;L$\356<Rk\337<\365\265\205;y\366\267<\277\031B<\252\035\345\272+\247\243\273\323\200{<8\324~<\343\364\246<\tJ\256< y.<+\250\335\272B\021\210\271\177a\312<\341\321l<\037\253$<\201\330\337<\020\026}\272g\t\245;!$\t=/@C<\235\373i<\206\231\365<\331m\222<m \325;\230\232\253;\007&\357<\343aa<\227q\016=\206\243\324:\275\355\272<\017\022N<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "network/biases_1"
      input: "^AssignVariableOp_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: ";\326\262\274\374L\252\275@\340\317\274\347\260\226\275\205\003.>\221\007\205\275\365z\362=\351\326\024\276u\2616\276}\277\334\275\317\010\024\275\351\335\222=4\014\207\275\262^,\276\2267I\275\317\336\263<\353\033\334<\275\270\306\273\323\'\202=?\364\225;\330G\270=\311\334\306=\016L\260\275\353\234\346\273\347\331\357<\261\025+=\245&V\275<\313\204\273f\363\327\275k\004\003\276\212\035r=,R\241=s\004\332=\376\311\034\2764a\263=\251\343!=/\211\255\273\332\317\024>\361\200\221\275:\026+>X\253M=#\037\024<Fx\216\274\301\007%<\320{v=*\246\260\274\221\236\313\275$B\226\275\365\313\"\275\240\\=\275\0234B\275\223\344\274=\017/L\274\214EX>G\"\026\275\371\211\244\275?\211\013:\265\215\301=]\036?\276\304\225\020\276\001F_>\036E\371=.4\017>\220\267W;\256 \234\275\016\243[=q\240/>\321\334\263\275\311\276\323\275\201m\\=\274\201#\276\336\243p<\n\300\212\275\325\336\211\274\226\274\343<\216\201\227\274\250\211$\276=0\370=\203\370\243\272M\332\255<\033\355\250\275\262\303\323\275\316v\343=\375\217]={?)\274\311\300N\275g\260\224=\344\327\264\275\206\356\264\275\266\257~\275<2.=j\n\244<\314t(\274\324\361\224\275d\231\235\274\216\361\023>\033\311\023\275\251\020=\275\231\220\323=\375\324\262\275oY\251\274=\210!\276\224\320,<\231\336\004\276\264\233t=\301#*\276s\227\265=k\024\252=\304?\324:\365M*=I\301\031>9\373\344\275 [\263\274\234\275\201=\226\215\323=ev\001<#\267\303\275\017\365\223=\r\363\016>\242\354\253=\231j\014>\360{\274=\375\263\275=\031\374^=\372q\252=G]\031=\032\275#\274\256\230\270<\357\360\005>\237\342\322<\232\371\336=H\205\337=\324\276\034>\"5\007\276\316\374\032\275U\3120=\020\274\204=<\270i=\014\003\274\275{\321\350=\032\0055>\241\331\214<w\004\226\273\340\265;\275\221P2\275e\225\037=1_\266=\326\273\013\275\014%\213=\242;\264\275N;\242=9\201\037=\021\341\243\272b\363g=+:\222\275#o\303=i\360\236\275!\323\352<\201\203D\273\316\353\205\275\337\371I>\227r\215\275\353\265\266<&\344\"\275\334\\\276\275%\273\320=aO\303;/9\253=l0@\274\202\206\030\276\200\312\353\275\003R\224=\373\272\303\275\331}\001\2766\303\305\275\322q\366\275=\205A>\274P\233;\001\310\000=\307B\364\275A\243M\276\033\360A\273a\342@=\254\366\014>\301\231\341\274\1773\014\276\365D\030\275\221\240!\276\306\262+=k\275\345=\256\353\215\275\253U\013\276\017\234<>Wo\242\275\306\274\244=\243\247m=\2502\317=\306+\244=\216E\223\275o\366\026>X\374f;\252 \213\274\367\345\220\274\365%\375:\302c\004\276\220n\320\275\252\210\346=\334\326&>\031m\212=\355\253\022\276Jq\017>\000\000o\274\316(X=z\204\333=(gQ:\242\025O\275\313\014\205=V\203\007<s\311#>\256X\274=V\251\016>\313{\004>\202\306\312\275\3572\022>\210\265\"\276)\3513<\314%\217<C.\342\275\006\372\364\275\340O)>\211\264\232=\346\252t\274\362\234\344=+\n\366<\240T\005>#\376\212\275\264}\211\275I\346\372<\333F\216=\010kg\275\317j\313\275\267\360\251<\375\327\002\275\"\016*\275\336\204\005\276\216\256\263=\237h+<4\224\'\276!8\303\274\243E\006>bG\010\276\010C\003>4\031\330\275\254 \275\275\347\001\254\275\275#\247=^\251k=A\007\310\275\226T[\275\004u\336<\375o\260\273So\253\275f\034z=\333y\270<\202\361(\275RU/\276\377Y\215\274\203Z\300\275\006\320\324<\034\313\213\275\324\256\036\274\231\337\253\273!P\346=^\260\024\275\016\213m\275\024\252[=\372\307\017\276\244-\317\274\265\377\"\276Gg\330=yt\'\276!R\r\275\033\034\366:\264\263F\275\212t3=\365a\257=\337$N;\357S5\275\335\020}\274\210\256p>\"\252\330\275\t\222\025>\177\206\230=\013\231\236=\247\255C=\252@\'>\302\275\205\275\'\370\343\275\245\2060=a!\230=\346\033\264\275\211\244\221=S\254\300\275\300%o=\213\240\004\276\3330\"\276af\274\2757%\035>\204\336\314<\203d\262=T\312\037>l|\227=\013\023\276\275w\235\251=^\350\304\274\014\236\210\275\001\3452\275qC\000>\347\273\345=\353\211\206=\037\023\r=;\025\345=\273G\254<\"93>\333!\331\275E\357\230=\334\334e\275p\235\316\275Qr\224=\030\201\324\274a\016\212\275\3123\272<\2510\360=\013\306\325\275S\211\364\275\000\357\217=\177\375A\275[`\356<WG\211=CZ\302=l\233\200<\341\362\233=Y\264\241\2758&b\275p\304\207\275 \324\221=\374\236\315\274\365\n\255=\315<\337=\347\366\256=q\272j=z\370\344=9\261\200<\277\006\370=\023\245\244\275\2073\026\276\312\333\357=\375]\203\274\246\337i<\177\"\325=\250\345;\275\023\340Z=/\237\024\276\254j(>S\035\025\273\212,#\273\363\3109>\322\325I\275`\370\271\275!\247\254<\245\014\215=\263\352\272\275\216\"D<\367\225\017=}5\270;\262\272\233;\021\252\002<\3374\020=/\322\365=\203\325\021;\3255\213=\030\374\262=\245Z+=qH\021>\233\307\325=\250C\220\274\002\256\031\276\362(\306\275C7v\275\013\324\311<\353\351K>\375\315M\274\240\311\333<\240O9\275\373hA>\016+ \274\336)T=\257\313\317\275Q8-\276\315\032\002>\355\264P\275\267u\215=\375\325\355\274\310\326\217<\3469\374\273\301\t\261\275\000\220\307=!\016d\275$N;<0B\206\275\335\'0\276\210\372\204\273\347\023\215\27571o\275\356\243\023\276\302\003+=\3725\222=\023\222.\274\030\302\013\276Q\337r=o\261\340=R\355\261=\007&\257;N\3740=\336\017V=\264\371K<\370FN<\'0\024\276Wo\006\275Z\207\361\274\354r\256=\234\377\374<U!\314\275\307l\221<A@\354\274\251\302\026=|\'@\276\336\276\r\275\017i\257\275*\036\203\275\242;\241=\227oc\275\203\272)<B\202\247<\316\246\003>\304\310\201\274\231\206~\2750^\255\275\346zV\275x\251\326\275\330$S=P(\205\275\214\346`\275\370p\020=\205e\233\275)O\375\275\004V\005\276C\265\213\275\253p\377=\270Q\332\275\335)B<\267\324y<\371,\331=B\'@=\227\244\255\275\025\360\241</!\253\275x\232.\2740\365\271=Q\2206\276!\025\357\272y\347\256\275\311\300\023\275!\251\"\276L\212P>\303\357\240\2746\344\347;\322,\266\274\320\210\244\275W-\310<i\304V<\016\237`<\025\334I=^\230-\275\"\361\035>\235\263\372\274z\016B\275\377c(\276\237\032\337;\001\363\345\275~\2546>9)\374\274\030/\257\273\177\366\026;\022\034\364\275\3158T\276\301t\252\275\000!L\275\035\263\210<\332\243\221\275\211V\275\271qP\375\274l\220\203=d\"\036\276\276\227\254\275\2302\321=\311\236\010\275\033Z\202;\253\257\310\275\220\323\016\276\322\351\312=9\203\n>iH\377=1\210?>\340\333 >5L\270\275w\317R=\031n\020=\372k\321=M\210\023\275j\343\236\275\311v\005=\014!\330\273mD\335\275\240`\020=\331\364\364=6\224\302=\346\023;=\215\323\"=u\375\020>\037\344&\275\"fe\273P\334\303;Fw.\276\347\364\026\275\272I\r>\344\004`=q\354\250=|/7\275\325\232\\\275\317\232y<[\346\353;\215\270B\275\330\220X<\211\177i\275ho\035>\214\030\236=&\274\373<\322\275G\276\235&\306\274\023&\n=s\252\203\275g\365\354\275\033\017}=\302\337\206<\327\207U\275\2303\305\275\031\037\305=\265\325\277\274\007_\340\275 \221\n\2760\017{;\254\241,<\340.\206\275\250\240\247<\225\241e=\003*\264\275\002\240\362\275\234p\013>\257\233\262\274}\310\332\275\262bh<\272*\371\273\215\305\022\276\346R\206=\371\216\235=\315}\002\275\236\302\257<\227\022\330\275\370Fv\275\021A\243\274X\321a\275\216\306\243\275\036\315I=\351\321\247\275:\2575>\320\340\264=1\246\265=\3758C\276\004#<=\217\027!=(\231\251\274\300\324\227=\314\231!>\217l7>\316\356/>H@\021\275d\227e=\227A\003>G\212\027>\262\241\306<\250W)\276\377\233\022\275\037d:\275\306\\\270=\030\363\231<\213\331\334=\347\335\001\275\310\"\224=\214p\371=x\324\242\275+\262\230\273F\346\362\2754!\353\275\005\367\033\276\033\023\224=\261<%\276\247\324\343\275g\002\223=\023\266\222\275.\276\333\275\357\210\002=jz\253\275\2058p=\231B\n\276\345\372<>L\031\257=\010&\000\276\220\243<\273\211\030\261\274\000\214\206=\216\217p=\265\354W>_P\215<\200\231\343;.\206 \274$<\033>\024v&\275d\356\014<\343>\255\275\312\201\270=\376\215X\275\243\210\364\272\326\021\357=\264\020\277=\350>6<K\226\264=\377{\023>%\223R=\201\223\312\275 \323\235=j6+>\373\022\006>!\\\226\274\212\2340<\0029\335\274\241\232+\274\375\347{=|U\021<){,=6\034\003>\022,\n>b\200W=\203E\364=\265\303\323=\217\350\220\275g\340\225=\240}\'\276\033\312\010\276g\341\t\276\"\255\331\274\325U\306=\036\336\010>\222\375\233\275\304!\365<e\376H\275\351$\252\275^\216\027>Y\210\272<\313\177\215\275\364\226\251\273q5@>-\'l\275\214\302\277<E\2332=\277\302b\275\034\326\217\275\265G\242\274&\342\311<\363\352\031=L#e\275\324b\022>\020\327\031\275\241=\224=\263\003\037\276\343\353\010\276\r\275\\>\'\304\010\276KN\242\275XK3>k>\216=<\262\267\275\207H\'<\2271\217\275C\306\025>\200.\334\275\344\034\026\275\260\227\r\276B\000\n\275\021\234\327=\016\005\322=\245\230\220\2746\207s\275Yz\342=\330:#\273\r1<=\223\254\031\274\213\255i\274W\024\360<x<\013>\255\320\220\2743~\204=Z+\320\275\250\303\255=\243J\260\273\332l\003>\374\3711\276\000\240\201=+\224\331\274\355\034{\273n\013\030\276n\262\003\276\316\351\233\275?{\t>\313C\373=\233\257r=A\017\334\275v\026(\276Be\203\274\350X\036=\262J\004\275$\013E=\261p)=\374Y\247;\022T0\275[G;\275(=\242\275\001\034E\275\"ZG\274\204F><\2609\310\275\350D\324<_\035\210\275\314\233\303\274\312\312}=\333i9=8\357\347\274?^h=\027\335\266\275\271\222\345\274AQ\177=\226\005\017\275\243Af=\2476\354\275\327\240\345;7m&=\374\373\217=\251\366\306=i\327)<}js=W+\033\275\266\370\243=\376f\244\273\252\034#\276\250\346~\274\313\254$\275U=\027\276\034\356#>\235\177A>\241\007\253\274\214\325\202\275\301V\255\273\217\366\306\274\370\371\026\276\323C\335=\\}\326:J\337\366=H\026\342\275#\231\366=\222]&\274\325\332)\275Wd\253\275\200\3074>\006\214\353=X\240\245=\3431H\274cK\202=\2175\335=\271\340|\275s\366e<\263\006\236=\310\266F=X\377\275\274\2555\270\275\224\326\346=P\311\336<Y\372d=\243\201\005>\367\025<>\2033\002\276l\355\006\274Kx\333\275\221*\321<\356n\353=\274\265\266<U6\272<\224^B\276I\331\005=oKR\274\000\231R=\210\326,\276\225\335\331=ra6<\303y\006\276\017+\315\275\207\014\007>\320K\254\274\212V\221=\3229\035\276\271\000\363\273\324\345\271\275kd\236=r0\036>\330\224\356\275\344\024\334\2758.$\275\267\250\362=\213\302\215=\340lu\276\350\307\210=g\2625\276\260\353\333\2758\005!\276\037\014\267\275`\250u=\304T\214\275\274\215\207=]\024\365=4\350\343= \317\200=3H \275\316_\241=\370\346\307\274\261\244\202=\275l\373\275\352\346\372\275\220G\366={\232!>\234l\300;\251sB>\357\325\265<\240\3223\276H2p<\360\001\001=\000n\033>@\372^=\227\340\340\274_\356\351\2751\316\251\275\366\034+=\253\032\255\275>59>\340\201W=\034<\270\275#R\357\275\230d\021=\237\"\242<\221\212\225\275\251\367\260\275\372u\035\276\331\205\265\274\314`\320\274\232\342\270=\265K\313=7\222\325=\377/V\274l\275p\275\221\276Q\2766\252\334<\375\224=>\016<\355\275h\361\277\275Q\002\000\275\204\311\357\272+\3720\275\336\036\n>F\367\334<\236\017\232<\212\333\204\275J\311\025=b\303\344=\350\354\210<\017M\321<\266T\262<\360k\204\275\321\363*>\273\347\022\275[CF=:}\022>8\333\027\275\317\366b=\3478\352\275\307\231\025\275=:\311;/\361\343\275\337\220!>\270\334\017\273*9]=\203\243\316<\024r\270\275\231\220\340\275\230K\323\274\032\375i\275[\305\344\275\365\232\312\272X\373\022\274Z5\312=X\234\270\275+\315\211\275P\217\306=\266\266\365\275\202O\346=\022*\271=\013\235\036>\305\267\305=g\315 \273\225k\035=+\t\014\275,\t\265\275?\027\033\2762\233\272\275!\253\364=\336z\300<\341\334\201=^\272b<R\030\004\275t\001\002<\250\210\317\275\254\'M>\372h*=\324\340?>\364.\340\275\373\027\302\275r\345a=\300\363\316\275/\265&>z\375\330\275UX!=\274IG=\220\000\320=\351\305F=\243r\032\274\306\376d>\3244\210<\024\2235;\307W\260=`(\261\275@\026\223=\236\246\323\275`\3376\2759T&>.k\255=\353l*\276wt\225=\367\2302\275\025\356\376\275\335\002\026=<\244\256\275\224\241I<\010\036\313\275\367R\204=A\204<\275~\003`=\032\230\215=b{\030\275\017\311d\275\373\320\032=\270\010 \275\t\0003>Q\250<\275\204\301\221=\021\351\207<\030\363\027<\265)<\275y\367\232=\226\245\034\2766\200 \276U<\t\276\037\252l=\"9\234=\221\267*\272\224-\017\275\033\2277=\000^\017\275L\327\370=&\220Y\275\262\225\306=\002\332\025=\021\360\r\276\223NA\276-:\261=B4\243\275\256\177u=6\227\271;\344\216\367=h\n,\276^|\233\273\037BG\275\223\022\270\275J\031\305\274N\005\263=:e?\273\212\2353;7\037j\273\004\016\036\270\234\241\241\274\215\277\344\275\214\240A\275\331,<=\260\333\326;\t\256\301:\rf\260=\370\262\003\275+\304\331=\362&\232\273Ia\236=}V\362\274\005\344\331<\220\024i=\202\036\007>MT\021\276]\250W>\263\347+\276\\2\300\275h\022>=\177\214\350=~\312\002\274\212C$\276\331f\367<\210\273\000\276\"\tP\274\021=\205=i\231\317\275\315\272\377=P\010\363=\230^\315=C\014\203=\000?(<\021\322\006>\216\223\016\275\200=@>\210\261\223=cW\316=\n\326\241\275Kj\017>Z\367\010\276C\006\032\274nPV==\002W=\201\263V\276\274+\331=#6\003>g4~\274\007\036\014>\251t\357;\232h\316\274\265\335\251\275r\010w\275\007\247\000=\227D\005=\031\343w<\023-^=\213\365\235=\223\340g\275\005\336\314\273\324,+=\013pd\274\2775\326=\337\222b=\314\342\361\273_\353\014>\017\200\022\276\320\350\267\273\255\007\2448\227\257-=wa\377=1\205\032\276\316\254#=\253\r\310\274\001+9\275\r\201M\275fa\365=}\305\204=\277i\263=\253\230~<\346I;=\016\371\240=\370\373\220<Zq\260\275\32372\275\374HD=\307Sv<\343\360#\275R\366\377=q.(<b\264\241=\240\016\300=\226\243\006\2765V\203<N\311\217\275\247\333>>\220\322)\275?D\257\273{\234\274\275\244\362v=\377U8=P\276\031\276/4\007>\203\273^=\036\221P=p\027\360\275\333&7=\030\274\234=\2404\350=\005\322\200=\262\315I>BU:=#r\236\275\215\217\034>\201V\'\276\234:S=\360Fz=\252a\241=P\335M<\264\271\377\275\224*\212=\272\230\203=C\365\246\273b\260\345\275\245]\250=J\204-=\316\002U<@q\227\275_!\035<\223\342y=g\342\363;\200\310#>\204\234F\274\241\027\036\276\005U\"=x\371\027=]\277\372\275\265\236 =\212\242\274=\364\371/>\371J\216<\244\247\357<\215\244\033=\371\253\306=NG\030<\243Y\372\275h\031\362\275\230\331\255=\354\321%=\000\n\324=\206D\331\271M\335\016=\037\310\373\275\364j\340\273J\013;\276e(\025=y\035A=\0341F\276\323E\343=q\201)=t:\t\2764\225\232\274E\200\215\2754.\252\275\305\227\223=ut\257\275jv\334\275\252\351B\275\201&\245\275\311\265\276=\351g\206\275E\207\207\275\220\030\274=\223b\257<(\220D\275o\036\372=\355\225s=b\313\207\275\216}j\275\210;\222\275\203\227\256=\000#\364<N\206\020;\035\315 \274\326b\310\275\253\023y;$z\363\273\314S\3269\376\362\252\275\031\\\233\2737\337\317=\374Y\032\276]\234\354<\343Z\243\275\016g:\275\232t\237\272W\216\316\275b\020\034>\3465\326;\253\327(\275\277\tL\275N\020\371=\261\t;\274\243\233\336\275\243\354]\274y\025m;0\321\347\275\357\345\004\276\23708\276\261\017\246\275\325x\235;\274F0\275v\326\024>X\210\005\276\002\004\302=\376#\327\275\212\361\257\275\235n\255=\227\375P<\217)F=\261\030\322\274\207:\177=\246\004u\275\211-Z=\364\326J\275<\022\010\274\224-\204=\017\271\315\275\322\304I<\177\330\244=\243\325\016=PTY<f\306\273=)\034\326=v\375\261=\363WF\275\327\351\331=p!\324=>E\366\275\247\005\224=\206>\374=\252\003\030=uy8\276P\345\367\275\030i\370={\363\243=\347d\001<\254h\316=?\277\243<\n\314\353\275\035<%\275.\362\353<3\257\\=\357\370\330<\"\243\336\275\347\310\261\275\303m=\276dO)\276\341\234\t\275\342|0=\014?\220:|\'(\275\345fR\275p\306\276<\027m\243\275\215\213\236=\211>\210\275r\037\372=\254\240\370\275\353\030\305\275\323\305)\276A\316!=\307\376\265\275p\323\241=\274s\016=\n\310\345\274_\227\274;\255\360t\275v]p\275\000qO\275\344\237\004>\223\244\272:\263\313*=\346\340U>r\276\354=\334\\\250\274\202u\301=\314\366\204=d#\204=\363\303\037=\234\351\010>G\026\037>\326\3178>D\273\230=\220\360\014\276\333\371\212\274,\017\273=\300p\350\275\261J\252=\367\257\020>\225\252\220\275\366\350\243\275\0074;\276\0245\204\275\264\211\274\274\365\373\224\275A\017<<W\016\234=\322\332\346;x\262\212<\265\267\215\275\"\367\247=\002\023\020>\303\031\003\275\031F\000>\017\232n;\"\334;\275\207\326\212=\355\204#>\321\326\004>\256\372\227\275\000\017\036>\325$9\274k@3\276\345\365\215\274\325:\026>\234\202\347<T`\021\274f\321J\274\177\n@\274\330H\327\275\027\244\002\275g`\376=0\217\222=\375\353\225=]\320\326<\027<\357\275\350t#\275/e\177\275\032\031:=\242\333\331\275\342\0169\276\230\020\207=C\215\347=\217(\315;\272`\323=\364o\222=\215k\260=\014%\250=\266\331>\275T_Y<\364)K\275\265\211\262\272\300\307I<\271\207n\275~\250\372\273\002\262\361\274\016\255\033\275\260mf=3\252\020\274\347\006\204=\330\240\226=\210\0224>\326Q\376=O\0243\274L\351F=\261\"\003\274\235F\212=9>Q\275\377\016\226=\341a\'<#q\014\275\266t,\275\353\r\225\274\307\027\322\275\'\207\211\275;O\033>\316B\006\275T\370\250\275-\304\t<j\244\270=\341\270\177=\262\213\275\275\21201=\340\272\000=\241\020I>\367\345\263;\273\226\004>\327\334->\275(4=\332~:=\367y\223=\300\314\210\275D\207\224=^\213\'=\202\221+>\223\352\225=\232p\315\275\377/\271=\345\230\265<\177\337\343\274\363\002\320=>\233#>u\361\000\276/wU=.\037|=\004CD\275\353V\306=\325^\t\276s\014\312=(\002\246\2745^\314\275R\327]\275\224k\310=\357\246\327\275\336\235+\273?T\347\274\323\375(>&R\305=hF*>|\313J\275\263[?\274\325q\014\276w\255\\<98\036=\036\333n=d\207\262<m\224\264=.\221\277\2758N\367\274SUD>u\374b\275\217z\023\275g\3532>\r\247\242\275\324t\211\274f\344\253=\020\357 <\016Z.>\246^+\275\225\017>>\3714+\275\202\020]\272\225al\275\302\220\203\275\227\032\314\2743\322\332=\\fa=\330Y\352\275\001\036\204=\321\0341=S\270!\276<\252\333\275F}\216;\331\237-\274\324\274!\275\262\321\321=E\215:\276U?E>v\363U=\010{8=<\275!\275k}(=dZ\006<\230\004\253=\314\222\376<\342\242,=\370\264\201=X\273\002>P\213F\275\322v\224\274\206GZ=\000\323\024\276\341]\022\275\225_\357\275\242\223!\276\211{\205=\226\014=>T$\206\274P.\336=G|o=j\237\237\275\231\014\001>`\357\037\276\0277\312<\211[\253\274}\365H\274\212(\254\275\177\3709<\256\231\007>\014\340\363\275t\217\262;w\326F\275\001\033\010;\213xP\275*\355/=\201\304o=G\323\226\275eC\371\275`\033\014>\320M*=\014\211\007\276\365\225\035=o\005\026<\261\371t;AN\345=\321mF=\333\025\212\275g8\216=U\367\n>syP\275\251I\273=-f\220\275\305\217\225=\340[\346\275\003\251\205=\234\022,=\260\310F>\231\265\346\273\355}\226\274\265\363\261\275\323\352\343<\313\323\006>\020\373d=(\262><v\233\017<\002T\217\275\211\234\360=\376\263\235\274\313\310\034\273L\335\006:\\\357\315\271\264YM\274\\\267\271<56G\275]\262\200\275\323\2108\275\322b\337=K\213?\275\312\232\234\275\331\360\256=\342D\005\2761A\205;\2342\026\275\226PZ\275J\3140>Q\372\274\275\257\035]<+\314\200\275\324R\277<k?T>\035\255}\275\251c\032\275M\033\336=\210@\315\275[\202\r>\243\265\023>p\317\362={\365\033=\344\227\007\276{\220\027>\033+\315<\020\363\246=\025\216\205\275\277I\002>\275C\322=%\363S=\020\033\262\273\260\212\273\275\2142\225\274tz>\275\276\201*\276\364=\256=J\241\006\274\201Wh=}\352\374=\253L\315=?\203\310=~s\265\275.\363p=]I\265\274\330\356\311=\r_?\276<\217\004\276\347\330\310;yA\242\274\367\260\350=\372\300\216\275,\231\361\275\267Y\247<\344\253\366<\235y\010>}\206\273=r\0009\276\264\024{\275\010\017v=\037\033\305<\204\372-=~\200\244\275\256c\365=\212\267,=\240v\372\275\201o\236<\301\232\302=<U\302=B\023I<\200d\223=}i\242;\374\211+<sS\026>\275\322%=d8\357=\0273\321\2752\224\000>\021\261Q\275;i\306\275?Qz\274\300 M\275\367=z=\375\031\027>:\327\001\274_\356\037>\257\3611=;\260H=\303\333\322=\332\354E=\364s\253=Yx\001>gu\002\276/\227\257=\340R\215=S\315\267=\377\220&=v\004\256=\353\357\205<\301\357\347\274\005l\320=\002\252{;!?\346=$R\224= \316w\275\314J\241=\305>;>\252_\234=\036\201\222\275.\035(\275\002\273\001=\027\014\227=\\\376\010>P\311\026\274f\365\223\275\305\207\023\275\031\254\013=\326\010\255\275\201E\313\275$0\037\275\337\005\305\274\342\205\255\275?\024\240=\341\361X<\303n2>\353\255\010>\364`\005>L\346\304<\032\036I\275\255\344\212=5\317\'=\006\035+<v\033k=\017\225\306=\305w=>\336\232\003\276~:\020=\202\313s\275\223f\367<\000\354\265\275Z\323\013>*\327Q<\302bQ=\023\332)\276\213@\255\275\340\226\355=\331k\316\275\361gT>\324\304\027;\303z\234<\252`\305\275\032\320\362\274\252\341]\275\254<\242\275\354\004\001>P\213<=xr\210=\017\203\003\276/\203\024=$\2155\275vf\247<\366\271\021=w\004\033=\331\3018\276\322\346{\275\3712\300\275\021\210v=\351\262\203=\226O\303\275\3033\353\274\221\017P\276#wm=\364=*<\346-\260\275\350\256\321<H\005\275=\\n\006=\\AB\275G\316\211\275\305\312\356\273g\254\004>U\347\314\273+\347]<\024lh;\261\273\341=\241(\371\275\246W1\2766\206\003=1\2179\274\345Q\001\2769\367\316\2751\002\\\275\324s\005\276\237\220\275\275\341\032:\274t]\006\276\336A\'\276I\036\026\275\374\316y>\267q<;\361n\201<\024\353\216=5\016\016>8\023\025\272o\267\362\275\211^\235<\'\244\373\274]A\020=h\220\220=#xX\275J\257\314=\026\365\310=zn\351\274\034hZ<\226\317\264\275@\352\277\275\244\325\025\275\"P\211\275\031\340\t=s7\010\276_\006n=\254\250\010\276y\016\261<=\261<=#1\016\275\027je\275\023\212\232\2748\244\346=M\342\310=\363\t\311\274\223\005\305=t\235\373;\257\023B\275 \351\'=\253\342\023\276\352\337C>\030N\355=\013K\013\276\331]\205\275\362L\2359\372mu<:\372k=Z9\312\275\340\034\372=\336\276\205=\2341\331\275\006\2503>\230+\006\276TU\267=q\234\t=\226v\223=6\014\264\274g\351\271\275\334C\263\275?\250\006\2761\232\030=\267\317\353\275`\353I>\033F\206<\323\311\275<\026\203\277=*\351\007;\254\273\321<\3504\221:\323\235\325\275\317-\007>\206\341\321\275R\002&\2766\367\357\274\227(1<[\241\022\276\254(\202\275\212K\224=\257\300\326\274aR/>\000\273\013\276\337 \207\275\351 \212\274\255\267\243=X\227\"<\326\333p=|\330\264\274a\260\024\276\301\365\245=\233\247S\275\235\225\267\275\022\032\013=\216\013H=\333AH\275f\276\005>\303V\217<\021EO\275\311AS>\230\336\345\274\236\356 \276c+k\275\304\307\214=8\000f\275\370\003+=\034Z\034>r\272\024=\234Mq\274\316\341\216\273\221\245d\275\300\211\034\276\001\267]\275\226:\354\275\243Q\000=F\036\316=rt\223=\241\323\017\276\262bX\273\3545\003\276\246\245+>\370\247V\275\360C\261\275X\263&\276}\024\243\275\005\r1\276\262\310\274=\027\363\255\275\010\331\234=\235\244t\274\302P\016\276W\331a=E\373\323\274\226(\367\274~\325\300\275\335\220\231=\252\371B>\211t\000>m|Y\275\036\336 \275\234\257\000\276\213\021\311=k\3522\274\231o\220=j\021\254\2753\361;=R/\355\275L]\334<X\236c=\355\340\355=\005 \r\276\026\203\343\275\277\353\213=\\c#>Z9\334\275Io\234=C(\314;6\322\371<y,\263\274D\"\220<\210tW\275\321\304R\274$\3145\276\362\272c>\212\003\257\2757_\030=\340\274\032\276\037\356#=\332l5<\'\307=>p\310\376<\271\\M\276Z}\254\275\001\374\201=R\'\377\275\252\000\264=\2473\224\275\363\215\273\275m%\324=\367g\221\2753\275\316=\224\313Q=\373\375\355= \264\036>m\201\000<\230\252\252<p\351\372\275XWF\276\034\301\222;\034\232\206\274\343\\\224=\363\\\322\2758f\024\276\303\014\007>\341\001_>R$_\273dz\267=/\326\211\272I\006\204<\255^\004\276\3016\251;\0307B;\265j0<\035\241\375<\222\227\n\276\352\307\217\275S\312\237\275\323$m\275\274\026\025<\261\274\212\275\222\016\002>Y\331\023\274]z\225\274F:j=C\031\020\276\271(\237=O\241\276\274\367f\362\2756\277\013\2752\330\306\275\013\367\375=\367\016\315\275g\255\224\275\326\340\006\275\014|\262<\373 \256;\031\244\274\275\220\246\250=m\232)\276ZH{<\257\214\206=\034\336\241=xr\270=NG\000=aD\241\2759\271\215\275\357N8<T&\017>zv\020>l\273B=[ \241=\274\374\034=\216\r\277=-8\306\275\377P\033>5-[\272\3242\013>\224$]<P<8\274o\324\014\273\231\205u=\023C7=bfD=\303\t\260\275D\035\034=n\223\037>\r&\033>\251\340\247<S\241L\274\323\027U\275~_y<NY\221\272O\266\001>U\370\264<\230\344\256<g\232\205=\033\004\376=\177\003t\275\230s\023\273\260\375\354\275_u\033\275I$(<\016\367\360= \247\001\276N\r\264=\225\363;>j\024\235\275*\352\337:4\341\301;\337(\026\276\334l\265\275wG\001>\324\234\277\274\216\201\004>\271\317\022\275?\304\303\274=\006\335=\345\375\322\274\351\352^=\0253\312\274B\350 <b\232\237=_^}\274\245\357\230=\312\245\321=E\346\037\276\005\303\021>\016\342\262\275\300&\360=y\3155=\363\303@\274\035\026\024\276\310\301\211\275<\367-;\345\352\372=\261o\316=\262\2276>b\312\016>*,1\276\371b\227\275o\313g\275\330\230\307\2749]\324<\220\207Q<\357v\375=o\001[\275\033\224\002>\374R\002\276\233\222\010<+>\017\275\177\356\210=\\\3731\276\227\224\251<\035\244\026\276\254\005\010=0^\325=h\256\265=\321&\274\2737[\002>\264\315\333\2745H\014<\362&\265\275\377\331B<`\372\222=wM\000=O\260:=\025\272\372;\322\315\254<[[ =X\252\035>\312\367\376\275_\306\327=(\366\274<\316\0277\275a\032B>\333\265P=\357\354\014\276\004\346|=+@\250;=T\350=ua3\275\224F\203\274(\321\272\275\016:\325=@w\n\276S\366\003=l\227\336;\203\326->\004\021\247\275\337$\253=S\014\321\275\005v\221<\223.F<\361\223P;\263\264\250<2\362z\274\257\215\342=\330a&<W\014\316\270\251\267\335\274\344\325\265=\331m\323;a\235\312=\310\370\241;Yu\342\273\024\226\224=;\343f=+\371\332\275;T\246\273\377\336c=\017\340\342=\214\357\212=\323\335\373\273\213\263\206\275=\025\n>\016s\310\274O\216S\275rwJ\276\364\240t\275eZ>>\376\n\234\275\305\221\371=Z\204\234=_\033\202\275@L\336\275\256e\243\275M\343\223\275\025p\311=\242\347L<pu#\276;\376A\276JB\333\273\262\370\230\275\025\347\344\275\037\211<\275F\214\240<\333k\037\274\244\0143\276lq\357<D\361\330=\315G\317\275\224\224\266<\032\010\271=\325\361\031\276h\220/=D\210\214\2753\250\260=H\223\020<\273;\332=\027\251\240\274F<[=\224\034A\273\220MC\276\350\251\005\276ck\035=\257\224\305\274\241I\000>\2024~\275\364Q\240=\345\036\263\275T!0\275s>\226=Q\006\370=\262J\037\276\265Z\037\276!\2743>\016\270\242=y\363\033\275\203\035\324=\0026\016\276\177e\227\274\217\241\250\275\240\302\367\272\016\251&\275\3269+\2754\211\257=\024\220\264<\230\376\254\275D\253\r>\313\007\031\275\313\301\342\271]\034C=\254f\\9oV0\275\014\200\021>`\006\245<\327\273f=\251l\333\275|;\320\275j\204\004\275\374\3152\276P\310\312=\270\232\245=\336\030\225=\020\006\236=&<\332\274\330r\221=\253\3378\275\227w\351<P*\326<\023Tb\274\322\345A=\375Z\014\276\274R+=&\037\017\275&\024\306\275\255z\013\276u\005\357\275?7\204<\230\rS=i*\001>\321\230\254=\224\3344\275\0064\n=Z\273\017>\203L\312\273\220#\253<\005c\005=\224\204>>\231wA<\277\021\n\275\005\020?\276\273\355\004>&>\355=\240/\202=1\256\222=\007\275C=\207+.\275sJ\026\27630@=bIZ<\366\324\272\275ir\002\275\322\235\016\276\276\270\205\274j\026;\2757\320u\272F\005\246\275\202<H;Q\n\237<,:\034\276*\234\372\275\313yp\275a*\010\275\323\345\026>\245XK>\263\024\331\275\300\212K\276\247)1=\202\256B\274T\'M\2762\374\265;\277\227\031\276\340\355\230\275\364\271\202=\2277\010>\224@I\275\364\037\264=pTK\275>\255\203<\303\305\341=\363\364<\275D\tl<y\251\205\275\343\243\201<\261=h<\304\r\013\276+|?=L*A\2758\273\232<\373.\222=\352\020w<w\005\332\274\202\025\354:I\342\311<\324\376\340=\005\317\'\276c\277\032>\220\224]\275\371\322\213\274\"\357\037=\333\300\262\274\326\t%\275\234\316\301=\300\026\252\273n\030\003\276\031\203\t\276\202n\005\276<\224\032\276\227\023\020\276>\266\342\275\225\347\325<:\026\235=d\257\214=Oi\330\275\300\225\236<\217\245\003\275\367j\253\274\234\306\311\274.E\330\275+\036\303=Fy\240\275\220\376\322=\264\241\307\275\340\'8=7:\215\274\033\352,\272\360>\216\275\022\3331\275{kj\275\200\334\235\275\026?\000>Z\277\356<\0205O<uR\027\273\220\243\350\275T\225\204=\363\235\214<\275\340\223\274\365Y\302\275\nN\225=\353R\331=Z\323U;\022\270:\276\373\t\323=IO\314\273\2331\230<\361\003\246\275R+g\274\2772\374<\242\034-=\rZK\273\345\375\344\275\031\036\252\275R\367\210\275C>>=\265\346\357=z!\250=\021T\017\276}\342\352\274\022\321\330<\302\250\014\275\025\210\354<_\246z<\357\277\024\274\013\337Q<\002\215\312\274\r9N<|\262J=\006\375\274\273m\264\225=\214\245t=\321\303\220=\362\220 \275T\366\326\275\344\005$\276\343\261\221\275\264\004\212\275@\236C>\244\337\016>\211\243\337=\006\230\'\276\313\205Y<\371C\307=\022\014\276<3\277\213\274\016\033W>\227\343)=lV\014\275\335\021x\274q%\261\274\332\357v\275kr\217\272j\311\264\275\\$R=\032\312\200=\344y(\275J\274L=\257\001<=f\024\352=W\215\031\276\027\"N\276\233\241\216\275;\335\376\275\323@A\275\371\227!=\016@\005\275k\312&>x\031\211=\234A\274\273\212\006\252=8 \242\274n\313\362<\344Q6\276\244s5>\340\310\020<\365\212\">OC\322=\260\256v=\030~\247\275\357\376\322=\346\257\326\275\245x\370<\017\325\317<cZ\314\275F\347\353\275I\r\200<\361~0<\240a\343=\210\261\364\275$`\204=\264\221\234\275\016\017C>\301\320V\276\375\004\025\276\350}q=L\345\024\276h\363<>\215J\270\274\235\277W\275\243C\227\275sn*\275\241\247\226\274;Z\215=\205\305\352\2745n\005>I\236\036\276\204?\220=\313/\313=}\260\377=\0314\016\276\210\353\243\274\376{K=\265\215\213=\306\205H\276D\256\366\275>\335\017>b\001\260\275\177\267\271\274\271\226r<6\027\255=\037\013G\276;\240E>P\223\025>\334F\022\276\220!\021\276|v\017\2746\325\213\275ud8>~/\330\275n@\342\275\304g\345\275\210PX\275\325\t^\274\016\036\240\274|xp=\220B\027>\375[\347<\336\240%\275m\342\223\275\224b\025=\211\227\004>u|\261<e\255\311=\023\275\276\275\010\037\214=B:\326=\\\363\326\273\230_\025\276U\265\027\276\223\277\002=J,\014\276n\354\256\275\017j>=\013M\020\275\333q\263<o?\251\275\"S\033<\332\370l=x\243[\2755^\340\274\347v\235=\322\221\324\274\177\253\341\275\344\213\337\275\034\037\251<\024\211\006=P\231\301\275u\216\271=De\330=\327\306\034>\264\"\263<YXk=F\257n;\336\2321\273\237\256\230=Y\312U\274\243\244\240=\271^1>\016\013\354=b\222\021\276O)\272<%\200#=\007\216\210\275j\201g=y\354\350=\333\351\334\275\002d\002>2\240\245<\245\023\004\276\217\025\271=\327AD\275m\210\020\274\215v\300\275Wq\333\275\205.\256\274\305\305%<h\004\271;\027S\216\274s\273/<P\2534>L\245\200\2747d\272\2758@\032>\266{\352\275Q7\010\275V-&=\335\032\321\275N-\024\275*\357\253\274V\0136\275\367\363G>g\263\256=\316`\223\2756\337\'>f(?\2765Y\242;\027(\256<v\370\214;\\i\'\276G\264p<\177\237\266=\275XD\275\300\034=>\016\270\334\275\177\362@=\'V\177\275\273\r?=\264\\\000=\270\227\331=\301\320\177\275\025\243\341\275\003F\211=\342\212+=\341\302\357;<wM>\313\210\004\276\202\251\256\274\361\037\335\275\337@\322\273ng\035\276\353\004->\234\262\210\275\020\334Y\273\022M\020\276!\\,=\004\026\037>\324\031\002>\270\031-<\006\222\240=\373\226\016\275\021\030\t\274\237\035\343\275\230\217\022><\022\003>\035\332>\275\207S\326=\356\032\204\275f\303 \276\325\347T=\301\220\037\276T\240\346<:6\261\275\360\323\025=\251\204\033\274\210\317\200<\310U\232\274\367\035\026\276\351\346;\276c\265*\274\2756\255=o}\t\276\377\356H=Yp\210\274qx\334\274[83=V\035\271=\344\320W\272\355M\037\276[\374\241;|\003\232<\352\356\005\276j&\002=\253U\320=\224]\305\275\363\365\315<\377R\271\275X\200\202\275\306H\342\275Q\361\270<&\302w=\thI\276\346h\230;y\243W\275w\251L=r\254\002\276\224W\250=@\304v<\312^X=~b;=>| =\0026*>\221T\271\274c\376\367\275\201Nq\275\302\242\341=\210\177\322\274\230\266\200=\023\265\037\274\213?\366=\267\351\330\275\231\233_\275\211}\240=\005RK=\200\3163\275\353\333\221\275\246\034\r\276\177\224M=\327\tk<\317\350\017>\227!\261=\301\370\243\274a\265?\276\243\243\246\274\340\'\254\275j\227R>\275\231\350=\302w+\275\242\255\024=F\366\364\275\253a*=Yu\211\275\241\"n=\327O\361\275\206eD<\274\224)=\021v\240<\310Z\346\275\005\334\364<\037`\210\275\225\306\026=\240\003\323<\350\364)\276WA!\275\007\225}=\243\347\017>\264p\020=\341>D<\341\374\256\275\254\344\327\2756L\306=\317\253&\2752\230\244\273\302f\302=\354o\270=\321\241\244<50S\275)\263\241=\324v\272\275QX\005>\274\035/>\252\333\263\275\010#\301<H{\200\275\017|\331\274?\005\305=P\346\211=\3076\013<\007\030\n=&(*<\346`:>\355=\001=\342\317\\=\366\010\022\275\321\244\272\273\n\364\211=\371w\362\274\233*\252==\356U\275\363\261\001\274\002<\373\274\261\233+\273J3\212\274\206\232\002\276\360r\\\274\330\312\030>\177\347\004\276\330\335]\272\212\322\330\275VQ\222=\371b\006\276q\342_\2757\277\375=XL \275\335\242\223=\327\027)\276\222)\275\2746\276\313\275\017?\016=\201\254\023\276_E\321\274\330\270G\275\013\"\020>.\301\261=\034\302\374<}\336\243=.Z*=a\235\214=\310\322\024\276\353\220c=\'\200h=\344\335\202=(\277\223=%\377\361\273:X\272\275\371\333\016=xi\032>_6&>B\"\216\273W\376H>\204\255\250\275s\275\270=^&->`\n\t>\263\n\206<?\001)\274\226h\337\272\331~\330\275\037\311L\275\237p&<?b_\274\337\276\267=\320/\252\274\350\352\201=\004`\304\274Gg\007\276z\r\361=\211\307\327=S=K\276\252\025\355\275\027\022Y>\2537w=\210F\330\275\266/\037\276\000\246G=\376\271\363<\033?!\276\237\006\001\272q7\222<\274\233*\276\t\3550\276\363\356\221=u\0135=z\300\204\275\207\2759\274mO\202=\211+\255\2713\257\003>\032\304&\274\273\005\312\275\024\014\273\274@\032\325\275\256\200\307\275\350\207\320=4\364!>\240\235\026=\301\246^\275\243\232@>\001\333\016<hY\253=\263\tn=LU\274\274\":\261=\007f&>?\365+\275\021\331B\275\222\357\363\273\001\3118\274~t6>\201B\241\275\3565\247\275\231J@\276x\365\004<_\260&>v\223\374\275U\251\370<<\263\365\275|;A\275&\314\314\275\303\264\245=\362\021?\276#j\251\274I\225\026\276\303\356\345\275J\331@\276kG\261=\306\371}=\346\003\r>\356}\003\274\006i\025\276\201\262?\2747O\037\276M\244\274\275\220\\b=\305\010\234\275\326\261\204\275\'C\"\275\272\350\007>\252\016\361\274G\217e<\265P?\274\203\216\203\275\342.,\276\014\260&\273\"L4=\353+\034> c3=\342w\245\275\222\244$\274\370_D=\210y\251\273-jC\275:\214\031>YG\300<\217\034#\275\315\3353=n\372\026<\245\013f\275\n\235 >\221\251\345=\2003v=\245\347\007<\003\375\007<\2676\234\275\304#\212<\336{\030>+\213]=\360~=\276O\354;>t\223\252\273\206\233\025:\245n\325\275Q\320!\275\204\353\006\273\001\307P=\304\206\001>\232\340\026=\227\303\301;\370\272\263\275T\004\033>\030|\212\275\246\356\032>\030j\337\271\350\307\254=\210\305\273\275\303\364k<#&&\276&pw7\372\374q<8\022\332=,\223\237\273\243-\212\275\325Y\231\2756@\332\274l\026\200<\320n&=\324\302r<\010|\325;Y3\001\274\224\332\353=\345\343@\275\2312\357\274t\236_=\024\225C=po\220\275\024)\027\274\000\366\337\275\232\243\005=j{\376\275\332\255\201\275#z\230\275>\204\014\276i\321\232=TR3\276*yL\276\376\350\350=\236\022\226=|\252\017>b\255\366=\'\001)=\301_\027>\321t\223\275\304\217!=Hf\r<e\244\273=\223\217X\276\221\343]\275h6W<\362\033\253\275\315\330\315=M\365\262<\360\333-\275\216<\300\275\216c\256\275\'SZ\275\270\226\330;\314\365b=\354\257\\\275\212(9\275Swh\273\330\340v= \331\254;><\330\274\347\340\307\274:\215\311\273\026P\236:\2461:\275\002\274\201<%\347\254=w\266\337\275\203\313}\275\023\034\031\276\235\252\342\275\002a\"\276\352\027-<{\315\003<|\336\022>\261\037\247=\303\316\367\274\271Q\265=}\260\350=}\203<\2736\346\032\275\357\305k=\324\034\373<4\"\254=\274\177\217=\023F\357\275Aj\267\275\372\016\007\276A\353\330=\026r\"\275\277c\346=\177\254\264\274\331\314\215<X\367\315=[\373m=\266\227\267\274m\347\246=a~\247\275\265\204\013>\237i\327\275k\213\'=\'I\016>\023\3104\276 \210\r>We\375\275ps0=H\215\265\275\350\016\312\275\357\311\222<C\332\315\275\212hz=\372a\312<7sJ\274\252\344\260=\317\234\227=\256\243\201=r\301`=\240n\346\274=\306\333\274\247\3504\276F\266\270=4\327\001\276\357\305/<K\323\260\275\343\030\r\275\001\337\275=K\216,\275p\337Z\275\340M\007>\200!\375;$\207\034\275\013\027\277<\347\215\333=\225\336\303=\367~\321=\023\366e<\014\217&\275\227\374\242\273\363\230a=\214^A\275\356\340\003\276\254T\005>\246\000A>;-K=\220\344\205\275o\313\020>\217\331\245=\263y.=\017\222P=\323\275\260\274\203A\231=\213\355o=\275\234s<0\212&>\035\235\225\275\223\305\301<F?*>s\226\266=\217\331\205=oea\274\177\336\314\275Wag\273\tz\273<gK\202\275[;\n=\261\306\240\275_C\222\275\253\301\177\275\035\375\213\275\23580=\033\023\013;\027<G=\301\200\023>{\231D\274\017\304\324;\350\320n\275\373b\331\273\327\0266\276\372\263\320\275\271\021\311\274\316\024\226=/Z\302\275(\231\235\275\\\004\017=\251Z\276=H\033\236=\317`+\275v\"\227\275\253LK\276SR\372=\360Uh=\177\206\253\275wSJ\275]}\213\275*\223V;\337\035\215\275c\354\230<\330D\275=\355\r\374\274\357\375\\\275P6\344\274#Q\261\275DV\024=o\227\211\274\177\212q\275D\241!\276\320]o=\257\0136=\263A\240:Z\227\232\274\225J]=\200\003\'>\234\264t=\241|-=\367\255\026=l0\204\273\336M\016>\220`}\275\315P!\275h\344\363<\2125\020=y\004\033\275l+\243\275\310KQ=x\331\207\275\027\260\t\276\247\331\251\275\021\010}\275\322\270\327=\016\230w\274\370\341\312\275\253p1\274\313\361\n\275\026\221\332\275\365\355\006=\264\251\251\275B\267\327\275\227l\307\273r\350\234\275\372rD\276ZB\024;\3034.\276\307\210\305=G\004\215=\324j<\276\267\233\270\274\364\2656>\315\227\301<\\D%<m\005A\276\r\t0\275 \302\367=j|*\276\267\216\r=6\"<\276]\256\337\275Y`6\275\301`\275\275cR\037>th\367\275\037\354s\275\257j\250\275\222Q\230\274\255,\242\275p\257l=\255\nL\276\003Y8\276$\2132=U\343L=\2063\001>\365\255\270\275X1\034<\313Gt=\224\316\356<\353\0045\275hOE\276\201\240==r\202\233\275\303L*\275b\214\'<\342\006\356\274\014\314w=S\213\253=\352J\310\275\305\227\321\275\200\371H\275\360`\244=\372\030\243<b\367\301\274\022\000\342=\221\275\233=\312K|=\312\227\006\276j\340G=\036\370\342=\230\177\320<IV\031>w\277\266=\306$\030\275@\003\020\276\267U\207\275\027\177s;\364TO=\315\005\253\273\323\177\027>\261*T=\220\221N\275^u\217\275YU\260\275FH\346\275\354:\326=\271\323\233=J.\001>9\273\032\276\334\260\233\275\232\205\275=\010R`=\272\336L=\363<F\275?c\322\274\370\363l\274LQ\246=\210\372\211\274\330@\034\274\232\014\035>\'\313\250=\214Cc=\375\222\325=\017\315r\274`\260/\275\'\353\242=XTt<\377\036O=\332E\267\274\355\245\351\274l\277\027=\236\256\234\275 \333\031\276\332\\\004>\177\217\033<\224\245\200\275\303}\305\275k8\370=\271F>=\314\034\336\275\217\237\207=\322\304\327\275\236\034\273<\204\363\353\274\022\312\210\275\205\005\206\275\016`\245=\234\223p\274:#\350=.I>=\265\307X\275\277\014v=\326j\215\275\247H8=\363\202\266=}\306\006\275\332z\021\275\303\252\231=\370\217q\275\277\202\n=\242\203$\276=\324v=W\303\333\274\317\322|\274^\200Q=w\t!;\242\002\337\274#e\371\275r\236\355\275h.\346=\324\213\210\275f\255\007\274B\tO=L\346\221=D:\230\275\223\361\017>\271]\371\274)\035\025\276B\266\014\275\"B#>%\000\223<&\235\205\275gO\247<\277\231\343=\311!\266<\344\277\341\275V/\367\275\034\242\031=\241\230\355;\243g\362=\316\244J\275\216\344L=\0279K>\023@\342\275\\;/>\034\352\223\275\347\275\013\276J\345D\273l#;>\364\235\313=\264o\004\276>\316\236\275Ph\267=\002\020B\276S*&\274\260g)>\202\202M>w\350b\275w=\334<hz\311<\375%\351=\340\251K\273\021q\026>\233`R=\320\222\217;J\360\215\275\243\2735\276\267\036\034\276a\300\336<D\255k=p\233\367\274\305\026\025\275{p\302\274\322\2629=\0214\020>\325\243\301<2\265G\275\277!\252\275Pd%>!C\002\275\343\370\367\275\247\202I\275J!f\275\3561w\275\025`\275=\214X\224\274O\261V<\206e\030=\345\030\360=\364([=Ck\236\274\360\017`\275U\337J>C\264\034\276\216\212\252=2w\340=\001\243\351\275\032\365\245\275\314\353\n=\3275:\276\037B\322\275\331\201%=\207\021\224\273\227\346\214\275\334\201\307\274[\007\317\275Y\320\003\276g\t;\275v\306\024;\273\2371\274\264\343\365\274].\215\275\211\361&>|..\2761|\250<\310\336\217\275r\270u=l4\221\275\372i)>\270/\333=.W\027\275\014\3237\276\3663\217=)\343*\276\260)\251=\000\030f\274e\274\274\275\314\216<;\026Q<=\n\034\323=\326\341:=.\277\232\274Z6C\276\030\313@\272L\027\022\276\007M\372=\362\315\250=\300\327\021=\255tw=H\225$\2748C\330\275\0214`\275Q\3610\275\253(_\275\223\231\353\275\214~~\275/{\n=O\322\264\273\231\320\264\274<\021\265=\351td=\211\241\000=\221D\323\274\017\254\346=\022\242L=Y\006)\2769\222\014\275\254\365\030>\353\324\'\276<\241=>>i\351=\234\315\372\275\306n<\275n6#\274\034%:=}{\322<\374jk=\267\363\">p\255\350<h\257W\275/\376\354<n\226l=8:\207<\014\320|\275\213\2250:\375Q\216=\311\351\001\276\232\356\356\273&N\260\275y\003s==!a=\251\354\"=\233\251b\275\312\344~\275\' %=\"\271\002>NR\003\275\036\324\241\274\2621\200=\177-\366=\320\362\002\276\2535\367\275\202\376\303\274N\220K=\265\214\036\276\266zG\273\346\256\351\275\306\317l\272\315\214\310<\214\250\375\275@\037&=\nw\024<R\037\032\276\372\370!<hH\257==\256\004\273\215\274\367\272\346\276>=\220\375\'>\263\342@\275\276\336\016>\372\247\023\276u\375C=\224\213d=\326\3149\275 #\353=\033\262{\275$\377\355\275\010\276\254=\234\003\t\276\241\375j\275W\336\306=\234t\226\274a\213\313\275\205[\252\274\351\230\025>\222\240\310\274\277\302\204=]\377\030\276\003{\'\273\345\316\321;\t>\177\274y\310\035\275X\203\305=P\3463>Q\036\001>\231g\335\275fy$\275\261#\312\274h7\322\275\306f\324=\217>\214\2750\3404\272\257c\276=\036\307K\275SU\273\275\032 \005\275\227\225\220\2758F\021>k\357\206\2750\305*\276\177\350\260;c4\210=\274\307-\275\256D\034\275\354n==[\277\366\2759\333\017\275\247\242\366\275\253\362\007=\327\363\002=\256\003\200\275\342\253\366\275P3\037\275\342*\222\275\323>\361=9\2621\276&e\217\275\007\266\t\276\000Z\013>3\342\355\275\031\337\347<\212E\306;\024\224X\274^\364s=\332\232I\274\322D\027\276\000\021\314\274\n\301\032\276\313tA>\350\0324>{\231\232<\014\216\244=}\373\243=\3365\252\274\370\264\300\274\'Q\264\275w\250\002=\326cu<\272\016\342\275\306\247\271=\333\r\260<?\312\262<\225\364\204\275\263\300\322\274bGG<\370\025\231\275\272\036\216\2747j\227\273\266\227)=-\277\004=T\001\266=\307\356\301\274\305\204\231\274\271\004\307=\266\022[\275\257\235\356=\225\014\r\276\245\273\254\275U\300\246=\331?\226=\322Z\375\275\nd\305\275P\202:\276\230\373g=\270\211<\275\267ow<\325\241%;\001\004\027>1\300o<H$G<\024\3211\275\352ev\275\224\224\253=\373r\305\275\320h\355\274\333&@=\313\301\357\275\273\233\251<D\236\r>\245\206\265\275Pm\271\275k\342\313\275\205\000\265=\025\262a=\276\256\210\275p\270\241\275\236o\254\275\004\302#>\214\373\004\276\316\205\276\274yN\271=\230\227Y\274v\212)>}\211\247=\035\013\303=X\357\362=\tB\276<\035#,=E}\353<|j\274\275\373P\023>6b\362=\342\355\232=\346\246A=\323\331\256\275\336\031\370=\327A\331\275a3\004>\311\014_\275\221\341*>\344\201I\276\225\215\010>g\301\365=\354\222\331=\233\212k=\t*\366<\232a\026>\031#\226\275\303\204n\275\321\362\223=>\363\021=\255R\314=\201\005*<x\035\251<\237\315\226=\216yV\275\326)\262\275.3-\276\014\302\306\275W\265\344\275\206\276\035=\353\342\354<!C\253\275\324\031\022=.\024\202;\273\347\266<+\022\177;\241\351\177\274FX\\\275\350s\027=#Ig\275q\204\213\274c\210\240\275\314wL>\261\005\221=\202\263\013\275\223\201R=\032\221\344<\250?\303=\205;-\276\325\006\341=\222\276>>s\337\026\276\031\374\335\275\357\303\202=\331x\215=\364\007\221=O6I=\006\236\206=\277\351r=\336\0368\275%r:=`x;\274\224\276\332\275\250\262C=lH&\275b\347\006\276\273\272\026>&}\270=v\240h\274\251\217\227<J\300\007=\r\216/=\332\314@>+\360O>b\376\323=?c&\276o#\214=\353\326\351\274\337\317:>\354\243\005=\206U\032\2765gC=0g\330\274\314\363\016\276\252\227\002=+c~<b\230\203=A\220H<\305G5>\034K\014\275\232\364\022>\246\034\242\274,m3\275o\246\005\276A\277\205=\372\373\026>\336V\261< \203\265\275+\247\315=\023\272\236\274\247\016\023>\264F\253<\275(5\274$\2157=y`Q\275Z\\g\276*i\276=\n5\025\276\272\0022\276\357\337\305=\235\312\335<\017\244\333<J\177\273\274\361\326\273\275\333+f;\341@y\275\306:+;N_P<\312\212\211\275\255\275@<\216\316\257\275\323\303p=\274\244 \276\3664@\276S\t\302\275\207\002\307\275\216K\'<v\204=>\207\215\216=/\201\237<\262\302\345\275\304wf\275\\\216\250=\354\263\020\276\005=O\275\323\r\235\273\t\335\327\275\227\025\213=\222\014$\276\333\002+\276M\027\310\275>\305\334=\235O\314<N\314\203\275c\213\r>L\206\262\274\371[]<\243\356\213:\027\026\037\275\243\027\002>\323Xa\275\302:I\274u\311->\225\2632\275\222\347\327=\003A\005\273w\000\364\275\017\357P=\377xp\274Vf\023>@\231\001\276\204k\004\276u\273\036\276\035f\207=\'\360\363<B\314\036<\276J\231\275\327\255\315\275\367$Q=\221e\332=\367\247\010=9\273\037>\t\334p=\272p\226\274&3\317\275I\222\240\274Z\324\223\275\010\252\246<S\266\217\274\262>;\273O\221Y\276R(\304\274\222,\272=\335\000^\275\202\227\273\275&:\033\276\272\002\307\275`A\277=\216\213\373\2720\003\005> \206\247\275\201\222+\274=\225\264\275\347\n%\275\325\277\265=\210\006\2119\376<2=\312\230\000=\333k\241=\303\271\245=\270\206\035\275\274\275\267;\032\320&=g\334\265=\306A\342\275\246\256\023>\350\212`=\221x\256\2751\225\007>\002e\374=\243\263\265=\227MU\275\247v\202<%\250\030>N@\025>\201\365\304=\226d\251=\350\033\223\275\002\3427\276C1\232=\365\246\024=\2034\217\275\0169\306=Y\025d<\033\220L:uX2=\226\241)\275?\036\232\275^F\226=1\253$=\357e.>_\335\202\275\307\330\206=\2237!\275\021\215n=Y\322\316<\374\t\310\275\241\t?=\001\375\263=iI\322\275\367px\274\332\346$=yP\010\274\254\203D=\241\362\224=\300$\330;\346\265\021>&\335\241<\363\373\350\275q4\021\276\333\362\261=o\310\323=\311\216\251\275Sh\221\275\300\0004\275F\027\265=|\n\336=h>\222=\232@G=#\362{=\366\264%=\322=\362=\272\257\301=\307\240*\275\365\204_<Q\224\210\275\031\\\031\274\016\201\r>1\006\033\275?\366\227=\333\206w\275]e\304;Vk\034>\016\250\224=ra9;A\306\246\275\207)\342\275<\306\343=\352\351k\274B\372\323\275r+\260=\340\025\003>,uw\274\324\301\220=\264a\314< \342\211\273\317\364A>$\022\005\274\200\341\004=\235d\266=\301\001\037=\022o\323\275\356\2042>\230\373G\271?\364i=zE\352<\030C\025>\243\317\r>\306\203\001\276\3464/=\265\340X\274N\246\302\275\240U ;#o\230=\006E8\275AW\326\273\233\274\034\275l\236\270\274\255\237 \276\326]7\276$Tq\275[#\302\275\307\2257=_\372\030=<\244\206=\245\234\034=w\350\010\273\323\250\340=-\331\207\275g\264\003>\350\032{\275\320\216\302\275\242\025Y\275\224\375\203=\354;\337\274\236\\\277\275\226\356p=\340\313\"<$a\r\276\206\371\227<\212\225$\275m\313\372<K\177\037\275\346\001\237\275\213;\030\275\266\367\217=Y\307\r\276\\\375W\275\240\'\266\274\247\316\347\274\020\377\006<\211\004\224\274\261i\373;\361\362\264=g\245\036>;\014\302\274\277\243\020\276i\232P;<\211\017<\r\312E=\204&\210=\366;\257<\336~\236<\363k\334=\343\303\217=w\'M=\324\272\373\2758\311r=\214 \366=\035\331\311\275FY\233=4\332\277=\311BO=\3173\270=\374\253\324<\033?q=\353\250\274\274\251\344c\275\001I\n>\363V\014\275\273\221\341\275\202\215\351\275\200O\014\274\374\377\304=9\355\324\275/\324\026\276,\0104\276\361\037\357\275\322X1<\014l\245\274\263\352\206\275\343\006\252=\331\210\333\273\375y\241\275\224We\275\312<\203=\363X\202\274\207\376{=\202#\233<\'S\225=\367\352C\274\'+\215\274\217#\013\274\2001\311=\332\2241=]\354\322;`\375%>O\200\337<\237f\n>\332E\301=5\305\214<u\302E= A\001>`\234\036<\3111_<<\233\366\274V\n\245\275\032i\'\276\337P\221\274\230\352\r:^iP\276R\321\">\271~\020>\262\306X=j\240\023;7<\252<\377x\254\275\347r\013>\031\220\224=\004\356o\274\357\347*<\204\313\224=\364m\225:\304{c\274!\313\372\275\367\212\200=\370\014k\274\211\311O\272\030\265C=\257\230g<\'H \276\006\334w=\346D5\275&*\270=\372\027?\276_v\031\276\365\251\347<\240\003\031\275\237\020\245=\344\036\325=\251\367\334=\031{\000>\315\033\211<\227\346\"\275\247w\001\276\032\277\347\273\200\352\235\275CRq\275\222$5=\266i\314=\317Xg\274\204\276-\275\336\364.\2768\221m\275#\222}\275]L\245=\204.\202\274y\"8\276\207\254e;\231\320\337=\321\246_=31^=\021\n\260\275w\314\362=g\023\222<\214\335\332=p\251\357=\204\275\340\275V\335\265\275\266\347\277\275p\345\207\274\334\237/\276\036\310V\275\351\204J\275&k\027<\375\177p=\264\274\231\275\257\266k\275\215\321H\275J\3440<\035\231\267\274p\007\021\276*\201\257=\213\317n\276R\355\360=i\350a=j\250\034<\332@\216\275}[G\274\323$m=hb\232=\244\340\254=\340\312\322=Y/Q\2752\377\375=\244\250,\274\206\340\301<2\303\372\275\217%\362=C\237\271<\010\342t=)\243J\276\273\310\204\274\244\254\031\276\274\221\344;\035\320%\275\003\335\270=g\346z;\240=(\276\351\000>\275\025\237\217\275J\'\356\275\303U`\275HoT<.>\363=N\310\333\2755\303\037\276\312\027\247=\261\233e\275\2206\365\275\214m\347\275F\0375>\024\336\202=\236v\224\275\373\257\376\275\332\232\256;\355g\000>\323nJ>\263\207\256=\260<\203\275>\002\301\274W.O>9\030\263:\330y\034\275^\255\266<\363\237\243\275\245\221\373\275\202\235\320\275V\305\360\275\361\301\372\272\357U\261\2759\341\037=\223\241\032\2760\213\320\275\237\220Y\275\225\232n<U\207\330=\305#\224\275FF\024\276E\364\255=\374\367\252==\3474>\036\254\232=l\253\020\276hF\242\272\360$]<\330H\022>&6\346\274\330\005>\275h\344\263=\034\317\246=\0272@\275\364\272\r<\247\030\223\275\206(\367;\227\213\252\275\244\272\024\275\317-\037=-h#\275\003\302!\276ZA\201=\273[\315=\246\267\313=\251\213V\275\215\303f\275\276%\003=\003\023\232\275\2731\r>\327[\217\275\223\345\371<v\323\353\275\310\266*\276e\206\001\274\0338\231\275 R\207\275{\375\336\275\226\253\274;\225t6>Lb4\275j\347M\275;\211\216=\303.8=\023:\270\274\215\272\213\275\310\n\233\274\03423\275`\354S=H\027\223=\274c\031>0\027\377\275\364\3321>\377\250\241=\376\262\215\275l;\000>OPA=w\235\n\276\345\326\344<5^\032<\007\255\317\275\270\224Y=8\233\003\276\200\006h=\316\320O=d\010=>\374\364\013>h\215\301\275e)==\342l\353:\30600:\337\232I=@\0345\276\302\216\241\274^E->S\314\211=\212\024 \276\346\033\250\272{$d=\206(<=\305@0=W)\024\276\210\233/>+\003:=\313\346\216\2744\205o\275B6\036>38\006\274\r2\000\276\375\215\270=3\237\264\273wIL\274\024G^\275\304\303\033=\213\271\331=\177\210\317<}\330V\275_0G\275\331K\207\275A\024\020\274\341t\331\275\355\030\256<\307\301~\272\0237\210\2751\377\356\273\037\305o=Yu\004>\177\313\254=\t0\001\275\010\263\010\275\237\276 \273\202\253x=y(\205=\204+\t\276~\354\016\275z\317\366\275|\035C\276$\"\257\275u\032\301=\275\243\014\276\025E\262\275\202\3605>\323\254`\275|\340\254\275\224\267\030\276\336\r\010\276\017\235V<{\016\266\275\344q\354=6u\020=A\252\261=\352\266\033\276\016\220\000\275\226\376\351\275\203lc=\360\332\307\275\357\036\271=\001i\241\275\016(\241=\022f\227=\276\253\275\275w\353\342\275\331S:\274\366}}\274\221B\263<\014\027\263=\210\222\005>\347=\273\2753\351,= \006\002>;\370\236=\014\316\032\2761\377-\276Xm\341\274S\2562=\272\353\257\274M\324\224\275%wM;dD\344\274I\005\234<B\004(\275\276\007u=\220\360\216=bL/>\227\301\037\273\332\203\005>#\016x\275\343]\025\275\004.`=k\333\264\275\177a\311\275\224P\326\274\034\366\317\274oP\034>\'\361t\275\215\263D\275\014\342A=\037\352B>\220\354-\273x\263\245\275@)\006>\323+\370;\303\231\274\275\026\203\265\275\250\312\307\275\333\336X<\253\373\364\274\t\335\\<q\307k=\335\024\001;\261\273\271=\'1\033>K\250\333<2\324\021;\331>>=\306#(\274\337=\250<\014{\312<o\005\t=\330\344L\276\374\334\250\275b\000\360=\226\333\t>~\235L\275\000~%\274u\277\251\275\365l\222<C\343\365\275\362\'\013=\221\263\270=o\n\002=Ee\034=\221\006(=+\351\322<`\223\006>\325V\205<P\324K\275\023~\016<\353\251\251\275F\014\246\275\377\353B>\0265\246\275V\373\206=\266\021e=$|\374=\'\202\362\274=\360\265=\267\004\030\274\337\327\314<\275\201)>\003\"\\\276\007\266\233\274\336\367\007>\210@\335\273)\315a\274\332rS:0\230\034\276\030u\202\275\037\260\275<\030\351\225;\361\010O\276\010=l=\327\360\306\275\350\242D\275\366\341>=\347\300X\274\032]j=\262\360$>\260\207\013>\003\210m\275{\202\261\274\215\n\261\275\355A\201;\264\035 >\034\275\304<\217\351\314\275\210\030\210\273\374;J>\254\004i=\005\204\000=\325\210c=x\234\033=\244)I>\302\360\230\273m\216\023>\037\317\306=\003\344\252=\267\335=<(\177\320\275<\375\325;|\224?\276\360\226\214<\3007W<\370L\216\273\030\346\r<Trm=}U\004\276}Q\007=\306\024L=\010\200e\274\315\003\334=6e\345\275\343\231\217;\240Z\023=\275\215/>\255Z\235=\263\177\001=\270<\025\274j\366\036>\254\\\r>\342\010\234\275\267pg\275\251\355Z=\352\3525\275\377\355\330\275\034\311d=RX!>\360\016\332=\367\305\353=\261\276&\273\004\351\237=\353\034\274\274\271\366\014=n\022\255=\370\023\250\275\031+8\275\336\236\022=\333\013\227=\352^\262=>\326\005\276 \276s=F\365>>tN\221=JR/=\220\013\355\2740\303\247=u?\215=\350d\260\274\357<\004\276\276\251_\275+\3053<\373\031\225=\037\025\200\274\253bi=a@\256\271\331s\226=j\303.\276\302\246\032\274I\222\276\274\005\362>=\246\203\374=T\004,\275\256\034\201\275\2116\231\275\010,\301\274\251\202\254\275\232\226\370\275\373a\275\274\312G\246=\226P|\275\0022*>\363\252n=\304\r\000>\346\251\334\275\304\324B=\222\302@\275\311\020A\276K\364\010\275P\326\307=\265\303\360\275\227\271\271\275\271\242\226\275v\252\010>Ky\207=\017~\274\275\372V\252\275\003\276\260\274\266\362\300<\252\030\207\274*\225\343\275~\352\213\275o\0008\275\266b\236=~RL\275M\242\316\273\211\250\227\275\300R\206=\330G\017>]\233\223=\363@\032\2765\357#>P\251*\275\201\321\004<f\353\223\274M\321\376\275;\336\313\275 \217\316<\313\355(=\317i\316\275\004\273\362\271\321\202\355=S\371\320<\317N\376=\0075\010\276\t\245\305\272s\010\311\275\342\243\017\276\345`P\275\254Y\025\275\234\252[=\276\241&=\3242\234\27583\020\276\3139_=\232\004%>\032[P>\022\214\260\275\214!\342\275\315\245\374=w\t\245=bo\232=\003\021\273<\207ZO=]O\214\275\372</>n\017\217=\351\027.\275F\211=>j\303\245\275\222;\000\275p\001\022=\274.E\275\336\274E\2755\027\334=\206\3208>\03792>\221\274u\275\"O\326\275\363\376C\276\234V\254=r\316k\274Y\262?=[\233\254=\255\351\022=\332)\010\275\203\\l=/\374\t\276\026\361\001\276\340\273\313=)\335\003=\024\361\003=E\215\216=\2514\213<:VK\275]\303\'>G0\265=\274\002\220\275a.{\275&G\313=\357\317\314=\230\353\376=\027\210\035\276==\235\275\203\201\366\275K\311\250=\311\272\002\275\231\254\263=&\020\276<\243\313\001>P\233\203\273\032\227\030=\273\240\036=?\227%\276S^\031>\306P\300\275\252\020b>v\003\021\275\376e\232\275\326K\024<\256RP>f\211\214\275*\177\177=\026j\307\275gC\027>0\310\322<\336\002\322\274mi\212\274\355\223\r>|\232\024<x\035d<\206\\\023\276\202\021*\276\372\217q=\262\000\255=?\032\306\275@\205\302\275kq\214<q14>\223]w=\274\264\253\275\250x\027>bD\241<\"\204-\276\276\341\224=`&\252=\016\227\370=\362\367\212<o\337\202:%M\204=\332+e=\256\265\340\275\255\247\004<\371\253\262=\342\\Y\273\321\247\017>\361\232\200=U\003\274<\254\341\374=&\201\r\275\365\336\363\275\2667\226=K\226P\273\256\022\014<\323T\252\275\356\353n\275v\253=\275\247\310\200\275n\227f\275\344\003\267<k?%\276Lw\356\275\035\256\361<Z\224\004>+\2244\274\232\223)\275\\\366r\275r>\323=\r\333\276=\354\312\257=\373\\\364\275\005y\031=9d\230<Bw\263=/\302\334\275\3607\206\275\322\257};\250\303k\275\254\030\222=\240\344\311<\312\n\014\276)\242n\275]I\261\275\n#\222=\332//>\024\320\261=\304f}=I\365p=\207\217C\276^>q<5\342\327\275\n\277\360;\311\317\322\275\221\010\r=\376T\033\276\013e\226\273[\034 \276b^)=\347\303y\275\027F\034>3\360)>\252\014y\275kV\033=-\246\337\274g\"\357=\364\030\306\274\246H@\270\301\001H\276\2073j\275\306\252\006<\020p\023\276\215\234|=\332M\364;\257\317\251=\357H\310\275y\366\274=\010\311\277\274=h\262<:\255\250\275\232\016\025>\220\017G<\\F\204\275\177\275\272=\375\310\000=\261QY=^)!\275\226P\253\272\005\240\350<\353\206\003>\360\262t:R\024\003=A\274\343:\342\215\021\276\037C\276<\217\343\010\276\326\253\323=\251\370\223\275\'>0\275W\350\032\276\254\305.\272\305\3337>\270]\000=\334\245\037>\225\272\261<;;\273\275R5(=e\246\305=\213\225\204\274~\320\360\275\340\255\022\276\214\031D=&\037W=\2614\307<\246Y\245\272\203:\364\274\214\260\007\276\267|\276=!\211\257=D\333\002\276#\006P\274H\236\016=x\355w=\204\324\023>pP\006\276\360\037\303\274g\020\020\274\306\267\355\275\310U\003\276\"\301\313;\270\024\301<\221\235\365\27493`=\221xS=\227\r\333\275u]z\275\215\'\273\274\277\212\351=]h/>\251\222\222\275\014\242\027\275@\236\330\274\231\024\013>\005\r\224\275\325\337U<1\363\230\275\255i\302=\342\0300=\257\271\337<\212\334\'>\30452==\354\036=\236,\221<\252B\373\275\026*!>\202\004\322<\304\372\200\275%\304\n\276c\350#=\010\023\201\275M:9\276\3239\332\275/\360o<\313\315\347\273mJ\241\275\007\240\225<\325e\310\272Z\301a\275\320\351\354<\264\270\207;\331\2669\275aU,\275\017G8\274|\353\004\276\224\343\025=\313\003>\276o\345n>A(\\<3lu=R\031f\275\203\342\r\276\241\344\312=t\277\036=Ur\240\272KE\362\275\364\313`=\277hE=r[\270\274\235\350\335=\305:\004>\230\251\373\274(\360\">\244s/>\332z\204=\376G\010\276,\323x=8\032\325\275\263\024Y\275\334\005 >\351ap=\337\213\\\275\001\363M\275\001`==g\026r\274:\306\261\275\273\t\257\275\203\371\263=\237ZN\275\312h\324=\230(,=\177\334\222\272\376k\222=\351R\t=\2020\'\275\377\026\202<\322\214\325=\326\036o=\314\217\214=2|?<+\365\253=er\t>\310\326\376=\211LH;\003\351\272;-\267n<y\354\021>X\365\224=\211M\230\275\205\210\324\275\021f\253=\312\237\222<\377\263\021>D\236\367\275\"\316\014\276S\370\247\275\232\324\202=\3158\341;\241\274\356\274\275\247Q<AA2>\333\323\204=\311\004b>\322\245\224=#X\326<8nh\275z: \276W|\014\276S\201\223\275?\345\234<\023\203\304\275\264p\304\274W\277%>R#\364=@z\036=~o}\275\'\276\272=5\207\225\275\001\220\343\274W\377\267\275\251`c\275\204\304\023\276\345#m<\005\317\252=\245\203\304<\3621\373;.gM>}\317\234\275o\252\021>i\214\302\275\272H\350\275>\323\016=\030,Q\275\3637\210\274\267\366\244=\225q\347=L\360\330=\032\247\266\275\266\017^=\027\354\313\274X3\026>\352 \005\274\314\251:=D$\336=S\311\207\275\231&8\2769\233\371\2756\225\352=x\350\017=\326\255(>S\214\014<\034)8=\251\231Q\275\260\366\304=Iy\233\274Y\255\240<\001e*\275\nR\274\274\344\260X=PC\310<\027\3201>\225/\237\275*\267=\276\325\023\245\275\311\323\'\275\362\371\321=K\367\"\2743\310\202\275P\201\262\274M\013\272;\360\033*>(n\'=<\374\275=\260\230\227\274\303\235\317\274\023\360\256\274a\227\212=\363\2363\275|!\022\275\'q\266=s\323\237=\357^\347=\317O\324;\234\356%\274\027\343\363\274\356\204\244<\367l\212\275\354\037\372\274b@\207\273\212m\274=\260{\206\275\355\252\002>\320\346\240\275\0147\366\275u\260\005\276)|\243\274\225\210\260;\347\027*=P\374\363\274\227\203\276\275%\334\251\275\370:\310=\245#\221<\203e\000>\273\220\274=\027\350\030\276mE\035\276\021>\361\275\246\201\037>-\037\010\273x\'g=\272w;\276\241t\264<\036A*>\316\324\316\275\353\331\202<U]e=\036\235D\276\333\235\235<x\360#\276\222R\025\276z\227\t\276`\345\001\276\033\241\022\2765\343\273=$\013g\273]\024\245\275\306\032\014\275\327}\026>*\013_=!\3748>\260\275$=\017*A\275\373\261/\275\027r\002\275\020\254\010>8\357!\274\376[\211\275\372N\210\275]\206\233=F\260+=\311\361\021\276\211\255,=\024\2072=\377\360\245\2752\n\262=\256{\255\274\037\366\311=\373\001\216=\336\022\212\275X\366S<\374U\010>*\352n<\240\331/\275\275\274h=J\367\005\276\356u\021=\241\250\353=h\023\347\275\325\245\205\275\377\257\024\275ogt\275\356\200H=C\253 >=\247\\=WBl\275y\304P\276\334\250\251\272\023P\317=^\271\267\275\352l\001>\357\321\247=\275Z\023>\340\243->.\002h=\313\213\263\274;~\222=4h\222<6n`=\204\301R\275\315\350\326;\005\352\031\274J2\332\274\023\253\262\2752\256\013=\017_\202\274\230\233\002\276}\270\345=\210\306\322;\t\215\231\275zW\251:\001\004\240\2751\272\270=\020_\316\275\361W\330<\262\221\270=\264\004\206\275\030\375\310\275\375\312\001=\303\337V\2754N\370=\036A\325==V\232\275q\265z\275C\022\215\275\224\200E=y\013\232\2758z\335<Sx\350=\210P\231\275\361\301\362=\265t4=4%\223<\177\220\017>[\330k\274\375\357\207<\035]\220\275\337\362\321=\n\206\264=k\263\252\275\315\236\357=J\271\254;\336\204\030\275\316\266\316<\371\303\313=\333b$\276\331|c=*g\241\275\245\0300\275\224\025\201=\2544\312\273\250\r\036=ZIh:e\302\246=\263\177\261<\355\227M>P\3612\275\364\242\235\275\355\341i<\226\355+\275rG$\2759\317\260\275\207`\333\274\321\261\240\275m\216\366=o\"$=\364y\254<5\243\035>d\260\260\274\037\306[>4\3225\276\203\243\006>\021\336f=wE\260\274\200\252\246\275\037\002B\275\304\356\206\275\r\0349\275!D#\275\361\355J\276\327b\272=\032rN\274\2745B>B4\254\274tF?\276\310\3711>\270\236\024\276\212\277v\275\211\366\227\275U\215\034>\n\026\330<\"D\355\274Ob\213=\177w\234\274\214_\001;\357\251\032\275I\305\240\275\037nt\274Wu(\276\251\304#>\246J\211\275\3410\235<|\243V\275\333i\307=\237\326\222=\213\303\252\275I\322\223\273R\271\225=}\274\362:\210\363\251\275\216\265}=\343@\263<1=\224=N\361\006\276!\230\002=\327\331\232<\020\036M>\332W\242<\230\255\335\275\335\255q\274\001\016\204=\260\013u=\017\253\000=\342W\251=\022i\271\274M\224[\275PU\355=H\202\317\275\010r7=\\W\206<\244\t>>c\r\017\275\235t\357:\013\213\236\274.^\364;\267U\243<~\305\251\275\241\003\221\275\036d{\275<\337+=\203\345~<\033\247\325=\364V:\274\223sV\275\265\350u\273\327\'a=\\\032(=Ip\317;\200\327\035\275\034E\353;\2207\n>\026\023\004\276\321\2570\275\256\024&\275EF\203<\351cQ\274Ei\341\275\216\376\004\274\201\307X\275\365\222N=\246\330\211=S\366\017\275O[|<q\320\216=j\370\212\274VV\263=\022\327\004<D\375\236\275\340\371;=\364\267e=\013\204\234=\376\244\327\273\0330\304=\017\373\374;\266l\270\275\203Dh\274\227\'\277=\224\261\256=\372zY\275\266\261\025>\251)\352\275\321Z\022=\330\324\236\275h\r\322=\231\312\202\275\262\337\322=\377\256\212\275\215\337\014>.d!=U@)=m\301\373<\n\235 >\376m\022\275\234\326\253=\023\203\213<\3751\237=0\372\274=(\254C<\325\010\362\275\374\327\342\274\256\212\200=\332tK>\356d\020\276\362\336.\276\214t\230\275(H$=\005A\035\275\233\017\007>\017\340\225=\254\370\224;\254$\r\276\276O\307=#\363W=D\322\037\273@a\010\276x\224T<\344\234\346=|\243\311=\024z\310\275E\253\222; \232n<U\375d\275\337\307\006>8\016>=\306\236\335<\224H\261=\177\361\037\276\317\232\373=\001B \276\260l\311<%\374\333=\346y\313\275\331\272s=\343Rc\275\257\331\230=\221\013g\275\317\306\001\276X\002\264;2\204\304=_\306\005\276\257\316\033>i\010\t=\\\266\007\276\326\247\266\275`@\022\276\234\364\032>\326m\204\275\331\261\027\275\021\367\026\276Y]\024\276r\262J\276\203\375\220\275.\270g\275\242\007\035\276\343\014\024\276y\305D\275\277\341h\275{\370\203\273LC\355=\024\350\310\274\225/\r\276]#\213\2748=\265\274g\016\217=\353P\250\2749u_\275\362=\225\275\352\230\313;x`S\275\353\023S<g\027\024>*}\264=\344t\036\274\001W\270=bK%=\315\020\r\273+\256\n=\262\351\002\275\357\266%\276e~N\275\227\017D=\\\270\352=\251S\234\273s\266\304=d\233\001\275\336\032\207\275Ke4\275\2154\254\274 +\354\274\032\344\246\275\354\006\202=\024\034\204\275\361\000\353\274N\206\366\274\024s\355<)n\200=\211m\006\275\244\264\372=\005\312.\275\375L\205<\346w+>\312\243\261=\3415\332\274\"+\346\275WAs<\253,\n<\263\367\226\2750\306\255\275\217\237\005>:99\276\311\274F\272\225\370\301\275\234\315B=\245\202<\275u\202\365=U\207\375=\300\222\355<\034<\021>\236s\272\274\013\305\316\275\300I\020\274\363\262\306\275(\334\027=\340\\\224\275\227v\014\276&\331/>\210)\210\275\366\3501\274|H\264\275\231\342\030<\022\3715;\205\310\217<\037\0236=n\207\204=\3513\177=\332\341\372=\347I\355<\356\315\025\273\037\231\341\275\304\026\272=\304\322\001\276\242\275~\2739\266\206;\262gR\274\222\003\315\275-\207\375=T\024\326=\374\227\304\275\202\333\300=\003\254q\275Ee`\2768\265\261\275\353\240\236=\265\243J=\363!\245\273\313p\246<\312*^\274\362\257\013>\317\355\375=b\257|\275\030\273<\276H\217\005>\037\214\276<mP\037\275\333\006\034=A\230\242\275q;\321\275m\t\037>\312H\226;\251\r\323=\227-\247\275\301vc\275m\217\216=W\342[>#\257\323\2735\264\277=\016wa>5g9\275\035\237!>\254O!\276M\343\\\275b\177\266=\230\302\247=\2337$>\360Hg\273\224\302\r=\272#\236\274\377\233\264\275\336\245\265=\035\327\t\275\314|%=Q\227`\276\001]\017>\262\206\222\275\324\177\t>:(F\276\374\025\243<e\230\021<\021\271\r\276\235^->\333\376\352<Gi\314\275O\306\204<y\252P\275>\214\221<\t\0024\276\341\3660:<\373\206=\226\225\365<\\C\215\274!\266\354<\232\330\376\273\036\222\010=[\302K\275\0304P\276\356\337\364=\332.>=\343f\245\275\261De\274WM\010=\300[/\274\267j\030\275\214\232\231\274\347\234A\276\371\333\\\275\202\271$\275\211\265v\275\027\302\204\275\001 \n\276h\344\252\275\315\330\002>R\363p\275<\237\267\275\325P\316=\263]\337<\210\242X\275@q\335<\357\204\277=\026\346\244\275\345\"\265=>F\352\275\033\360\030=\017\303\210\275\235\236\331<\267\2670\276\2258\257=\373\300\331=\336\'J\275\245e\337\275\317\r\220\274\204\244k\275@7\035=\275\327b=\022\203!>\377\320\007=\302\021\006=\342\366\325\274\240\221\263\274\314\217\022>]\347\033\276\313P\273\274p\247V<\37387\276\274\202\336=;\252\332\275xs\375\275\263\343\032\275\t,d>\252`\345\274\211\272\364\275NiG\274\213\265\027>\336d\005\276w\226\037=OP\235=\001\345\">\266%g=\257\0052>\214\257)\273\351\365\314\275\375\256B\274W*\274\274\200\340\333;\275\351\231\274S\324\3108\227\261G>\215uT\275@\325\220<I\261&<)\330\233=\0276O\276\034\376{=\301Ij=\024\207\331=\234\340a\275\003WT\276Q\320\036\275\277\370\205\275\227\210[;\247\302\177=\013\233\317\274\203|\234=yh/>\366\233\323=e\022\267=V\327z=t\357\210\275^^\013=\357\320\250=\300\353&\275\201\271\240\275\0260L>\225\222g\275e\n\030=\213\262\216\275\256\004\344;\017\003\350\274f\264\035>\021\356\004\275\022\305\215\275F\364\216=>\366J\276P\324\371\275GkT<\201&C\273\033\020\373\275\365;\304;\022Q\032>\274\230\307\275\005\365\016>\254\342%\275\227,<>w\'\202\275\210\202\200=\324\324\322=Y\344\322=\022T0\272BX\023\276\277j\321=\311\0048=\354\264\200=\201\252\346=\027\333%\276\020LD<\'@\301=tW%\275\322\"\274\273{|\313\273\257\230\315=&\022\274=\342\263\230=\270\3554;\221\332\016<\361k\377=\253\2145>\313\200\'=SO\265<\345f\022>$<\321;\034P`\275\001\226h\274\tp\220\274\223v#\275d\002:\275\271\217\000>\266\352\013\276\2347\276<u\037\357\275\357\254,=\251\242\260\274s\322\331<}\347\t:P,\213\275%\313-\275\t\020<:\326A\302=\314\242\240\274e\344\222=2\324\006\276\360YV<\205\343\231\2733\023\310\275\357\311\250\275\267\211\t>\036\303.\275\024K\333\275Ko\311<6\224/=\237\363\210=\373\346\275=\200\007\270=##p=6k\233=\336\322\n\276\007\343\241<\025p\023\276\023\307\'>M\237\264;\242\216z=\022\001\226=\003C\300\275pX(=\211Y\361=\220\356O\275\334\277\351<\034*9\275\320\3475\275}`:\273W/t=\213\252%>\267>\327\275\246\271\272=\234\036<=\270\332\016\275\025\200\035>Y\3552>\366\0202\2769\217\361<r\262\234\275\212\301\020\276\374\351\310=\201\002\211\274\027x\t>\226\024 >\250\374\037\2750\347*=y2;\275c\"P\276\265\347\277\275?\232\311=\376k\243\2745j\342=\235\270a=\247\345[=\332\374\264=\337-\000\276\001G\014\276\270\"\215=fH\214\275c\257\317<#o\272\275\215\352\026>\333\333v\275L/\310\273\313\352\037<\245N\371<\246\302\276=]X\207\274\207t\214=\353E\r\276.\302\252\2743-\031;\251O!\275\355&m=a\260\267\275\322\210\\<n\243\270=z^\277\275C\016\177=\312I\017\275\374\227\237<\306\234\243<_\236\323=\243~\350\274\266\361 >\207\217e=\032W\035\274\367\037\214;\326\215\022>\210~\010>gwM\275\237d\n=\004\365T\276\201\315\226=A#6\275\3270]\274\267\013\206=\234\177K=*\347\247<K\025\326=dnJ>\006$\001>\371\177\255;\034\242M\274\326[\003\276\343T\022\275\ns\214\274\273d\300\275\323\216&\276\347B\362<\3738\226\275\336z\345\275\361\230\371=\030M{\275\321r\275=\001\320\005\276\314\3654=[\233\344;{o\303=\305C\263=\205Kw\275\223W^\273w\2565=t\023\306\274W\214\267\2741\022E=v`\027<D\234W<k\"G\275\374\247\250\275\316\r\317=\323\306v=\214\306\274\274\377\337/=\222R=\275\220\336\242;V\345!<I\247\274<Zz\031=s\223\004>\277\337\027\275vf\026>d\203\351=\333\t\256=\255=\024>\361b\207=(#\226\275kK%\275\337\017\377\275\353\275\036<jg\205=$\330\364=\312\260J\275z=_\275t\327\024<Bf\241=\251\246E=5\270\254\274\330j\014\276\240xR=\2126l\275\026\331\311=\223U\037\275\026\303\213<\377Y\035=\3102\016\275\301w\320\274mT\277\273\033.Z=7\367\204=mA_=}\340\021>\203\355\037=H\202\013\275e\010\332=63\242\274\014\254\315=r\344\001\276\326F>\275i\375\303\275\270 \243=\277\n%>\224\224\020\274\367\n\351\275f6W=V(\340\275.\334\260\275\303\227\016\276S\326\274\27502\363=\244MB\276W\nw\274\216?\352\2756\345\223\275\023\272\364=m?K>\332\323\023\276\250\000c=a\246*\275\200-\002\276\345\036\037>\310\201->g\200\221<a9\325=*O\033\276\373E\032\276\332\233?>\005\3173=\347\371\020\273\213\300\204\275\3313\222\274?4\004>\221\226\262=\310\253\303<\2401\275\275\223\342\222=\033\375\263\275x!\256=\303\314\337\275\0052\301\275\231&2>\005^j<\253K\310\274\000\246_\275\262~\241\275\206\n}\275\207f\361=`u\376\274GG\374\274\220\026J\275\267\r\331\275]\327\014\276\335\256\006\276\233\241\034\275\336\036\232\275\315\304C\275]\275!=\344\337\341\274.u\327\273\347\237W\275:\273\254\274<o\031\276Q\362a\275\223\373\330\275\345\231\325=\256\320\255=\227\371\031=\240`\300\275;\344\037>\032G\261;\201\365\021>\031s\363<R\3513>\245\352\"\276\2748\220<\343\223)\274\243\317&>\272\335V\274^\357\030>\254\240G;O/\346=\216!\231\275\252\004X<o\240\212<\255\214!=\352+\343\273[\306\262\275\265?Q\2753\206\206;\010\330T={&b<$@\303\275\345\032\351=Nv\200\2741\031\035\276\333\371;\275\257\026$\274\232\206\312\275\021z\237\275\226\177\030>6RY=\307\344\307\275\2179#\276\263\353>>ma\373\275VM\032>&\024\210=\246+K\275\322\376\006>\235\037\217\275\354\266\242=D\364/\274A\274G\276\227\226\303=\254\332\214=\207\353\025\276A=\004=\312\236\274=6Q\201\275FT\r=\217\026\033\274\347q\036=B\244\377\275\357\0204=\341\341\241\2756\337\007\273\323\010\330\275\314\243\275;\337\024\001;$\346O\275\306\254\344=\221\277\323=\"\261\306\275ip\221=Fg\317\275{\266\202\273\237\215\233<\256\320:\276w?N=\234\377C\273T\007\301\274\013\357>\275\257\002\375\274Y\341 \276<\220\247\2750\233\304\274?\260\003\275\276V\333<7^\350\275\213\276l\274\335\202\314<M?\005;\306v\273\275;\360\276\275/\366\343\274\300\234\325=\347\225\024\274\240\223\276\2753\355\257=+\336\201\275\351\222\013\275\244\034\036=M\325\034\275\237JC>\227*&>\324u\270=5\236\251\274&\302H\275\036\330*;\226\t8>\230\257j=\\\313Q>\217\025\244;J\3651\275\222\026\372=yg\n\2765\213\365\275\224\255i\275\342v\342=p7\274\275\320\202\030\275/\366\200\275=\314C>\271\247\315\273\223\004\273=\355\340\345<\006\257Y=N\353\244<5\315|\2721\210\315<\035\036E\276,\345t\275nER\275i\031\020\276|\324\237\275\341_\013=\205\271\022\276LnP<\253|\"<\201h\231;Yq\362\275\354\313\204=C\370\\=xr\001>0(/=\365E\017\274\376!T\275\327\275\017>#\237\203<\n\307g\274\177\202%\275\350\243D\274\242\210\342\273\210\257\362=\"8\037\276Z~\356<I\340\301\272L\221(\276\316\343\325\274v_\237\2749\243\013\276;\037\010\274\233\262\"\274\372\314\221=\264)\344=<\274X<gE\034\275?\0109\274\024A2=4\353\313=\304h\237\274\2363Y\275W\225\263=\n3\257:|\351\215;\250\025\324=\036\210\234\275w\331!\275\223c\213\274y\267^\273\226\337\036\274\356\357\345=\346\233\251=>\232&=c\236\025\276nQ\342\275\032\365\213\274m\320\025>pR\331={B\024>R]\241<\254\224\265\275\031M\243=p>}\275\027e\035\275\307\035\303<\375\226\002\275 \314H;\307iC<H\347\235\275&c\324=y\3456>\027=\341\275\\1<;\031\322D=\030\360\216;\2179\022\276\360l,\275t\216\263=\226\024\207\275\350\324\246=\361\311`;.\230\320=\000\235\277=+\210@\275.+\375=\"\332E>f\317\307\275\005\2629\275\225\350E\275\337\267\213\2752P&\276\371I\303\275}\301\337\275\241\004\265=#\360\371=S\337\220=\312\230\265\275\235\230\352\275[\253\251\274,\304\220=\303~\205=\322\342e\275\365\356\323\275\3250\375=\005\221\003>\331\377+>\345\354\216=7g\363=Zv\257;\2452/=on\253=\303\307W\275\243Q\322\275\266\326F=\267\2332\275\014\220\311\275\024PE=\361\330\035>\013j\235<\024\325!>\234\234\306=\025\316\317\275,\2603>\340\025\332<_0\267=\341\262\027\276\344\030\003\276\033\347\264<\371\202?\275G\"\014=\027\210\237\275\2401\204<\276>/=;\020\361;U\257R=H\325\314=7R\013\275\263\364\305\275?\342\004>Ps@\2760\252\371</$b\275\324UK\276\320\371\375<\227\000\356\275\347\344\005\2767\303\214\275\234\370\304\274\227o!\276\371\202-\274_<\003\276K[[\275\273<K\275\360\326\203=~\233-\275\223\330(\276\357?\231\275;\314;=,\306\022\276\343\361\364\275\023\303\344=@\216\244<\037\3350=u\204\326\275\317\360\224\275\372iH\276\313\022\000>\\\235\204\275.\302\216\275\221/\220\274\317\364Y={\324\217\275E\361@>ly\267\275\010Md\275nq.=\225\021\316=5\301\031\276\310\343M\275\335\260s\275S\352J;\315\330\006=\323\r?<\310\001\363\275C\244\010>\233e\024=\361\343\021\274\347\037\201\275\344\373\232=\377\375\010>\350/\375\272s7)>\334\344\216\273\2169)\275\250 \021\276\360\304\211=\013z\240=<U\374=\250\020\341=e`\204\274>&\204=\316\366,\275)\336\213=\333?\312=\\\265*\2740\251\231\275\2512\315<xd\026\275\370m\240\274ZKD:s\037\354\274\\D\034\273\305\3409\275\n,7>Bf\032>(\307\230\2759\030\"=\250\306\311=\310mQ\274y\271\201=6\350B\274\007\237\301;\366\356\361<\242\033\370<g\351F\276\354\246\335\274\346\315J<\240\035\313=i\305[=%r\037>\211R\225\273a+\030>b\033\263<\010\244>\275V\362O\275\352,\002>\215\206\t\276\005\361\355\275\3351Y=\\\255\007>oR\344\275\354\331\326=\242\020\220\275\257\321-=\356@\373\274\230\035W;\324\340\266=\350\377^\275t\247\021=\323\360\260=\032z\257=7\264\373<!-^=\305\354\322\275\342\306r;\335\370\034\275\025\314!=\323_\030>\332\262\203=\034\207D=\027\326\037\276\300\3452\275\271\321\276=\305\020\004\276\347x\177=\366\340\367\275#\244\363\275\373\251g\274\334G\215<\210\032\251\275_0B\275\3264q=,\367>=h\300\305=\000\242\0339\325\221\205\275\001?\277\275z\'\010\276\353\310\325=\352\331\344<\301\027\326\275#\277\006>\001\r\320\275z;\034\276\347\350&\274\363y+=\221\204+\276\301\204\260\275y3#>%\023\311=\270\362\202<\034\005!\276\200\344\267=[9u\275\216\213\203\273tl\350=\340V$\275\325t\247==\341\211\274\247\261\033>B\200\200\274\216u\373;\222\376A>\263j\315=|1\036>\353\313%>$/\252\270\215\202\323<\001z\233=\003A\365\275cy2\275s9\317=\263oq\275\333r\363\275ea\375<g\311K>V8\231=\334-a\274\237\222\200=\366\216\250=\217i\206\274*\037\256=\220y\034>\006\254\000>\323\014\331\274u4N=\371\017\255\275V\321b\275\371\366\235\275\324\363\276\274\030\251\253<\027\316#>\361j\366\274\216\204e\275\017\261\255\275x\231\026=\366\007\017\2762\031\331\275YJ\363=\302\320\262\275XP\312<\262Q]\273\224?\032=\336\346\007=\014_\357\273\260\352\t\276X\275q\275\243\310o<\342\224\017\275\270$\025=98-=\317\223\224\273\351\025\277\275q\3638\275\212\303\310\275{\021\325\275iT\366=D\251\352<\014\324\266=\343 w\274\000\330\300<s&a=P\265\330\275\010r7<\350\347^<\2573f=0\332\n>\006Yp=\264\025@=\374\225\357\275\224\326g\274q\314%=\327\377\217;\031\035=\275\031\223\320\274Y\233\233<\320\2324>\022\314\026=\376\375E;F\027\231<\300\261\032=\250\354I=\305\261\260\275\330\207G=\314\2371<\353\221\337<\236\223\031>\226\310!>k\305\014>\377b\023\273\002KL\274\375|Q=\370\212N\275$\345\010>\035\252\240\275\307\335\024\274X\360\201\274\267O\263<b\251\211\274z\017\377\274\212\244!=fZ)=\347:\306=\220e\257\275\252\211N\275\026\313&=\0261\316=\273\t(\274\265\032\373=\344\255.\274\'\232\210=F\n\005>\240^$\275\t\321\032=V\217N=&\234\205=L\017\314=\352\"\"\2741\317e=\227[Y\274e\006\272=UN\010\275$n|\275&\263\007\275\223\2452\276`@\252\275Di\310\275\374\305B\276\357\337\n\276\303\327\233<\361\007\374\275\353F\272=\022\241\311\275\263a\005>?\233\271<\262A\024=\273E\212\275\375Y\034\275\360\257\203\274\027\240\367\275.\255\257;V\025\255<\262\242\355\274\260\n\267=\265h\234\275\210\345\316\275\202\"\233=\371\247\t\275\367\214+\275a\311\234<0j\271<u\301\"=\317.\355\274\334; \276W\321\306=\301.$<:\2602>uXN>j\254\212;\215w2\275\272\322\344\274,\030%=\352=\351\275e\262h\274\210\343c\275~\305V>\027c\233=\343\022\264\275\341T!>\260\036(>\306BB\276l\361\355\274\033\236\315\274\246\016V=\376\233\005=V\312\323<\255\244\322==\261\214\274-`\"\273l\357\260=V\027\302\275\244C\'>\274\242Z\275R\036\251\275U\374\'<D\014\234\275\227\'\237\274,4c;\236\325-\275-x7=\346\212\267<G2\034=\036\322\220=C\rQ\275J\300\244=\024\330\026>\002\316\213=>P\376<Y\312%\275RB\263\274\340\373\223\274\010\266\365\275\305\016\363\274B3)=\274\002->\312o\232=\240b\266=\367\205I>\330;\256\275l\364u=\265\\O\276\354Y6>\206\345\343\275zMi=\355\344\375<\007R\325\273\314o\345<\331\224\225\275`P\232\274LA\010\2760\223\010>\252\336n=#\026\214\274o\215\036\276\327\331}=\374\217\204<7z\033\276\017\025\341<\031G*\275a\363\010>\373\353@\276x\324\257<\2342\247\275\002\262\323:5\313\377=\003\371\214<\230\025\320\274\214\222O=\033R\037\276\265\371|\275\220\365<\275\317\330\220\275\375\014\246=\203\007@\275\227Kx=\023\371h\275\325\362\003>(\013\332=\267,\002\274\032@\214=\254\035h<\247C\336:\020\006\310\275\250i\315\275\333\343\037>\331[\355\275\247\251\r=\251\273\250\275\021\331\342<J\345\n\275f\372\270\275\352o\001\276\335O\242\275\n\252\225\275\242\023V\275/_\363=\342\260\325\275\035\237\000>@\025\003\275z\r\231\274\021\2359\275\313c\201\275\206#F\275k.c\274\250\245\206<\337\257\230\275\220\307p\275\271\255Z\275_pW>$\311\037\276Z\264\004=:v\242=\313\303\277\275\371\244\033\275\360MD=\025\n\003<,\031\017\276\250\264Y\275\274\370+=W\351\024>A\323\377\274x{y=\013w\274\273\362\000Z\275\335\356\201=\211\341\270=\326\272\010\274\013b\313\275\362\252\366<\245\r^\274\224f\001>\020-\310=\373\344\317\275\343\337\225\275\275B\000>p\356\261=\003\300\004=\266\207Y=V\305\330=Y\270\256\275\024V\322\274\265\027\026=O\327\"=\300\340\307=\203\312\001\276j!\325\275\332bg\275K\177\304\275\301\220\211=\251 K\275\207{4\275j\030\336\275\231\021\013\276\310\211\031=\275\242\202\274a\376\007=S&\021\274)I\225\275\033\032\003\276\350\320A\274\r\215\315\275\026=\314\275j\327\336=\237\232\n\276!i\032>\274*\323\275\231\301\313\274\016\277\020=\022\343\033\276\377n\216\275;O#=\306\217\025>E-\253\274B\302\364=\274\212\333=\361\274\n<\267:\025>f\264X=\232\016\305\275\247\313\013\276\317\037C=\273\225\336=\375\312\271\275}\026~=v\206\001\276\2514\267\275\357\313\010>+:\302=c\240\037=\274\267\255\274\231|\020=\321\007\260=\032\023\237\274\243\007\203=[\024\002>\373\267\317\275\001g,\275f\266U=\231\221\235\275\217Cc\275\201\024\001\276}\323\004\275\316L\272=_{\006\275[\3130=t\340[=|1\266\274\033Oi\274\'O\206=\322\355\372=z\223\313=I\027\332<\t5\220=Y\366\"=cY\014\276(\366\317\275\360y\233=1\370\367<\013\233\004\275Z\007\231=\2460\016\276\026\331\035>+\311\273=\3056\357\275\324d\335\275$\215k\274.\033\002\2756P\356\272\230\353U=\230\341\t=\325\236v\273\243&z\274\333t5<\236t\310\275(\337\005\2768\375\315<++\032\275\245\303\334=\256\013\244\275Lx\232<m\211\024\275\257\'\301<~s.\275\331\323\006>p\000=\274{@^\274\300<\021>G7\243\272\0259\235\274\2424\350\274\031\002l\275\033\365\341=~&*<\310\303\317<q\n9=|\357\204=\212`\334=\033W\n\273\302\030D\276\235\332=\275\264Gy\275\327\253r\275$J\201=\362\334(>Q\227y=\002\376\005;#e\356\272k[\343\275\237N\022\276\354J\271\275\024\016\t\274\327\230%\276\211\375\035=|0\351=\t\256\031\276P\304\375\275\322]\201\274\326\306\250;\3457\274=\325\014i\275c\252\357\275\213\217\230\275\300I\225;\310\017H>(\325E\2768\214/>M\325N>S\3554\275\200u\342\275\334\331\255\275\234\225\320=\025\312\245=(\235\372=\336}\014\273\303\363\031<\271\242\366;\276r\016=\202\234\255\273\030\361G=\330\215\322=\374\211\272=\313#\273\274\237\224]\274\214\204m=|/\371<\001\362{=\267n>=\3179\010>\333\267+\272\010\354\323\275\"j\233\275\217\224f=(YG\273\322 \351\274\020\0331=b\375\326=F\221]=\320B\353=K\024:\275\267\242\322=\321\340\203\274\370\310\021=l\"\232=\371\330G\276\022\":\276F\004{\274\204\027\310=t\214\275<K\023\231\275\263h\216\275\022?Q\2759\330\037\276z\256\034\275\321\243\327:\360\251\314\271\271\330\275=\3708g\275\371\026:\275\366X\232<\204\003\014>y8\001>\360~\222;/\303\247\273\032\016;\275\225\234g\275\201u\260\275\346\220\030\276\203\216\205\275\234\314\317\275&\025\036<\343\222\010=\277\264\203<m\304\252\275\265\231\202=n\214+\275\002\267\267<I/\301=\3528c\274:\363\000\2768=\366<\r\243\264\275R\336\036:h\234\301=\245F\363\275~\216\370;h\225==\244\364\032=\023\207\007>t\254\237\273\221\332@\275\313\213\265;T\210\264<\224\203\010>@\311\220<\306\332\357\274w\016M=\336\336c=\223UC\276\035\372\271=\037#B\275\357C\355\274N^$\276@\035\317=\233\330\022\276h\037;= \023!\275\264\2053\276\274\303D<_\350\004\273#\252\237=-\020Z\273\307{\322\274\355r\230\274\346[\350\275\231x\363\274\2322\347\275\370\242\243\274;8Q;\231\031^=T\255\261=\204\2749\275\365\031\271<\336\377(>\206\023\242\275\266\346\031>@\013\251=\002\025b\275\254\366\273\275\224\372\222\275\177l\221\274\354[\341=\312\035\305<\241\230\032\274\260\357\222<\236\206\326=\266{\250\275\024\200\211\275\337n\330<\352\344N\274E\330|\275%!:\274*:\365\274\033\215\017>\325\343\224\275\201T\216\275\343y\310\275eF\342;\374\036\206=\215\234?\274jq\332<\036-i=\365\363\306\275h\3267>\322)\230\275\022\303\221=MYN\2748p\273=T(\001\276E\337\010=\271\331\343\275\240\237\023>\n*\204<\200\325\027\276\333\264\276\275\242=\216\275\376\205\210<u\235\363\275`%x<\356:\375=\213\340x\275a\205\226\274\224DE\276\252M&\275\002\263n=\332\234\001>\205\212\356\274\373\"\020>\253\325\244\275\310\262\021>#\237\272<\325\267&\276y\250B\276\211{\036\275\212G\016>\235\224\234=K\221\337=\'\241\003\276\036\036\236\275}\017H>=\371\255;w\377C>*%\220=\250*\251=h\244\305\275\372\322+\275\360\322\364=\215\364q:\367y)>d~\340<\206\017\373\275_\364n<\230\001\017\276\223\021\227\274!\357\375=u\310\034>\271\004\216=s\350\375\274 R,\276\034\312\021\276\365\024\357=\030\037n=\220\343\200=~\360h\275\252\340\324\275E\026\270\275\236\246N=[\357Q\274\tZ[=\010LN\275\265\207\230=\373\'\246<:u\256\275\344{\332=\207\320\364\275.\320\263\275\344T\001>\320\276V\275\227\025E=eVI\2756\327\341=\243\253\342\2742r \275\265\325\267=\264\021\351=\276q\351\274\310m\250<\362\025\010\275\014 \031=\346\246\221<F\217U\275\231\334X>\273\224\214=\366\232\230\275\0359\2209d\365\200<\254i\333\275o_U=\257S\020\276\331\330\306\273\215\206\236;\027\353r\273\317\260\241=i\t\343=\246\255\260=%\321\007\276\311\245\200\275\n,\275\275\3506O\274\034\3531<F\024\333=jK\262=\365D\005=\372y\310\275\344\354!;\262\271\213\275\177[\227=@x\277=\177#0\275N\332\355=\374\335\035=\324\2507\275\024D\262=D\357\372=\363\204(>\305n\357\275\355\204\206\275\345\373I\273G\257\304<[c\352<\034E\275\275\2122\006\273\323\2745>\022/\022\276\356\301\236\275Q\023\237=w\250\314\274\247\315\236=\351P:\275\0013:\273\317\352\022\274\032\316k;\202\202\230=\031\335D>\304\002\372<,_\215=\205\332$\276>g\034\275\205a\027\275\330\373\205\275\253\017\177=\376\017\234=\317\022\333\275\356\273P;\370w\367\275\004i\351=\241j5>\376s,\276\255Fd\275\340\347\244\2751U\353<\242\220\017\274\237\326=\274\013\027%\275\031\031\325=\304\")\275QV\003\276\202>B\274\020$\233\275\212\025\252=}\342\222\275\373\000\\<\374@\207\275\326V\037\276\224\3201=V\001\023>\233\002X<\037;\215=\005\274\037\276\324\r\024>\212\006w=\204\232\355<\200\310\n\276`\377\031>\363\246\311=\207x\037\275\177\021V\275\244`K>\314\346\204\275\010\006\374\274K7\360\275\346{P>\200[s\275\266\306:>\031\007\205;u.\033\276\033r?>P\322\203\274\210!\025=\324\354\350;\n\0234=@\026\010=\377+\254\272\365\311V\275o%\021>8\254\344<\022\317\263\275#\334q\275)\264\316\275\002\346\240\275\325DR\273\331\206\274=Zh\345=\232Q-\275\255\033\010=[{\030\276yT!\276B\320W=qB\003\276\364G\006>+\2000\276\021\301\337=\202\342.=\027r\353<q\337\233=il\000\276\204#w=\232\277\274\275\337y\331;\000`\301=G\357\005>\325\302\216=\\\351J;Q\010\255\275\231\317\027\276q\361\002=\374\321\024\276\243\310\222\2755\025\202=l\001!>\246\306(\276;\032C=,[9\274]\020\377\274<(\243\275\304\201\311\275\345\\\203\275\266=\t\275 s\242<V\245\014=\265\036\257=\342\000g\274\344\362\355\275\r\354\201=\310U\031\274\305\277\327\275\334c\007\276\314pY\275wD\t=\323#\207=a\371\320=~\312?\275\211L\336=-\250\235=\331U\033=\362\217d\275\242\010g=JIN=\366A\214=!\324\252\275\277\374\014>\322\303\033\276>I\274=\006\307h\275\"\257\013\276\037\314\255=c\217\205\275\323\226t\275R\330\365\275\263]\207<\264\234\010\275\373\325\337;\246\252\333\275\376[\220\275\252\375X=\324N;\275\304\300\243<oS\363\274\233\325?\274\275\021\365=\233r`\274.\255L\275k\230\356\275\355\231\251\274oX\305\273\236\307c\274\301\260\334<\347\227\310\273\231\205\034>\313Ik\275\222\302\003>\363\312\021>@Nn\273\251\326\035\275s\246\323<\233\2330>\035\335\007=\242\322\250\275l\023X=\212k\247=S\003\247=<Y\020>\313\255\003>*\351\230=\342\333\272\275\\\t2=[\1772=u\003\277\275\t^\252=\303\303(=\310{\034>\371\260\234;\340\366V\274\324\377I\275\314\005\322\275Z\005\366\275B3D=Q\006\251\275\275L\246=\'u}\275\202\016<\276\340\2317>\345\342k\275\265$\220\274{\223I=W\332\271=U<\020=\027DY\275s\3315\276\235:\244\275\365Z\n\275\302\236\001\276A\226\201\274wpK\275\221\306\243=\375J\270\275\377p\211\275j5\272\275\325\261\252\275\301\003\001\274\\\243\365\274gH\306=\'\200\351<\343Y\247\275\331,\002=\362\0237\273\003\270\344= e\236\275&,-\276\250D\022>V\214\341=p<\242\274\035\352\270<\2543!<\014\235\320\275yS\"\276\377\246\307=\326\000T<\250\336v\275{gv\275o\256\260\275\023\275+=\372]\256\273\301\t\330<\264\314\001\276\201X\243\275wG\366\274e\332\230=F\213\010\276\255\276P=(\024<\276\317l;<\361\232\3518\230u\334\275\367h\257=\321r:=\334\340\013>\331\245\004\275\310U\303=\345\013\302\275\235\255{\2750u\316\275\272D\233\275\254Q\260=7\240\034\276a\0271\276\336R\335\275\251Z7\276\374_\246=\246]P\275\334K\227\275\\i\301={\241<;\360c\200\273m\2758=\317,\223<\222\246\302=<\'\302=\235V\304\275\231%G> D\254\275e\260#<\235\326\020\275\322\002\263\275C$\275\275\230\203\266\275\321\370u=y.S\275|%\213=G\366D>\360\315A<$\246\013>sF\272=\342\253\275=tK :\340`\251=\366c\232=\'\245\000>\277\3104=\221\273y=\337\201\356\274\243\210\023>5\020\003>D\225)\275\373w\273\275\262\r\004\276\200\332\225=\220\347\262\275zH\204=\235\271O=\263\261\350<\337\360\000\275\007\274\002>\021\223\013=\231z\345\274\363\207\t=#\371\237<\017\275x=\271\333\036=(\330\301\274,R\202=\034\274K>KO\225\274\344{f=\235\201\246=\216\321\314\275\2538\360\275\212\201*<\202\333\352<\014y&\276~]\355;\211:^=R\207\263<,\323\254=m8\201\275i\005\335\275\250\247\010=\326\250-<k\261[\275j\035\t\27610\231:\334\"\322=I(K=(\371\360\275V:\024\273*:\"\276(\177v<\312\341\r\276\230q\377\275\347\265\254\273J-\301=p\343\244=\3229\240<%\334*\276<I\211<\267\242k=\311\030\246\275\233v\224=\\T`<\231\313\232<\223\001\315\275A\340J;\243Vu\275\345Q9\276\263\014\037>\361%\323=\342\234\017\275\344\014\254<\340\276)\276\343\001\030\275c\312\036=\250\306\350\275\323\372\364<\374\027o\275%/\264\275>\332d\274\016n\330=\215\306\201>V\030\005<\364\267B=\375\275\003\276\370\021H\274c\215\027>Y\214\260=\262]=>\373S\335=\177\344\001\276Kc\030=\203?0\276YU+>\267\275\350\274a+o>zs\350=4ri=@\363N\275?O\265\274\372\354\314<\366\344\234\275\037\371a\275=\315\314\275\014\006H\2751\2043\275u\246\201>f\350\235=\346\220\016<\207\230\223\275\262\322\372<5B\t\275\363\261\350\275S\220\232\275\201a\204\271\211\255\'\276qB\344=~\020\233\275$\000\262\275\320\263(=O\027<\274\213\016K\276C\200\251\275w\0272<X3O\275\241\030&\275Aj?\276 \004\347=\333\333J=E\030F<\306*\r\274^\0348>\264\232!>dr\344\275\342S\264;\021\204\245;\031V\301=\r\232\373<>K\301<\277\271\212\275l@M=-\366\005>\210\311 >G\024\203=\025kb\275\223)?=\311\311\252\274JFZ:\355\014e\275U\376\215=A\354\244\275\263`2\276\\\235$\276{\275)\274\032\332\'>\266\244:<\224\334\036=dp\306\275\277T\300\275\202\320h<E\333\244=UB&=\262_\214<\276$\322=,\211\213=\374V\000\275\317\312e=\333\013\200=\3203\216=\234\276\002\276\264\340>\275=E\341\274^!\361=7\266\306\275\033\310\022=\230T`\275\216D\002\276\254\223.=\305\004\231=\344\226\246\274\266z!>\265\234+\2742\330\323\275^$)\274\221\330\356\275\035\000\263\275?K<\276vv@\276i\253\355\2759\037\371\274\322\346\266=P\033\207\275\236\324&>OU\332=[\240\362:\371\326P\276\340\200-\275\0255m=\340\250\230=\027\305\234\274X\025P=\007i\274=*{\335\275\334\222%=\235\226\231<&_\245\2759s\317\275\372\235\023\275H\361\326=N\020\023=Y,E=\"\347r\275PR\024>\361\301`>Z\332V\275\246l\304=\355)\013>\307*\023=\205\261\270=\202\213\n\276\n)\001\275\350\n\'<|\210\002>\221=\337\275\304\223\273=/\262@=\277\354\233\274\034\320\241=\204\271\262=\316\t\215;\235J\226=QA$\275\"\277y=\260r\325\275\272\323\024>v\241\023=\324>\021\276Q\277\314\275\252\363\271\275l\223\247<\025\223\266\275\310\352\327=i\361\217<\"\267\305<\217).\275,\372\020\276\220\305\022>`\215\374\275\035.I\275\340uB>\274+\234=z&\233\275\367\000\340=\023>\325=\301{\330=\357?\210\275t\216\266=\023\207\306\275KS#=\366\005\013=\320U\210\275\261\223s=\374}\036>\307\224\215==\363\030\276\335\374\217=J6\254\274\273-\257\275\276w\013>p\2722=fu\271=}\023\304\275\0272?>\3460\237<\201\210\025>\302\243E;\300v\375<\372\345W\275\230\207]>\333[\316\275!\220<\275\254\260\253\275\3358\033\2759P\275\275\216z\334=T\373\223=#\014z\274\365^a\275\274L\006\275\375L\243\274\302\033\005>)\213`\275}\375\035=\035\372\340=\316^\036>\366\3172\276\021\250\312\272x\020\336\275R\"\212=\007=(\275g?Q\275+M4\275\234\203\r>\245\276u\275\3758\212\275J\365G\274\007\035\200\275\270O\030>\361j\367<\216\233\004>\326\224\372=#r\322=\002\233F>\226\213S\275Zl\256;\331\365\266=#\014\217\274\033\332\216=%\247#>\"\235)\276\320\304\331\275u\374\020\276\341XF;\323(\224=\204b\203=\027\342[\275(<\2508&\354m=0\271\205=\260\r\366\275\257\362\203\275\362\220\027>\345z\032>\351\352Q=\320\004\204\273\257\346P\275\3169\256\275m%\313\275\232\311k\275\277d\205\273\211j/>\365K\034\276$\225d\275\225oS=%~\240<\363\310\265\275B\227\373\275\232\341\022\2763\037<>\220\357\030</V\247=\210\331\364\275)h\317=A$\267=\346\215x\275\211\315[=\367\t\321=R?\233\275\302\225\254;\023\250\260\275\246\313\314\275xZ\300=\247\026\231\275\301\037T;Y\001\300\275\336W+\275\237\352\224\2752\037\315\275\013\322b\275&aP;\317\023B<\225\013\340\275\325\t\246=\274\300f=v8=\273\304+:=\330\256:\276\254\210\321\275\343L\326;\362w\215\275=\017\360<\222>)\274\207B\222=2\246\035\275\032=\002=C$\313=\220\021\371=|\206\005\276Q\260\006\275\356R\202\274bI\277<[\242\032>\200,\024\276\361\330\342=2\357\301=\371\367\210=#\212\023\276\227\033\251=\n\237\244\275\274\334\305\275,\010\207=\344,\'<Tbh\275<lV\276\230\320q=a\363\245<^\330\342=\347\326\214<o\037\027>\253Fw\275,R\334\274\355\264\355=\277\372\007>\342\272\244\2759\026>\274eL\216=\247\001\217=t\206\205=\305\013|;\371W|<\202\030\240\274|q%\274\377\r\037\276\346k:\275gQ\036\276\341u\321\275t\375\026\275\3566\224\275\257T=\275\347\311%=B\302N\275#(_=\351\232\273\274\362\035\264=\260\036\034\274\336\036\256=\312\355\r\274[x\001>\353\3554\276\347j\317\274(\227\021\276{;\320=\247G\307=\322\202\266\274\0025\256\275\024\216\343=\250\267\311=%p\246\275wx\213\275\311\2302<w\336\272;\317o\022=\202V\024;\210\257y\275\352\272\202=\016y\024;]f3\276I\243\351=o`?>\230e\261\274I\321&;>\005\313\275\31197>\237O\330=\236\r\252=[5\021\275+\351\010>$S\232=\002\346\332\275\272\322\274<\352\207\275=YM\271=\355\202\241\275z#\014\276f\026\372<\216J\262\275\367\023\020=i\231\021\276\323\364\005\276s:\365\272V\256\r>\016B\336\273\376\373.\276\2042\r\276\362\321\265=(<O\275\210\350,\275\367\234\353=\262\320\020>;_\020>\344$\241=\317\311S\275:\311-=\033T}=!k\237\274\3166;;oR\317\275I\300\232\274\234v\270\274S\226\'=\362\200\231=QL\306=\034M\030\276`\325\031\276\237\017M<\264\001\201=\211\307#=\265\007W\274T?\024=LdS=\022\266\032\276c\303O\275v\343\016\276\0220\220=\032\351\310=\t\001\233=F\217\340\274s\242\314=\371\207\007=1\351\014\276w.@\276\212\254\313\274\345\325\021\275\260[\021\275\213\245B>\371\215\225\275?G\001\275%J\003>1\366\277\275\026\030\270\273\271&\216\274{\205{=\022\246P=7\315\227\275\017\030O<6\177\352\274-\"8\273{r\370\274e\000\266\275\205\344\353\275O,\222=\205\271\003>u\025\347:w\316:==\303c=\344\n\372<\206\353\010\275L_\276\275\225\312u=\361\323\326\2751\036\237=\365\'\252;7}\301\275\256\305\037\276n\252\370\275\2268\306=\345\210\004\276O\037\226\275\206\320\304\275\0241\033\274\306\316\222=\232\223\365\275\335\010\006=\335HL\274ks\272<*a\272\275_\327\207\274&\333\275\274\223\375\275<J\257H\275\203g\016\274\364\n\243<t\003I\276\006\225\345\274}\352@\276\333\005\014\276ec\204=E\270X\275\002\255{\275\374\027a<\367f<=\232\357\265\274q\257\253\274x8R=\341\211\377\275\322!\356=\234:\354<\210\t\240\274HK0=p\224\006>K\326\223=6Q\211<\352\355\336=)\242\202=\301\317\223\275\242]\024=\"\322\246=\302k[\275\3603\314\275\374\344\220=\362-@\276O\323\345\2750\350\"\275U[\205=\265n\372<\347\367A>T\320\326<\200q\352\275\367?\372<\371]r\275-\270\273\273\000G\310\275\345\177\377\275\225\274\"\274\274\331\220\274n\302a\274\226\010\211\275\013~\333<\273\330!=-s\315=\001\\\000<\325\260\230\274\037\3616>]\331\210=\033tS\2732I\275<\331]\320\275L?\377<\t\217A\275F\300\027\276\266)q<j\336\026=\373\025/\275\370Q\202=\032\363\267=l!\304=\267w\361\275\210)\014<\263\207I<\237\273\233\275\365\034\211=\357\230\367\275\344\376\335=\r\311\267=\245\216\360=+\217\016\276=+/\273>\320c\273\240[4=\234\n\010<\232\362\261\275O\270\256=\316$5>\351\246q\275\354\324`\275\022\334\001\276\202\266\031>F\020L=\207\236\006\275\222\351\320=\277\r\324;\027\231\217<W\020\276=\360%\342=\247\'/\276\325.2\276\257\205\222<,\027\337<\363\024\022\275\033\310\366\274=C[\274\030\231G=\246wL\274u\321\247\274Z\016Q<\021\365\343=\317i\317\273R\3450=\367\216\325\273B+\245\275f\210\373\275\244\016b=\201\370\332\275{\0378>dn\251<G \362\273e\371\302;\326\225\206\275\371\260e=!i\020>\371\321\033\276|w\263:v\326S\275\331\306G\275G$\006=\360\206D\274\270v\021=+/\013=\005XE\276\013\373\203=q\342\206\273\354\016\202\275\241F\002\276\271i\365<\221\010\303=\333\031\266<\345*\031>\020\314P>\203\002\355\274\323\360\243\274\233\320\334=\3641\341\275\021A\021\275\321\224`:\311\006N> \207/>\215%s<N\335\243<\306\303 \276_\226K>\377k\274=^\"d\274\t\251-\275\317\246<=\177N\022\276\277E^=\rl8\276\246\013$>\020\014+\275\014\275\367=\225\231#\275F\322k\273\320\277?>\272\231\376\274\202\3765<+\336\003\275\260\003\202=\021Zc=\2379`\275\326\3545\274\251d\355=m\274a=\027\374\366;\332\030\370<\351\330\'\275\027\361\222\274\227_\244=*\325\303\275\340\004k\275\3135\021\276\316\241\200\275_\271\352\275\321]F=\001\365\016>|\370\324\275\003\035\022<Q|\037>%\365\307<\206\272s=\351HR>\307>\330\275AP\031=_J\036\276\253\016\273\274?\000\014\276\270\003B=\023\235\256<S8H=\335\337\264\275\372\006\266\275_\350\320\274?\312\001\2766K\023\276P8*\274c\020?>\320\234\244\267s\250X=M\002\006\274\254\225\375=M\020\256=\336\305.=\337\252\005\276~\343T\275\361\356\320=\267\262\221\275\237\264\335=\363\355\377\274\034\234\025\273\346\025\035>S\321*\276Z\000o=\016RE>\274\335\330\275o\204\243<\013\033\007>j\376x\274;\\4\276\006\332\006>A\3030\276\263\350\374\275\200!\030\276\351\025\257=:e\204\275\205]\254={J\356\2745\202\202\2736\263i\275\375\006\221=l\362^=us\375=0s\031\276PL\216\275\267\344\214=v\235\r=\2361\221<:\031\231<,:r\275g\330\342=\263-\005\275\005R\260\275\0261\305=\243\354\253=\213\t\t\276\024\247\027\275\315\272\243\275E\306\336=8\235&\274\372P\004\276\231P\356\275\230OR>\240\004\313=\212\250\233\275\010\266\352\275\355\022,\276\332\'x=n/\202\275\340k\365=\313\352\373=\205\253\374=}\300\340\275\247\357\240\275FF\242\275\3763-\276:\252\214=\215&{=52.\276\351\014g\275~7\224\275\364v\363\275\232?A<\037\240\005>\322\231)=\263n\266=*\364z\274qY\001\276^\276\230=1\223\262\275cDE\275\010\001\"=\353\350Q\276\216\353s\275\253o\221\275\300\257\244=\347\254\014\273\200\273\010=\307W=\276\277>\321\275x\371\236<Y\245\004\276@\350\374\275|W\265\274J\313C>8\212)\275\001\033\031>\250\325<\275\nr;=wG\000>\277x\266\275G\236\025=\000C7>v?\370\274S\013\351=}H\303\272\260\214\216=q:\205=\006\300\005\2754\233\225\274C\376\326\275\207\301\257\275\022\263k\275\010[\344\272\341gV<.\257\003=\310\027\377<\271^\367=O0\350=l,C>,\234-=p\205\321\271\322\036\023>DB\244\275\r\027\246=g7\\=U\321\262\275\224UW\276\271R\312=\273\035\n\275\366\365\264\275awo=\241\006\021\275j\201h=x\277\031>\263\321\034>\005\360?<%\234\320\275O\242j>%]\313<\216SK\275\212\307\205\275Y\\\265<#\037B\276h\300\307\275M_\t\274,\\\243\2750W\327=\320\244W=\274\323\317\274U\004Z\276@\033\022>W\016\021\276\231\005\326\275\0275\253\275\231\272\216\275\232a\016\276\207\262\000<\220\303\002=\210\206\252\275\351\335\262\275AOl==w\343\275]r\262\275\005\231\352\275\343\017w<\017\222B\276\321\006\024=\203|\016\275u\211\020>\t\2177\275 \264\277\274\305)\302<U\277\226\275\265\007\252\274+\220\226=\336HC>\300:-=j\323D>\221\232\202\274:\265\333=E\3036=[r7=\223\t\211\275\263k#>\377\232\236=\211>\333\275\202\341\t>\221\263\023>\003N\343\275\353Ax\274K\273\367\273\010Zh=6h\332=\314^n;\362@\246=\313\220\014>H\332E=Z\204*=\362\226\213=\203\251\257<\034C\267\275\333\307\267<\332\363\335=\301\246\371\274\257\003\005>\310~\374<\017\275-\275p\200\031\275\234\267j\275\311\344\275<\211\036w=\313\364\300\273+\301\346=\031\007\333=iP\010\276Ix\"\276\225+\243\275\245\226\376=\372_)=M\033\275=\271I\373=\323\357x=$@\362\275\204,\007=\000\344\014\276\204y\342\273!\301\003>e\301\034=\265\242\305=R\363x\275\347\020\356\275\343\321\344\275\332}_\274\033\211\220\275D\2165<L\026\025\276#T\200<\327B\255\275\334\312\273=\230f\315\274\021M\266=B\224.\275p\254k=UJ3\276\312f\205=9\030\304\275\016\227\212\275\237\370\267\275\333%v\275\320d\361\275>sc\275J\314\307\274J\306\314=\302\232\016>\013f\267=(J\324;g\345\372=\024\250\030>\240\372\230;\030\210\021>vRR=\303=\346\275\\L\024\275\302X\202\275\251\241\260=H\3440>\007\035N=\203n\016\276Ra\r=L\212\030>\036\236\271\273\316\240\274\2752-\365=\030\254\343\274\236\"D=\245n\335=\371\252\200\274\2376\373\274\341N\213=\177A\232<I\302\217\275\323\316\006\275\246\257\333=!t\035>N,\013>6\334b\275\263Y\036=\234\3149\275\350\024\024=C\240\261<\357\367\273\275\222\260\034<n\214\325=\262rB<9\310\350\273\376\333\322\273p\213O=\372\rR\275\244\221\2539\302\260\223=pw\232=|\207\273<?\244\344=\331*\302\2753R\262\274@)\035\276\025\271\231\274\262\037G=\212\032\366=\233\327\231=EN\325<\205\n\337\274\035Y\025>\322_\231\275\275<\325\275w\237\264=\337E\373\275\372q$\275\310\030\032>\236\241\241\274.\304\000\276\253\361\004\274\275;\362\275\014\225\344<w\0019\275|\031C<\337H\321\275\037p\250\275k\364a=4\001\226=oh4>\222_\204=D\317\257\273@\260w;xa\"=\2563\350\275\014m\034<\256\352\316=t\271\'<\270\222\302=\324\262\337\275i\262\276\275\373\035\021\275\267g\006>I\256-<\r\371o\275mNi<\030\177H=[?\246\275\020\276h=^ K<@v1=!O[=\326~\265\274\355\030\271\274Oq\243\275\016\3530\276\265i\323\275+\027]=:\024\347\273p\334B>\234\254\262\275\0313\224=\330\236\004;^\005\332=P\312\240\275\031e\216=\243Q2\275\245\374\200=\267\310\263\275\374\\\302=~\2036>\265}\347=\347!\256\275\375\233)\276\035\003\222\275\254\252\324\275\301\021\324<\330\317\242\274\035VE\275\307\255h\274\272\2023\274\034{\234\274\374\016a;\260r\363=Z\365\210<1\351\331=\"k\365\275\324\037%=N\010\017\276\263O\223\274\362U\312=\233\013\014\276\037\365\026\276\371\027\204\275\245\277\337\274Rr\215\275O}#\275\361\253\005\2741(\203=l\221\340=\256\225>>\2450\240<tq\230\275\347/h\275\247\201\347\275\317\025<=\331\311\324<\225\237\214=\037\351-\276\373y0\276|\010\255<\266\312\222=<\214\023<\037;\201\275\303\314\351=\374A\006>z\373I;~4\334\275[\252\352;\357H\231=\216\254\227=\217\372\332=F\2638=\000\2772=\214\235\345<\0327%\275\010 \004>iF}<\372F+\2760I\027\275W\223\026>\020r\246\274\350oT\275Ej\036<\224q\350\273U\277\350\275 \207\223\275\310_\017\276z\000\031>\337#\301<9a\001\275\313O\005=\'\303\212={l\311=\036\346,\276\243\356\341=A\'F\276.\313\371\274\314tA=\021\'P=\227\027\201\275R_\201=\307r\">\310\340)\276\004\257\247=\000^\200\275w\275C=\317\027\276\275\300\231\363=n\372\004>7<\036=\202\327\271\275\224\250\024\274\322,\223\273\355\357^<s{\020\276\375i\016\275;\016\030=\026#\037\276\3057\274=\253Z\206\2741\300\261\274\356\345L\275\n\323\341\275\373\213\205\275\345\247\206=XI|<\210?\312=\'\201\370\274U\207\325\275n\350N=\nz\007>\203I\026>0\207G>\3408\227\275\220\201l\275\205\362\203\275\023\035R\275#\226E\276\317\235l\275\261\244\373;\257(\332\274\r\014\026=\253S%\275\023\260|\275q\320\313:\314\313s=\354y\306\274c\022\264=\25048\275\332\007t= \243\260\275n\334\260\272\252\024\t>\355\321\243\275Wa:\276\332\212\340\275\264\001T>\273\330,<\244\326\n\274\351eK\274\211i\000\275\335\363\003>\304\224\251=\316\341\016=+\233\337\2752\257\201=TE\341\275S\\\262=\352@\214\275\245+O\274,y\224=\021\214\364<9-.\275\204f9\276\3428\261\275\226\032\357\274`\022\034>\227 \210=\336\2750\274\337T\335\275uO\271\275\004\314W9u\314\234\275\262\2342=\236\005\212\275\2457\375\275\270\267\036\275\361\320\206=\343\215\270=\000\304]\275O\347\256=\354\234\344\275\344\364\001=2?2\276\307\340\010\276H\235\360\275Z\002u<m^\004\276\274\225\340=w\2303\275\267c\312<\246\233\220\275\027E\227=6\304\027\276li\215\274y\2220\276A.\270\275\330\031\021\276\261\221\303=\205C\276\274(\340U>\300A\032>\017\304j=\344\344\300=\341R\245\275\230\016Q\275q\255\240\274A\355\320\275\306\326\322<s\365\366\273)r\210=D\240\351;\345\352\237\274)\017\376=\364\007\004=}\264\010;Hhz\275\330\001C\274\001\307\313\275rw\236\274\315\355\222\275\366~\247<g\217\035\274\270\216K>\331}P<\250s\004\275\230\356\024\275Iq\335\274\262\342\250=\024dd;:\220/>\211\202\360\275\320\222:\276v7\372\2759\233\317\275\333\004\375\274\200\316\022=[\273E>n\313 \275Q\335\250\274\203\277\213=9HE=\364\353Z=\002\271\362\275\260\227\241\275B\2460\275\332D\207\275\316a\037\275 \363W=qm\307\273\361-\364;\313\220T\275\243k\374=\022\231\002=w#?=dnx\275l\341q\275\241|\177=\024x\037\276\213\352\010\276\225&Z>\206\021\330:\226\265\032\276)$\235\275\010]+\274\344\332:=\352\231\265<\377\367a>f\010\217=\037\374\267\275\26740\276\203\225\022=\330\031W=\234*]\275\016\243N\274U\344\203\275;z\037=\351\\\206=\233N\253\275@f9\275\023\236\255\275K\235Z\275\277\210\247\275h\213\267;\310\203\207\275X\315\315=\235X\346<\275\t\375<\321\322\243=_\\W=BT\272\275\357\210*\276\231\310\246\274\317\261\362\275:\177(>5\\)>\234A\217\275l\333\246=\3102\201<\204\372\275=(\306\013=\335\016\277\273\333oP=\200\224\377\275\334\241\003\275\3628\371<\230\026\"\274\021a\365=\252^Q>\366\337\020\274\245\002\004:G\300\265=\"U\030\274\220\234\262<\365\373:\275\005.\224\275Cg\330=\275\3324\275\2657\206\275W\202\210<\036i\000\276\316\357y=\024e\"\275\365x\260\273..\346=\347\010\344<\177\232#<&\245\006\276\177\254\376\274\006\257\004:_\306\322\275\201g\024>\2154\330\275\264A\022\275\310\275A=\275\256\350=\006\226\261=\003x\325=\362\031\005>i\213V=\213K1\276\342\360\225\275L\216&\276\233o\035\275\311\2648=\356\206\007\275@\027\355\273\337\000k\274e\262Z=\006`\240\275|1\013\276\013\311:\275TN\223=h\034\004<\317\315\250\275\263\303\345=C6E\275\341K\204<WR\332=P\3023=\025?\026>\034\331\203\2757w/>T\032\350=\332tT=1\010\354=\2204B\275\001}\337<\016O\271\275\321\226\345=\362>\025\275(\237y=\300\177\247=|\220\216=\321\370\345;\333;\365<\013\233\273\275\361\355\263\274\300>W=\200\035%\275Q\220\001>\366i\246\275\246\242\334\275N,\221\274)\210\004=\017\006V\275t\322\327=4V@=\r\245\014\276\366}5=y=\027\276\216\337\365\274V\255W=\315B\325:\334\327\215\274r\363\362=5\236\277\275\035W\247<\305R\007>\216Z\016\275Os\032\274\364M\020\275\246\"\341\274\016\273(\274fu6=\024\374\351=i\336\030\274+\245h<\2177\210=\'U\n\276\320\322\000\276\267\2402\275\362\373\262\275\004~\242\275F\212\376\274\203I\262\275\010\217\377<[\256\225\275\226\311\216\275.\217<\276\365#\366<\335\266,\275\314h\221=\201\342\342:\203(\205=&\325(=kX\213\275/\020\005=I8\307<J\352\221\275\334\034n=4j\214\275kL\207\275\244\227\306=\225\325\234=\025\036\273\275\033 \342\275\021!W<\243\230S\274\3523\257\275:5<\274)5\220=\354\266\365<\3027\352<Xy\371<_\214\356<x5E\276b\020\021:d[=>K^\222:zjp\275oVB<\345\025\005\276Ph\023\276\345V8\274m\273\204=\000H\177=uP\315<\3369\255\274.\026\031=<\357\034>\214\025\245:pv\210<\233/\013>{\241\252\273\035\362\207<\371\225\336;\303\'\225=)\2336=~9\'>\253%\236=\322\243\220<\210\220\214\275~\330\212\275\007\313\021\274\3059\271\275\316n\303\274Dq\245\275\323\201\326\275c~\034>\225\316\323\274\207\351,\276D\245\250\275\343\363\215=6q\337\275U\333\305=\241\r\002\276\320\256(>\237\270\336\273\0019\014\275 ea=\272k>=\251B\336=B\223\257=\335A\264<\333\246\246=\261\213\362\274\265\210\336=R\341T\276\273\213\326\275B\033\311=f\312a<\232\275\036\275\250\212\034\276O\222)=T\267\"\2765&\231=\\/`=\244\212\277\275^7+\276]|&\274v\256(\274\255\232\367\275Mf \275Gu\305=\300\037\344\275\331\337k=\372\235#>Q\360\030\274\320\246\006>A\343\200=\257\022H\2756\275\332\275\330E\307=\205f\367=\375\354\240\275\320\357.=\332\241\243\274\253\244\006\276\324\327\300=\260\324\273\274m0\230\271n\255g\274\243\035\373=\235\252\001>\322\343P\275\210\253\250\275\362\324\257\275\372\247\222=\375\026\355=!\226@=`;\374\275<\302r;\206\257\005>\230\360u\275\004\243\311=\214/h;\326\305\004\276\310\021\374=~\371 >\23188\275\016B6\275cvy\274\272\376\276<0#\034\276\205{5\276\030\244\200<\373-\344\275\326A@>\017\221\036\274\350\273\224\275|S\273<\357*\363\273z\207\232<\237Y\271=W\3047=;E\204\274Gi\233\275\340\300)\276\016| =\307\256\206\275*u\373=\230ax\275\264n->\032\246:>\260\227\037>\0224\372=\035w\003<\336\225!\275\236\262\371;\3567 <\2537!<\206\315\315\275\207r\021>\252\372l<\003\202\267\274\223\336k\275\247\324/>\345=\324\275\371\272\263=\311\001 \276A\331j\27475\262\275\232.\217\275\312gf\274\271\303\367\275\203\253\244\275\226\317K=\006\027\352=\3137\217\2750\301\246\275A\177\232=\355\331c<\222\310\276=\r\250\241=[d\250<\325\006\000\276\025\317,\274\355^\006\276N\270Y\275\221\177\240\274\353\312\310\275N\352\342\275^\270\201\275\364\356\217\274\302{7=\332\3262\273\357\317\237\274\002\200[=\253]\033=\275f\204\275V\\\r>HK\001\275\374\034)\275\3769\020\275\350\261\r\275Qa\243=\227[\230=\257\037Z\275U\277\267\274(?\035\276\331O\254=7\306\261\274O\266\002=\320\rB>\345\313\334=\262U\377\275\340\377z\275\244L\343=$\230\261<-\034\303\274\331\250\241\275\n\254\211<\022L\352=\1771\374\274K\263*\275?\000V\275\253\t\371\273Az*>\263\234\206=\230\225\021\276\3175\"=\370\341\003>\221\340\275<\216\'\r\276f\021\313=\354\244\304\275\367\021\270\275l9\343\275\315Y\n<\255\252\274\275_\277\024\276v\271y\274h\321\246\275\234*\025\276\241\315\214=\263C\333=\222?\267\275~@\022\276b;\214\275\373\207\004\274\201\032c=T\033\206\273\262\325\317\275\364\030(\276\226\374\200=\026\257\003\276\323\301\266=R(\241\275\366\262\251=\371o\305<\350\212\216=V\315\210=\344\377\204\273.\n\332=\032\000\r=\352\362\004=\232\275\226=\325\010~\274\331\364n\275Pw\256\275\353\354t<\016Z\'\276\021\371\010\275z\313\273=\223D\n\276\377n\230\275\252\262\366=\371\3513<\223\350\251\274\001\263\356\275Mc\025\276\261PR\276/\346\341\275\351\252P>\025\303\210\275\332\2746>v- >\231s.\276\243\0207\273\270\201S>\321\017\020>\235j\005=\257\013*\275\302\016\225=)\305\026>ER$=\222\373><t\202*=\301\234\230\275{E[=\241}!=z\312\227=\315\223\034=\n\304\006\275\373O\016>\001J4=\265-\302=\227\323\264\275\221\362?<\366\352<=?|y;\324\343\360\275\211\033\207=oY\225=\023\037:\274\356\213\247=o\317\230\275!\000I=\203H\202=1>!\276nF\005=\254\247\316\275%\035K=\035\210(\2740\236\003>\203\207\312=\364d\266\275\006\222\'\276\212z\267\275\337\003\377=r\376\317<\254\275\361\275)\016\200<\350\024Y\275\\\2179=\\j\3639~\013\227\275Y\205\356\275\376\'\025<o\352@>\330\335\271=\267<6<\r\231:<7S\203\275\307f\304<\255\2301\275\025n\364<ii\004>\263\316R\276\322\334\214=\355\214\362=\263\243\343<\256\023\214=\352S\362\274/\323\367\274\320]\211=\316\302\034<g\340y=\274\235\373\275\255\350\330<\301\314\315\275\241/\242\275 z\t\276\027\351\013>}\251r\275\255\362\237\275\334+\\=0\216\206=x\270\253\275A\322\007=\rE\021=\2604\\=\300\263\021\274\262\275X\274pl\246\2759C\234\275\224\214Y=\355\177\002>-C\213<\277\344\261\275\265^\224<vf\305<\016\324\230<Z,=<e\014\234=[\' =awO=\r\250B\275?\261\216\273\326\244C\274\330\003\004>\204\340\340\273~\335\324\275L\316$\275\234\374\211\275\325F\017>\316ZD=\314\2227>\337\203\021>\313?\241\274\330L\\=E\302<<\216\032k\275\313\234\242=\025M\222=\212$\347\275\260\331\271\275\203\350\203<\235Y\237=\263\230V<;\271<=\364\315\007>.T\241<\230c\344\274\316\3275\274S\254A=f$\271=\023 \007<\017:_\275\310\2179\276M+\324\275E#\245\274?\236\365\275(\362\253\273/\234\372\275,g\240=/\3066>\271J\312<ht\257\275\234\3014=\375\201)>~\036\274=z\007\032\276_6\350\275\013\303\274=\336\260^=\313\354\326=\271$\032=d<\234=\343\360\257=\'\253n\274\024\031\035=\236\024\334\274\213\213\230\273*\005\376\274\252G\312\275\270G\251\272\210\331\244<\261\225\016\276x6\335<\362qd\275\333\n\272=\032d\234\275:\271\"\275d\240\250\274\317\276\222<#2\245;D\024I\276\245Y\\\274\373z\371\2752\0236<o6\273<|\233\237<\t\001\366\275\264\257\031>7\340\303=N,\231=\310\372\264\275\362\320\253\275\"\014\314\275\026\367\303\275\270\324\010\274\030z~=\000\231\356=\226\\`\274\265\266\205=&\n\262\275\3323\212\275\350\205\">\021\247\335=E\227)=\017\234\254\275\"}\235\275-;\235=`\332\343\275\277|O\274\344L1\276\017D\226\275\245g\330\274/\221\213\274\355O\235<\231]_\274\362\205*>\236\027`\275\307\027J\275\201\352\264\275p\374\354\275\247\316#\275!cj=Y\356\315\274\007\260\225=o\000g\275\201}8\272\346E\234\274\377\231\300\274\357kG=\363w+\276\205Dw\275\213\323\017\2755W\213\275\025\303\370=?\354\246=v\3649>\251\004^\275\260\215\201\274\003C2=v]8=\036\r\336=\367Q2\276\367?\321=\016k\276<\323\223\024\276\301\"\000>(\005\263=\237\212\225<\014\234\270<\222BA\276\320\201\202=\233+\311=\253\301\354\275\261.w\275\372\007`;)4\021\276\240e\324\274\2421i\275W\301R=X\223 \276\306\236\303\274)\242A\275qy%\276W\326\237\274\251\207*=\021,\212=:\242\225\275F\361\372\275\272\\\365\275\311?^\276\202\225\267<\346]%>\027e&<}\351\014=\376\037\215=c\237V\275\313\316\001>0oT\275q\034\355<\324\264.>B\313\t>d50>#z4>\271\260\016\276M\357\001>\017\232\r\276\251\371\267\275\333\335G=0Wa\276\221\315,>\334L$\273\372\002\274\274\246\356\017\276\000^\254=|\211\014=\316\227Q\276\336\377\373\274X+h=\306\254\241=;TP\276w2\207\275\360&\334=\032\326 \276\365\317$>\246\266\376\274G1\"\276D\036\016\276*\377#>\305\372<=\345\231&>\210\010*\276\373\255\213\274\305\315\020>\306H\236\274\216\312C\276s*b\276\203AV=\212\366%>/\257u=\202\305S>mK\317=\362\357\333\273\264I\362\274g#\021>J\301L<\215\370t\275V\263\006\273k\312\213\275\363\256N;\305\333\023>{\353\210\274.\007\371\274\202\264\270<(I\356=\232G\362\275_\304\347\273\033\242\025=f\277\234=\303\221\326:\350\032\033\2768\320o=o\025\315=h\027\'\276\317\267\222<\337\237\">\306\016\330\274\252\235\345= G\'>}t\003=\233\225\332;\316\206\301;M~\023\276;\305Z:\210\2170>\346\321\000=\313\032\276=r\353k=D$\300<m\256\314\275 Z\200=K\n\006>\3526F>?\245B=\017\324{\273\276\373\036=d\333\342\275\266\004\253=p\350}\273O\321\372\273\363\201\276\272\355\375\204<\006\372U=8 5\275\323h/>#\307<>\245\232\320=.>V\2757\224\036\275p\301\302=\320\345\303=\211f\306\275\010\214\016\276\302\365\010>\266\314\225=\313\267\352\275;\024\001\275\377\320\t\276Kf\267\275E\020\\\275\021vS=(?\217=o\341\005\276$\311\004\275\277\0269=#\\\034\275\334\240\n\275u!\352\273*\235\326\275\017\037 >\350_\267\274\017\376\"\275^\347\306\275\377\377N\275]\r\374=.\003\344<ml\257=\207\365\365<\250\311+=\336\035*\275N:b\275D\375F\274\215\370\361=\272\361\003\274\327JF=\255\224\025=Ep*=\000!\274\275&m\024\276\265>\304=\\}\231\275l\2021>\230\311\020<\256\336\033\276\205I\033>I\004\341\275q\013\303\273\030\343\032>*C\266\275\205=:\276G\302\326\274\223\342\232\273-\\\014>m\333:>\317\376\235=\244!\320=\354\220\254<JHe\275hw\010>T\225\035>B\270[\275\347/\251\2748\233\331\275\206C\346=\343\245\270=\345\344\304=\270\322\246\275&\222\032>\035*\305\274\234V\004\276S\026$\276\335\216\325\273\"\031o=/\263.\276\252\310\300=\332e\363<U,\361=;\240\364\275\022\024\006\276e\010\227\274o2\210=\376\332=<S\224 \276\361\273\037>B\217\251=Aw5=\273\251\252=\272\240\331\275\332\'5\276l\006\374\2729\351\026>\235f\252=\252(\'\275E\3315\275\270\361\212=1\265E:q\270\340\275\373h\005=\236j\016\275o\326\035\276\2710^=\261\232\222\275\261\243\340\275u?[=l/A\276\254k\257=\376B\002=\232k\305=~\306\224\275\002\230\337\275$\202^=i!\034>\305\030\001=\006\210\317\275\342\3444>\360\257\243<\332\307j=\022\360\020>\"\364\345\275\2564\223\275>\3175\275<\211\224=\2350\330=\340\344\243<\240\322\241<\234\264\301\275\240g\321=\013\262\020\275\303n\344=\227t\366\275\363s\337=&d\351\274Z\003\335\275eF\"\274\352\240\200=\244\305\234\275\023\353\220\274\332\365(>\327n\n\275\217q\207;\304)\206=h\277\307\275o\364P=2\207\031>\334\002\265=\346\000\010>\020\020\003=\201\244\204<\027\204\225;\037\013\305<\212\355\031=X\307<\275\207\357b<\320`#<\021\024\203=\310Ym=\034\225I=\271\261\000>f\200\3349g\312\240=\242o\264=\254_n\273tE\221\273\345\215\006\276\205\305@=\350\207H>\177b:\276\2046%>`\244\013>\261}\234\275\236\307\312=\334\235T=\306b$\274\327\023A>\264\320\016\275\203\252\n=\230\311\213=T\203\003\276\366\304==\266\204[\275\273\320\004\275\002\254[=\307\024\372\275\350\270\006>;\264\331<\003:\264=.&\205=\313\203\027\276JA\332\275F|\323\274Q\213\230\274\037\250\221<%m\r\275\032_\014\276\033\314\356\275>\0173>e\023\226\274}\375\327=\002\324?\275\013\362\003>\014\t\250\275\"\364W\275\316\013\355\275\017\215\t=%\022\032>%\000\346=\215\020\253=\017}\201=R\"\021\276b\234\236<a\255\273\274\267\330\204\274%x\002\276\001\342\346=v\361\202\275\272\021\037\275\235[\206=\005K\002>\367\354\365\274\212\324\334=y?[\275\024q\307=@1c\275\026\231,>:\334p\274\023vX\275\005\016)\276\340\242\r>\315,S=\337\344$=\253\327/>0]V=\244\325\036\276o\220\310\275\257\002\210=vn3\276\246\020\215=p\331\004>\r@\356\274\233\232\017>F\033s\275\357\235\336\274\321#\346=\371\213\262\275\3116\010>\320\320d\274\2008\222=\333tP>\366H\276\274\245\277\257\275\237}\323\275\033q\272\275\245\005\335\275w\036=>\361\266;\276\273\317\'>\321\264\306\275\344\302\223\275\337\301]\275\021<n\275\210\036\206<\252\273\304<\243`\013=\214\271\262;\345\221)\275Z*\202\275sk\335=\264\032w\275\260r\016\274\330H\2568\266=x\275\343\r(>\275\004\322<\016y\221<\013\367\335<\346\363`\275^\002\000>\363\212 \275\355\203->\t\2224\275\314\253\201\275B}9=}}\352\2743\264\233\275\241\034\004\276\315R\024\275+\n#\275\036\357\017\276-\207\031\276~s\323<\200v\"\275\226\036F\276g\271\020\275{E\024\276\275U\225\275 !\226\275\262d\230\275\226j\276<k\227F\276#Y`=\240\320\213\274\333\3442\273\036\3358>\236\2222\275sL\315<S\n\245=\023\370\217=\276\024+:\022\2133\2752\260F>\225\324\275=\022\327\371=\271\326\030\275s\336\260\271o\204\373\275L\030\214=\211\355J\275!\210\026=\205T*\276W\322\215;g\265\346\275\034O\320\27532\245\274w\333k<Z\237\177\275\375\rb\275\023Br\275\324\256\266\275\353\215\003>\365P\315<xt\n=\227R]=\205\360\335<x\327\207;\303!\226=6\336\205<S\375\325\275\365\3003>\252<\272\2755\267\360=~9h\275\254\010\343\275\306\215\302\275\\=\375<\354\035\370=\251a\274\275m\325\267=,\342\225<R\032\370\273\360\271\273\275\003\336`\27554\353=P\003\020\276\222\262\203\272\031\322\246<X\301u\275\270\223\224=\"\013A=\\7\301\274F\241\305\275\326\332\021>\361\326\320\272\030d\023\276\\aq=\232\264\210\275\266\320!\276\036\276\337=i\177\305\275\261]9<B\347\361=\177\266\"<\361\333\n>u\321\032;\266\207\274=\r\353Z\275p\035\016=q-\344<\371\344)\275\225w\253\275\357\372 \276Z\036\232=J\004\214\275gy\250\275\222\313\225\274\2525\t>\013KH\275y\017L:60_\275!(8\276\006\345\003>\210\323 \275V\271Z\2755\334\350\275}\240\260=8\234/\276\376E\327\275\005\177\221<\235\377*>J\271\276\272\004\336\251=\276\363\277=\327[\034\276\376\327\256<x\371\333\275f\326\r>\214C\322\275\322\277\243\272\345]\'\274\033-c<0\030\004>8\n\220=\370{\217\275\027\304\335\275.Z\006=l\016\307\275\0144\206\275\022\240\232=G\337\022\275\234\277\330\275\203\306\206=\377<\227\275-\3310>\370qr\274\234\317/>\246c\020\275\3200\214\275\270|\363\274{\332\335=\304MB=\334\373\254=\276rv\275\264?Q>\013z\371\275{g\312=\204h\217<\306$\247=\014<\202=\276\226\227\275\256;\326\275\207\263Q<\235\370l\273\001t\261;\241B\007\275\362\345B\276\206=\"<S\222\343\275\217\032\370;\001\273\021=\265:\020>"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "Const_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "network/weights_2"
      input: "^AssignVariableOp_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "\n\327#<6\253\340<\n\327#<\264B\314<)\200\214<\305\264c<GF\276<Z\006n<\267\253\262<\221J\354;\350\277$<\236\361\264<|z\233<\232#\212;\"r\303<h\203V\273\336A?<\277\374T<\345]\273<\372Z\306<\213\227(\273\261\177\275;bT\262<u\024\335;\261\203\002\273\303v\016=\272\\\215<v1g:\246?\002<\204yQ;\210\350\367;\234+\225;\275\207\243<\n\327#<\200\024\022<\274\033\367<\004F\360;\304R\363\273\007L\030;\257\010^<XD\032\274f^m<\335W\360;\371\n\211<)?\270;\3220\252<\263\336\267<\024\231@\273\006\251\250<s\324\222<\235\260\221\270\331\341\271<`\331\035<\250\202\327;\n\327#<S}\345:.\360\213;\254\210\245<\320\352R<\037\371\001=R\214\234;\014\275\000=\210{\030\272\3379\361<W\237\334;y\300\310\272\206\273\\<d\023(;\033\004\026\274c\271\311<\330\245$<\203\345\260;\257\364\241<\220:\030<\014\005Q:\337\033\245<\330\024\372:\343M\357;=\326Y<\221\350\200\273\354\366y<c\0210\274`hP<\032\250\235<\367\225\304<y\201\234<}\370\n<\\o\030<\343^\310;\002\371\221<\013=\023\273\304\270\261<A\002\242<\200\200\222\273\211\343\353;7\271\265<p\217\245<\230\324X<\277\323\005=\263_\256<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "Const_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "network/biases_2"
      input: "^AssignVariableOp_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
            tensor_content: "\214\337\203\277e\233\220>n\331U?u\222\252\276KG\324>\202\334\337\276\315\tX>\272,\017?\336\370\\?\n\204\202\277\277\326\257>\332\221\204?6\230\336>\031\3507?\006\376\033\277U\375+\276:1\270\27571 ?\273\345\245\2767\3353\275\222\327\214>\353{\343\276\236r\367\276b\272\211\276\024\310\301\276$4;\277\016*y>o\016\317>\227\345\367\274$\375\367>\304D+?\342\313\023\277\241-J?0\323(\277\200\345\210?\023+W\276\261\271\016\277g\356(\276@=\036?X\007e>\216\211w\276*m\225><=\206=\245\330\216?H\334\253>\0263\362>d\004\\\277)c\356\275~\343\343=F\304!?\037\341Q\277bv\327\275\217\347q\277G\220\014?#i\341\274\352\314\322>/\267I>\025\2762\277\307\025\370>\346X\250\276\3512\210>u\267c\276;\2572\276x\037\226?\022]\357\276\362\315\355>\016\261\336>\020\223.?\\h\370=\370b[>\2144\240\276\227\340\"\276jI\262>p\330\020>\373\215\001>Wp3>+\371\335=\323\036\'\277\351G3\277\312\255\340\276\374?\352<\351\260\001>s\271\370\276\357a~\274&\244\325\276\311\311f\276K</\277.\000\361\274@N7\277\321J\351\275l\347*?A/e\275>\261L>= S?7\213.>#\372\203\276\366/i\277\302\236 \276|\364\016?*^s><\364\217\277\272fV>\371\233#?\005\021\221>\021T5\276\2110\023\277y\355\336>\005\"\247>y/N\276J\337%\277\002uP?\225\335\262=\311\240\025?\207\251\305\276i\007\331>\244\367\316\276fg\372=\030\001\242=\205\004\214\2764\250,>x\210\230\276=\233\006\277\036\354\331\276\302\352f=\002\257\034>\014$*\2767\010\202?n#\222\276&\265h\277\306\3563\276\260%X<\245fR>\0178\203?9y\023\277\251\362P=\304\322\254\276\273\027_\276K\320\212\276\022\265Z\277\360\005g\275n\326*>]J\227>\237\"\205\27688\351>\316\241/\2774C0\276\237\023\367>2!\223\2764\245\270\276d|\017?\206I\002?\354n+\277\356\222\255>\333\276\235\276\310\267E\2757\307\256\275b\n,\276\3155F=9@K\277\226\242\005\277Ju,?\213\026}\277uT\026?2\207l=\0236\3739\237\315\202>\347\030\336>$\300K>&3S\277I\224\212\277\2265\232\275?\0303\2771\343z>W\321m\277\330[\002? \374Z\277\337\354$>\350\204\022\277#K\365>~\2238?\250\245\013\277r\002\026\277@%\177\277\374[\226;I\3356?(\371\005\2751D\'>\242j\016\277m<\256\276\310,4\277D7\021?@P\234>\352\355\326>\r\' >\260\263\036?o\017\303>\345\315$\277\251\t\363=\343\364g?\020\220m=]\332\035\277\224?\253\276\234p\n?.\321 \277.)d=\267\032Q\275\rL5\275\262M8\277\231\331\347\276L*j\276~\251\345>\373\3054\276\321\326\032?\345\233\271>Ta\007\275gP\331\276\035\031\333>\234\014\362>`A;?\226(E?T\322K>^\017X\277\207\374y?\270\307\221=\213\340\266\276B{\000=X5\023?\363\253a\276\255X\270>\240\013\302\276Hj\020\276`\347Y>d\r\354\275\367(i\277\001\301\213\275\235e\266\276\350\263\010?\205W\327\276\255T\276>\252\317\'\277\324\200\005?\310\032\030?/^}>\301\305\002>,\017\272<\224%L>\200\226H>\322\006L\276\3053\032\277\361S\331\276\277<\033\277\237hh>VO\036\277\300}\274\276\037\006\271\275f\302\\\277\030O\307\275\321\261P\277\374\241\363=C\365\271\276\241\004\211\277g\363\031?\324]\233\275f\274\236>\301\224\007?^\330\365\276\344 J?\037v\"\2775\005\227\276\2160\327>\020\326P?\357\222\237\276\352\013\350>\002\026\215\277W\320\004?\273+\262>\035\013\335\275\244\354\032\275W%\206<\306KB?\317\343+\277N\341\235>\252\035\037?\355\211\030?\204\246\035\277\225\244\256\276\022\257\365\275\203\327\340;\237\227\255>\200Y\334>_\265\035?<\372\024?\211I\372>?;\324\276\224Gg\276\236:\036>`%\314\275\252\267\032\277\274L\276=\357\034\205>"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "Const_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "network/output_weights"
      input: "^AssignVariableOp_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3
              }
            }
            tensor_content: "\300\244\031\273\250\365\222<\301\320w<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "Const_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "network/output_bias"
      input: "^AssignVariableOp_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/filename/input"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/filename"
      op: "PlaceholderWithDefault"
      input: "save/filename/input"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/Const"
      op: "PlaceholderWithDefault"
      input: "save/filename"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/StaticRegexFullMatch"
      op: "StaticRegexFullMatch"
      input: "save/Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "pattern"
        value {
          s: "^s3://.*"
        }
      }
    }
    node {
      name: "save/Const_1"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ".part"
          }
        }
      }
    }
    node {
      name: "save/Const_2"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_e34ada077633485a9ebe14669bcf426d/part"
          }
        }
      }
    }
    node {
      name: "save/Select"
      op: "Select"
      input: "save/StaticRegexFullMatch"
      input: "save/Const_1"
      input: "save/Const_2"
      device: "/device:CPU:*"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/Select"
      device: "/device:CPU:*"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "beta1_power/Read/ReadVariableOp"
      input: "beta2_power/Read/ReadVariableOp"
      input: "network/biases/Read/ReadVariableOp"
      input: "network/biases/Adam/Read/ReadVariableOp"
      input: "network/biases/Adam_1/Read/ReadVariableOp"
      input: "network/biases_1/Read/ReadVariableOp"
      input: "network/biases_1/Adam/Read/ReadVariableOp"
      input: "network/biases_1/Adam_1/Read/ReadVariableOp"
      input: "network/biases_2/Read/ReadVariableOp"
      input: "network/biases_2/Adam/Read/ReadVariableOp"
      input: "network/biases_2/Adam_1/Read/ReadVariableOp"
      input: "network/output_bias/Read/ReadVariableOp"
      input: "network/output_bias/Adam/Read/ReadVariableOp"
      input: "network/output_bias/Adam_1/Read/ReadVariableOp"
      input: "network/output_weights/Read/ReadVariableOp"
      input: "network/output_weights/Adam/Read/ReadVariableOp"
      input: "network/output_weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights/Read/ReadVariableOp"
      input: "network/weights/Adam/Read/ReadVariableOp"
      input: "network/weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights_1/Read/ReadVariableOp"
      input: "network/weights_1/Adam/Read/ReadVariableOp"
      input: "network/weights_1/Adam_1/Read/ReadVariableOp"
      input: "network/weights_2/Read/ReadVariableOp"
      input: "network/weights_2/Adam/Read/ReadVariableOp"
      input: "network/weights_2/Adam_1/Read/ReadVariableOp"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/MergeV2Checkpoints"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Identity_1"
      op: "Identity"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "save/Identity_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_2"
      op: "Identity"
      input: "save/RestoreV2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "save/Identity_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_3"
      op: "Identity"
      input: "save/RestoreV2:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "save/Identity_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_4"
      op: "Identity"
      input: "save/RestoreV2:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "save/Identity_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_5"
      op: "Identity"
      input: "save/RestoreV2:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "save/Identity_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_6"
      op: "Identity"
      input: "save/RestoreV2:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "save/Identity_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_7"
      op: "Identity"
      input: "save/RestoreV2:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "save/Identity_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_8"
      op: "Identity"
      input: "save/RestoreV2:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "save/Identity_8"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_9"
      op: "Identity"
      input: "save/RestoreV2:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "save/Identity_9"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_10"
      op: "Identity"
      input: "save/RestoreV2:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "save/Identity_10"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_11"
      op: "Identity"
      input: "save/RestoreV2:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "save/Identity_11"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_12"
      op: "Identity"
      input: "save/RestoreV2:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "save/Identity_12"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_13"
      op: "Identity"
      input: "save/RestoreV2:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "save/Identity_13"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_14"
      op: "Identity"
      input: "save/RestoreV2:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "save/Identity_14"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_15"
      op: "Identity"
      input: "save/RestoreV2:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "save/Identity_15"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_16"
      op: "Identity"
      input: "save/RestoreV2:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "save/Identity_16"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_17"
      op: "Identity"
      input: "save/RestoreV2:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "save/Identity_17"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_18"
      op: "Identity"
      input: "save/RestoreV2:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "save/Identity_18"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_19"
      op: "Identity"
      input: "save/RestoreV2:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "save/Identity_19"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_20"
      op: "Identity"
      input: "save/RestoreV2:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_19"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "save/Identity_20"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_21"
      op: "Identity"
      input: "save/RestoreV2:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_20"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "save/Identity_21"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_22"
      op: "Identity"
      input: "save/RestoreV2:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_21"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "save/Identity_22"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_23"
      op: "Identity"
      input: "save/RestoreV2:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_22"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "save/Identity_23"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_24"
      op: "Identity"
      input: "save/RestoreV2:23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_23"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "save/Identity_24"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_25"
      op: "Identity"
      input: "save/RestoreV2:24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_24"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "save/Identity_25"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_26"
      op: "Identity"
      input: "save/RestoreV2:25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_25"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "save/Identity_26"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/AssignVariableOp"
      input: "^save/AssignVariableOp_1"
      input: "^save/AssignVariableOp_10"
      input: "^save/AssignVariableOp_11"
      input: "^save/AssignVariableOp_12"
      input: "^save/AssignVariableOp_13"
      input: "^save/AssignVariableOp_14"
      input: "^save/AssignVariableOp_15"
      input: "^save/AssignVariableOp_16"
      input: "^save/AssignVariableOp_17"
      input: "^save/AssignVariableOp_18"
      input: "^save/AssignVariableOp_19"
      input: "^save/AssignVariableOp_2"
      input: "^save/AssignVariableOp_20"
      input: "^save/AssignVariableOp_21"
      input: "^save/AssignVariableOp_22"
      input: "^save/AssignVariableOp_23"
      input: "^save/AssignVariableOp_24"
      input: "^save/AssignVariableOp_25"
      input: "^save/AssignVariableOp_3"
      input: "^save/AssignVariableOp_4"
      input: "^save/AssignVariableOp_5"
      input: "^save/AssignVariableOp_6"
      input: "^save/AssignVariableOp_7"
      input: "^save/AssignVariableOp_8"
      input: "^save/AssignVariableOp_9"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    versions {
      producer: 175
    }
  }
  saver_def {
    filename_tensor_name: "save/Const:0"
    save_tensor_name: "save/Identity:0"
    restore_op_name: "save/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "train_op"
    value {
      node_list {
        value: "Adam"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
        value: "\n\rbeta1_power:0\022\022beta1_power/Assign\032!beta1_power/Read/ReadVariableOp:0(\0012\'beta1_power/Initializer/initial_value:0"
        value: "\n\rbeta2_power:0\022\022beta2_power/Assign\032!beta2_power/Read/ReadVariableOp:0(\0012\'beta2_power/Initializer/initial_value:0"
        value: "\n\026network/weights/Adam:0\022\033network/weights/Adam/Assign\032*network/weights/Adam/Read/ReadVariableOp:0(\0012(network/weights/Adam/Initializer/zeros:0"
        value: "\n\030network/weights/Adam_1:0\022\035network/weights/Adam_1/Assign\032,network/weights/Adam_1/Read/ReadVariableOp:0(\0012*network/weights/Adam_1/Initializer/zeros:0"
        value: "\n\025network/biases/Adam:0\022\032network/biases/Adam/Assign\032)network/biases/Adam/Read/ReadVariableOp:0(\0012\'network/biases/Adam/Initializer/zeros:0"
        value: "\n\027network/biases/Adam_1:0\022\034network/biases/Adam_1/Assign\032+network/biases/Adam_1/Read/ReadVariableOp:0(\0012)network/biases/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_1/Adam:0\022\035network/weights_1/Adam/Assign\032,network/weights_1/Adam/Read/ReadVariableOp:0(\0012*network/weights_1/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_1/Adam_1:0\022\037network/weights_1/Adam_1/Assign\032.network/weights_1/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_1/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_1/Adam:0\022\034network/biases_1/Adam/Assign\032+network/biases_1/Adam/Read/ReadVariableOp:0(\0012)network/biases_1/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_1/Adam_1:0\022\036network/biases_1/Adam_1/Assign\032-network/biases_1/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_1/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_2/Adam:0\022\035network/weights_2/Adam/Assign\032,network/weights_2/Adam/Read/ReadVariableOp:0(\0012*network/weights_2/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_2/Adam_1:0\022\037network/weights_2/Adam_1/Assign\032.network/weights_2/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_2/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_2/Adam:0\022\034network/biases_2/Adam/Assign\032+network/biases_2/Adam/Read/ReadVariableOp:0(\0012)network/biases_2/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_2/Adam_1:0\022\036network/biases_2/Adam_1/Assign\032-network/biases_2/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_2/Adam_1/Initializer/zeros:0"
        value: "\n\035network/output_weights/Adam:0\022\"network/output_weights/Adam/Assign\0321network/output_weights/Adam/Read/ReadVariableOp:0(\0012/network/output_weights/Adam/Initializer/zeros:0"
        value: "\n\037network/output_weights/Adam_1:0\022$network/output_weights/Adam_1/Assign\0323network/output_weights/Adam_1/Read/ReadVariableOp:0(\00121network/output_weights/Adam_1/Initializer/zeros:0"
        value: "\n\032network/output_bias/Adam:0\022\037network/output_bias/Adam/Assign\032.network/output_bias/Adam/Read/ReadVariableOp:0(\0012,network/output_bias/Adam/Initializer/zeros:0"
        value: "\n\034network/output_bias/Adam_1:0\022!network/output_bias/Adam_1/Assign\0320network/output_bias/Adam_1/Read/ReadVariableOp:0(\0012.network/output_bias/Adam_1/Initializer/zeros:0"
      }
    }
  }
}
