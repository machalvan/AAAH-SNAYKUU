saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "AddV2"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_aggregate: true
        is_commutative: true
      }
      op {
        name: "AssignVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        input_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "BroadcastGradientArgs"
        input_arg {
          name: "s0"
          type_attr: "T"
        }
        input_arg {
          name: "s1"
          type_attr: "T"
        }
        output_arg {
          name: "r0"
          type_attr: "T"
        }
        output_arg {
          name: "r1"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "BroadcastTo"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "DynamicStitch"
        input_arg {
          name: "indices"
          type: DT_INT32
          number_attr: "N"
        }
        input_arg {
          name: "data"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "merged"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type_attr: "index_type"
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "index_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Log"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "PlaceholderWithDefault"
        input_arg {
          name: "input"
          type_attr: "dtype"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ReadVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "Reciprocal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_QINT8
            }
          }
        }
      }
      op {
        name: "ReluGrad"
        input_arg {
          name: "gradients"
          type_attr: "T"
        }
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "backprops"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ResourceApplyAdam"
        input_arg {
          name: "var"
          type: DT_RESOURCE
        }
        input_arg {
          name: "m"
          type: DT_RESOURCE
        }
        input_arg {
          name: "v"
          type: DT_RESOURCE
        }
        input_arg {
          name: "beta1_power"
          type_attr: "T"
        }
        input_arg {
          name: "beta2_power"
          type_attr: "T"
        }
        input_arg {
          name: "lr"
          type_attr: "T"
        }
        input_arg {
          name: "beta1"
          type_attr: "T"
        }
        input_arg {
          name: "beta2"
          type_attr: "T"
        }
        input_arg {
          name: "epsilon"
          type_attr: "T"
        }
        input_arg {
          name: "grad"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "use_nesterov"
          type: "bool"
          default_value {
            b: false
          }
        }
        is_stateful: true
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Select"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "t"
          type_attr: "T"
        }
        input_arg {
          name: "e"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Softmax"
        input_arg {
          name: "logits"
          type_attr: "T"
        }
        output_arg {
          name: "softmax"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "StaticRegexFullMatch"
        input_arg {
          name: "input"
          type: DT_STRING
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "pattern"
          type: "string"
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "TruncatedNormal"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "VarHandleOp"
        output_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
        is_stateful: true
      }
      op {
        name: "VarIsInitializedOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "is_initialized"
          type: DT_BOOL
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "2.2.0"
    tensorflow_git_version: "v2.2.0-rc4-8-g2b96f3662b"
  }
  graph_def {
    node {
      name: "reward"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "actual_move"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 4
            }
          }
        }
      }
    }
    node {
      name: "network/input_layer"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 9
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.3333333432674408
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal/mul"
      op: "Mul"
      input: "network/truncated_normal/TruncatedNormal"
      input: "network/truncated_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal"
      op: "Add"
      input: "network/truncated_normal/mul"
      input: "network/truncated_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights"
        }
      }
    }
    node {
      name: "network/weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Assign"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "network/truncated_normal"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases"
        }
      }
    }
    node {
      name: "network/biases/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Assign"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "network/Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul"
      op: "MatMul"
      input: "network/input_layer"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add"
      op: "AddV2"
      input: "network/MatMul"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu"
      op: "Relu"
      input: "network/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_1/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mul"
      op: "Mul"
      input: "network/truncated_normal_1/TruncatedNormal"
      input: "network/truncated_normal_1/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1"
      op: "Add"
      input: "network/truncated_normal_1/mul"
      input: "network/truncated_normal_1/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1"
        }
      }
    }
    node {
      name: "network/weights_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "network/truncated_normal_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1"
        }
      }
    }
    node {
      name: "network/biases_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "network/Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_1"
      op: "AddV2"
      input: "network/MatMul_1"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_1"
      op: "Relu"
      input: "network/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_2/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mul"
      op: "Mul"
      input: "network/truncated_normal_2/TruncatedNormal"
      input: "network/truncated_normal_2/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2"
      op: "Add"
      input: "network/truncated_normal_2/mul"
      input: "network/truncated_normal_2/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2"
        }
      }
    }
    node {
      name: "network/weights_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "network/truncated_normal_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2"
        }
      }
    }
    node {
      name: "network/biases_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "network/Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2"
      op: "MatMul"
      input: "network/Relu_1"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_2"
      op: "AddV2"
      input: "network/MatMul_2"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_2"
      op: "Relu"
      input: "network/add_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_3/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mul"
      op: "Mul"
      input: "network/truncated_normal_3/TruncatedNormal"
      input: "network/truncated_normal_3/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3"
      op: "Add"
      input: "network/truncated_normal_3/mul"
      input: "network/truncated_normal_3/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights"
        }
      }
    }
    node {
      name: "network/output_weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "network/truncated_normal_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/output_bias"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias"
        }
      }
    }
    node {
      name: "network/output_bias/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "network/Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_layer/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_layer"
      op: "MatMul"
      input: "network/Relu_2"
      input: "network/output_layer/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_3"
      op: "AddV2"
      input: "network/output_layer"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/output_layer_1"
      op: "Softmax"
      input: "network/add_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "Mul"
      op: "Mul"
      input: "actual_move"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "reduce_sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "reduce_sum"
      op: "Sum"
      input: "Mul"
      input: "reduce_sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "policy_gradient"
      op: "Log"
      input: "reduce_sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "mul_1"
      op: "Mul"
      input: "policy_gradient"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Neg"
      op: "Neg"
      input: "mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape"
      op: "Shape"
      input: "Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/grad_ys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "gradients/Fill"
      op: "Fill"
      input: "gradients/Shape"
      input: "gradients/grad_ys_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Neg_grad/Neg"
      op: "Neg"
      input: "gradients/Fill"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape"
      op: "Shape"
      input: "policy_gradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape_1"
      op: "Shape"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/mul_1_grad/Shape"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul"
      op: "Mul"
      input: "gradients/Neg_grad/Neg"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul"
      input: "gradients/mul_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum"
      input: "gradients/mul_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul_1"
      op: "Mul"
      input: "policy_gradient"
      input: "gradients/Neg_grad/Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul_1"
      input: "gradients/mul_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum_1"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/Reshape_1"
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape_1"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/policy_gradient_grad/Reciprocal"
      op: "Reciprocal"
      input: "reduce_sum"
      input: "^gradients/mul_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/policy_gradient_grad/mul"
      op: "Mul"
      input: "gradients/mul_1_grad/tuple/control_dependency"
      input: "gradients/policy_gradient_grad/Reciprocal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Shape"
      op: "Shape"
      input: "Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Size"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/add"
      op: "AddV2"
      input: "reduce_sum/reduction_indices"
      input: "gradients/reduce_sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/mod"
      op: "FloorMod"
      input: "gradients/reduce_sum_grad/add"
      input: "gradients/reduce_sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range"
      op: "Range"
      input: "gradients/reduce_sum_grad/range/start"
      input: "gradients/reduce_sum_grad/Size"
      input: "gradients/reduce_sum_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Fill"
      op: "Fill"
      input: "gradients/reduce_sum_grad/Shape_1"
      input: "gradients/reduce_sum_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "gradients/reduce_sum_grad/range"
      input: "gradients/reduce_sum_grad/mod"
      input: "gradients/reduce_sum_grad/Shape"
      input: "gradients/reduce_sum_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Reshape"
      op: "Reshape"
      input: "gradients/policy_gradient_grad/mul"
      input: "gradients/reduce_sum_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/BroadcastTo"
      op: "BroadcastTo"
      input: "gradients/reduce_sum_grad/Reshape"
      input: "gradients/reduce_sum_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape"
      op: "Shape"
      input: "actual_move"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape_1"
      op: "Shape"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/Mul_grad/Shape"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul"
      op: "Mul"
      input: "gradients/reduce_sum_grad/BroadcastTo"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum"
      op: "Sum"
      input: "gradients/Mul_grad/Mul"
      input: "gradients/Mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum"
      input: "gradients/Mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul_1"
      op: "Mul"
      input: "actual_move"
      input: "gradients/reduce_sum_grad/BroadcastTo"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum_1"
      op: "Sum"
      input: "gradients/Mul_grad/Mul_1"
      input: "gradients/Mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum_1"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/Reshape_1"
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape_1"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/mul"
      op: "Mul"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/Sum"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul"
      input: "gradients/network/output_layer_1_grad/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/sub"
      op: "Sub"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "gradients/network/output_layer_1_grad/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/mul_1"
      op: "Mul"
      input: "gradients/network/output_layer_1_grad/sub"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape"
      op: "Shape"
      input: "network/output_layer"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape_1"
      op: "Shape"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_3_grad/Shape"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum"
      input: "gradients/network/add_3_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum_1"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape_1"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      input: "network/output_layer/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_2"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/output_layer_grad/MatMul"
      input: "^gradients/network/output_layer_grad/MatMul_1"
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/output_layer_grad/MatMul"
      input: "^gradients/network/output_layer_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/output_layer_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/output_layer_grad/MatMul_1"
      input: "^gradients/network/output_layer_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/output_layer_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_2_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/output_layer_grad/tuple/control_dependency"
      input: "network/Relu_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape"
      op: "Shape"
      input: "network/MatMul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape_1"
      op: "Shape"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_2_grad/Shape"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum"
      input: "gradients/network/add_2_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum_1"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape_1"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_1"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul_1"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_1_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      input: "network/Relu_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape"
      op: "Shape"
      input: "network/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape_1"
      op: "Shape"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_1_grad/Shape"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum"
      input: "gradients/network/add_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum_1"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape_1"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul_1"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      input: "network/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape"
      op: "Shape"
      input: "network/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape_1"
      op: "Shape"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_grad/Shape"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum"
      input: "gradients/network/add_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum_1"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape_1"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_grad/tuple/control_dependency"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "network/input_layer"
      input: "gradients/network/add_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul_1"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "beta1_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta1_power"
        }
      }
    }
    node {
      name: "beta1_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Assign"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "beta1_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta1_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "beta2_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta2_power"
        }
      }
    }
    node {
      name: "beta2_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta2_power/Assign"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "beta2_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam"
        }
      }
    }
    node {
      name: "network/weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "network/weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam_1"
        }
      }
    }
    node {
      name: "network/weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "network/weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam"
        }
      }
    }
    node {
      name: "network/biases/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "network/biases/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam_1"
        }
      }
    }
    node {
      name: "network/biases/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "network/biases/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam"
        }
      }
    }
    node {
      name: "network/weights_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "network/weights_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam"
        }
      }
    }
    node {
      name: "network/biases_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "network/biases_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam"
        }
      }
    }
    node {
      name: "network/weights_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "network/weights_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam"
        }
      }
    }
    node {
      name: "network/biases_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "network/biases_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam"
        }
      }
    }
    node {
      name: "network/output_weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam_1"
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "network/output_weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam"
        }
      }
    }
    node {
      name: "network/output_bias/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam_1"
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "network/output_bias/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999747378752e-05
          }
        }
      }
    }
    node {
      name: "minimize/beta1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "minimize/beta2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "minimize/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.99999993922529e-09
          }
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights"
      input: "network/weights/Adam"
      input: "network/weights/Adam_1"
      input: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases"
      input: "network/biases/Adam"
      input: "network/biases/Adam_1"
      input: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_1"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam_1"
      input: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_1"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam_1"
      input: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_2"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam_1"
      input: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_2"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam_1"
      input: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_weights"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam_1"
      input: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/output_layer_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_bias"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam_1"
      input: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_3_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/mul"
      op: "Mul"
      input: "minimize/ReadVariableOp"
      input: "minimize/beta1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "minimize/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "minimize/mul"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^minimize/AssignVariableOp"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/mul_1"
      op: "Mul"
      input: "minimize/ReadVariableOp_2"
      input: "minimize/beta2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "minimize/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "minimize/mul_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^minimize/AssignVariableOp_1"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize"
      op: "NoOp"
      input: "^minimize/AssignVariableOp"
      input: "^minimize/AssignVariableOp_1"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^beta1_power/Assign"
      input: "^beta2_power/Assign"
      input: "^network/biases/Adam/Assign"
      input: "^network/biases/Adam_1/Assign"
      input: "^network/biases/Assign"
      input: "^network/biases_1/Adam/Assign"
      input: "^network/biases_1/Adam_1/Assign"
      input: "^network/biases_1/Assign"
      input: "^network/biases_2/Adam/Assign"
      input: "^network/biases_2/Adam_1/Assign"
      input: "^network/biases_2/Assign"
      input: "^network/output_bias/Adam/Assign"
      input: "^network/output_bias/Adam_1/Assign"
      input: "^network/output_bias/Assign"
      input: "^network/output_weights/Adam/Assign"
      input: "^network/output_weights/Adam_1/Assign"
      input: "^network/output_weights/Assign"
      input: "^network/weights/Adam/Assign"
      input: "^network/weights/Adam_1/Assign"
      input: "^network/weights/Assign"
      input: "^network/weights_1/Adam/Assign"
      input: "^network/weights_1/Adam_1/Assign"
      input: "^network/weights_1/Assign"
      input: "^network/weights_2/Adam/Assign"
      input: "^network/weights_2/Adam_1/Assign"
      input: "^network/weights_2/Assign"
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            tensor_content: "!\2145>\262\206\272\274\271\027$\2776\321\335\276\224\213\301\275\n\330\230>D6\321=\006\221c\276\366V\020\277\334v\263>\273\226\355\276\302\r\207\276I2\352=^\207\'\276\030\321\224\275\332/\222>\313\302l>]\021\240\275\030\031\370\276LX\030>~\360\211=\223\331\003\275\260\265\226>2\336m\276\215q\271\275\243\367\001>\247\250{\275Ph&\277\220r\211\276`\013\245\276\021s\353>\340\217\037\275\304l(=\203\370\261\276^Sz>\333\014\027\275\034\224\002\277e\332\331=\333\"A\276o\230\212=\341G\325>\233\271\001\277\237\345\004\276>\317\"?:!\014\276j\312R\275\377X]\276\001\312\372\276m\324\244\274\2324\037\277PD\227<\034\321\376>\227\2330\2769_\346=\257\345\340>\336/\351=\363\340\005\277\2713\013>\352\2502\276\376-\246\275\332xn\275\225\277\037\276\260\262|\276\200\310\360>\335\021a\275\034\355\334\276\207\330\"\277\275\337\205>33\345\274\201\034\307\275X=O\276\010\036\354\2756\236\r?\305\301\262\275=\013\342>{\323C\276\363\270*?\304\267\350\276\002\224\233\275K\"S>\000)y\276\332Y\016\277G\341>\276\210%1>\333`~>\347\232\205=\362B\307\275{B\023>\363\364f\276\265\223\310>\333*\\\276\227\\Z\276\236\220/>)\262\354\276\226\001\262>F\304\323\276\020\327\303\276\247\221_>\310\310\026=\260OX\276\005\010\246\275\307\362`>\215\032<>Ae\002>$\367V\276\202Cb\276/\214(=o\364\265\276\253S\277>\245H\212>\312\335>>\2168\321=?{\250>\331\340\223=\254C\334\275\026\271n\275G\227@\275\034[\330>\347N\022\277\025S<>\304\022\253\276\335\224\375>N\366\004=\314B\\\2763\203\342=\276,L>\316\223\347>n\352\357\276!\332\007?\027\273\022>\'\250\\<B\304\247\274\233\356\331>\033)\203\276f\037\376\275s\000\357\276\"J\t?\205k\315=\033>|\276\203\222P>\266\021\271\275\210\243\252>ua/>\033\t\222=\254\371.\2766\230\000\277\321\302\223\276\212\237\227>\372\347\345=\'+\322\276\377\200l>\222\254\233\276$\316\377=\256\352\337>\230\310l>\364l\266>\266\212\225>\3355\221\276\357zy\2745\331\016\276,\261\214>T\243\203\274\215z$\276\360,/\274\363\005\036\276\277\243\327>\300iF=\371\303\'>V\307|>\023&7\275G\347V\276\227,\320=\253\224\315\274\257\3077>\342l\027\277\003\024\307\276\2041\361=\225\217\323>\022\352\021>\371\304\233\275\344\317\357\276\244\023\010=\313\341\032\276\376\366\231\276\244\315\251>\223\025\230>~\241\002>\363\360\007\275K\323\267=b\242\000\277\366\263\247=~.\026>\353>\326\276\023\327\020\277|\252\345\275\245\214\276\275\364a\356>J#\253\276\t/\004?M\334\336>/\250\000>z\377\361=\361\211O\276\t\333\007\276\220N\304\271\016\261\002>\\\346h>ZJ\346>\031\217F\276\020\207g>\024\276;>\234\227\250>U\362R\276\247\345&\277\\\356\332\275ry\225\275\357U+\276\220\246\317\276xm}\275\2038\265\276k\252\250>\322*?\276.x_>^\373\306\274\222\305\254>F@\303\276\033\352R>\001\260\263=\350\342\013=\261\366a\276\210i(?$-\241\276\341\014[>S\222k=\312\025\310\276\253\301c\274\356\204\304>\013\007\033?\270\374P>\017\304\376=h\305F\275\233\251\301\276\023\206\234>#\311\311\276F\345\030<\030\035\255>>\014\236\276~\273\316>\267\224\021\276@s\216\275\324{V\276-\377\007\277\206\2760\276\352;\000?o\365K\276\220C\004\277GY\316>,\212\352\273\206\375&\276a\316\345\276\215]\235=\313\202S>LR\225>/\204x\276\312\250\337\2763\251\211\276\311&\366\276\224q\024<Pl\254>\347{2\276\255\3442\276\010\016[>\032d\242>X\3600\276\250\202\357\276\206@\265\276\214v\010?\377\361f<\310\030\177>\014o\316\276\267l&?\212\222\350>Lu\354>\030X\025\277\023w\033\276\024\n\263>\n\001Y<\253,\244>\030G\212>\350\025~>\366IE>\202u/>\376\3753\276\276HA\276,\307\227>\217n\317\275\016G\375\275\230\275\375<\023\316\'=b\300\242>\341\230~\276\255\274\016\277g^\260\276\217tg>\3071>\276\035\234\300>\361>\033>\277\252\317=\007\272h\276\227\305]\275\220\003\354\275\337\307\026\276\312\303\321>\365\230J<\377Q\246\274+k\016\277\264\332\033\277m-\236\276\372\215\035?\225\030~>\315\370\315\276;-\245\275\240\236\204<\274\362\036\277\t\310\265>&\260b\276\212\314\257>\2408x\275\264\314\210=pk\212=\242&k\276\354\345\376\275\217\017\233=\026x\211\276W~\014?Gd\t?\340\270\272\276\234\367\350\275E\273\257=\322=\251\274\365\002\002\276w\333\030=\261\354\003\276]\246s\276DO\'<h\321\260>\301\366p\276\037+\220\275X%\303>\340\'\255\276\253\247,=\240s\246>\360p\214>\320\207\215=+Y\260>TB\353>\211\267M\276u\313\260=\326/\025?\2717\370\276]\023\232>\260f\\\275\342V\257>\346\327\241\276\324\212\030>\244N\217>\313l\022\275\351\202\317\276\230\205\030=\027Qx\276\027\'\034>\030|\361\276\361\311G\276b\330\n?z\237\254\276^\245\370>8\316\245>\305\245?\276\0266\203\275\005m\014\2777\270\260\276%\316$\277I\315\312>\227\210\271;\313\327\034\276sx;={\026\032>\0237\020>4`x>u\305|>\0142\342\275\320\367\320\276k\333\242>ps\236>\247w\311\276)|\210\276\324\037\016>`L\033\277\325\377\016\276\211\232\010\277\326\337k>$D4\275\216`E\276\270\250\336\275\005YJ>\265\237\224\2761\204\224>\263\210.\276\246\235;>^4?\275`i/\274\333\003\374\276\\\207\347>\271[\022\277\375\004G>\333\365\367\275\2408\253\275\367\037\034\276\216c\013?\240\246\200>\006WL\276\231\331\262\276\275\331\320>\356\220%>A\361E>\234Lp\276.\315\247\275*\227\350\2745%-\276U\236j\276\355\352q\276nb\253\275\177\3533>$\037\273>\234{\007?\320\277I>\206\206\325<eV\322\275\335oK\275@6\223\276;C\n\277\347\317\374\275\253\367\273\274!\030g\276SpB>\305\373\t?\207c\246=3t\t?\223\356\251<k(\320=e\360\032>>\230\214>k%\363\276\245\312\n?\334\344{\276-\232\376\276\336A\336\276!\340_\272\231v\311>\342e >-\255l>\235%}\276\311B\350\275\347\230\247>\310\t\370>\323\353\276>\355$\334\276\263\262S<\225-\350\275\263Z\376=_`\240=\205\251\237\275W\010R=\373\217\354\276\341b\005\276\006G\034>\330\334$\277%c\006?:W\007?r}F>\200xU=\371\n\024?\026H\206\276\376\220\017\277I\200 <\013\211\036\277\006\231N\276C.Y>s\335\235\276\375\360\201>.\3644>-\257q>q\366\346\276>\273\255>\243\377\002?\004\312\342\275s\030W>\374\256\276>S\300n\276\346\276\210\276\370e\000\276u\253\325\276\356\r)>\332\277\341=\371!\023\2742\246\251=0\355\001>\300\273\352\276L\246\013>@\031`>]\034U=\\[\343\276\224U\322\275h\3522>\342\276\246\276b\365w>7t\241=\346!\335\276\332U\036>\300\037\232\276ag\021\272\217\023\033\277\342 \014?\341a\213\276?\243\031\277\035U\300\2750<\333=\333%Q>\245\214\306>\370\322\233>\352H\261\276\314-\014\277\315v\272\275\261\233\032>+c\232=\211\226\236\276\001\033\252=&\365\332\2768\320q>\002#\310\275\210\350[\275R\240\357>m\322h>\303\232}\276\3741\022?\313\277\007\276eM\333;]\353\264>X\254\312\276e\207\256=\002bJ\275\206\014\004>\252\311\r9\217\333y>Z\247\236\274\001\276d>\222\364\001\277\301\031V>\202\373x>\323\272\222\276\027\360\275=\302{\260>\313\213\274\276\346v\331=\201{\314\2752\031L>\367M\240\275\330\251\230<\273\014N\276:\312h>i\241\202\276\337\252\215>\251\350\016=\252\004q\276I\364\255\276\343\334\177\276\366\354\007\275N\276\356\276.\177\010>\241\242\352=\235)\346\276\030\303\214> ^v\275N\253+\276|\033\363\274\2075\264\276\220\241\037>\361\035\024\275l\263\243\276R\244\266\275k\347\240\276M\003*>\370\010\203>q\326\220\275\220\237:\276I\264\371\276\035\244\330>\347\260o>\240\312\013>\331 \235=v\350V>7\036\325\275<\276C\275\315\254\305=\355\346\227<\223\264O>\304\226E>`\300\317=\241\324\024\274\375\356\261\276\341\242\000=KA\242=(6E\276gq\306>\221:]>1|\304\275\254\260l>\'\250\255\276\372=\227\276\351\006\305>\377.\327\2755\226\327=]\324\036?\3139!>\340C$\277|\226I>\231,)\277\024.@\275\377F\371\275?`\242>\025\353\256=\2400\342>3\215 >\310\2372>\362\243\347\276\273\327X>\243\326\035\276\222R\236\275\365;K\276Q\234\204=\323m\013\276\224z\t>\367`\323=&\265>\276=\033\201>\212B\234>\354\321\016>\315\004\000\276\230\313\335=\204\341\007?l\035\235<F\231\255>:\204\013\277\310\254\266=\'\233\330\276\366\347\246\275\277Q\n?\020,\177>\3348\372\276\304\200H>\237\324\373>\314\3632\276\231v\000?\313\304\227\275\376\032X>\200 \362\2757\003\200\274\214\nP>\222x\210>\207Ec>\251\313\212=\227)\004\277\373\"\313\275\324\260\020;\272\003\275\276\3476\333=\311\214\366\273\177\216\251\276e\346\336\274[\221*>\207>\211>\352\315\200>p\206\313>u\275$?x\344\324>\254m\344\275\215,A\275~\024\236\276=;+>\332J\211>\236&\221>\374\2170>Q\202\030\275-\277\023?\360f\357\276\031n\232\276\262\336\264\276P\265\016\277E\036q=\017-`>[\213!\277\276\3439\276D\311P>\201[]\276G\343\211\276\317\202/>\335q\005\275\242\264M>_\036\210=\020\251q>\271\027\027\2763d\013?mj\004\276\317[\342=\3629\302=\245\021\203\275\240]\177>]\303\302<4\220+=\366\241\364\276C9\252\273\'\'\021>]\274$\276\257\316\343=Q\257\020\277Yk\261<\211\317\302\276\244\313\"\276kCd>\214\036\'\277\223m[\276\035\000B\276?\362\n>\330\342\370>~\364\372>\207$\300=\2028\374\276\270\020\010?\321#\272\276d\336\301\276\234\035\257\276.`\277\276`\205\303=l\247\277\274\373c\230>k*\013\276\2667\330=\313\365\'\276\211r\020>\231(\003\277\252\315\016>\333Ag=>\200\022\276\246\227T\276i\365\207\274\023\240D>\226\211>>\177R\226=\317\360 >\344@\300\275\333\347r<\215\002\271\275\237\355\363\275J\332a>\024\353)>j`X\276^\020\263>\310\355\251;\217\206\203\276\237\264\307>]\327\372\276\263\2474=\031\350\377\276\314\\\030\276\341\356\373>\347Y\360>\347\262\265\275H\020\277=\017\322\003\277)=a\274\347\213t\276\257\031Z>\224\325\236<\260\356\310=\246\264\332>C\000a\276!`\r\277Ck\000?J\201\221\276\371\212m\276n\032\037= Ac\276\233S\337>\005\306\202>\321L\277\275J\n,\276(\266\214>z)\234=\253\202x<`\341\035\276\334B\360>\002\350\320\274nr\213>\230~\251>?\030\034?\264\031\305>\355\270\360>\326U\315\276\361\002\202\274e\324\351\274R\327\233>\227\342J>\253,^\276L\034\236\276\"\243g;\215\220\216>\3310\347\275O\031\355=\335\247$>\003_\233\276\204\273\362=Z\ng\276?X\363\276*\031\014\2742z}>2\"_\276\014!\274\273\r\263\021;VL\367>?\024&\277\016[a>>\304\247=_[\330\276\306W\003?\222+\244=\371\223\210\275\010\0130\275|\222\033\277[8l\276\366\022j=\367\362\245=\351\r\377>6O\243>\222\225\202=_\255\034>q\361\034\276\342\300\'\276C\002\251\276\326\233\351\274Rb\004\275\371z\024?$Z\t>O\274\235=/\033\211>\357\310D=n\361)\277\273\330\225\275\203\323\252\276\032\327+\275\343[\206=\243Z\004?@z\347\275AzP>\267\375\003>\242I\220\276\274\220\027>*\202\362\275W\237O=\341\305K\276\262RL\276\224\237\221>\026\301w\276\000\217\230:g\245\313>:x\212\276lO=>\224\223o>\023sk>\021X\236\276\335\023\242>\023\347\331\273\344\331\377\276\230 \245>\364n\316>=j\036\277i\224(?\217] >\311\337\322\276\347Y\346>\267\363\t\277I\2374>l\272\023\277\025\375\002\275\323\357\225>\007\252\252>8\301\250>\314\370B>\200\316P>y\005\320\275%I ?"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      input: "^AssignVariableOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "\237\230m<\217\004\006<!\236\001<\034\271[<\350x\202<r\336\037<\263\002j<\240\251\361;\0070\366;\264\245\377;\200q\376;B\354\004<o\206&<\312\356\000<\306O\322;\324\265:<\347\323Q<\376\326\033<\350\364\322;\372\r\025<\256\213R<o\234%<\221\267\217<&\035G<\334<]<\207\336)<\356\3104<\254\370.<l\314\320;\014\262\022<DQ\244;\262\305*<\352\022>;;$Y:\\\034\364;\342j/<P\237X<G\3020<4\316\016<\003\356\362;\267\312)<\240$D<\377\n\033<\242\373\007<[\n\370;_*\301;Qq\272;\252=\017<\030\340\376;\327\203`<\010\211R<x\224\377;E\'T<\301\222\362;\300\325+<\221H\t<|s\346;\223\023\367;|p\354;<\002\312;h\273\333;\262)!<]\322%<)\323D<\305\311\367;\013\\\360;\023\261\001<\330\"\002<$d/<\220\304T<+\3268<&45<\273\256e<\365f\002<?rl<uy\026<\300V,<\343\315\322;\024=R<\3010<<Zt\356;(\261\027<BD\276;\221\2773<,s\031<\351\242\t<\3574\'<ur#<\273\244f<6RW<(\034j<\"=\005<\017\355\215<f0L<5\250#<\213-2<\213\255\366;e;e<\252y\005<\333)\342;"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "network/biases"
      input: "^AssignVariableOp_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: "0\336Q\275^\275\267\2752m\360=\026E\305=D\"z\275%\252A\275\004\003X<\'\022\023\276\301Y\t\275`p\034\276\225l\003\276db\022\276\037\356\340=\256x\262\275\247L\330=\320\245\301\273\241\266\237\274Y\227\264\275\023m\355=\351\241\007>r\006\351:hKn\273\331\nj=Ay\333\274\237\314s=k\265\376;\344d&<\321\350\006=#\345\357\275\001\242,=%\246\252=\n\364\266\275\360\277a=\014\322\355\274\320W\221<\351\2623=ut\340\275f\330\341=/,P\275\264\n8\274\363\273\210\275\037)\316=\371\0053>9rB=\31047>\312\226\224\275Y\233\006=\267~8\275A\314\320<\231U=\275\305\226\346;\267M\023=\244\"8>\352=\334\275s\303\032=\002\020h\275\345#\231\275I}/=\033\360\255<W\215\021\276\'F\232\275`=\203\275e\227\316\273\234\210\r>\330\243\005;\026\335\\=\031^\020\275\216\2054<\252nD>\312\365\017\276\237.\371;\371\002G<cnw<y\\q<nD\372\275\271\327v\275\014K\021\275\333\277\321=$\302z=\'\215g\275-\014\245=\0262\306\272D\211G\275fw\301\275\016\356\002>\332r\004>\3602\261\275O\337\333\273\251\036\361\275\201\265\303\273FT\364<\216\302\237\275o\300\007\274\216R\262=\246?\360\275Dh\017\275\357\037\314\275\200\007\322\275/\366F\276\346\2433\275>0\234<\006g\376=:\322\230\275))\223=e~<>u\005\201=\200rc\275\354f\271\274\036\264\233= m\357\275P\341\324\275IM\367=m\024\230=0\233\001\272\224\247\233=I\363$\276Ua\236\275\036\202\207;l/\364\275Z\353\212\275N7\340\275G\252;<\377\3536\275\242\252\362=8\247-<o\375%\275\252\234\362\274\273\202\333;\032\303f\275\337A\327\275\307\332|\275\022/i=\000.\244=\027\330\031>\240e\256\275\346\202\265\275\036\233\231<\3464\003<?U\224=\217\315Y=>\320\t\276\326\177\010\274\016\207\223\275\247u\030<\244\317\003>l\213\356\275\374\345\022>t\356\013\276)\213d\275\335\010\\\273(\361:\273-\350\207<y6\377=l\374\337<]\223\026\275\256]\256<\200l.>\273C\002\276\357\022\361=\303\302\275\275\214\177\366:\215\257\230\275C\277\226<\035\016\273\275\277\354\261\2754o\377=\037\251\244<)\'h\275wM5=}!\n>D\222\"\276\341\030\001\272\203\274\004=\262\010\007\274\302\375\203\274\346z\027\275\235&\n>O\232\000\276\007\242\317\275]#\363;\336f\242\275;\024)=\241\017\215\275\036\003\n\276\325\205\360=~\361\272=\3213\267\275Pmp\275\372\215\310\274\313\313\305\274\345\211\003\276\216s\031=iL\266\275\003\3261>\357\325\320<9\242g<d\266j=\221t\014\275\016\"\027=r\254%\273\'L\251=;\302\035\276\031v\233\274\17756>\262a~=6\360C<Z\247\337=\221\034\233=\306r\256=\220\334\034>-*m=:p\020\276=\222\235=\340\254\006\276\365j4=\017\024\365\275?\020\";\236\234C\275\366\301\3259\016\233\267\274\321\003\002\275 ;[\275\277\243Y\275\326?->\345\302\336\273d\300-\275\240\205\271\274Tl\177=\314r};q\'6>\352\022\340=\372=\032\275\265\200\251:j0\261=\374\2074>\366<\032>\310\376\264\275\265o\233=\235\306\t;\235\200N=\254gA=\361\256\311\273&\236\300;\312\307\r\276`\215\245\274L\234\310\275\232\264\007>*\2036\275\216\233Z\274`k&>^\002\377\274b\353\r>\355#u\2751\017\276\275\332\372`\275\255,E\275\343\371+\276\370\370\317=\214\3604;\273\035\277=N\266\305\275\301\265\220\275\233\245\343\2750\332\010>U\001\333=\371\037\353=\251\210\234=\234ef=n\022\205\275\365\277\025>\212\230\212\275\350\317\005>Z\226\302\274,_\305=\271\022~\275\272f/=fM\t\276\305\252k\274pw1\275\232\006\006>\245\t\234\275S\376\215=\rW\236\274\306W\241\275\362\300Z\275\371\216\254<-\r\272\274\232\034\232=\341\230\242\275\370\270;>i\226\005\276\344\377\214=H\226\305\274_\207\'=M{\376<\234\036H\276\357\304*=\363/<=\250\022\313=\337\022\364\2752\355\200\275\207\246\232\274\017\355\214;\240\022k=L\033\204\275\313\340K=K]\001\276\337\277D><<?\276\202\026*=k\305\271=-\353\004>[uB<\361\347\265\275\027\311\367\275\347O->\244i/\274\005\315\267\275y|\336=\037 \001>qJ(=n\027\271\272u/\361\274>N\035>\204\271\330\275\2236\034\275#1J\276W7&\276\004<\350\275\330\365\357\273\n~/>\316j\006\276\270\220\351\275\234\216\020>\314\'\323=\221@\311\274&w\003>\223%W=\n\307Q>\220F_\275\325_\253<<\215\365=\334`\266\275\033\276\n\273]\233\007\276\025H\362\275H\360\330\273\n\344U<\357\301C=\005\204\242=#\276}<\013\326\366\274\335\026\313=x\252\372=\332\031\t\276+r\017=\325\230\213=\264\340K=7\350(\275#\375f=\347n\200=F\274\366=\000X\006>\366U\221\272\203\251Z=\370r\325\273\257ef=;\275\272=\'\350}</\231\307\275&6*\276b\222\023\275\311\233\361\274`\244\271=H\035\004=\264M\307\275\020F\202\275S\312@\276\177\246b:\271rL=\303\206m\2749PL=\377\351\257<\302!G>\2747\017\275\341O\232\275\320\373\216\275J\0218=\024\212\'>l\212\330\274\315\'\235=DhC=\370Z3\276UM\346=\204?d\275+.\271<\201\034\\\275\204\315t=\214D\332\275\252\2552\276%E\340=$55\2750m\246\275h\361Y\275%\273 >\343A\305=S\364\264=\024\316\005<\000Y-\275G\346R\275j\217\334<\313\363\357\275\\dF=\306~\250\275E\220\341\274\323\nq=|~\225\274\276E.\275\357+\210\275\025\"\205\274\237\3733\276\314\264.=\221\227%=\026\311A\275pTL\274\277\303\270\275\031\256\251\275_F\n<\340\000c\273Faw=c\334\004\275\274\r\202<\316\307\207;\250\035\357\274\373\347,>\251d7>}\246\335=\031\275F\275g\372x=$Q\026\276\274(C=~\"\036>\026$\202=^\354\014\276\004$\036\276\300\325\241\275\210;\003\275\275`~<]\273\006\275>$\223\275\036\330@\274\t\223s=`\370\005>\023u\242=\323\r\020\276\244\333\032\275\331\347\313<XB\242<\255\265\354=u\207Z=\320\211\353;?\241\336<^\251*\275\0308f=\262&o\273;\356\215\275\335\211\006=\224!\225\275_\030N<U\245\267\275T6\024=vZ\232\275\255\0214\273*|\271=\212\372\216=\247#\344=%L\233\273\337,)<F\225%>=\254l\275\315e\207\274\212\273|=\212\336\030\275\347\205->!\231\'>\002\264\000<9\345U<\034L\231=\025\t\014>2mw\275f\244\252;\007\254\323<\005W\343\2751\212\231:o\252h=Df\026\275\312\3236\275/C\311=\033\205\025\276\206\2221\275\336/E=\232.\n\275\200i\033\276\240\351\026>\335T\257\275\311}>\276B\367\210=\275\233G>^\243\177<\214\300w\275\007\370R\275\305]\214=\357zx\275\225RH>e8\251\272\261}\327\275\323z\216=\007c#\275c\335W\275@\340\201\273\010b\017< CF\276\345>\031>\017\360\337\275\t\331\337\275\336\376\222\275\033\325-\275\364\247\n\275h\214d\274\350O\016<\210\240\340\275\311<D<\333i\017\2756<\001>\211\306\334\274]a==\264\021\206\275\215E\277<\217\200\372\274b\3423=\256\235J\275\016@>\275\256\257S=L\355\030\275\201GE>\254\020\266\275\236\005\020\276\327\357M\275h\224\237\275\305\374\204\275,*\255<\"G\002\276\'\017\016\275\302\035\257\275\352k\261\275Z\324M\275oFm=\347 h=\334\220\245=\227\376\260;\271\271\004\275\370\204\377=\373\221\333\275\211U\226=\016\334K\275\2015\2669?\2745<\372a\025;\276n\263=|C\227\275\036\344s<#:\346\274\000\277\322=QQ\355\274K\317\352\275_m\336<x>\365\275\024\347\266\274\277\346E=\324V\242\274\260&\242=\032\302\031>\032\020\001\275;)K<\306Tl\275\267\3622<\365\302\031=8\213\332=\237\022\230\275\243S\032\274\2666\317=`\352\264\273l\265\202=\361\3143\275\300\265A\275\301i\t=\364H\321\275\0212\345\275\230\270\357=\014\022\010>U\034)>d\242$<\322\031H>\354|\270=\013\315\272=\004(\202\275\177\254-\275\323*\220\275\030\3524=\024\326@>\036j\006>\364\2075>j!0=)\362\252\274P-E<\360\340#>\022O\250=\275\267\275=\206g\220\274\272\235|\275\323\367\014=\025\177\222\274\356l\034>\357\006\250\273\353\261\233\275d9Y=\352v\014\276\217vD\275\003\304\354\274\032\314\347\275|\376\361\2747H\264\271\201\tt\275`|\377<u\027\221\275\223m\033=\362\343_=O\245\213<(\335\266=\010Y\276=\261\317\034\276a\367(\2751\261+<[\302\357\275~\023\235=\300c\324<+\200L=zG\257\275\212\364$\275\205\215\271<\032\320{\275c\375\206\275\267,\350\275k\032\233\273\305\251\243=\216\261;\273\367\324\n=Oa\017=\275\335\275=\214A\336\275V\241$\2742\345\242\273\264e=\2764\324\370<R\335\230\275o_\350=wS\256\275\217\340\273\2731/\203\275\371\304m\273\222\340\322\275\025\244\240\275\314\302S=3\300+\275\201\326\334=(kw\275\n\355\312=\003\253\270=U:G>\032?\010=w\200y<b\235\326\275\261B\306\275a\226\201<\t3\247=\236$\305<\243\350\305=\323\3313=\226\377^\273\026\016\252\275R\\\326\274\026\356\244\275!\006\037\274\317H\272\275\364\253V=\240\367\'\274`\253\240=@\272:==\330\202\275/\376\337\275\034\331J=\377\325*\275\266\003\225=,\257\342<QT\">\302WY\275\330\0242\275q+^\275\214\366\223;<\005\022\273nd\006\276\272\306\177\275\303\310\007<o\020\353<\3265a=\216\314\022>Aa\325\275|\267\315\274)\271\302\275\255\373\231\2755\360\321=`Fj\275\354\312@>0\271\342\275m+r\275\014\004\333=\270]\302=A- \273q\232\000\274\034\226$\275\333tr\275\276\270\355=\261l==\024\023\035>\300J\027>j}\235\275/V\004\276Q\220\002=\005z\374;{~I\276Tf\235\275-\261\317\274t\215\355\274\030_\033=b\227\226=\243\217*>\361\032\236<\265\3622\275[\254s<\016\355\000\275t \307=\250m\201\275R8\232<\323\256;\274\306\373\353\275\365\212Z\275\272y3\275\000\030\r=\340\312\317\2753\274\002\275c\3367>\376tF=e\300\006\276\222\025\205=\352\241\212<\023\306\013\275\320\255\263=\301u\347\272)5\311=W\251\240=\237\007\252=<\034\372\275\354\345C<\202\204\026\275\366H\024\2765\002!\274\376g\214\275\3151\030>\330\365\226=\024X\325=\331&\003\276X\005c=\233I\305\275\217\3756=\355\034\240\275\023O6\276\345Uy\275e\214\227\275\357x\337=|\363\334\275\363\325\'>\3045[=\321\277\225\275\323\245\232=\241\213H=\310<\237=&2k=C\017\024\275\340g\026>F\343\335<e\321\003\276\327\306q\275Cq\233\275r\377\362=\270Rs=\014Y\251\275\346{\017</\333\252\275\214D\365<\306\370*\276\010\342\274=\202Y.\275)\033C=6\033C\275\322\270\212=\316\340\271<\262\257\225\274\327\243\363<\237\361\326\272\240\235\250<o\212\201\275!\020\224<.\221*>\n?\210\275\340\177L=\332Q\362\275\0032:=\331\257\020>\200\274\353=\220\'\227=\374\324\344\275\356\327\027=M\216\261\275\250\017\320<8\312\330=\313\267\255\274bP\261\274\032\223\320=%\013q9?\004\351\275\177V`\275\010\373\216\275t\330\315\274\333\032\313<\246g\263;\317\323R\275\204M\363\274\2110\250\275\2129\003\275\025Pj\275U\273\327\275\177\232\374\275\\\256\206=\266;\313\275\013\357\3608\224\356>\275\225%+=z\010W\274\351\223!>_\014y\275\205T\356=\210\036\264=\240\275\274=\233\021\276\275GV\220\275,75=@\371t<^A\315\274\002\\\274<9\243!<\336O\233<\321?\213\275\256\2535>\234\270\206=?\351\016>\346\223\256<\374\203\252=\322TB\274o\361\303\274\230\205\330\274\357\276\337\275)\274\314=\210\313\020\276\256\255\001\275\3228\222\272\371\024\333=\207\372/=^(2<\267\316\202\275\301\300\224\272J\276\027\275\022K\206=\343A\037\275\324\375Z\273\035\244.\276\321\017\351\273\210\035\361:\304\221\343\275\032\3423\276\301\346\211=\320\336H\275Hu\211=0\240B\275\2749\177\275\324\035\017=\036\257\\=\315\034\030>\246\317\222\275\245y9\275\013\340\031=`\034\377\275\010\312O=\004\017\201=\367\354\221<o\236s\274\362F\311\275\031\260<=w\'\355\274\200n\330=\304u\255=P\250\334=\250=\304\275\177%h\275\367.\311\2754 \342\275\225 \204\275O\023\233\275\221\255\317=D\214}\275\271\274\000\276\n<p\275\275\343K=[\002,\276\023\177g<\3202\261=\032\361[=\240b6\275\013\344:\273\345\356\211\275\244$;>rl\232=\033\030\323=G)\021>\204<a\275\254\026\032<\262t\247=\254\271\017=\017\317R\274\002Z?>\204^\333\275\002\037\335;L\271)>\235\220Y=\310{\336<\023:f=\025H&>\374\347v=\273\006B=\301\364O<\201u_\275RM\203=\241K\350=\215M\222\275T\367\017\275fH\347<\022\374\000\274\246\301\320<\245\323\362=\016t\230\275-\337\013\276\226M\223;(O\004\276t\0162\275Y\002\304\273\317\250\221\275% \365;\206(\250=\022\266\n\274\306\234\346=?\017\r>\364\273\324<}z\247=Fsv\275JJ\265\275*\006I\276AN\343=\023\373\200\275k(d\275\212>q=\352c\217\275Y\240#>\222\223\371<;\032\257<t\203\370\273\345/\220<\205P\224\275\266q\265<C*V<N\035M>\221\340~\275A\213f=\304\335\261\274\345\212\326;w7D\276+\244\371\274\372O >\t\345\267=]V\013\273g\303@\275\324h\367\275w\007\277=t\345Z=\222t\271\274\372\252\260=\357\230!=\236\253B<\231\310\367\275Qi<<\244\256\317\275]\223\374\274\344\234\352< \014\255\275fC\252<\362\033\036=\317\366a=V\"\005:Hm\331=\322r\353\27590\305<4\3026=\232\037\343\275g\311\027>\030\3613=c\232(=$\353\304\275\237\315\212=\006\353\257\274@\2343=\316N\">\233\206!=\321\321\013\276\246\226\263\275\333\342\356;\266_\337=_\241\256;s\256 <8;\372;\033\314%\276\337\275\360\275\177\314J\276\3354\346=\030\013{=\362\3011=p\205\341\271\276\315\005\276\362\251\010=\020\026\031>\273\002E\276\336\006(\275\255b\307\274\212\201s\275\210\263\024>\260\330L<\2363\032\275\030-]=r1C\276\020N%=\231\373\203\275\266\376\224\275hli=\265$.\275\340\341:\275\375\"\314<\007`B=u9\005>w\364\026\276\366\004\335=64\207\275\324\201\214<\003>\365\273\263r\312=p\275\017\2751\224\034\276K(.\275\257\336\245=\013\201}\273\354>B<\3161\003\276d\247#\273\350\353b=\367\311>=t<\245\275\241\021\260\275\n\203M\275c\276O=$#\212\275\271\330\336;K\252\004\275TKQ<Q\373\267=?\215\334;\217\3205=\033\022\303=\271/\247\275\364\321\222\275Yz\373\2730S7\276\336P\201\274Y+\271=+\366\022>\341$\223=\0060\225=\\-\263\274\3503\242\274\252\034\306<C\006\321<\336\001>>!_\215\274\201\221\325<\013=\'=Z\326\353=\356:\221=+\315\335<\244\257\242=Hl$\2759\202\017\275\320\267\227\273\371\221\032\276\377\027)\276\203\261\007\274\335\234B<a\205\320\275t-\306\275\352\005M\275C\036L=\020\t\201<)y>>\251U\237=\237\300\305\275\272\225\274\273\250w\221=\246\345/\276fs\304\275\003F\202\274\357\262y=\361\t\017\276_\030\000>\013?\357:o\307z\275X\233\004\275\247\220(\275\222\035\337=\301\023\033\274v\230\235\2753\300\271<\232\241\020=\303R\301\275G\216\'\275\307\2172\276O\370\256;\034\340\202\272AQ\371\274\017\0047>2o\031=`\316\223\274\036\370\243\275\322\020\013>f_D\276\273\263\310=\n\307\227=-\177\253\275\\\t\307;\214\301\306=\260\234\337\274\357\n\273=\222q\036=yt4=\250\307t=\377@<=\327\000\252<\266+z\275\270\354\374\275\361?\265\275\206\272!\275j_\301=\324\2553=\017\026\237<\213\216\305\275\263?\304\274\022l\246\275I(\264=\211\200\030;\026\374\334<\337\312\330=\354\3017\274\021\006\245<N\3122>\243c\220;\366\003\006=\344\300\214\275\351\220\226\275T~\013=\'\027\212=0?\227=p\356U:\276.\300\275\324^\273\273\211\234\016>_\257H\276\231I\367\275i\212\t\275\323#\t=\003\223D>\214\357\301\2759t\373;*X\250=v\231\254\275\346\325M\274g\340?\275\006\302\275<\2536/=~\005\262\275\177\377\303=7\034\024\276E#\351\274^\215\334\272\021]\007=K\332\243;\222\244\352\274u\260\307=m\353\205\275\023\326\232\272kP\010<\242w\352\274\"\027+\276\322\303\235=\372>)\276\355t\002>\252\ne\275?7\017>\037d\026\276|\336\221=d\022\\\274\362\021$>n^\264\272\214I\372\275\305\036\327\275\232\362)\275\306\343\254\275\204L\023>\233g\334=\262\227\330\275\013=\244\275\306\303(>\204v\351\275\340\004\224\274\227\356#=C<\027>Cz\306=#j\371\275\252\263\246<\222\311\t\275{\246\241<\254p)=\323 \265\2757u\241=\344\235\224\275\352\306->\301\377\001>\254S\200<\240C\003\276\366\321$>\235\362\353\275\177\263\032=l\266\261=o\260_\275\356\365\371\275fNB<\235\355\223=\276\257,\275zI\037\276\325<(=\362\265_\274\212\271\231\275_\005\203\275\226\310f=8r\321=)vX\274\370\331g=\305\372\367\275\234\267\377=g\232^\275\025\276?\275\213\203\020>\3506\223=\'\257n\275\031+\305=\344\267\323\274\217o\034\273\004l\205\275\3556.\276\230\274\236\273\374L5>\350 ~\274\343\266\344\2754\336\037\275\2449!=\230a8=\310\253u\275\323\264\017\276P\031\242\275\313R\250\275\302\020\320\275\317Q>=\306\276\256\275D\222\255\2740o\373=}\327\302=c\305D\276=\260\336\275\203\221\252=:\025\221=\"\332\324=\177\202\r>\372|\325=\305\337\250\275\264\323\253=p\305\030\275\361~\032>a#\001>\t\353\216=\234$\317\275\226%h=}f\305=\304A\204\275x8\225=\233\321\003\276\236\237\363:\200\253\301=\035\224\030\275\376}y\275\2012f=\224$\005\275\215D\300=h\347h\275\321\303\031>6\004\000>\375\345\364\275s\341\034\276RZ\255=K\024\235\274FT\"<\366\227=\275\245]\233\274\252i\010\275\021{\276\275\261\304\274\274\366\362\006\276%y;\275\"\023\265<\370~>\274\250\344\375=\237T\017\276\n\367\013=2\020\213\275\324\340\313\275\033\377\307\275-s\005\275\354@\017>7\"*\276\233d\337\275\364\362-\276\326\303\346<MX\365<~G\323\275?\335 >t\344&>=oX\275G\333\217;\246\025_=\220\037K=\217\223\246\275\247&\273\275,<\277=\330fB\275=t\010>?\030\t\275\"\035\000\276\235\374\236\274@r\032\275y\245\303=\025\237\277\275\376\000\014\275%\341\025\276(0\331\275\227\200\276\275\353\346\003<\rk\362<\337\244\231\275\321\243\313\275(\032\270=\242\333\035\276}\300A=\0303\301=\202I\225<\372\367\337=e;7\275\332\321\343=\215@F=\324\243\221=bx\217\275\251\3645=\350\260\032\275B\250\363=Ij =\356\345\000\275:\250\371<\332\204E=\217\315\014=\010mO\2764\243\035\273\005\331\236\274K\206\360\274\232\220\342\273\205\211\264=\000y*\275d\334\233;\211\356q=\266\035\356=\035\3131\276\336\217\301=\236\360\257:|\325\335=q\340\246=\006\376\023=\331G?>\342\267W<l\024\270=9\332^<FY\223<\257N\017=\207[\266\274\346\036\371\275\316\371 \275\340=q=\362`\357=1X:>\346q\221=\374~\016>\226\2464>\340r)\276\300x\334\275|\350a\2747g\213=x\303\035\276\206\344\237\275\033\271\316\273\265\006\013\276|\275\020>\234Ga\274\347\257\230\275\360\330\307\274\177)\317<\222\353\035\276\227\243.;\236<\336\274\210\231\034=\336r\303=>p\000\276\302Y\364<\234\306\002=w\321\316=vx\363\275\006\276\223=\331\215\200<\264G\250=|\031e=\222s\026\276\313]\312=\242\304A>\254\364\264\274\024\322u\275\202Wf<\305\372\225=Qf\220\275]\003\225=Q\303\n>\340\212\323==\240\304=\374\327\376=\324\252\311\275\374wJ\273\201v\241\274\260_7=[\250Z\273\370\373\244\275\322\275)>\230\320Y\275l+\010>\010\202\374\275\217@?>\245\207\200\275\013\206\007\276\301\207\303=]GY\274\242\361^\275\224\275\323=\273e\036\275\274^]=\0364\221\273\313\261\\\272Kg\346=\253\177\334=A,\312=\207a\360\274{\342^\275F\310\337\275\366v\307=\3129\253<mu\235=\303K\223\275I8+\276[`L\274\270i\371\2751>^=\237\223O\2758=+=\365.\226\274x\014\252=\240\370\r>Q|\255=\324\244k\275\266\021\276\275\027>\n<\350\265\371\274\327\0039=\260\246\210\275|\361\225=;\2726=M\3009\275\272F\004\276\303\002\001\275\345\306;=_\251\214<\300{\302=\023\001>=\370\357v=\025\366j=\366\036[\275\345F\263:\275\2460>\365\272{<&\217\201<n\027A<\370\031\255\273*j\260\275\345(\300<?\342G\275\007\270\354\275[P\240=x,\365:\036\3122>\214-1=\344\333G\276d\336\242=?\227J=\221[\325\275\212\345\335\275{z\210<tP?\275\342\370z9E\254C\275\221\010\350\275F\035\222\275\213{\025\276G\017\257=~<1\275F5\342\274\207}\'=\016]w=\231\331\315=\204\356\350=\217\222\020\276\353`\324=d\2217>I\315\307\274\365K\227\275=\227\266\274=\030\027\275O\334(\276Z\220I=*\231\357=\007\203\251=\021\367?\274\303\362+>\260\255\";\350\363\026>\233\324\025\276\336_\210\273[\371\335=\272`\023>\250oV\275NW\345\274\346\324\362\275\261\243\021>Yv{=\325\\\231\275\267,\362\275 \202Z:L|\031=\263)v=\305\"\"\275]\263P=YmH\276\037m\255\274\250\304\305<>\261\257=\223\001\r\274\2673\035\275\221\221[=\243\241\320\274\016\025\361=y\217\244\275\243\216!\274\\\237+\275zc\247\274^\032\221=G+\n\273\374\027\330=\006i\377\275\301\316a=p6\230=\205\246s=\225\006\'=\316\276\353;\353,\247\275K\233[\275\371`\335\275\257\204\367\275\311BV\275\212\2742=\217U\006\276F*\345=\255\371v<\351I\234\274Aq\203=\001T\332\275\245\003\001\275\221\340z\275\233\277h=\366\2239=\001\"\277\274\211=\021\276w]\035>F\362\024=\037\355c=\223<6<\024\264\005=\372\317\035\275\210\017\215\275\201*\\\274\233\265.\276\236\240%\275;m\r\276\324\2451=\177\207\262=S[@\276<q\333\274\224\241\3236\311\313\231=\311\321\020\276\221d\021>\2126\314=\363\2664=\371\263\344\2742\332\326\275e3\017\275\266\346\255\275LK\r\274\317*\003\276\016\256\341=\221\030\227=\353\203\365\274\007o\313\275d\270\221\274|X\370\275r\007\021=\375\275R=\266}\207\275\217(L=\001m\243\274{\010\336\275\027\247;>\233q\321\275i?\217=;l\001\276^I\261\274\312*\346<\2429\340;\026<\335=]6\300\275\376[\217\275J\226\206=R\001q=\365S^=\242(\036<&U\314\274[u\244=\260L\222\275\260\274\215\274t\354\356\274&\nY\275\343\230\023\276\0366\216=\232\351\003=\016\024\356\274\302\301\374\275\350V\352\275\177\023\366=\336a\347\275\354\316\330\275Vt\305<\013Ow\275\265\2640\275^\357q\274\rJj<BF\">K^\270\275\235\346\014>\241\010\350;\216\304\374\274\314\275f<c\3745\276\371\257~\275\305+\207\275<64=\311O\216=m\225\346=\3657Q<\314\376\244=DW\373=\206+\376=Y\306\325=\3472M\275\312.\336<\235\313\253\275\306\341\334\275`\032\032\275\333R\027\275\021\225:>\253(C\276\03683\275\234\217\245\274_\034Q=V\201\213\273l\305w=\035\256\306=\034\313\377=\302ov=\242Ka<\331~\224=\247Y\326\274H\330]\275p:0\276=\216\253\275\273Z\203<\377\004\211=\314p\002;\367\315D=\352\2274=D\303\267=\272(7\276u\217\005\276\236K\260\275\000}y\275\232r\000\276\312\354\036>\212\035\362\274\217\022?=L\214\014>>\2776<\341\240\215=\253\270\326=\014\366K\276\332\254f\273\364\266$\276\240\\)=\021\225\021\276\277\237\326\275q\213N=)\025\t>.\266\013>\n-\260;F\207\332\274\021\224\032\276\3277\320\274\\\255R\274-\226P=\235n\222=\340\004^=\230\020\227\274\341\034O\275G\206o\275\0266\326=W\310*\276<\200\202=\365\203a<)\317\030\276p\n\264\275\005\263\232=\204\306\327<\366v\265\275Ro\254=\343\226\221=(\007:\275\356\206\314:\217\2134\275\230\337\227\275~2\231<\273-;=\0167\031\276Pf0=u)\334\275\034j\"\276\371\031\372<7a\215=\304\225\022\275\240\016^\2756}\010=p\303\345=\274]\345\275\342\213\020\2752\325\177=Q\027\333=Lc\017=\331\203\271\275\314\230\360=\303Vg\275\031\364\010\274\307\005\327=t\365\037=R\340\242=\335\227\013\276\372(\265\275tl\260=\247\020/\275\274\340\325\274\014\013\330=\2639\210<k\276.>\370\372\014=\376\010\252\275;5\350\275b\204\000\276 T\312\275\243\226\026=\352\242\216:S\252\236=5\343\035>\t\251\312\275hs\255=o\027\260\275\342,\037>\230\342\315;\244\245\237\275 f\"\276\356-\200\274\370\254@>8uk\275\021\024g\275{\3267\276\237\\\t\276\251|h=\225\036\266<{j\234\273\271\361\212\275D/\032\276\357\255\211\27553\344\275v\351\237=\334\n\252=\310\301\207\275\256@\010<a\022\034=\036\340k=RY\003\275\362(\212\273o\267\307=\311\364\230\274K87\273\217\034\225\274\317\204\346=\333Mz\274\207\010b=#\014\033\274Jt\267=\220\343\262=:Fc\274\315R>\275y\360$>\245:\212<\352\316\336=\034\321\375\275b\226\332\275\372\031\300\271\233\020\021>\304\234\326\274p\256\200=5\225\337:/\204\005\276\230X\360\274:\372\034>Be\310=x\301\324=c$\032\275}\302\370=@D\034\274+\362\363\274w\373x\275Nx\334\275c\266\347\275\315\343\222\275.\300!=\201S\034=L\033\311\275\031\335e<\365\327\203=m\213\332<S\200\036\2752\244\014<F\314\330\275\343\2023=+\316\351=n\200\000\276u\301\305<\265\006\275\275\003Y\300\275\355\231\331=x\004\273\275m\031\224\275X\374g=\215\302\031>\212\367\223\274d\324E>6\000\031\275W\023\336\273\203%\005<\254\027I\275\342K\007=\365$\375=\t\247\267<\251\027\027>\264\215\311\275\002$\312=kk\037\2759\257\361<~t\216==\274\265=\2366\207<\265=\334\275\036>\354=\010\312\315=\360%(\276\215D\373=\335w\033>\314a<=h\306\303\275\377\374\326\275\317Lp\275+~\035>\320\223.>\263?\343=\277\235V\275\007%*=^\324\265\275\224\'\342\275Z~\000\276\242Xf\275y_\244<\345\320w\275\373\201\342\275\363mU\274W~/>\023%\241<\221\034\251\2733\300&<\302\227%\275\347\204\263=\320\0257>~\262\240\274\214\274\301\275\272\206\004\276t:\236\275\211\256\321\275\364$L>&\205\257\275\3466\005\275\321L\236<\241j\216\274J\250*>\334r\353=O\014c\275\310U\361:\314\'J\2752\364\274\274W$\324<\024\362\345\274\357_\261=k\361\313\275\372\301F<\354~\322\275\371\340\000\276 \024\">\374\254.\276\r\367w=\321o\315<ZU\227<\354s\035\275\th\024\276\334\033/=\225\366c=D\025\247=\333\243\373=\316\261\227:\037,_\275V0\212\275\252\213\360\274\241\374\027\275\037b\271=\332\032\343\274\371U\034>\272<\377=t\004\346=\224\204\252<\2256b\275p\273\364<\364\253:>6\002\023>\316^\250\274\270\276\265=Ot\036\276\212w\365\274PR\264=/3\332=x\201K\275n1:>\370\346\264\275\330.\025=euX\274\344u\257<\335#\006\276BZ\023<\263\256.\274\242]X=\217\032\'\2766\335\r\276D\313\313=\245T\007=\"\326\315<\277\337\r>(y\235\275@X\242\275O\203\234\275c\033\241\275\354k3\276\266*~\275\007\376\271\274\2775}<\002\340\301<\n0\217=\0340\022\276\317\367\265\275\301\337\221\275\365\221\244=\004T\266\274}\262.>\251lg\275\3209\001>q\264\'\276\346\211E\275\2505\373=\201\270;<\245\000.=\206\352\374=d\340\212=e\257\202\275\377\313\337\275\216d\"\275n\037\26198O%<\203\240\272\273c\311U\2754\020\221=a\3572\275z\242\t\276\200\276\234=IEO\275#>\317\275F\214\t<\002\3057<\320n\204=\310@\237=D\336\226\273\346t\362:\312y\240\275\031P\227;\263(\322\274u*\262\275\233\365p<\204y\302\273)\323\203=\225\322\301<k\325\232=\320\341\036=\203hg\275\006\310\250=\355!\020=V\202\351=_\002\006=J\365\013\276\374\036\374=\206\302\310=\214\364\224=\0322\216\274\3327\345\274+\312\243\275\221\365x=K\372S<\311\251\377\271\027\035\306=\224,\345\273c\"\006\275\0100I==\317\034\275OMZ=\234\240\321=\313l\331\275<S\002>\214\031\362\275\351~:><G\335;f\'\221\275\323s\323=p\321\272\275\267C\000=\215\275\250:\370\2341\275dZ\307\275\260X\026=\375\207\327<\327\244\315=4_\324=\301#m=\362e3\273\355\317\207\275\273\007\225=FB\231=\325\204\237\275N\202\222<:\017\036\276\203\331\211=\016\225\002\275A\020\026\276\"\206\211\275\361\370\274=\224K\010=\224Al=V\313\006\274\302o\252\275\016\344K\275\336e@>\241K\007;\273N\212\275\217\036\210=\262wL</][=\336\335\257=\016\362\274=\216\370\237\275\316\373 >$\021\262\275\226\032H>\241\274\334<\304\214\032\275\001\316\233<\353\rv=X\3664=rD\337\274o\347\276\2753\321\306=\"\227\234\275\371\232N\274\177cB=P\271\272\275J\273\315<\240\331.=\350\352\001\275Uo\251=S&\235<\261\001\020>\244\321T\275\2272/>\0338\213=\253\243[=d\365~\2757\243\226\275/}^=F=\232<\267r\341\274\234\344T\274\213\222\264=Z\254%\276\225$D\274-|\263=\351u\006=>\267X=6\254u=\344\300\376\275\021\371\205<\336Q\370<_]Y\275<\360)\276\037\204\205\275\360\277\333\275\366\022\317\275\266\371Q\274\037\230g\275q\221p\275\365\335C:|\231\317=Hk\211\275\220\276\307=\366\344\362\275E\326\275\275\313\333\035\276\323\376\265;\2453\363< \246w\274\230E\354=\276\352\373\275\022&:>`\244\237;\207\304\007>\207\222\206=\035M)\275\272CE\2753\303\344\275\224\360\2477o@\007>\221O\021>>lO<\334n{=\\\377%\276H\353^\274\t]\344=\311o\226\275A\215\317\275@#\363\275\327\272\227=\240\212\213\274\301`p<\023\\\n>/\206\220\274\335\t@\274V|u\275\021m\">,\343\341\274\257\225\253=\037\331\350\275W\332\240=\266$\013\276\362\221\321\274\034\032\005\275\306\314\325\274\222\365\245\275G\032\206;\na\341=\220\3634\275/\345\331=\000\273\225\273\271\352\315\275\022U\243=\300\211\253<\342\206\021\276\331\300\021=2\212\013>(U\243=\301\225\256=\241\217\221\275\025S\005>D\203\213=\272\220\">Z\'\320\275z\221\r\276\262\014\324\275\023=\'>\245yq\274\377\2236>\013\245\273=\347+\276\275\227\024\t\276i\361Z\275\240\"\272\275\343\341 >\307lE\275\344\013\327\275\272\n\225\273V\334\031\275M\001#<\250\230&<\362^\036>\346\014\305\273>\271\200=\272\222\373\275\240\342\023\276<\252\236=\372\233\270<&\027\267\275\231/\301\275\3461\211=\340\350;\274J\336\375<\330\020\026\275\234i\301=O(R=\235\244 >\016\273\271<\327\202L\276\307\271\344=\231K\177\275S\022e=7U\254\275\343\3324\276\343\212P=\'\013!\275m4p=(\374\004>E\256.\276\230z\001>\247t\231\2751\034\346<]\365+\276^\236\036>!6\234\272R\241\305=>\265\305\275\252z9=\251\007\363=+V\245=\027\272y<\301\314\237=\223\321\031\275\006k\007\275\257\022\222\275\223\334e\275\177$\337\275;\014\013\276dl\037=\336\263b\272\ts\004\276\3048\361=\300\341\250\2752;k=\031\024\253\275\031\273;<\323\372\022\2760\370\016\275\275\216\313\274\342A-\275u\370\321=\016\037\306\275\004+\365\2758\232|\275G/#\275\343,-=N\350\004>G\357G<V\335\376=)(\365=d\345\230\274\254`W\275\315\356\227=\324\345{\275\032\023~:gw\006=\021#\313\274\210\244*\274y\220\177\275\237Q\024>\231Q\360\275p\377\304=T;\024=\271`\035\275z\022\211\274\213e\344<\337-\225\273W\234>=t\316\324=K\357\016>7\205\372=\367\211\316=\374\201\n\276\215\3300<\312S\315=2\266\001\275\303\267\320\275\004\010\366=\212b\265=9?(>\341p\004\275\231\005N\27562\247\275IBK=ww\'>W\n\002\276\364\000\376=\374\366\020=\3720\305<\357\255\000<_\026\205\275\217\226\027\274\257f\211=\016\007\272;3\310B\274\223o\347=aAV=iE\271\275\003\265\033=\366b\231\275\235A1>\036\305\016\274{\225e\275\002\321F>^\213\247=%Z\277=\366\016\207=\324\312P=\007#O\272\225[4\2764FE\274{@\023>\354t\243\275\331\324\306=\273\333)\275\233\251?:\n\017\223\273S\216\037\276\325\025\016=\254t\236<\222\n\247=\330|\313\275\2270p\272\303\223\r\276\006\367:<\\C\010=6\272\201\275\312\362\313\273\"\267&<\234\305\316=<\207\010>\030\244\257=\203\311\343\275\031$\200\274\273~\'\275\313\037\373\275v\262\232\275 \"\324\274\021\004\345=\362\343\332<\311%2\275G\244\017>F\203\002\276\006\026\004>\004\031\t>1_\n\275\245\261\214\275\350Y\311=\356\325j=(Y=>\036\345\340<\244\230\241=Aw\322=4\263\252\275 \000\210\275\244\2545\276\207V\031\276\333G4\274\204t\204=\371@Y\275\352\032\377=[\021\317\275\371\036\261=\006\"\347\275\222\224\005>w\367J\275\205\024R<\326>\231\272\353\235\231\275s\"B>N\212\217\274r\243\347\267\274D\305\273\300\224\241;\367\237&\275\377\236\257<\365W\361<\256^\365<+.\256=8\036\247=%\301\345=\332V[\274\270\022\362\275\236\315\314=\337\252\225=\342\266\007>~\374\200=\270\256\024=\215W\014>\233\020R=\020\202\254=\323\373\221\275l\013\306=\007\227\205<\213E\231\275\"[\t\276\316\365\262=\007>\302=\306\317I\275\233\305\211\275\2278\347\275\243&\241<D\240E\274\031R\363\275~\301\375=\022d\031<H\005|\275\200\036\001\275\002\022$\275\223?\330=\233\344-\275\253\r(\276\252q1>[\371\250\274L\306\332<\204\344\013=\313\224\005\276\t\242\342<\033Qb<\023t\021\275d\252\256\275=\244\027>R\\b\274\225\374\314\270 \205\363\275w\317\277=\320\331\352;2\013p\274\235\006\033<y\254\r=\323\341\036=\323.\n\275\313\202?\275\352\210\312\274\210T\372\275#\254+>\313A\013\276\020\306\375\275\245\375F\275k\210\357=2\\\314<+\314\255\275\301ur=u\"\275\275\223z1\276\254\2461\276\245\205{\275=\237.\276\263d\274=F\357\257=\361\362s\275|U\316\273\013I@=\334\326]=\233\205U\275\335\222.\275\256\235T=\272X >\350\200\317\275b\366\210=\221\266\246=\n\343\003=\271\327\203\272\237\017\206=\262E\345<\214-\350<Z\311\336=S\001k<;K\352=el\003=\270\312\027\274\3604\204=fo\216=\361{\313=4u\253=\350\221*\275\2058\362<r\232/\276\373lB<V\271\'\276\304GU\274\345\256(\276>\214;\276\350\2732>\3214\300<\016:\250\274\344\033\312\275*\203\r=\272\255\324=t\271\014\275/\363\235;\320q\010>\237\036\341<j\355\367<\237R\321\274\201~J=\036\240\253=w\3151\276\026\347T\275Q\3568<^\006\276\275z\337\032\273\n9\254\274\213\215\236<\260h2>\177\353\241:\211A\330\273t\255\333<;\244;>\021\255\355:\271\214\320\275!Gp\275\2778\316\274\276\355\252\274#\207#=\251\233$>\231\356N\276\374c4\276G\346\027\273f~$\276H\262\025\276\326\005\361;\275\342:\275\271\317P\275[,\333\275\036K\337=\177e\357=\330\016\230;\201R\237=h\260K\273|\001A\276f\021R=t\261e;\025VL\274T\316\225=k\267==\372\206\004=\026\224`\275\'\'D\276\310\253\354\275c\312\222\275\310\261}<\321T\353\274\252H\311<F=B\275\372\3010<iSo<\234\351!>O\262\205\273t\327\275\275\0070C\273\245\315\030\275v\324\270<\257\221\004\276I\007\363\275\2355\217;>y\013=9\242\'>OV==[\305\200;e\341|\274i\302\240<\237\263c=\2358\030=c\302\223=_I\254=\336\224\320\275\006=\240\275\350\330\307\275/\224\354\275V\314\261\275\274@\t\276h?\"=\345\243\255\2751\031\024\276\317\352\330;1\246J=\021\004\274\275\020\343\274\275\330\264\303\274g\231\361\274%\034\025=\304\017_\274:k\304=YU\032\275\266}\000>\221g\264==\002\177=Q\202\235;g}\201<\274\313\265\275\310${\274U_\356=D\253>\275\016\313\320\275\343\231\334\275\210\346\255\275\257\223\037>=\270\n\276G\323\001\275\034\377\207=gu$>\342B\010\275\034`x\273\332a\305=\337\242\326\274J\333\252<v\010\206\275\201y3\275R\373\024\276\316\370\300=eA\353=\370g\310\275\327\307P\275\'\035\317\274\245j\002>\230B\274\274\230\247O=3u\374\273\226\237\216\275\246\0250=3\177\327\275\233\026\215\275\272\210A=\206\233\362\275\352y$\275\312[\202\274Y\307\257=3\323f\274}g\210=D\020Y\274Qv\'\276\034H\215<\312\215\\=B/\225\274*Q\275\274\263w\310<y\337\361<\255\010\325=q\3577=\211\370\316=B\202A=\343\355\241=\354\325\035\276o\213\267<\223IG\275xX*\274\313f2\276\255wz\275 \360\347\274\276y\351\275j\376\243\275P,G=\033\257\314\274\324\0075>w\267\026\276#\206z\275\2229~=,\317\235\275_2\000=\037\251\n\276\303e6\276t\272\027\276\350\010\327=y\331\330\275\345\027w\275p+-\275Ps\360=^)\377;\030\311\210=\276\247\302\274L\370\211=\031\223}=\005\376\017\275T*\322<\245\345\273\275\350\3112\276\020\212\t>%\326\272\275A\211\363\274\021h\221;\202Q8\276\0359\306\275\037\"x=\274\376\357=-\203\211\275\341\330\361\2747Mn<\260\366X=\024\276\323=\347\367\n\275\032[l=\rdS;\210\360\206;\313\010\375\275\351\242\036\275>\236\241=\200\374>>z@\004=\t\211\245=\226\221H=\237\211\316=\212]\316\2751\241\305\275\0311\036=<r\354\275\026\026\034=\341!\261=\r\350\271\273\223\033\203<\365\351\353\275\t\000\007>2\336\200\273\212\177\014\276\340\022I\275\263\025#=\342\000\336\274\301\360\256<\331\t\236\274\262^\207=\310\253\010\276\3650\203=\224\302\355=3\261\364;\217K\000\275\307\027\016\275\332C.>a?*\274\306\272\005>2\3476=\211\255\205<\001d\000\276)\304(\275\245\024\343\274\233|\025<\205\352\036\2752\350\004:\322\335\327\274\005\227\245=]\204\342;\237\375\276\275IG\'>\363\276\202<\272\233x\275\331\306\256;\024;\215\272`\304\204\274\275\350\033\276Z\315\021\275&\245\t=\030R\033\276\356\330X=/&\017\275\346\202:>-\336\375\274\230\360\311=\312\305\260\275\321\274\346;\363F\271\274\001H\343;\331B\366\275\246\025\267\275\233$^=\211\026\025\275\245\332\301<20\002\276V\234\016\276\2056\"\275x\3671\275r\277\317\275D\254[=\340\3314=\341\200/\276\223v\226<D\342\223\275@G\336\274\234|\341=>\334\031>0\204>\275\317\320\225<\371\317\036\276O\321\036\275\221-\007>Y{`<\3612\312=\215\007\264\275\\\327\222= \334d=&\376\026>&d\230\274\306\333\311\275\327\377\002\274S\n\004>|\016\206\275\021\371\345=S\300\034>\275\016\200<\351\263\234;GV\240\275#B\275\275\235\3601\276\376\312\221\275\021m\356\272\210\030\260\274DZ\327=\354D\303\275,)N\275\304~\014\276B\217\033\275W?(<\200\253\271\275\036N\203=\217\'\244=\366\356\001\274\303G\303\275U}\266\275\326\222l=\252p\333\275/\021\223\275\232\234V=\032\017;\2740:+\276:\240d\274g_ >\302i3\275^\343o\274\340\322!>\237\352=\275f\320\301\275rh\031>\354\016\250\275n\016$>Z\370\247=\177Q\\\275J\354Q\274\245\030 \275\375\372p\275\343\244$\275/\334\210=\247F\246=\2042\223;l\303\263:\231)\230\275\035\2070\274`=C\275\202\303\007\276\345\341T\275\220|L\275u\333\263<\3711j<\365l\035<bz\264\274\216\273\216\275\213\316N=\232\300\301\275h\357\276=\353\357\320=(\303\370;E\275\031=\337\373\035=\333\027\357\275\035K\333=u\351\277\273\323\350\305\275b\255\024\276\020\031\211=\364B)>o\222\350=\233\356I=zp.\276\200)Q\275\010Z\017\275m)\322\275\317\302\204=R\332\310;\326,7>;\364\344==\331\245\275\020K\252=B&\022\275\364E<\276NO\361=&\2168=\002*\206\275\256[\214\2752\337\207=S\241\333\273\033K\307\275\232g\027>\367\000,\276\206\252+>\352\370P=\027+\r>%1\364=\203uw=\0279\027\274\364E\"=\005\214\224<9\236\260=\230\257&\276\264\323\372=\003\203<=\361\345O=G\3358=\317}#\275\274\277\371=\331\244i\275\035VW\275\013\253y\275 \250\313\275\001\004\231\275\270f\226=\343\363/=\247\2555=\3406\357\275\034\341\0109\006\265!\2735\354\242\274\343\035@\274r\267B=a\001\221<\360\216\233;n\023\301<\025\003~\274\242\006\327=\275\364o\275|\353\275=\007c\027>\314[\367=\017m\366=\341UW\275 v\370\275\350a\327\275\375\270\221=\251\'`;A}q=\222\215\220\2757\203\375=l\340\003=W\3333<\330u\372<\243\230>>\322u,\274)1W\275\022\250\202\274\225\266)>~\242N=\010\275\303\275\370\0161\275\352\375\007\275\226\262\323\275\237$o=t\036H>E\350\266\275\353iW=MOk\275\341\346\335=\216f\016=d\250\'\275^\321\234\275\227\034\035>\267\211\331=\200lC\275\301\343N<\205E\030\275r~#\276c\242\273\275$`D\276\004\005\027=\246\031\377=\202\307\035=\014$\037=R\201,>O\000q<\037\275\371\275F\275\005=\360\375\311\275\223\301\302=\013\377U\275\250\222\306\275\325\367\372\275\322\215\035=\336\240\302=K\2246\275xq\010=\315 m\275Ow\263\275\361\005\033=h\333,<\030g->\307\323f=O\276\277\275~\212\214=\232I\344\275i\314\007\275\331c*\275U\330j=\241\213!>\036g\n>)\341\025>\314\235\006=\235\264\206\275\343W\270=\263\222\006<\275?\007\275\027\357\353<\242\300\212<X\310->\024\366\034\276*\232\023\276&\022\223===\234=\324}\006>\030Z\215=\304t(\276\327\350\250=S\021\353=\226X\355\275\351\316\027\275\262\024b=\270ty\275nC\323<\204\225\235\273\030\234\200=T\213\344\275c\330\352\275\246\311\333<I\333\026\274\252\265V=\330\224\001>%\217\267<[[4\275\230s\353\275\313\244\315;\347C\000\276\353c\223\275\215\224\301=\001\212\026\273\267\264=\274A`\035\276\240Sp\275\267\363\026>\246<\310=\256\261?\2761\257\363=NvS<<b\235\275\326\273\005\276\026\307\372\272\202\226\035\276\377\200\024\274\354nm:\210\351\311\275\347X\001\275!\276\216\274\235\000p=\255\023\016\276\376\334/\275\226e\343\273\306h\206=zD`\275Jf\363\273F&\233</]\027\276E\232\007>\244\260\276=\211\014\300<\240u\262<\032\204Y\275\242{\330\2741<\'>\356\366\304\275/\376\201\275\202\257\265\275\2317@\276Hm\177\274\231\177\341=a\346\342=\276\366}<@/\224=\211\032\261\275\215Z\032>i\037\301\273Pe\345=*\326n\274\212\2306=\332(\226\275\320:\225=\367Q\006=B\310\036\274\240\2115<\350q`;\273\003`<\004ny\274\345\004T\275^!\222=\007\024\002;\334\230\016=yw\253=\217\027\242\275x\211\201<\366\264\323;J\377\250=\342\006\235<^u\213=\2047}\275\220\346Q<\275?\361\273\003\231\222\275\302\246\260;./\327\275\336\233\034=\021\002\253\275\242\205\n\275\260\206\267\275\254c\006>;v\334\274\237T(=\037\221F=p\332(\276y9\020\275\372\362\370=pj\274=\210t\271\275\013\317\253=\n+\"=\032[\234=\027\203\336=o\356\314=\t\203,\276\316\021\352\275\023\202\363=\366\324w=\304c\355\274\300\031m\275P\034\225;\264t\244<\3145F\276R\347\021>E\277\'<G`\354=\304\260\311\275\262\345\344\275\342\203{\2759\255\r>\306\241\010>\r3\n=o\315\017\276\0100\227=[\207\032\276\316\223\276\275j\217\\\2758\303\321\275\372\350\321\275\256\267\375=Tt\324\275\373G4\275il\264\275\352\365\203=\356\214\001>\345\254\333;\324\240\205=\305\301\327\275\331\242F=0\"\215\275t-2\276Z\027\243=\017\007|\275\224<<=\034\t\332<\224\214\203\275\316\333\035\274\337?d=\360\325\223=o3\205;\021\"\317\275\002\250\356\271\035jH>G.\212=\332D\002\275b\2710>]\366\256\275\203\227\244\275U\225\205=\321\240\347\274\206\010\371<\001e\327=\333\347<<\333\216\276=\177j\223=\306\t\276\275\"\246\301=\253e@\275\271\275\252=\213\313\202=p\021&<xA\301\2752\242\214\274kJ\362<\003\274\032=\344\270?\273\273\177\021>=\\\">\305\n\343=Q\231\247\275:\320\213=\014\362\001\276\215\233\221\273\004\366\035>\237\002h=\002O\365;\346\256\267\274Z\031*>\235\360?\276|\236\014\275\351m6=\'\256\336\274\346\370G=1 \232=R\244?\275 N\032\275\241;\207\275\244\245@=\304\317\316=\332@\364\274(\330\034=\324x\347=\202\226q\275\207\2720>%|\204\275\332*\342\275\243\371\272\275\224\371\036\275\235\253\363\275\213\017\237=s\366\031\276|&\310\274qn\375\274{\226G\274\273\022s\274\321\372d<\365!\241\275\254\370=>\217\221\255\275`9\361\275\333\230\375=\272\336\201\275Kc\034>\323\275\030\275\030\250\302\275\203\206\273\275\335\366\251<\203\372\315=\021\365\211\275-\030\217\273\241N8=\006Z\376<\242\005\367\275l\223\322\275\031\025O=K\207\332<H\270]\275:q\336\274\233\371:\276\036\377\001\275\022I\312\275\224\253\361=\002k\364\274\350!\217=\373I\023=H\363\343=\202\021\316\275\n\024\026=\215\007\263\273\253\001)<x\265\375<\"\261K>g`\330\274\374\347\r\276\325\241.=e\227/\276\225\036\231=\200\376-\275\235]W\274\210\326\330\274\300t\254=\000M==ht\t>\246\030(=D\356\263\2743\322\331\275\351\212\013=dV\016\274\372~x=\304\324.\275\373\3737\276Z\336]\275?\233\321=\346D\201\275w;t\275\200\203\221\275\265:p\275l\017\'>A\2700>\321\004\"\275\234\210\314=\334:\004>{\3036\275\302\254\247\275\361\022\264\274\251\235\306\273m\231\322\275J\3664=w\334#>\344-4\275/u\031=Vw*\270v\317\022>\270}\200<\242C}\275w\335\264=\037\303x\275\315\332\365\274\224:=\275de7=\027\236\276=\023V\334\275n8\030\276\234\237x\275\2153\242\275!\237G\275\000\201\010>.\212\023>\001Y\362=\3363\026<\2449,\2765+\311\273 \303\332;^A{\274\261\2536=>\021\262=3,\003>\241v\001>l\024\310=\007\265\3449\035\273C\275\204\037F\274\264\234\242\275\212\362\245=]\262\020>\026\373\033=u\010T=:\255\235\2742\325\221\274\004\'\341<L\252\017=\311\232W\274\252\351\261=n\303\336\275\027\221\212\275\366\200 >\214\312\230;m\010\371\275\323\014\211<\"N\010;\034\340\266=\301\274\013>\177a\367\274\205?\030>K\003\223\275\241\245\365\275\323\003\033=\265\352&>u]\025\275\036\327L>e\t\370\275\232\000\272=#<t=\350\347\025\275\251)\202=\022\275\032\276\340a\023=\205L~=U\275\360<\250=\177\275!2l\274\020)d=L\014\262<uT&=sBM\275\330]\233\274\235\3255\276\010S\035<d\017\001>Y(\256<\264\335i\275*LX\275R\002\366\274\0371\204\275Yn\267<\021\363\004\275\324\323\342=G_\245\273`y\343\275\301o\214\275\371Yf<\342\361\307=\2553W\274\205\205\037>\221\033\305;t\240r<v\376 \275w\026\221=\257\023 =I]\251<GZ\264\275\025>q\274\'t\300\274\004u\006>\340\177\237\274\332$\376\27537\265=%%;\276*\301\037>\213C\367\275\311\307I>\272<_<\352\234\276=\037v\230\275\224t\206\275\256%)\276\251\023\356\274\016\277\321\274\001\254\371<\030\037\203\274\254b\276=\222\222\020=\257\271;=\'W?\275&\267\004=\303\227&\275\235\274\232\2759u\010\276\027\n\350\275\367/\237=\240\001\316\273\005\356-=\205\221\310=\177u\003==;\235\275\t\217\244=\222+\n=<9\314\274\353\307\t\275_\337\';P\226\227;(\236G>\216P\347=\037=\024\275\\\267.\275\267k\305\275i-\031>\233r=\275\211J?\276\350%F\275aj\310\272\354\371\353\275\333\200\276\275\365R\306\273\362B\254=\257\257\254\274R7\233\273\205\234\024=&\033C<\330AQ=\243\374N=r\304\246<D\306;\276\363\261;\276&1%=\336\351\362=e\235\300=\244B\273;q\263\037>\342M >-\371>\275\305u\267<\346\310\250=\251\337\205\2754\233\"=_\306\001=\'\272\233=\024\253\326=\241\256v\275I\251\375\275\244T\262;\370c\347\275WoD\276\371\314;;\033\036\212\273yO\333=\225\321\254=c#l=\374\362\022\276#\032F\275\344\202\231=p\230\242\275W\230-=\377\346N\274\363h\312=\372\274w\275\230e\312\275\330\016\347<\215\023\220=\306\310I\275(\232\'\276\377\374?=$\257\356;\253x\246=\260\222\341=\310\230,\275\000\263\007<\235\356{=\3132f\275W\256\352<\223\032\311\275\357\2640>\205\177\t\276\254w\t=\014y\323=MD$\274\341\310\223=<\303\302=\225\010\347\273,p\362=\214(\235=\237\025\013>b#\300\275|\261\237\2753a\275=\3424e\275Y\203F=\256\000\353\275\322~\210:(\244\374=\322\213\327\275=\233\343\275\362\006\034>Hl+\276\360Q\330\274\333\204\362\275\340Qp<\374\313L\275\266?$<z\300\023\276\035\270\356\275\322\304k<\333\034\022\276a\260s<\017K\007\276A\373\223\274\346\245!>\321V\\\275Y\252\335\275ni\361\274\362\026\331\275`]\243\274-\260p\275\321\3418>:\246q;\362M\215=\324%x\275\202a\350=\013\003\021>\344\243\034>\347\200\330;j\304\302=\367\255Q=\'\331\352<\310e\n=\273\n\034\275\263\210 \275\004KC\276\344\300\021\276^\007U=\273\266\202\275\242t\371\275Cd\274<8\352h=}\373\311\273^%\211=9\262\231=r\313\244\275 |\246=\001}\213=G)\335<\021\023!=\247Y_<q\004\344\275\254*\021=\000\233\027\276\226?G\276\2727\243=\317\226\212\275D\2729\275E\351\200\275_\357\006=:\307\375=\025\222\244\273\36159\274R\036Q\275$\037\237\275\344\325\201\275\232\352w\275\312tc=\363\322\004>\240\020\217\275\264v:\275\321\201\213=B\272\263\275Q\237\342=\335\271\007>m8&>S`\002\276k\365\270=\016\272\005>\000\256\r\276\346\373\336<Q>\250<MA\321\274K\362U=s\"\232<\342}<>\353\030x<\2128\206\274\264~i=\003\314\220=\312iQ\274\343\312J\275\351(.\275E\222\376=}*\237=\005Z\252\275\225\203L=\"\367\224\275\354\317\242=\334D+\273\375\n\037<&\031\232=O\025\222=\375\3039\275\376A\030\275\217\346\352=KiJ\275e`\017>\333\216\250\275\342Y)>\013f0\276\230\206\370\275\364\204\244\273@G\024>\240]\027\276\302H\017=\273\316\274\275\216C\317=\352\2716>\253\005\247\275\000v7=\356[\345\274PX\212=s{\377=K\252\253\275\226g\230<0\3321\275\\\304\017>\214\354\010\276u\026H\275V\310\261\274U\003\204\2751[\"==N&\275\334\274\234=n\003\350<n\023\375\275\263\255\374\275\266\254\324=\301\266\255=In\205\274\323}e\275\351S\250=\"\317\256\275;6\204\275+\375\237;\321\232\362=\241O\375\275\361\331\'=\034!\r\274\225\2731>#\213\201\275\254\332\037\275\024\000\355\274wi\354\275\320&\234;^-_\275\032\322\341<3g>=\337\373\003>\237\356\016\275\311U\247=\177\036E\275\010q/>E\372`=U\212\257;o\230\253=w\021\377\275\233\346\005\276\271\022/\276v\2269=\361\026\325=f\016\300<\037?4>\377gG=F\241O=\030\312\343<[\211;=E\375\001=;g2>\021\252%<\217.\374\275\255+\205\274\304\243G>\026\265\202\275~\254\304\275\035\217\371\275\3142T\275\255\326\007>k<Y\275m\264\222\275J\022\375=k\033\006=\320\232\017\276\233\3145>\032\354\025\275\232P\277\274YK\027\275\006`\242=\230E\332=E\302\'<m\331\020\276w\352\267\275\006OR\275E\237%\276\377mE=\235\034z=\020N\313\275\313\177\244\275\034\341\343:u\357\033>W\266\320=\336\350\270=.\305\302=\2554,;\326\306<>\372\023\001>\036\3366>(0\347<(\253\t\276\342\030.>\336R\256\2755el\275\307\231;\276\230p\210=b\312V\275\215d\373\275t\230\\\275\347\354\371<\226\343\227\274\276\007\004=a\357\257\274\220;\202\275\365\355C\276\327i@>\227\325\352\274\273L\027=\033\257\251\274U\274\274<!\017\333;\340\316\350=\246\314\004\274\271\215\237\275\022p\321\275\311\3541\274\037\212\000>\270Z\340=w|\357;\224\254C=\220\317\013>\211\240&\274\362e\375=\005\020%\274m\020\022\275m\212 \276\016\320\343<;l\016=\201\303j<\342\261\200\275\002\237\010\274\0061\000\274\240\005\247=\272\362\311=rD\217\274\313\027\213=\037\r3>)\351\277\274W9\217=\000\356\201=iK\'\275_\354\204\275\343\370\"=\362i*>\317{\277\275\335>\025\275-s\214\275\206P\032\275\177CB>\232\372\031\276\024\257\026\276)\210?=\036\007\020\274!\246%\275\2358\016\276\2334\225\275OQG=\037\241\240=\373\327\310=f{\032:\345\262\034\275G<\021<\201\301\307=\033\n\254\275%r\223:,\276\005=:t\362\274\\$9>\013\265\223\275\204\277\205\2757\255\262=\333\361\013\275!\3733\275\206\261\271\275\240\001\344\274\246\233\377:\320q\270=\262\006\030\276.:\222<\262[\034>\373\230\365\275\347\321C=\271S\277<C\201\232\275\243\300\364\275\354\021\027\2763K\233=\212\212W=\364\020\222<x;E=\266\324\324=\233\352\321=\270#\255<\343\223G=.\256\241\275\274\002\337\275\341E\033>@\3044=e\234[\275aS\362\274\014\234<\2734\204\344=k4\332\275z\323\272=\375\324\244=\3230\266\275i\021\214=\004];\275\247\202\241=\346\1778>.\021\307=\216-\007>8!)\276\305X\026\275(j\035\2763v\254<u0\220\275\373\375\024==4\311\275b\030\034\276]\001\256\275\000\315-\275\316\307\006>\2571\317\273\216mh\275D\243Y=I.\021>9pc\275k\004\346=\232\203\212=\203\352H\274-[\200\275\364\023\377=\321#f<wN\255\274\366\255\266\275\363\260\316\275\367\331B\275K\373\264=\204\326\210;\231g9\276\341\244\016:\tc}=\"V\263<\235H\"=\337zC\272\276\271\r=uG\026=\216\201\242=\313\224\272\275\216\260\036>\004\234\017>:a\270;-\017\020\274\313\304\013\275\014\302\216\275\341B\007>9\261\223\275\267\310g;\214{\244=m}\033=:\232\315=i\026\374=\261+\036\276U\314\261=-#\355\274\035\260\340=\307\235\322=\311\376\t>\2566m=\000\256A\276E\2547>5k\335\275\274\262\276=H\001I\276\306\306e=\024c\233=\255\2547>\327\002\352=\007\332\234=\334\232\000\276\007\313\367=^\375\031\274\246\314\324=Tf&\276\307\030\375<Wp\254\275\213b\007>\357\226A=J\305>;\035\030\312\2754|\246\275\30504=\235\366#=4w<\275\311\274\226\274~\344_=zC\304<\365>J\275\256\377\362=\365\370{=Iv\303\275A\225\345=\325\266 =\214\313*\276qhv=e*N=O\262\337=\260\014\260\275H\006\234\274U\034\304\274\037\002\255\275\377\003\337=\202\251\302=\363\210\325\275V\2358\274v;\223=\375\036\275<\024\332\013>Q\301\240\275\277\357\345=8\274\360=\204\363\334\275\245\005w=;)\023\275)\260\307<n\264\261\275/2a\275\033\351\260;\331\310\000>\341\005\023>\016\006\025=Q\236b=\177\374\324\274\317\251\023=\262\364\375=\275\026\263\273\274R4=\357\t\221<\262\210\240\275\024d\320<b\213)\275\343\001\006\275\000-\356<\344\323\302\273M\3048\274\037\251=\2758\227H\276\006VG<\226\340\212=\310\200t\275\311\275\201\275\246r\212\275\332\222H<W\363\336\275\021\232\231\274_\220\270<\235J >\322\233w=\013?\013=\005U\034>\007\210\327\275E5\304\275\254\337\237\275\342\213\241<\223\242[\274f%\313<\360\363\354\273C\237S\275\026\226\372=\322\024,\276/\302\032\276t\255*<\242\353\002\276\273\203\302\275\314\"&\275\356\013\023\275n\027B=.\375W\275\221\257C>\210\035\'>\312s(\275\027\313\350=\235\356\207;7\273\024\276&\005\203\275zhn\274<\364\326<\276\266W\275\262\2039>; K\275\347Sl=\223C\234\275z\340M=\021\237\343\275\317\035\302=\3175\021>lU\313\274\306\375\263\273\367kd=?\010\330\275\331\203\276=gm\233=e\007\271<\216\253\374\275g\307\261\274\332\026\276\273j\366\022=\270y\300=\236\010!>\036\216\343\275\360\215\227\273\315\330\020\276\371\027\274<3vN\274rH\227\275q|\327=F\344\203\275\244y\263=\334c\217=5r\241=\366\372\261=\360.\026\275\013\347\310=,w9=\377@\341=\244\023\367=.A\016=\217\325\252\274\336\020\307\275\303\355\026\276?\r9\275\2301\303<\022\202\005>\314\344P\276\233\273m\274\255\342\205\2750k\220\275\000\337*\276_+\213;\024~\254\275\2761\006\276\321\375\233=\010\273\312\275\005,\243\275\317\"\201=\202\005F\275Iy\363=\345\225 \275\n\327\035=\332\351\000=\241\n\324=\362+\"\275L\217\200=dI\316=W\030\222;\310\333\244=\314u\304\275~}\326\273\022\325\013\276\351\261\330<3\305^=J\022\312=Ae\022\274b\211~=\330\360\024\276D.e\275<\235.\275\030\363%\2755 \027>l\232\344=<F(=\222\306 =\311\214\260\274\370\327\307\275[\232\236\273\0247\001>z\240\000\274w\270i=\023_\365<\207jx\275\235i$>\351#\000>\345u\272\274\004m\262\274y\344\354\275p\320:\274\227\307\021\276+\033\352\275\274I%=\022\260\202\275\313\267\252\274\010<\345=g\213\213=\026\253\234=q\363\257\275\236_\025\2754^\323<$\341\342;Q\325\215=\345\025\305=\025\201;\275A\337\014\274\356t\354\275\342\255\351<\274O\240=\321!C=\213.\344=]e+>\334\2528>n\332-\276\024\320\241<\376\222\222\273\250\014\375\275\356a\226\275\233;0=\236\030\035\275:\270\014\274\004U\227=\243V*>g\005\337\275\377\211\357=Q\254\273\275\331C?\276\221\271\203\275TL\216\275\215\362\r>-#\006\276\331\005\003=!\226\000=\250\311 \275\014=N\275\333\371>\27684\005>\030\r*=\013\363S<.P@\275\246\222>\274\235(\n\276\002\206$\276\240\267\337=\366!\353\275?W*\276J\333\322\275\312\\C\273WF#\275\237/\021\276\034\316\353\274/O\250\2753\2008\275\306R@>;0X\275\004_\306\2756\304\203<B\362\026=I\317\244=\274\332\035>:;2=d6\363\275K\364\307\271\017C\253=2\233\305=7\353\273=\313g\361\275\233O\327=V\247\202\275\315\305\313\275\362\375\223\275\313\300\367=c\001\257\274\202\2600\273\202\264i\274\362\217\211\275\372 \255=\356\220\375\274\321\345\210\275\2316\004>P\341\216=\367e\322\275\316b\246=\262\2573\275\304\271\371\275\374\315\331\275\340\007\371;\323\332\261\275R\254\240\274M~\177\274\361o\207=<\361#=\376h\004\276\260F\341=1Z\237;\250S\270=5\266\274\273\351#\227<\331\334\302\275)d:<\023\'P\2742\235\"<\0024\353=Bv\330=\035\354\247\272s\325\303\27506\324=\236Dc=\030\030E=\266\221\340\275o=;\276\230c\232=\270\332\013\276\373\273\226\275\264\362|\275Gz\330\275\325C:=\330*\321<\347\t\227=M\343\001\276\231#\343=\203T-\275N\034\342=\007j\350\275U\366!\274\372\211@\274\2732i\275A4\247=9\231\307\273\305\304\320=S\372\001>\305<\026<\240\277&=\014Z \276\'\005\t>X\323{<~&%\276.\243\364\274)\215\327\275\313,\223=\353\002[\2715\260\235<\013\250\300=\247Z\373\275\266\227\026\276\207#\224=\357}4\275\341\340\361\275\307\276\223\275}\204X=\341\2520=\200\244\335=\022\021C\275EV\374<B\004\333\273T\r\236\275\027[g<\274\037\t=\3108\342\275\300q\203=bs\024\276.\233G\274\274\310^=\032>\020>{\277\343\275\224\304\010\275)\327\262\273\361\232+\274\250a\252=f2\033<J\355\262=n\010y\275\002\302/<\310\313!\276\330)D\2748\332\324\273\321n\033=s@.<\020\326\031>\311\300X=\352\256\233\275\253\334\222\273D\267\000\275\217\205`\27560_=\324\302\351=7\001\025\274\326I\212\274j,\261<\263\303\316\275:\234\351\274\'\205\311=\344\310i=+\241\222\275 K1\276\301f\273={\266\000\275\3666K\275\204\tx<?\313\215\274\361\327W=\037\017\204\275\265m\021\273\312W+>\257R\014=\037\370\240\275\247\020\234\275\3717\215=\356\221&\275X\307\007\276\264\232\265\274\365\351\271\275\346_\273\274F(\241;\367>\277\275K\265\364<\2345\002\2767\027>\275\365\237P:\236\3667\275\257:\237=\316\214\347\274\222\355\364\275r1\000=\320\246\2638\311 \r\276\301\303\200\274\200QM=Y0\230\274\036\326\225=\\{\225<\273\017\013=\266u\003\275Q\371\362\275-\332\263\275]\237C\275\314\266\207=^a\005<(\247\323\275]\242\t=L\247\306\275>\327\226=\316Q\222=\017\204\000<\006\263\014\275\306QM\273\266\3164>|:\201=7\334\343=\017\207\356;z\320#\2764\342\376\275)\035\">\"4\324\275 \276\201=}\213\003>\244-7<\222}\222=_\325\r=C\371%\276\256\307\201=g\316\256=x\327\'\276x\224\233<d\365\251=:\277\343\275\360\\q\275.HR=\355\343\351=\3050<>`\363O=\003\311\"=\322\373\272\274~\266\330<\346\317!\276\312/N\274Q\210\320<\256r=\275\214\352\233<\262\345\270\275\233\030\240<V\010\330<\364\200\330=W\265&<\344c\335<\225X\034\273R\212\225=\361x\261=3\270\'\275\037\233X\274\217\353\271=h\212s\275b,\360=+\312{\274\253\204\003>\325o\024>;\010\263<\\\344\235\275\371\315h\2753\274#\276\267\377\341<\355\032 >bU[=\022\271\231=K\222\304=\325\376\257=_\261\274\2756%h\275\305\363\243=\261\231\212<\321\331\325=\023\026\t>\024\245\020<\376\265\317=\357\303\006\273P\256\352\275\016\006+\275O%Z\273\203\024.=\032\330\310\274\360\226\276\272:x\006=[~\244;;\371?\276T\246\260\275\016\323)\276\010 \035>C\331\246\275\326\002M=\203\3756<\366\354^\275\002\342\335=\365*B=\362>\205=\336\033\271=\026o\221=\333 \353=\036\265\205=\2750\203\274\010\267\210=\323\357\321=\022i\321=ZB\270<\362\231c=\223$y\275\262e\311=W\274\227=\300\262\035\276\031\375\311=M\031P\275/\030\267\275\355\224\302:(\334\321\275\372\230\n\274\003\255w=\265\365&> \242r\273\325?\001\276%\244\265=\353a\001\2763\r\305\275\3551\351=\362s\310:\324;\002\273\030\203\316\275\335f\030>7\240\217=l\022\371\274\236,\247=`C`\275\2668|\275\247Z\377\275UZE>>\007N=\245\016\325\275\353\022\220=\215\3414\275\001B\252\275\346\206\303\274\313Q\244\275\224\211\">(Y\021=\210aR<\341\255\323=r\0248=\364&\233\274\314X|<\001\215\204=\006\334\320\275\341\217q\275A \014\275\245\301\013>\342\230\244=\323\276\365<\242\024\270\275O\353\264=\231\327i\275]\251\035\276\250\327\240\274\375[\264<a\200%\275\3238\031\276\223yH\276\003\253\025\275\247]>=W\331\326\275\207\361\207\274i\247\273\275t\255,\276y\364\033<4\305\233<T\322\211=\376\256\313=\272n<=\243\237\212<\251N\300<\351\276\004\275\206\276Z\274\240:\260;9\031\223=IE\326\275>\224\036=G}1=\362\317\276=^n\227\274D\343\010\275a\336\247\274\244\231\315=\2238\262=\376\354D=\255\321\246=\347S\355=\246\333\213=\200\032\032\275`\020\262\2752\310\305=\343\242A\275N\224\r\275\236\017\247\275>\026\241=\3418\330<\311p\031\276\254\314\016\275\\K*\275\257\274P<\nTK:\270\r\006>n\271Q\275\246n\216=G\241\231=\324\215\024>_\375&\276PrS\275\373N\362==c\377<\243c}<_\267\325=\204D >\250\311\r\276\235\025\024\275\251\224\033\276\231\322(>\343u8\276\355\376\222\274\337\023\303\275Rt\312=\010\340\201;\241]\223\275\227*\232:\264\263$\274\255\275\374=\016\312\251=V\256\037\275J\276 \275(\336%;b\002\350=\261uy\274\177F\334\275Z<\037>P\314!<\313\264\366=\025\237L<\310L\234\274h\371p=*\355m\275`L\027\276\200J\252\275\277@\004\276#|\236\274e\370\321\275\177M\r\275\021/w=\013K\374\274b{\253\275\005\321\202=\272E\303\275AY\377\275\024\320\253\274\202\216\315<\212\230k=\343\216@\275\024\255\265\275m}\251\274]\343\006>\346\217\177\274_\240\274\274\304\347\005\274d\325\344;\362\232\225=\311\203\002>P\230\003\276\3333\276<\377v0=V\250\246<\311\323\242\274\210w;>\025\237;<\026)\311\275D5\n\275\330W\323=\353\202|=|/\362\274\036D\227\275\307\270\217=\035\020\306\274\314\2766=Yq\014\274\364\312h=}\357\376\274\234\023\023\276\032\347\034\275\314\252;=F\223 =\244\276\215=\235k\200\271wl\226\274\006\"\021\275K\001\026\276\346\353\327=\365cE\275fx\030\276\311\374\211=\231En=>\020\202=\016w\233\274\2425\263\275\274\250\360\275\224\344\222=m\214S\275\017\253\325\275\024\225\010\276M\201(\275\273\302/\2760?g=\255\217\213\274\t\276\333\275y]\342\275\320\010\236\273\274\316\2629G\310\233=\336\022D\275\215\r\226=\253\207\302=\003\355\213\275\020\260\230<\010\355\r>W\375\n\276@\257\005\275w\211\037=\356\353\340\275@\334\210=\365E \276\034\211>\276\032\272\344\275\213\340.<\275\211\002=j4\021\276D{7>c\017\"\276Z4p=\261{\":\2324\302\275\306\254\262\274[cv\275E\333\225\274\264\371\216\273N\313\375<[\214\030>6-\257\275\224=A\275\333>\002\275L \267\274\310\200T=\202\325\370=d2,=\346\373\017>\207\013\312\275\257\264\307\275\274\374S9#1[\274\327\373\323\274\362Bt\275\314\331\230;\311\207\351\275\026H\036=\3162\t\276\246,*\275\032h\321=R\372\327\275>\273\331\274\346\031\324\274\237\344\374\274Vy\213=B^\021\275%b\214=\207\257\027=\253\2142=K\016\247\275\0063\365\275\214\273\366<\013\330\000>\317\263C=\360-f\275\227\2141\275\335\245H\2750\343\252\274\272X\227\275\2719F\274\225F\332=\305\261\225=h\370\363=?r\235\274\263[\'>9@I>\036x\021\275\370GM\273\360\305\215=\266\026\037\275\312\215\226\275\232\007\r\275\243w\025=\377\337\257;\341b\354\275\245o\377<\321\254h=\336$\323<N?\334\274\303\201->\253\\\245\275\275\215\235<[]\254\274\343\031\327<G\230\033>-|\376\275\243\375\255\275A\223\207=t\256\256<\3152\364\275\021\366\'\275\370\223\274\275\245\217\271=\2158\275\275\357z\026>\301~\212=\'\3504=\331\'\226=\263\314\222\275%\360\341\275\340\r\024\2751=\005\276Y`\250\275Li\246=\037\234\353\275~\343\221=\235e\266=\005\265\014<\366\247\307\275\002s\031<\027\'\250\275\236\235@\276.O\002\275\333H@>IW=\275\024\371\334\275\374H9<R\354]\275\023*c=\301O\'\275q\243\235\275\331U\354\275\2076\027\276\307\013O\276\\c\347<\241\275\201\273\314\344\002=\352\233\000=_\275\264=\1775\n\275\001mZ\273\366\315\224=\234\002\344=\3379\252=E\303\210\275\311\254m=\027\2215>\343dX\275\366S\261\275\343\326d<\357\2416<\221\232\336\275\330\232U=\r\201\032>g\235@=j\3525>9\322\002\275\354\271\270\273f\312\257\275\377\030\356=\272\177\236<:\373\004>3O!\274\227)\276=\254\371\005\276\202.\325\274P\344\000\274\211\307\323=\350F7\2766i\021\2762p\324;\274_\244=]<9\276\023\265\024=\021\205\205\275\352\231\331\273\035K.\276\324e\227=\373)i\275\3659\240=\312\220\333<\261MG>wB\362<\246\350\226\275L\266)\276V\024\014\276\315\317,=\3138\352=\0068&>\374\010\362=\312/\251<R*j\275\030\250\206=a\033\345\274x]%\275\262R8=|\227+=\325\340\312<\224\323\264\274\314\212\035\275\300\272Q\2758\260?\2763o\356\275\2423\214=\031%\342=\000\216$>q\311\"<$\353\274=\335\231\225\274&#U\275\217/D=\367\322\307\275\210M\201\275\317\t\014>h<5=qY5\275>\262\000<L\277@\276\253U5=\346Q\\=\247\272u\2752`K\275\336|>\275\337\006l\275,2\t\274#\r\352\274\362\212\276\275\271?#>\357\325\362\275\203\025\303=9\020*=\026o=\275!\022\222=\271\274<\274\351\\a=c\240\034\276\310C\274\275\320\362\372\275n\265\201=\033D\215;%W\250=\201\001\032>\005E\366=\314\320@;tU\330\275t\233\205\275kM\257=\020\236\022>\367\366\371=\263\316\305<w\r\307=2\341\030=KF\212\273G\007\276=|\315\365\275\221\227\262<\370#7\275|\350\310\275\350\355\270\275\330A#\275\361?S\275H8\323\273\377\350\031=\031$\006=\245\367@=\336\361\327\273\005\341\215\274\014\303\236\274\037%\324\275\365\204A\275\245\177a\275\000c\007\276\016\031\340\275cP\214=\006!\'=;\250\335=\024\212n\275n\307(\275\343S\264\275B+\036<.\223\207=H\377\327=C\022\275<\347\225l\275\3126\314\274\217\362\216=:Y\231\275\027=\211\275\252\002\327\274s8\200\275\303F\221\275\203P\331\275`~\240\275\233G\177\274\213%\022=\245\361\322=\335\246\014>\026L\200\275\"\227\030=\304\340\020>\334\030I\276\231\207\017\276\355C\007>\326yd<\330\'\017\274o\n\010=mW\022\276\t\227\002>e\373X\275\203\326!\275\333\253\246\274\177\342N\275\364\236y\274t\303\005\276}\364!\275A\020\033=yI/\274\352\221\222\275\260\315\232=\205/@\275\"\265?\275\027\250\341<R\022\272=Z\371\317=%\266\222=\200\337\342=\026^\221\275\250q\025=\017T\351\274\372\203\207=\305bF\275\222\302a=(\275\217\274\352\340\241=V\323\277<Hf\035\275U>\241<X@\343\275\241\241}\275\360[K\276\027\216\253=\241\352\303\275\366&\255<\302\227\260=\365\264f\275\223\330\005\276\002\377\356\275\332:N\275!\346\230=\352\003d=\364=/=\356\236\224=\213\216\202<r\351B\275\006\372\207\275\254@\032=\321\362\225\275[SU\275oM\360=p\207\213\275N\030\344=\333\341\007=AHc=\326J\256=\375/\250=,wh=+^5\275\024\031\360=\327\252\345\273\245w\244\2753|\264<Yx\025;\2577\353=A\253\013>\223\332.\276\007\320\337\2744\374B=\224@z=\210\214F\275\201U\321\275\225=\242\275\006\275!\276\016%\245\274TM\243=\273\262\000>\245\010\350=\205w\264\273e8]=\\z\350=\004V\352\274\314\364T\275\357\321\210\275\006\243%\273\374\262-=|\270>\2766\r\206=\037\203\213\275\206\362\014<XI\3048\347q\356;\203\310\271=f5\270\275|\016\254\275\334I\243=\336\224J=1\357\242=\256Q\346\275V\246\326\275s\214\020\276\"\006,\276Y^\001\276\364\342H\275~\326!\276\030oL\274\021\250\274=B\013\n>(\305\035\275\253O\342\274h@\362=\036\211\t\276@\023/>\2077=\276\251%\232\275\343\026\256\274\2007\311=\364\240\030\276G\335\257:\300\266\321=\267\"6=\222#\270\275\347\025\263\275\227\266\320=`\274&\276H{\\\275\004\325\307=4\350j\275\256j&>\3474\202<\3517\220\275*,\273\274!\276*<\034>\">V\312);\221\326k=\036\364\234=\026O\206=D\242\352=\261\311\'\276K\247\267;\021\307\256=\022\367h=\266|\001>\217\305\357=]:\260\273\007\254\344\274\230\347\023>\206\237\276=\375\255\226\274\315u\226:\2768&=F9\"\276N~\231<*\350&\275D6\373=\300\267\346\275\236p\250\275}y\246<\214\3411=\000\277\365\275\002\341\006>.\032\346=\221\251C\276\235o\270=@0\223\275\364\303\t\276)\3200\276\354\362\274=\263\212?\275\n\303?\274\024\202\332\275T}\'>\213\323 \276\014\t\345\275W\203i\275;\213\235\274\267\233\003\276\\\025s\275\027\233\007<.\223\331=\344\200a=\262\006\261<\277\016\274<\267\016\326\275\024\372.>\0000\002\276\004Z\037\276\026X<\276x\251K=%\3410=\260\305E=\312\366A>\377\030?>IIT\275^\231\265<D \346\275h\217\204=\372\362\001>\267\313s=\220\203?>\226S\331;\001\031\377=\327\343\311<\207_\013\276\356\022|\273K\360\315\275>u\303\273\033\237\t\275\244u6\274\363\212Q\275\317\337\200=\364\320\024\275\205\210\014>n-\242\275\344\220z<\303Kf\274\224\253\226<L\235E\275i\377\271=|\342K=3\210\366\275\346!t=\347WC\276\35523=\003.\365\274)n\253=\005u3>\225l\374=\251v\223\274R\260 =\036V\233=\337\330\302\275\244\007\247\273\333\032\027=\210\212\343<\336{\365=\217\010\025>\257\017\006\276(C\235=`4\023\276\264\275+\275\017\007\000>\220\216\214<\370\346\023\276\240\3504=cz2=\364x\032\276v}z\275\353Z.\274d\220i\274\342\274F=\254-\342\274\257\303`<%\213\340=e\253+>\024j4\275\344\253\2549\001\371&\276\351\213\036\275\336\270\343<\034D\364=o\374/\274\361o:>\202fJ\276\201g\020=\204I\220<hQ7=\203\021\232\275n|\001>h\014\022=V\030\002=gS\207=m\363 \275\333\2730\275~\351$>rh\220\274,\031\316=\235b\273\275\030\343c;\'\223\033;\025\032\351\275^/\203\275\366\341\177=\362\317\010\275\201\346\255=f7\275=\236\r:\276\236\361\242<\003Nj=9!\313=$\225*\276\006\364\266\275\351\271\257\275{y4\274i\214->\034b\207\275\024\216\267\275\214\235(\276q\242\014\276\376\253\274=\251/\205\275+\214\347\275NJ\337\275&\204\023\274c(\316\274\004\033c<}\214\363\2752\001\350=z<\033=VK\317=\217\\\344\2754\0366\276\347\326\363\2755\322\273=\355,\024>[7\235\275\035x\236=\256B>=\2104\003>\353,\205\275Z\246\027\276+\364|\275G\370^<<\305\223=\026\177\366=\341\355\024\276\225\367\233\272*U\253\275\200\375E\274\335\317\271\275\037\021,\276\205z,<\311P\365\274\333|\031>\271\244\217\274\005\321Y\275\326\323\030\276$\214\030\276\276p8>\355\007v\2755\241\352=\033<#=\3235\356=\332\301Y\274\246\003\371=\177\247\322=\353\r\241\275~\262~;P=\':\305\240\033>\2446\220=\373-E\2751\214[\275[\232\203\274\024\372\013=\006A\336<P\2720=\211G\222<Q;0>\322\353\362\275\177\312\341\274SZ\271=\017\307\223=Y-=\273\360\004y=\337\253\364;(\270\315=\264\253N=2!\276<\213\353\213\274n\337\027>!\242\247\273\301\276~\275_\373>>\216\304\n\276B\234\r>\350\365{\274N\0041\276\0269L\275\256%h\273I\374K\276p\336\t=\013R\226\275WDA<\034\335\000\275\365%\010=\255\255\364\273\215\376\205=3\021\247=\306\247r\275vy\347\275\204\300a=I\013B>\233\212)\276\224\270<\274o\366\036\276kp\225=\334\244p\275\215B\251\275\034\200\006\276\2278\272\275\252\021\225\273@\026\241\275Y\241c\275x\321\035>\251~\224=1d\356\274]O\205\275\177.\311:\037\224\227=\231\360\370\274\377\026\216<\337\236\244\274\375yH;G\031\234=\360\035\301=b[\277\274\362<6\276y8\222\274\026\276\004=\177>\330=;:\245=\275\001L<\301\351L\2753\337k=<W0\276\020\n\005>\236\225\275=0$\001>\226\357\367<\221\267\203\274jk\376\275\025\331\010\276h\235\n=\307E >\202\344\211<!\026[\275C\034\342\275\212=\215\275\021\226\206=OC\205\275=]\222\2758\260%\275J\003\002=Bz\017=\304\322\343=!\244\002=\332\261\312\274\375\005q\275{\207-\276\341\221\020>T\310\310;\221#7\276,\234k\274\344\004\344<`\267\333\275\007}\311=xz\334\275\357\241\363=\310\300\013>q\256H=\371#\230=U\\W\275\3479Y\275]\326\272<8\340\n=\300\226\340\272X\312\r=#\265\363=A\314\333\275\304\332-=\333{\243\273\326\007s\273\266s\334=()]\275\365\202\370\274\321\342\213\275\244\241X\275\214\3366\274\361\251\001\276\t)\333=4@`\275E\207\006>\247\027\207\275T,\336\275\374\260\301<*\370\354=\357\370\343\274\242\023\313=*\234\001\274S\256\302<\016Ka\272\275\364\026\275\025\300\202=g`g\275`\261\323\274\353!\241\275\241\352:;\307\214\346\273\305sI\274\",#=\261i\260\274\257d\371=,\245\323\274\014/\312\275\250\'.\274\335\3545\276$\031\250<%\245\247\275\000\rg=\327\021\026<?\2350\276\203\003/\274\260\256\214\2747l\357<$\364)<\303\217\253<\006.k\275\360i\014\274~\213~\274\340]^\275\361\2737\275\023\204D>\037y\304\275\377\262g=\224\313!\275+\345\013\276\237\371\332=\0137R=9\343R\275\2113\264\275\314\023\365\273;\226\226\275\233;\003\275\034\212\214\275\301\226\035>l\362i=\376\211\273=R\377\276\275C\230\356=\271\360\265\275\214[8>\263\367\207;\357\267\n=4\3560=zl\204=\262\000\034<\323\n:>\034\372\026=_\000\277\273\264\3450\275\362\305,\276c\370&>L\266\321=\031p\320\275\305b\265\275\260\200~\275^\325\216\273\034m\263<J\013\302\274\353\205\375=R\\1\275\254\264\"\276\253\323\300=\0309\255\275\377|\247\275\032\267\213=\354\304\304=\021\306\215=]v\362\274\201w8\274\242\333\036>\220\313\331\275\264\252?>\037&e<;\3106\273M<\273<\323Q.<\3439\037=\234sx\275fN\232=p\203\027=j\205\211\2749\224\351=\221\214!\276\270j\250\274:\033\355<\002\000\311\274\317\257\014>8\321\"\276\325\264\204=yw\016=\3001\"=\204,\247\275\325\347\312\274\225u\302\275\362\256\245=bs\002=\213\313\">\247\020\t>\373\217a=\376)\035<5\304\022\275\017\222\021=G&\377\2743\002\224=K\217\300=#G\315=E\020\200=\227\3054\274\334\326\030\273\261\367\276=\205gU=\026\213Q=P\366$\275K+\020=\037e\246\275\346\346\026=!\302\363=-\322\262\275\337\360(>V\033\315\275\014r\034=\317B1===\225<\t\351\031\275W\220\371\274\343\250\301<\314\025Z\2754&\261<6\2671=\001\364\021=\\\020\306\273\020\220\230=I\240n=#-~=\231\201\"\273\351\227h=\212\355;>\377\242\373\275V\376\373=\372\010\244\275\336G\333<P\231\312\274\325/\314\274ka\310;Kd\365=\246\322\022\275\351?^\275\007o;>\246\367\307\275\223^\300\273,\356\214\274\377%\t\275\001\276\004\274\341y\036\276\377\212\214\275)\2374\275\212-\006\276+\307\312=\273\222\333=\031\n{=x\314Z\275\373\201\\=\230\365#;0T\024\276%\3103\274\304z\325\275\355\305j\275\363\020\255=\307M3\275\302\212\016\276\206*5>q\222\303\275\026\373!=\343S\346=\200\"@=\332\240\246\275\252\313Z=\037\021\205=\027$\000>\357zK=\326D\244=\020\252\023=\373I\034\275x\360J\276 9\203\275\223\035\016>\016\037k\274\346N\304=\367F\"=1\354p\275\241\361\200=\037\354\354=\240{u\274\205\354-=\013^\205<\352Y\204=\177\261`=j\335\271=\343\265\201<j/R\275\000\003m\275N\0338>+\336`\275\242}7\276[\313\375\273NME>\035\020\302=hZo\275Y\035%\275w\260o=\307!\232\274\333\340\006\275}\376y=D\210\346\275Q\374\037>Q\016\006\276C\264\024\275\230\223\327=\224g\001\276w\005\320=\342AG\275\001\026H\275\354Y&\276\024\245\024\276d6\n=5\251\000\275\332\036\013\276\356\241(=\207[h\275\204\251\n<\326\334\227\275$\377\200\275\027Y\327=\331\216\271=rk.\276\2042\361\274\203\307<\274\253V\212=\316)K=\017Uk=\351[\234=\342*\273\275\'\356\234=\342D\256=(\347\002\275k\r+\275\251\226\034\276\033p\223=\224L\365\275`\340\320\274\356\021y\275\2634\027\275\243\330\322\275\375g\330=\261\331\200\2754\327\026\276\026\344\357\274c$\257\275\0132\210=\n\227\017>1\305\021\276!W\236=(\215[=\235\374\302=&\376\033\276B\333~\274S\213\247\274B^A;\225\224\004=6\337\206\2756\000D\275\346\354\"=\373\306\317\275\324\245$>\002>/\276\035E\204\275\357z\203<K\203\205=~\271\030\275y\360\360\275\300\026J\275U\007\223=w\365\324\275\037\027\220=\221\'.\274\360N\010>\235\375\210\275\226|Z=!6Y\274=\026\204\274~l\331\275\334\360\231\275\360\234\003>/\231\236\275\253S\372=\367\263\315=\265\341\244\275ilP<m;\247<\366(\331==\356\"> \312\014\276*\261\244<,\210\253\275(\241\361<b/_\275\263z\033\276\364x\204\275\247c:>\335\340.>/\0005>\370g\277=\265\271\200\275\211J!\276?\022\243\274(\242t\274\332y\215\274\341\335j=\035\317\221=\337\237\026=\365-:=\235r\343\274\365\227o<\003\376\300={\363%>\272\006\236=\276\350\006>\337iv\275\375E\302\273\267\356\277\275\231\2120\275\334\316!\275`\343\231<\343\2537=\261\014\037\276\322\323\000\275\3349\014>\222\242\t>\241\347\010>\252m=>\022\203Z\275\312i\327\275\352R\262\275\342\374\246\275\204\353\325;\232\214\203\274a\234\010\275\334\371\353=0U\351=\021\275\211=\260\346\324\275\224o\355=\'\030\315;\324\344I>\021d\r>\0216\350=\244~b\274C&\331=\001Z\271=7\033;\276\024U\357\275T\305\\\271\330o\366\275\204\025\007\276\203P\223=\317\277;\275\014~\n\276\311,\265\273\036\271\327\275\t\312\016\276:`u<\000\255\241\274\002\326\226\274\356\267\231;\356\032L>\313\005\325\275\263\325\003\276\217%%<k\324\347\275\377\247\225\275\324\t\033=\004\333\214\275-a\r=\374\211\027\275\215\355\312\275\232\010\026>b\347\221=K\315\260\275\225\027\267=\242\345r\275\304\177\375<\256\316\017\276#-T\275\313\225\021<\363\260/=\217zn=\"\375h=e\017f=\245%\350\272\212T.=\331\t\r\276\267\026\372\274\344\253\014=U\250\n>Aj9\276\226\014\374;{z\013=\027\340\226=\267\356a<\212{\244\274\201\355\327:D1\177=4S\005>Nm`=\021\341\224=\226\017\252=\355\255$>\210_\216\274`S\241\274G\224\343<\241o\256=\010\224\217=\246P\317<\233ur\275f\316e=%AO<\241\361\353\275\013\372\355\274\3455\221\275Y\232R\275\376\246\245\275\267;\340\272\335q\236=\235~\215=\337[H\276Y\242\275\275a\375&=\373\320\301=\360\014=>]e)\275y\271\261<\337\036\333=\247I$\275\262\254n\275\367\307]<\005`\\\274\036@;>LZ\246\274$y\352\275f\n\355<QC\273<y~\260=\216eh=\331S\360\274?h\276=\3372\345\275\211\260\255\275\252\313\000\274\257\370J=\200r\022<\277\301\243=\235(\366=`\204@>\227r\205\275h\007\354\275\312D\030>Z\337(\272G\340\317=Sw\255=|4\301=\013\031\367<\216x1<\013\305[= \373o\275X\251\207\275\222\301\327<\362:\362\275$\'\231=\030\372\037\276\013R\233=\314\3069\275\016\376\364<\200S\014\276\307\377\232\274\362r\251\275:\027\274=S+\t\275\024\237E=\250[e=5\253\017>\344}\310\274\207F\244=\313\310\267=,O3\275\nY\025\276@\333\307\275X\215E\276\006\367N\274fa\r=\272\264\217=_9\022=\324\014\030>+\373\206\275\314cH\276\n \336\275a\273\367\274GKz=\306\336\267=%\244#>\\M&=kk3=\021e\352<\265L\360\2750\342\264\274\301 \215\274\340\337\263=\026In\274F\371\210=\245\216|\275\350\353\331=\274\370\376\273\034c=\275\t\375I\275\317\023\235\274E\265\354;\224 g=\335TG\273\357\332R\275U\275\253=\200\307\227\275~v\311\275D\203\204<\333\036:\275J\t\310=l;\345\275Z\2111\27596\030>\226i\211\275`x\252=\360\234\331=\224\351\247\2759\324\205=\230\223\034=\225h1>l\244;=P,$\275\331\335/=\301\364\222\275\177w\023=\247c\013\275\020_\262\274O\030\261\273H\007\032=O\203$>\221*\344\275G\023\001>\254\361B=Y\013\352<p.\324\2740:\254\275\306y|:\337v\377<\221;G\275_\263/>D\337\204\275\223|\002>b# =\025\220\360\275*\354\270\275u\006\007\276\003q\311=\031f\354;\307;\322<\341Q\323=K\254[\275v\271\220\275\373Q\216\275\227\376\360\275i\242f=\264e\204\275\331\013\342\275h\2447;R[\030\2755\3048\273\254\363\212=\237\345!\276\231pY\275!d\035\275~g\203=\023\036\233\274w^\376=w\017\001\2759)\276<\214\240,>PM \274qg\301=P\367D=\262H\237=\322\200\023\274\264\203\206=\3431?\275\017\220\350\275{q0=\305k\004>\\\220\222\275\023\330\036\276\222[\023\275\357\245\324=\275X5>\230\330\342\275p\202\002\276-|\321\275\006\300\357<\217\2711\2765\002\225\275)\314\013\276\014%\014=\\\305@=o[S\275\215`P\275\247\274\305<\311\212\361\275\'\3778\273\237c\227=k\227$=\241\222\251\274\215\030z\275m!`=\325\260\033\276Uw+<&r\357=\275w\211\275y\245\200\275\013\327=>Zl\224=.\230T\274\265|\023=\232f\252\274J+\267\275\0243\240\273\333\006\021\274\267\212\300;<\324#\276\276L\323\275Z(@=)\215\336\275\236W#>\026\342\210\275\215\370r\275\\/ \276\205\354\177=\240fz=\t\365f=\336\033\215=\333\337\004>\313\274\242\274e\376\232\275\257|\366=\362R\307=x\0237\273F\347\225=\313=\371\275\006D\370\275\017\340w=(\363\202\275\306\220\014\274\2021];/h\303=\036\237\220\275\013\331M<\034n\n\276J3[\274\315\367\245<G\352\251\275\344#\224\275y\325K=\177\350H=-\314\222=Ru\020>y\306\310\275R\250\225=\343\337*\274K\235F\275\361\211$\276\351a\031>\350\003r<#\221\007\276>\\\245\2752\336X=[c\323\2753\244\017\275Di\335\275\225\222;\273\013\244\346;h\321\n>00\367\274Y)?=\375\300\272=\230\241\236\274\217\377\225\275\256\332\321\275\230\357\r\276\337\331\240=\316\322)>\000a\232\274K\242T\274\0253k=\314\222\266=\002\314\\\2757\007\205=~)\022>\264\314D>L_\253=\370y\013\274&\207\256<U\027Y=\232\t\261:\307>\362\274y\'\371\275n\345\224\275\2001\235<s|\300\274/\200F\275\256\254\322<?^\000<O\026\317\274{\314\326\275{:S<G\236\027=\337\227\225\275&\277\030>\350\321`\275\344\322\212=\246\200\212\275,\262\026=\330\346[=\323\350\363\275\3052O\275\265\331\024\276/\362\326\275\026 \212<\013x\303<\332%\r>Fis=\000\327\276\274\032\222\007\276\225e\320\275\212\225\306\274\262\303\227<JWn=\rl&\276jI\231=\rm?=\\\2565\275`\355\307\274\014\250J\275\026\036\363\275\r\317\200=\340\223\345\275\357\021\337\275RB\000\276n\262\310\274\334\302\034\275q4/>5\266\221\275\244\302&;\204o8\275\300\001\276=\275Q\202\275\246&f\275\'9\301=\253\307\n\274\206\365M\273\241T\251\275\226~#\275\354\265\364\272u\310\347=\341j\366\275/\347\354<E\375\332\274x\366\003<^\371r\275\3769|=\\gL<\343\000H>\226^\304;L\000q=/\013\267\274e(\025=\231,<>d\257t;0N\"=\240x\232=\206w\346\2757\';=rsv\275\333\245g=\r5\026=\331\242\276=z\230\255=\361q\206\274*,\277=\204\276.>\026\271\027\274?V\201\275\344%\246=\036\243\002>\347\240\r\276\tb\326\275V\346\372\275\031\020?\276P\212\016\275\374TK=[n\307\274z\3466=\013\027Y<\353\032u\274Z\241C\276@\3565\275\003\263%\275\033U\205<\002\246\032;\372P\271=\374\367\367=\\4\304=\221\334\361:K\342\206\275ej0>\255\010\334\274\232.\270\274@\356Z<^\372@<\254\314R=\255\267\377<\331\036x\275/R\242:\032q3:~\265\004\276?[2=)YS=\330\004D\275\355\357\004\275&W0\275\202\350!\274IF:\276]/\274=\321~\003\275\253=&=\027g$=\305\366\274\275c!2\276$\016\n>\t\244!\276\"\376\313\275D3\033\276\267\313{\274\010\370U<x\327\326\275\0353\244<\330\217\215\275\364\201*\275\261\314\014=G\265\021\276\307\276D\275\252^\205\274U\373\206<?\310H\274\213\256\337\274\2518\207<<&S<;\264\214\275\030\010\007=\001\340\020\276\350\013\300\275\001h\002\275\311W\307=\221IF=\0005\213=\306b\234\275\374\212X\274a?\024=L\2462>z\3473\2762\010\241\274&\227p\275\352\376-\273\216\200\021\272\314\306(>\262\003<>-\230\r>\301Q\\;;\365\202\275p\216(>\2356\223=\254\017\253\275\341\203\262\275\342\3547=\226(3=\360\277\000\275\277\272\342<~)\375<\260\204%\274E\357\'\2766\227\240\2756/\207=\2643\274\274\034\261\221=\355\323(\275-\326\037\275\004\202\237\275\254\306!>\250\243\304\270\230\0134>\245\216~=\030]\216=p\232\r=\347R\005\276L\360\017=\240\221\220=\350nC=K\026\255\274oe~\2753\026\335<b\252\245\275%*\257\274IA\016>\316\211\221\274\003f\310<3Ny\275\010m\366\274U<->^_\267=\322\246\222\274Ci\255\274\307\006\245\275\273\032\353\274\263\200\261=oF]=\24190<\211\001{\273\020\274\270=S\336\227= \344\303=A;\n\276\267z\003\276\324\375\035>\261\245\351=\254\341W=\274\245(\275U\316\032>\010xH\271\214\223+\276\314\017\323\272b\t\364\275]\0061\276,n\304\275\234\264<>\214f\"\276\303!\003\276\014h\004=\321\206*\275F(\320\273\260\247r\275Z\334I\275Hg\206=\2113j\275\2032\336<,\200T\272\024\0332>X\226\220\275\372AR<@\247B\276K{G=\220\"\r\275\341h1\274N*\017\275\344\374\311=\177\315A\276T\272\251\275\375\'\254\274\374J\371\275;\250\232=\371[\263<h1\006=\035\265:<\263\323\342\2731\372\237\274\010\315\240\275\204\026\202=O\000\010=\374\311\032>\353\260\343<\306\303f\275\260i\235\275\373F(\274\343\345?\275\215\276\230=o\354\315\274+la=\343\375\266\275\3308\313<E\224%=\275c\r;\307\024\r>\211\2715=\355~\323\274\336\2021>3F\226\275\033\247\310=e\016N\274\000\276\317\274\337\302\311\275\262\374\342=\360&\035\276^h\314\275\360\r\357<\005\017\336\273\314\\\276\275\304C\030\275\001G\261\275\323\233\337\274\357\252%\275XE#;\2761\003>_$N\275\242\203\'\276\356\300\265\275\240D\002\275\344\303\'\276\006\356 <!;\313\275\'=\031=U\213\037\274\302)w\275)k\302=\274S1>4O\310;\316~\271=\020@R\275H\243\243<\214;_=5}\302;\002\014\366\275\3024\271=\234\201\343<\274\261\025>!A\\=J\017\026=\255\2557=}\255\210<\377\202\025\275]\324\223=\350\\\014>Vhm:\262p\022>pm\014\276\374\247}\275\341\005\363=\334\372\253=\223J =\037\300\366<\'\356z<X\250==\224V|=\032\253W=(\023\234;(\032\222=\305\2166=\030XG=>\356a\275\003GF=\370\260\027;\303\tC>\246\264\261:\271\300%\275\372#\273=|\023\344\274x\343\201=\370\211\025>\336\033\006>\032\354\031\275\026A@\275\216\212\334\274\024S\'>Ek\016>\017\253\235\275=n\023\276Ol\215\274\351\337@=\340\005\240=Wq\007>[\201\222=\342\372\254\275\317\276\365\274\240iG>\300\304\305=NGI>r\275\014>L\372\255<\'\317%>\302\242\241<\006L\215=H\355\020\275\224`J\275.gk\275\322\247\013=\346\227\224\274A\253\275\275\265$u\275\377\023\317\273\276\216\246<\200\340\243=\274\306K\275\201\373\000\274\026b-=0\270\242=%k\204=4\246\003\275G3\354\274\025\233\315=S\335\203\275\2244\243=t\257(\276\244\264\264\275\253\364`\275a<\267=\034\210\177=\026\020f\275\036\001\373<\013{!\275\023\332\321\275\361\217\306<\335$2=\256\256\321\273\360e\303=1\315;<\253\013\316=\373\262\336\275\255\273\370\274\330\030.\276\366A\304<B\233\223:\277\270\r=4\277\001<}\355n=c,\331=\367\277\257\275\340RJ\275\272\272\231\275\211G.=\216\372\251\275:\001\022=\217\365\220\275RJc=X\rg=\316xq\275\317\2746\273\251\005H\276\226,\t=\3059\031\276d\346%>\221y\231<\024+\325\274k\351\324\275b\241\335\274\2733~=e\301\303\274\260C\021\275\362\235\"=#*\317;\265T\022<\340\330N<\314\036\024>\311;R=\340\203\300=\021\370\203=\342\266\003\276\303\336\022\276\201\355\033\274\333\301#\274\305\3761=c\030\014\275\0302+\275\250\235\325=\032\305\371<\000\261\217=UZ\336=\233;\342\274j\215r<u\342\234\275D=\213\274\246PC\276e\261\266=\r\277\242<\361h8>Mi\037=o\244\224\275\014|\225=-\365\223=b+)\276\363P\213=\312\020\365;1gh=%\215n=M`\302\275?\360J\274\t\214\373\275\201\210V=z\365]\275\371\215\007\276\337\217>\275\300\336\\\274P\374\035=\254\037\253\274\017C\364\275\313\206n\275H2\023>(79\272\327\1771=\360\252\303;)\252\272=\351e\3719m\370\030>\034\261\207\275\\9K>\277\000\245<\354\351/\275l\313\246=\352\010\345\274I\203<\276\253\270u\275\377\233\252\275\021\243\241\274\313\362\301\273\020\017\005=E\276\033\2758d\026>\235%\316\275\272\031\013\275\336G\313\275\236\230\025\275\356b\234=\212\315[=\267R\005\276\220l\262\275 \037\326\274;>\372<a,\031\276\260+\242\274{\352O\275\3316\035\275d\220:\275\373j\263\273p\t,\275\026\355\034\276\217\262S\276}\206\216=?\260\347\275(\370\350=X\323\265=0\305<\276dO\037=\202\223\205\275x*\246\275W\272!>\311\340\032\275\374\377\346<\r\215->\255n\020>\306\027\345=\312\261\010>\241\361\344=\367(\274=\002^}\275\314\211\244=\005|3<\353f\217=\022\324Z\2753>\243=\253\240\236<\347\240:=\222\264[={\205\361=\233p\017=\344\352\230\275\374\375\200=\031\"\372\275$,\323=\244\276+>-\000\014<hn\351\275#\331\207\275c+5=\364\033;\275T<\365\274\332\323\312=\256\314\257\275\271\"\336<z%\320\274\303\177\256\275\307DQ\274\256t\267=A\255\357\274s\021!>\333!/\276\350Y\252=\204\023\213=\350\262\223<CKB=\232\203\370\274\236WD\275-\263U=)\314\246\275\332\224\323=n\276\021>;\006\'\275\013\350\226\274\330\366\211=\207M\314=\277+\305\275\325@\223=\3039\334=\247\026\250=\000\346\327=p_\221=#m&;\343\347\026\276(\244\341\275\"\217\315=\305\"H<\337s\257<d\024\275=\371\301E>\351Q\037<\263\325\226<9W\301\275\301\226b<\207%\267\275W~\342\275`xG=\361y\024>\340\313\344\275\245\276C\276\221f\350\274\354\347\036\276\202\254~;\310\333\336\273\013\035\260\275\324\344\226=3y(\276\232\315\275<\324Pp=|h+>\342\250<=$\366!=>\332[<\214\241 \276\220Q9=V\202\345<\003x\241\275a{t\273E{\320\272\366\177,\275\372\373\222\275\340E\330<\240\365!>C\ni=\333h\206=n\006\313\275\\\312!>\370\030\200\2744\273\203=)\210\324=C\376!<CQ\226\275%\340;=\227\345\202=\267P[=$\023\341<\263\257\r>\311\205\033=\037\004\370\274\317C\022\276\253\224\325\274\313<\326\273d\311+>\007\201\026\276\215\333\261\275\265\237\004>\215\030?\275\225\261\334=\005\262\337=\210h\306=\326\267\355=\237\014\312\275\272\310\227=\221S\006>\\\323\370=\033\265d=\\\2503\275\215\304\256\275\207(\324\275\274\304O\274UE\215\275S\313\014\276$\327\n>\3778\332=$\360:\276\341\004\304\272\3343\312\275w\037E=.\210)>0\307\374;\321\302\333=\221t\025=\334n2>\224e\344\275W\253\232\275\303\\\037>\013\310Q\275\344y\323=\220+p;\000\355\032>\0211\230=z\370#<q\257`=0\254\271\275<\371\305=\247G\256;\333\346\275\274O\002N=\265V\021>\315k\374\275D\230\030\276+\246\232=+\300\r>\027\335\263=\262}\320\275\314x\247=\340\325\356=\211\366\214=\210\235\001\275U\3078\276A\226\364=\234\241\201=-\357\r\275\261\2770>?\367\255=\234\222\247\275N\305&\276S\234n\274V\377u=A\314\036>_\247\002\276y1\001>\305\230(\2757\350\205=\016\210\205\274i\236\325\274\n\031M>\225 W<\203\206*\276\205\234\311<\275\206.>\364\313G\275Y\364z=ou=>\345\217\265=Lt\376=U#\362<\250|\350\275Y\206\330\275\361\345\225\274\035\317\211=$\363m=g\260\006=2\245{=\362\013\236\275\211O\353\275\276I\216=x\252\213\275\341\336\341\274\310%3= \222.>7 }=Ew\020<\233I\020=\r\031\274\274\251DF\275!\006\237=\215v\363=\373\026%\275R>\201\275\334\336-\275\\{\025\276:\254\330=\205\354\t>kL\376<\317\2263=\254\0172\275\240C{=\236\002\214<\022&\357<\261\'p\275\237\231\325<Kp\207=G\347\304\273\240\277P\275\252pI\275\262\323\307\2747\334\"\276\367c\214\275\240\363_=!Dm\275\230Q\n\276\334\201]=1\014\340=k\022\252=7\265\302=2\230\277\274\263f*>p\375\223\275\030\332r\274gG\372<y\341\354=V^\274==2\314\275O\025G\276?\351n\275\311\200\227\274\237&f\275kM\366\275|x\342\275\333S\032\275\362\020\323\274\026\341+\275\027\034\021\275\337\375Q=7`\220=\213\361#<\345^\235;9\356\013>\302\241\242\275\013\261#\276\216\027K>\323\2130\274c\013\364\274\3358!\276)\366\226<u\213\261\274\320t\034\276\201\343\010\275\207\272\037\275\203_\237=cd,=\365#\032\276\202\000\236\273\354\240\375\274\3201\t=\031\220\030=\312]\320\275\344\325\005>I|&\275\t_\033\275C\232u\275\251Q\306\274R\357\216=*\355W\275<@\261<Y\276\263\274\022\341\254<\353@\032=m\302\025>\263\234\010=\322\264M;\014\351|=\324\365\221<\234\266\002\276\362\032\374\275\320\2666\276\003\235\310\274\033\221r=\304n\037\276j\363\237<\345\216J\275E\263\030>[\246\001=|a\014\275\3571\257\275\305\244\032>\017W\226<\243\276\"\275(\251\032\276\367\275H<AW\005\275^_\243\275S\220\310=^\035\023;\275\226\241\2757\234 \276\274\301\347<\313=\255\273\0331\341=\301\300\031\275\361\364\245\275m\351\342\275\233\246:\275.\254\343\274p\317!=\244 \257\275\276\310\227=\000u-\276@\3527=d!F\275\362h\303\274\267\n\000\276\352W\322=4\365\037=\371\302\271\275s\315\375=\330\350S<;\032\004\275\364[7=\205\361\002\276\264\233\312=\356\254\231=\205\256\257=\206\236\262\275p\207\274\274\365!\003>\366V\367\273.\205\201\2742;\206=V\206/>\017}\010=\247\355\016>w\341\217\275\\\237(>\004X\347\275\'\3417>Dv\000\275\026\320\211<P\312\350<n+u=\352\224\246=o\351\311=B\233U=\354\235\276=\240\370\202\275l\274t\274\251\r\325<\332*\262=\320\277\001>2T\177\27542\330=;\351\002>\001Y\300=\3631\337;\255\324\241\275T\231#\275\320*!\276\334\203\272\274\177\032\233<\325-\371\274\303\3101>l\222z\275\225>\333\274\311l\">\253V\021\276\r\306c<\316K =\314u\026\275I\'\024=Vc\226=\272q==\356V\005>\014z\246\275J9\225\275\33223>\3712\277=\235\003\231\275\006\002\360\274\361\373\357<>o\211\275\377s*>\376\003\225\275\343Q\263\275\302\234Z\275\272\003\262\275q\301\004\276Qr\033=f\301\271\275\203\251\365\273\376\207\317=\376\025\030>ta\355\274\272M\035\276\234\307C\276/\031\247=n\300\374=g\3115=\007\327.\276H2b=c\327 >\2057\216<\335\202\205=\022-\004\276M\177\236;\033;\250\274\216@\032\274+@\354\274\307^\034>\030xH=n3\026\275pL\036\276\361\375\024\276\246N\026\276y\254t=m\226\373=~\255I<\312\304h\273\277_\214\274h\370\226=\004\327\362\274\225)\273\275\364\235\225\275\327\365\037\276\265\217\225=\037\344g=@\344\315\275Nd\212\273:\376\020;<\361%>\020\215q=\304\375\022>\231\336\254\273\212:\016\276\360\365\207=-\227p=|\207\023=\215b\207=q\215\007\275\004D\247\274p\023\361\275\240j\267=\337}\252=1g\t>\265\377.\276\253\247%\276\336p\373;eZ\027\274\335\333R\275\345\021+\275\177Ov=\370\212\223\275\256i\245=)n\366\275\361l\341\275Q\224\000\276q*6<y\034\256\273vi\202\275\362TF\274~\306\243=md$;\232Yw\275\322\272m\273\350\233O\2740v@>\263\354\017=\231\3039;\3308+\275H\271\352=\332\214G=\210\320C\275\323\347\266=\271\260\016\2746\241<=\2228,=\235!\360\273\023,\264\275\r\300\250<\270\261\332;r\312\244\273G\336\240=\204M\373:4\313\000>\251\211\245\2758\031G\275\207\327\260\275\246m\203=ac\231=\305?\021>\273\020\200;ed\222\271\307[\264=\363I%\275\274-\277\275`-U\275\307\004\307\274\t-\231\275K@\241=eK\205\275(\264D\275e\226\225\275rj\374\275\267Y\222\275\004h\327\274\207\003\361\275qjA\274!\n\332\275\311\'\003=\372\325(\275\002 \351\274\364W\006\276\333~\236\274^\306\006\276\221-Q\275p\255x\275\336!\216\275Vx+>\320(\360=*\224H=x\375\241<\203\254\014\276+\335\207\275\213\2755\276\214\265:\276\313v&\276mi$=Dg\214=0-\n>\257\017\346\274,\373\231\2752\307O\274\325\352\224\273\326\'~=\353\017J\276\032\276\250=\250tF\274E\271\001>~_\264=\020\007\357\275I8\243\275\247}M\274\267J\225\275\332\250\304\275\275\373\020\276\360{t\2753\331\334;P\3161\276\006\005\222\275fA\320=\003\201v\274\351l:\275\3522n=\334\263\301\273OY\210\273b\366\334<?\362\230=\330\305\020=\010gv\275\357\313\345=\0362\340=\3741\315\275\372D\252\275\321G\000=j\325\366\275#\372\030\276\335\002d\275\352\001\007>\247\324\007\276\207M\216\275\327\226\236<Q\304\003>\016\002y;\211w|\275\244\336\357=\356\022\343\275GJ\225\275\271f\027=\257\312C=\214\273\370<\353&\307\275\r\275u\275Q\250\360\275\254\371)=/\027,=\216%I\275\330*}=\254\233\274\275\272\227\357\275\343\271\273\275rV\351\275k(\352\274\266M\026\275M\330\207\274\240\355I\274C\1770=\201\225\034\276qL\260<9\247\336\273\372.\002>5`\223\275\257W\221=\205\266\263\275\307\330!\275*\371\027\276\014\367\355=\211\'\335=\265\305\264<\237E/\275<\321|\2748\241\341\274\336\376\302\275\023^\327<\271\310\253\275\334\335\210<\301\373\360\274\013\020\\=3\343\031>q\276\206\273\251s\353\2745\231-=\003\231\014=\r\266\r=\"N\260\274!t\026\276\237)\274\275M\205W\2759\355\246<\373\214\251=\371\216\206\275h0\357=O\246\210<W\001\236=\267hk\275i\313\253=\262c\302=\261\0348\276\242\307\200\275\213\231R=$\225\013>\337\244p\275\256\025-\275\313\313\204\275\202\213\017\276ElH=\315\261*=\023\376\273=\036<\215\275\242\357\227\273$\346->\226)\247=rXm\275.b\037>:\276\000=\212\211\313=r\201\321\275>\304\311=\320\220\234\275R\367x<\355i\205=\037\354\263;\323s\005>\365\025\n<p\252y\272q\203\250\275\243\033\267\275Z\342\373\275\177\'\320\274\301\310\270\2741\231H\276\022/$\276\374\205_\273\377\363\031=\211jE\275\253eK>\345\221\202\275_\255\233\275{\370\026>r\266Y<\214\367\316\274m\243\236\275M\316.\275\221{\003>\t\321X\274\352{\201=\310\000\002\275\240\260\253\274X[\225\274\305`\'\276\223f*\275\313\301\225\274\331f\222<>\240\233=\237\004\231\275\347\004?\273L\375\224=:]\"=<\242\255<\003Y\300\275\2779$\274\363J\307\275\271\267\371=\317\376\224\275T\350\036\275kHB\275T\021\024=\216\302[\275\347$\255<E\375\243\275\220\237 <\016/7\275\206\365\231=_\353\257\275\027\0106\274\226\303\255\275 \\\343\275\261\262\270=\220-\265<h\267\261\275\'\r\240\275\370\276\t\276A\037\227=F\373\0029T\270\233\275\202\304g=\364\376\314\275.O\001\276\21577=\017SK\274z\344\254\275[\346)\276\216\303\017\275\'\254|\274\313\367\215<\251\203\354\274_}e\274\356\r\235=S\352\005>I\256*\276\306\363->Di;>#\333\025\274}\2129=\224\244\265=\227Y(\2744P\213\275\240}\022>p\275\340\275T\233-\275\223\2564>V\244\241\275B8\013\275\327F\002\275\251\237\007\276\301\206\250\275\200\262s=\026\363\301\274\372\351/\275be\'=\r\rA\274\372\315K=\307U\3279\203@A>\t\001\020\276\322\232\t=Aq\354;\022yB\276\322\nA=\324M\241<\322u\263<\357k\003>\\Q\026\275\373@;>\305~?>?\233\216\275\310\n\257\275\004\201B\276-\307\234=\253\013v=l\217\254=\207 \241\275\232b;<<\222\253=\270`/\275y\325\347\273\005j@>/\227@\276|\302\000\272\3434\265\275LN\254\275m\213E=\233\3147>R\275\202=\'\024\374<\367v\374=]\224\367=\\\305\027=\306\265\002\275\244\3049>p+\305<\243B=\276\214_7\275\343\321\200=\352y8\276\361~Y<\202\027\217<$b)\275\206:\254\273\212]\n\276%\241\327\275[\276\211<@<Z=\3140\331;\221I\313\274\r\367>>\351\352\007=\303\305\351=.\300o=a\243\331\275\373\010\357\274\177\267A=\256\"M=\302sJ=M\351\374\275\254\007\222\275\031;\373=\250Q\276=\240\334\200=\371\031\216\275\271\036\260=Y\354\306\275\227F\356\275r\362\266<\002\241\032=\224X\r>\023\352\321\275]\361D>\324\374\033<\334\364I\275m\301\336=\327\234\202=\300\266\275\275\213\201\317=\325H\364\275f}\233\275;\202\361=X\025\234=\246\227P\274\316\333\356\274\221\037\n>\363\262t=\252\274\004\276\304\272}=DXO\275\220J\225=\264\221\360\275O\333\251<a\236u=\376#.>K\017w\275\240s-\276\305a\360\275\2002\333\275F\321*>4\226\010\2753e6\275d\361\342\275K\007\225\275\356\n\'\274\025\335\303=\001j\017\273\314\010\035\275\026\304\346;\033\324 >2\312\212=^3[\2759\246\352=^\016\322\274\000\271s=\350\312\240\274\036\212\004>\311r\232=;\244\034=\303\205\351\2755\264\206\275B\331\255\275d\t~\275\022\220\204=DOq=\\\304\"\276e\217\252=9\210.<Zc>\273\177\272\310<\316L\002\275Be5>%\2300\276\330\026@\275\227\243\n=4\276\272=\334o\017\275\342M\212=@\335\"\275\346\027C\275\r\010q=\nU\306=\210p\353\275U\"4\275\220\263\344<\271\305\313\275\242H\212<\272<v=\330U\006\275\230\273\305=\367\263\204\275\264\013[=\344\340F=\316\356\026=\234\304\304\275l\275\326\275\002\333\255=\216G\275\274\350\324\006>\031\312\026>\340\330A>\016\3400>,T\341\275\334\016\205\275\2758/>\002\034\025<\322\003)\275pO\260=o\2733>\300\375\220\273G\334\277\274y\325\322=\234b\203\2750\305\032=\016\215\013=\377\003)=\377\242\261=2M\343\273N\330\262\275\242\007\270\274\200\027\320\275C \262<h7\354=\024\264/=\255\267\177\275j\351)\275\226\032\241\275\224k\003=\237^\021>\350\321\316\274A\310\225\275Ow\355\275o\325G\276\365\265#\275\342v\361\2758\230\242\275\370\342*\276\264\310\272\275\034X\313\274\266Cd\275\214\2167\276\233\335\005=\212\317\233=\347\214\001>$\313\331<\256\377G=\2614\200=\253=\363=]\353\006\275\021kI\275\364\240,>\000\273\305=\333w\004=\321\231[\275?\347\013;\360\021k=\216fI\275\337@\234<\313\361\215\275?\317\020\276\3247\370\273\223\362\221<\200\361\274;p\022\350=2@\332\274\304\304\006\276\032\366R=+7\363\275\245\343l\275I\255\257\275\272L\033\276\\\276\361<\267M\367=\255^\301\275\242\234\037\275V\205\303<\354K\006\275\361r\214=b\177\215\275\357/\007>X\263\033\274W\376z=\266\362o<\244\305\235=\253L\254<\350EE=\326\2078<\225[\221\275\205\377\314\275\216\204\t\275n\252\263=S\272\352\274\344\227\342=\234sa\275\241\375\242\275\rJ\322\274\340\254\252=\031\273\244\275\367\216\027\275aN\350<\370\206+\276o{\n\276\357H\256=\363\007,>\022\317\035=\232v\351\275\014\027\004\276\231\243a\274\003\014\260;\240\201\003=\320\033\372\274\211d\307\274\344Q\246;&\245/\275\211G\222=\351\347\332\275\022\014\022\275r@\024\273:\371\316<=\251\232\274\257\214\346\273(\222\325\275L\254\022>V\311\244\2751\363L\273{86\275\342\276L\275\324\262\242=\033)h=\372\260\336\275\337\031\r\275\252\321o\275\030\247S=\302\0218<cnI\276f\222D>\320\313\003\276F1\213=\321[\232\275\354\r#\275\353\375\030>&\230:>\365\224\231=\233`D=\262y0=Em\353=\005d\017\275h\230\307\275pw\262\275\213\323|\275<\345W;\"\367\010\276\233\260y\2751\265\272\275Hh\007\275\276\033\t=\326\035\214\275\031P\306=\251\340\203\2740Y\020=\235\272\275=#\024\202<i\274-\275j\227%>B~\207\274\"<\242\275\020\215\022\275\004\225\310\275n$\367=v\214\316;6\315\246<~B\224\274\037\000\016>\313H\010\276\366J\001\275\203\212q\274\245\024-\274\025\001u\275\311m\312\275t\307Z:Q\247\202\275\007\320\016\276;\236\347\274:#\314\274\230\214f\275\254\245\'\275)\225^=\207\343\021\276\216\274\"\2736\342#\274\250\342Z=\002o\031\276\332\327\361=\351\303>=\25164\273^]\306=\020 \001>\031`\251;\327.X\275\352\210\264\275B\315\203\275uq5>\310\363\350=S\306\316=X\201D=\203>4\274I=\206\275\017OB\275\221\351\013>\345C\353<?\315Q\275\273\263\035\276\247r\366=0\3175=\236\'w\273V\230&>\252N\234\274\010CS=t\005\037\275%\0262>\225\307\213\275\201\273\307=\247]G<\366!\013\274\230\363*=\r\326\026\276\250\016\376=W\261p\274G\333&\276\032t7\275)\325\035<Z!g\274\253bA=\2645\236\275\313\313\005\275O@\246<\r]\226=\212k)<\226\263\323\274\264.\271=\267\215\366<\201\367\324=\n&h\275(z\032\276}vh\275\331L\236\275\217\246==\000\'v=\225\221\362=J\017\035>\224Z\267=\322\001\005>\006\230\222=\000\310%\276u\366\025\2764\242\353\274\302?\250=\262\313\264=]2\210= \265\330=\375\314\331<\001\031\010\276\234\325\242=\017\304\010>R|h=\200;G\276\345{T\2756\261*\275\352\3276=\364\331!>\024\341\322\274\263_B=\2002\203\275_\333\314<\022\3561\275\020|7\274\364\366\370;\314\356\006\276\022\360)>\256DU<\263\265\334\275O\207\217<\200\212;\275\214+\022>\032c\276=\230\321)>\037\006\275\274J\264\314<x\250)=A\277\020>ZB\377\273\214\231V<\320\324S=\334\353\027\274\025<\207=:\016\232\275\013\026\231=G/@\276\242 \211=\324\260\216=\213\335W\274\276!\274\275?\002\\\274\277\246\266\275s\177O=y #=J\214\341\275\237\243\016>5\207\004>?\243\323\275\367 \302\275e\320\374=9z\004>\322\225g\275Y\023\276=\0167->6\016\346\274\350\251\320\274\003\213\366\273\313E\374=i\t)\275\354\263\247=9y\347\2746\'\241=\230\256\031=G\273h\275b\034\r\275\255\232\003\274\205\006\260\273\366\223I=\251\036{\274\360\021L\275\362\203\374\275\256RD\276\265\244\242=\341T>>\013\361\231\2742+v=T6\r\276\275\021Q\276\217\252c\275\371\320\027>7+\222=\026\360\335=%l\030\273\356\346\263=9\0142\275\233\253\247=\035\373\324\274\276z\362\274A\202\325\275\214\341H>O\274\304\275\312X\345\273\234\\\302\275\3453\022>\007`\267=)\305j\275\217<\005>\025\260d\275Ho`\275N\022\317=\304$\327=\252i\007=2<\017>\212%\247=W\013/=\370\032C<\364[\240<\000@\226\275\360\202*==G0\276\226\306\372\275\016\001\022=v\256>=JO\336=\353\311a\275\362\020\013\276\201\200\351=\034r\230\275_\007\332\275\235]\270\275~\230\273=K/\250\275\035\177\203=&c\337=\363g\312\275\212\203E<\001\254\212=Lp*\275\237\005\023;\325\367!\274Y\207\016\274\330d\364:\017K\214=\244T\n\2758\"\272\274)\036\205<E\233*>+\206\241\275:\234(>\354\353\n>\334\343W=m(r=\327\317\204\275M<\245\274\377q[=nB\030\273&\025\267\275\371\347.=\206\260\311=_\311\305=\222\305\210=I\\\313\274\036\035\243<\361#\224=#\275\234\275\263\256\304=.\363\010\276\263M\277\275\317\272r\274\244E\317=\222\025f\273,\373\003\276J\350p;\033\275\r\274j\257\347=\257N\354\274\242\232\262\275\266\251\006\274%} =ST<=\036k\311\271\222\2252=O\251\004>\007\312H>K[6\274\331\345\353\275\272\204\347=\262\310\021>\033\240\016\275\nM-\276\312\357B>}NG>\360\373\217=\2259 >\200p\005\275\307\233\351\275x\177J>\340\346X=7\031\326\274\2416\020\276r\2729>\334\"\206=#\036\221\273\312\004\200\2754N3=\364\210\363\275\243\315\260\275\\G\255=*\331\212;\034\306\325\275\233\t<=\354\367m=\222X\205\275\220\343\033\276H/\030=\221\026\t\274#\315\021>e\rF\276\233\324\376\274\246<h=\024\275}=\001\260\217\273\333X\324\275o\2706>\t\252\340=\007\365}=\021;M\275\333\0230\276I\210u<N\224f\274.\345\215=z\214t\275X/\035\276\017\016\322\275\2543\303=\037\026\214=?<\033\275\217\017\205\275\326\220\235\272\003\345\266\275H=>\276 \220\022=\017\016C=l\247(=\376\243_\2757\235h\275\253S\261=\251\r\322=\357Z\017\276\304\351.\275l\255\357=\231X$\276\377\014\r\275\317\027\217:wv\016=\020\023\027>\216H\333\275\217\032\206<@\007\307=\317\354\260=\216\023\237\274s2\376\274\256%\310\274A\223\322=\227o\321=\360\317:<\216\355\031\275\335\341\370\273>1\361=*\366B=\243-\305=cx\237\273\232j\234=\307\346\313=\277]\332=\300\226.\273\32008\275\301B\201\275\375T\256\275q\302\317\273\374\234\324<\t\3559>\"\240\026>x\226P\274\025y\235\275=\016I\275\272\036T\275b\037\233\275\310\234\004:\352\225\366\275\236\374\262=\035>\376\275\304\336\n>X\244}=\363\037\337=\347Z\313\274\2014I=\375\340d<\226\236\034>x\004Y=c\037\267=\217eD\274Bk\000\276_\243E\274Z\242\005\275\312\334\026=\"\2567>\321Nh\274\320,\276=\200\032\027>\305\212\016\276\343\tt=\342\257\257\275u\206&>\001\341\235<M\312U\275\202W\017\275%?\027\275\333\017\274=<%L>\255]\312\274\356\263\243<:\356\025>g\211\262=\030 \030=\343\362\024>*\253\335=TB\317=%w\010\276v\273\204\275\267\270\306\2755\265/=\370\002\021>\010|\237\275\263Xg=\363T`=\3643\036\275\350n+>\303c\316\274^/\357=\255\212\005\275\246\206(=C\224\330<\026^\032\275E#\"\276\2074\266=}G6=~^\260=\203\352\306\274k\202 =\264\016 >\326G&\275\010\3251\27474\235=\330\200\">\352\232L\275\217\217\017>\377\314\206\274\005\021\213=/w%>\304\255=\274\340\356\300\274\256-\206\275\006\305\344\275\370K\202\275\314\226\312\275\205\\z\274m\224\306=;\223\320<\373w\224=k\016K\275\207\177\217=p*\r>\206)\253=\325}#=n\325[=#\307\271<\232\277\353=K\357\253\272\364e\004\275(0&<\350\267\254\274o\255\234<K\342\370<f9\254\275\354\374\251\273uFN\275\022\313Q=\314\003\352=\231\037\200\275\220=\336=\305<\207\275\365R3\275\3703\366;\024\201!>8`\225\275\305\r\023\276\307\370\236=0\351\263<\304\343\304\275\236E\217=\321\244\243\275\200q\312=\324\221\017\275\036\000\274\273}\"H>w\240\r=T\270)>x\224u\2754Ww<\343\227\327=\275\201\226=\3258\246\274H\3512=T\235\276=\341\205\210<\342d\025\276\232I \275u\327\266=\314\177U\275\035\327\356\274\014\250=\276\330\3019:\213\221\370\275r\026\236=\351\366\237\275Fz\241;#\375b=\305\330\233<\270\\\017>\361\357T=94\303=W\3449\276k\267y=\327\031>\274n\022d=:\243\270=[\362\313\275iN\235=Ci\000>\000\225\300\274j\334\261\274-\265\352\274\335\377\'\275qF\301\2743\227\217<\'\0270=\356\007\237\275\001\267\006=\341\024\336\274\367\366\322=c\314\036>l\275\\;\321\377>\275\245C\254=\201\n\202\275\252\324\266=\361W\226=\345\211\264\275j|\262\275b\277\344\273\023k\233=6`m=lU\242\274@\030\300\275\226\025\356\274\3417<\276\3375\"=\260g\336\275\005\230=>\n\226K\276\265\311\035=d\256\253<\n\n\335=/\rJ=\335<\024\275J\341\323<VXs=\000>\371\275\233rC\276\246\027Q=\224u\336\275\242d\261=]\324^\275\003\324\217= \351\216<Z\243\263=pP\354\274^k\330=\032EM<\215\330I\274\244\000\275=\246C\254\275\203 J;\2337\225=zZ\004\275V\276\315=\322\304\375<r\327N=RF\270=\315\371<<\024&\025=b<\314\273\340X\305={\024\273\275\263\367L=\264\262K\275O\222\375\275\023\307\231\275`\251\034>\021\352\346=I\307@>\226\204\236=\273\255e=\225\222\252=e\336\214=\013\247\340=d\301\260\274\014DK\275\253\244\235\275\257\034\205;\335\221\221=\247G\207\275=$V\2752_\201\275<^\006\272\321\211\021\275]\241G=P\327\352</\223\254\274\250\3717\276et==\202\334\251=\"\202\315=\272\216\025\275\333\016\021>\340\342o=iMF=\232\364O=\206%\352\274\031Es\274\276b\342\275lc\'<\377\2132\275\340\210\250\274\010$\002\276\016\004\253\274\261\373\034<g\354\205=\256\251\021=\361\372#\275\272(\337\274 \013\243\275\310\221+<\201I.\276\'XX<\323}\301=\3624/\276<\3274\275\\\322\306<\325\001\232\275\307v\007>V\000A\276\242\363\310=\234\327\270\274\235\374 >\003\323\324=\261\226\355\275Y\307\357=\265\206\267;f\261$>\333D\t>\354{u\274\305F\034=\323\267\214=\2532a;\315\225\230\275T\232\240\275eE\250=\335\327\n>\'\333Q<|\241\001\276\005\364\002>R\314\021<\254r\342\275\264n\010\276#\247\365\275\211\217\r\275\307\300\024>~\326\305=\246\254\323\275\241\034\350\274\254=\007>\357\324\241<D\205(>x\203f\275\343#&\275r}\2739{\376\275<\3560 =\300v\203\274x\377\236\275[\331\362=\3449f\275\234w\013\275a\264\211<\372\001\207\275ED_=\360\016M\275\275\332\203=S5\255\275\004C!;O\270\344\274Z\313D=\324\2378\275P\375)>{\256T\274\023 \377=]9\305\275\030I\202;`t0=\332\213B\274;\303E=k\351\375;\302\236\247<\267\301\222=\006\276\200=\032\274\263\275\210\276\014\275<\345g\275\356\022\300\274\304!#\276\2223\270\275W=\220<\354\301\311\275|\323:\275!\273\206\275\355\336\352=IU\234\275\223\342\232\274\2608\353=\000\2410\276\220\340\347=\215z&=\345\025\317;46\032=fJ\031\276\360\353\371=\345dG\274\024\340\032\275\274#\\<\271\276\242=FEy=\025)\313=4;\257;\313\264.\276\227u\036\275\336C\262\275E\362\033\275\206\357\231\274}\034q\275\211\3053\276e\n\366=\322\000\332\275\274a\344=\304\276\344\274\325\036\265=\"\240\3628DZ\233=\"}\007\276{b\222\274AV\336\275\203\206\232\275G\317\337=-1\267\275\343\347@\276(\323\007\276.\300\201=]\217\200\275\257\234\004=\312}\275\275 \241\343=\265\377\201=\325\213\351\274D\347\361<\002\200\261<+W\361\275\332\240\327\274#\375\226\272w\262\007\276Aln=7\371\240\275\375\270.>]%\275=\211A,=\036\013:>dO\007\275\225\033\n\276t\"\273\275\"\247#\275\371\234\"\276p\345\357<\\\314\031\275\025U\325\275>\004\363<G#\341\275m\374c=\372d\242\275`/&\276\320\363\306<u5\"\276/\353i\275\332\323\313=n\024\346\275s\320\350=\315C%=\204E\361\275/\206\000\276x\232T=C\016\367\273\330y\n>tb\336\2746\277\336\274cX\326\275\244\275\250\274K]\250\274~q\n\276\207/\353\274\275\337u\275\367\244\023>+\351l\275WF\t\276k\342\301=\273;\301\275\312\214\001\274\031Q(=\357\247\373=\260\275\337\275\355_4=\031\267\225=\246V\021\276+\177U<x\260\005\276}\023\002\275\345Yg\275\346\236h=U\253\201\274\300\323\020=\002\244\266\275o\032!<\237\364\351<1\212\341=L\371s\275>\3220\275\035\264\034\276\257\330\032\274,5\022>2\3161\276#q9>\257Hb\275\007\266\352\275\222\230\302=\244\314\231\2750\344O<\337\035\316=\334\217\315=;\222G<\263\264>=\005\375\311=\235\257O\275O\225\233\275\315\316I\275\377m\230\274\355\370\377\275\346}\017\276\307&\006\276\311\t\276\275(;\'>\\Q\236\275\247\025P\275\322\332\363\274z\303~=W\352\231\275\005\264\326\275\246\373n\275t\2313\276f\317e\275\376\317\006\274\245\224J>\211\367\215<\375\021\205\275`P~\274\036\304\376\274OO\367=`y\304=\2338&>\026R\213<t\336\213\275t+\027=A\"N=\205Y\273\275\324\271\206\275\200`\002\275\257(,<\354.G>\304\244\325<\2411\032\275b\277\010>\365\301\013>\243\254\005\275\263\332\240<\310Zj=)\022[\273-\256\312<A-\204\275S\242J=z\354\327\275\026\220\314=Q\272\025>{V\367=\273\357?;\005\264\004<\271x6\2765\366\212\275\304\023\353=,YX=M\230\316=\373J\373\274\311x\034=\375Q\243\275\371\343\200\275\313_D\2752U\244\275\372\326\326\274TH\327\275)G\376=\3504\235\275\345=\n>\211\211,>\305:\034\275\224\336\031=\251\256\321;\234\327\232=\306,J\275\330N\371=\275V\374<\312\200\240\275\353=Q>`1\343:T\240<\276\036s\235\274\370C\277\275\365\213\004>EL\r\276\034\034\001> \206\301=\00619>x\342\304\273#n\200\275\360Q\252\275\337V\274<\346\262/=?\236\306=\267\0214>@N\016>\330\322.=x_\275\275\001\n\275=\325\034@\274u\247\224<\344)8\276\010\201v\275y\n\001\276\244\"%\275\003\022\020\276\207P\374\275%D\000\275{\362\236\275\221\211\316\275G\034\007\276\\\030\267\274`\000\000\273FP\206=|-v<\244oi<UG\215\274g\313Q\274\311\013F\273\013W/=\346>\243=\373\347d\275\204%\255=\232!\300=u\203\315<\367\023+\275t\346\035\276\024\262x=\230\216\241\274j\226-\276$\036+><\224p=\r\343\303\275b\221\216=\305\351\374<5\205\253\274\200\215\260=\251I\002<:\353F\275\347`\221\275,\\\001\274\242V\374\275fc\370\274\310\376\206\275\313`\236\275)9[\275}\212\331=\304d\265<\237\364\000\276\317\244\n=}+\325;NT\374\275\021\273\t\276\242\332\221\273\346\036l<e\003=\276Ad<\275\272&\332=tx9\274\024\037P>\324SQ\275\371w\307\275\017\t\240<\214I\007=\320\300l\274\2179\222=1\003\037=\335\3012;!\272r=\002\235\236\275\034\371\016\276Q\216\026>\306\347\311\275\251\007\005>\032\240\235=0*+\274k\305Z<\367\354l\274\252e\357\274\201\212\212=\241\353)\275\341\0264=\310*\271<\200\221\002=jN\300\275OU\016=\261\271\001>2\035\364\275n\355\177\275\253g\206\275#\264\014={\356n=\256f\204\275\324\246\034\276~L\026=\030\026\3278\037\246T\274|\003\373=\203\013\211\275c\271\234=\004g\243=\306\262\031\275\013\264\341=\030\353\345=\375\250\027=(\227\002\2763Z\025=\025\2368>_\367\233\272\n\217\016\27680E\273\314D`\275\rqb=\'\346\036=W#|=\315\317\201\275~;\007>\365p\375\275\364N\341\275\234\266\210\275\373\201\272=\261\244\332\2751b\270\2750V\256\275\377\215\364;V\273s=m\302S\275l\251)=o\240\240\274\252\234\033\276^Go\275\205=]\273|OX<\330\224\000\274\'\370u=\257\360\271\274I`\265<\323rw=\345\342\033\275~t\253\275\221\255M=\017$7>\010?\025\2757a\225=\000v\255=8\ne\274,;D=\030\217t\275\357\311\364\275\216]\362=\243A\031\275)6y=\205\302\261\275\234\310\361=\332\375\250\274E\\\363\273\235\253\364\275\252\265I>\027\217\034\276\361Q>\275\357\350\"\276\273\366\345\275\177\036o=\201U\235<2\314,\275@{\260\274G\207\010\275D\226\020>\004#j\272/F >\212\236\232\275W\233\341=\267z\367=F\345\016\275\242\030\034\276\217\224\013\276\366=J=\226I\007=O\324\353\274@\205\225\275\225\361\207<ro\360=$b\306=\336\215\247=I\227F>\177\t\200\275\261Co\275C!\256\274#\021\310=B\277\004\276*\377\275:\373\335\300\275\362&\000\276\230\'\244=\004\214\212\274\245\235\361\274\023\014\000=YlK=W\036\'=l\3750<\216\264e\275\232\357R=\222\326)\274\221v7\275\004\247\003>\014Nh=y\364\014\275\207\340+\276\355\365\'\276]Mc\275\361\3634\275voU\275\236\2100=\354\330\241=o\320\352\275\2540\032>\352\324\360\275~\237\335=je9=\"|U<\301J\212\275s4\031;\2659^\275\254\233m=o\367\270\274\315}\250\275<\312\030>\341\306\314\274i=\305<\336m\252=1\035V\274\206\354\271=:@\214=\017\354\177=\350\207\354\275\016\372\236\275\310`@>]&6\275\254\310\271\274\236\357-\270G\342$\276\036 \351\273\262N\356\275EFK\276\303(\343<\355_\220<\017\374f\275\364:\263;\357`\342=\213:\252<\361\224.=\250\310*\276\324\023\354=\347P\275=G\322\n\274P/\200<\010O\275<\000\266\023=6\204\324=\3505\t>\360\221\324<\233fO>;\301\230<\010My\274[9\036<\006\320\355\275*\2740\275:O\312=$\301\007<8\307\263<\027\033\273\274\302Z\202\275\260xz=BU0\275-\345f\275\021\021\'\275\214\374v\275Rm\276<6\363\373\274R?\025>r\341\232=\207\n~=l\tA\276wr\307\275\221]6\275\t\036\367\275\251\241\244=\261-\363\275:\241\006\276\017\345\245=\017\251\235\274 0l\275\311\007\013\276M\026\322=8c%\276/\317\250\274\257\300\234\274LR\250=\250\330\331\275H\271B;\372\374\t\274\244\237\356\275z@c\274J\346\216=\005r\362<\226.\020>^j\317\275\021/\360=\372\330/\276\335\276e\274\246P\247\274\013\177\232\275*\177\004<\214l\207=\254 &=\332\236\271\274\0237><\362\324\034\275\262\241\270\275\355\331\021\275\3619\270\275J\004d=\000\340\373= \213\226\274\\\335I=\003\263&\276wAR\274\263\335\233\275\177\303\327<Q\207\225=\366\'\341=!\357\272<.N\024>\215\303\257<\344\300\362=+\234M\275\031\030\207\275\212\001\216<\022\252\001\274\355\351\017>\243\026\007;4\2015\274\326\326\213\274\372\326\353\275\254\244Z\275Z\003\327\274\205Kb<P\205\346\275*n\027\276_\3642>\3753\022\275\203Tj=\261m\264;1Hq\275[>\376=\002\247W\275\224\273F\276`\375\033=\337-\225\275e\326B=\224\035~<\326\355\255=\035\207\020=\364\021\014>\341m\200\275\213\032\001>\'\204\325\275\373\224?\276g\316E=\036L\351\275\363\255\354\275\247\372E\275\363\216\016=9\273\211\275w\327\242\272u|p\274er?\276N\002\271:\000\356\245\274\0171\306\275\204{\237\275!+\033\276\331\354\360=\225\364\024><\377\211\275\245\240\312\275\2602\262\274\373\261\207\275?\227\333<\251\356D\275P\241\205\274\273c\003=\361\332\027=\3235\210=e\3770\276l\327\034\275tF\353=\230\"h\275!%\237\275\221O\335\275x\272\302=#0\305\275\3227\250<\325\371\272=\220\366\023\275\002\022\021\275\272/>\275\311\363\253\274\311\362$>\005\275\004>\343\\\033=\265\036M>\303\237\353\274\220\344m\275y\216\227;\223\022&=\330\246\244\275\374\377\206\274\321\205>>\313\007\212\275_\004$\276\347$\231<\013\367\036<\312v\022\276`\220o<9\005\241\275F\201\224<\372\363\210\275\354\0252=@\214\006\275W\345\340\275\000\200\024\275,\366\366=\022q\017=\216\342\240\275\\\223!>\246/\346=\004\234\210\275S\211\250\275\355K\035>\201\027B<\005>\361=J\274\026\275\210\023\004>?r\343=\305\206\330\275\355\213F\275\344M\375\275*L\361\275\277J\302\274U\364\004=\251\277T\275\234\250m=\232g\320\274\227\364\237\275\r\324\200\275\322\024\226\275pDL\275\353DN\275\363\315\223<\277\210Q<\264\025\002\276\006\r\220\275\272\247\245=\265G\207<\314\303\313\274e9 \276\373\372\374=\354\200\001>\327\'n\2745\370$\276\332\342#>}\257\017\2751\tp=\001sX\274\032\333\215=)\036\'<nY\362\275\2710\336:\314\347\210\275CQ\211\275k\221\321\275\250kD=\244\365\014=\267\336\226\274JY3\276\304\334\231\273(\251r=\257\355\304\273BgO\274u\235$;g\335m=\252\254\024\276\003\006\237=V\375\025>\322\267\206\2750\363\203<K\312\245=\331.C>X\346\300=\334\257\333\275q\207\031=\021\211\356=\347?E\276/\233\263\275\324*\227=\224<U:\320\350\207=\036\361\006\276\347\275&\275!9.\2767*\'>\310\265\231:y\214F\276B}\311\275\265\204\231\275\330\253`< \321\245\275\353\016\327;k\266\345=\220zA\275I\247\301\274}\356u\274z>\350\275\276\025^\275:F\005<U*d=\255\327\321\274io\263\2742]\202=\307B\025\276\023\352\002\275\242\014\224=\005i\352<\224\237\214\274\312\270\357=\315\316\271<\"Y6=\260b\025\276\336\327\261\275\022O\317<o\270\225= \313\r<3s\324=\321\211\232=GPe\274|\234\021\275\276\002\216<7\262\000\275\354\276\306;lI\007>8\3571>A\374\211\275\263\257\374\275-\302k=\233<\203=h9\033<\001_\301=C\021\366<R\033\240\275\372\0006\275\361,Z=\302\332\243=\376\252\327<\024=<\275\017\334\244=l\254\240\275\214\312\216\273\2657v\275\263#\000\2741E\037\2766v\216\274\327;#\275Wr\020\275\375=\227\275]R\014;\326\263=\275\267\372\210=)\236#\2768\360\214<\"\250\003\275t\2270\273\214gS\2754g\240=r\233\034=\205g1=\225\r{\275\202v\\\275\267C\204=\005j\307=M\016\313\274\237\262\317\274\016~\263=}\367M=.\200A\274\277\234\207\275\310\034\250=\215\253\017>\216\023\257\275\345;\027>\'\336\224\275\033\232\365\275\272\342K\276*\354Z;\253\345\230<1\346\024\276S\014\203\274\340\004?=/\250\016>g\n\305=!O\374\274p\227M=\331\nE\275\377\014\340=\374\301\230\275\214\223\242\274l\340\035>\212=\212\274\315\355*>\236\343\t=\007\320\256<t3\221\275\235\003\211=\004\232K;\257\336v\275\374:c\274\320\211\004=\327\365\242\275\211n\003>\270\254\320=\300\220\272\275YM\332=\031!\272\275\203O\247\275k\313\245<\344@F\275\241\355\230\275\010\257\031=o\352\367=vr\000><\351\231\274\340\330\254\274\274Y\351=\341\266\376\274\000<\267<\274\n\\\275\201L \276\227\036\214\275\303\326\314\275\266u\000\273o\346\024>o\220=>Z{\332=\343!\341\275\214\003\020>\3103f\274\240\213:\275\355=(\272\365qB\276\301\215?\276\263\261\223\275MK\311\275\362\250\316\273\211\026\235=\343\007\037=r\306\260=\214u\r\2756\253\'>M\331O=\014\332\370\274\304=n\275\3042\001>g1;>r9\306<\377\345\222=\037\266\017\275\213\210D=\014\365\321\274X\347(>\211\363\007=7S\275\275\031^L\276TZ\334=E\320\336=fm\371\275\002\006\257\275\357u\324=\370\230\347<^\235==\225\256\353<\370t\024\276\337\335\223\275\276g\025\275\364\310I\275\221\200\324\275\326V\016\274P\303\022\276\305Ct=\3347h\275\301\247\321\274\332\365\223=Qp\031\275\0364\324=x\260\262\275\304U\"\276X\246\203\275\355$\031\276\036~-\275\243s\333\275\027\303\231=\322\307\274=}-\300=\313zm\274\367!\264=\324\253\336=\243D\231\275\371$\346\275\210`\351<ib\245<T\255\211\275\376\227\266<\315\260{=\234\251s\275\224R\005\276\016%{\274\271\322\214\275\253\300\215<\266t*\276\273\256\303< A\366\274\361\300\267<\361R\312\275\345\370>\275v\203\241\274\005W\335\275\343\227\202\275\34518\276\260[\001>\271?\225\275\210q\266=\272\316\026\276\004\022\205\274\340\250\223;.\304\304\274j\351\313\273\235\316\032>\216\006\227=<Mq=aF\030\275\251}\027>q\275\201=\010-\263\275\001j\037\275\177>Q\275\340\211\016>\345t\203\275s\264U=.6K>\215\377\225<\033\016\232=DlY\274\300J\337=\302o\342\274l\332\252\275\366-\003\276\343\331g\275\240c\357:\347\246r<\352\010\253=qq\032\276Q \263\275\227\304\264\275\313?\267<p\275G\275\\D\001\274\265\'\327=\201\017m:C\335\237\274\035\274[=8\"\233<5\233\006=\224\222\262\2755p\203<\357\337\271=Zt\221\275\315\200<\275=\256\032\276\004\302\235\274\314\345`\275FV\246\273Q\274\211\275\274\027\367=:`)=\025w\020\276\300\236\320\2759\227&\276\036\326\307\275u2\343\274cPH\275g\215\005\275\342\"\003=lH\371=\227\276\340=\031!\236\275\224\217\274<$\2530=|\314\200\275\207\013\373=\216\356\331;\222#Q\27582\242=s\027m\275S\251\271\275\370\305&>\342\206\321<\023z\n=\362f\356;\312m\246<#\361-=&\001A=N\021\377\274\364\243\000=@\211\214=E\277\347\275\361f\374\275\322\310\241=\0062\213\275j\224\206\275>\006\324\275}\262\020=\347\021\272\274\243\315\226=\336\363Q=~\031\002\275\225\3625\276\022\"\371\275\004V\000<u\256\242=\3054\253\274N\215\177\275\276\320\213\273\302\361\031\276\345\231\223;`i\336\274\364\324\205\274\276\276\210=&\3660\276Z\344S=\234W\264=d\232\n>\375\370\013\276J\212\277\275\247\355\327\274G\250\265\275gX\270<*\346\266\275\035\324\371:*W\"\275\002M\312\274I\241\204\275J\304\323\275\237\237\244=\315P\003\276\301\024\351<P\024\200\2757\205\221\273q\017\371\275a\310\203=\321\006\340=\312\017\202\273\3457\206\275\335*N=\274_\002\275~\356\240=\311\225\225\275\307\264\033\276\026\2043<ltG>;\370\232\275\215|\336\275\236+\252\274\020o\311<*G\315:\275W\371=\nt\002\276\225!l\274\216\321\211=\302\242\020\275\374\027`\275~\230\261\275<\r\231<kh\014>H\026\006>R\370\356\275\245@\245\273f\300\345\274\262\231\224\275\033\"\325<\032o\214=D19=\225[N=\331!\232:d\n\226;\031W8\275\336\377,\275\327p\245<\310\375\023<)\257g<\2655\244;}\245\177\275D\241t\275\232\020\257\273\326;\213\275\315-\333;]\274\272=\302h\002>\302\334\222=\214,\210=\210\333a\275\201\005<\274\220\217\022\272L\344\233;\310z\324\275\206G\330=\031\251\367\273\324\225\220;\006\374\251\2740<A\276\027\264\225\275\031F\315\275\327\230\356\275\320*\345\275\340Y\264=\326\350P;/D\217<\003\034f\275tL\317\275\027\326\202\275*w\301=\241\2506\275\340\321\241=\214\326\024;Cm\267\274\276P\230\275\344\234\215<\026\026\002>\334\214\\\275\331\342j\274#e\271\273\231\242\313=\337\242\227<\\\002\010=h\352\037>\031@Y=\016z\000>V(\022>\261\242\002>H\303\021\276\025Z\214=\027\233\315=\254\201G>`\377n\275\262\315\022\275\327\3078=\356\210\033>2\3335\275\264\277\317\274i}F\274\024\274\253=\276\304\360=\260\231\210\275\317\017:\275\232\221\312=\366\017\250\2753\321v\275\365`;>\234\364\227=\007\026\354\274\"\361\030>\345\017\225=\3124\272="
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "network/weights_1"
      input: "^AssignVariableOp_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "\356\204m<\371\243\322;s\032E<\347\3547<\247J\324;\230\252\r<\251\340\344;xR\002<\235.\317;2q\344;x\026\t<]\3061<8\351><L\321\351;\312\226\347;\t\353W<\337>\010<)\373\016<\324m8<\302x(<M\204\032<*\301&<\2722\276;\260\020\n<\311\323\031<O\335\377;\244\210\307;*\nB<\206Z\333;s\306\353;\234\3324<^\350H<+\032\036<\356\257\020<\035\255\014<4 D<\365#D<I\372\007<\231cY<\243\261\024<u\030Y<\003\277\034<}Q$<\312\272;<\225\020\330;D]\362;I\216\372;cM,<\217\225\010<\"\305:<Z\2643<\353\253\203;\335UO<%\352\033<\341+9<\2468\350;\003|\014<8N\306;\344w)<\371j\035<i\225\000<\213\350\031<\3676\370;cg)<\360\033+<\251]Z<l\230\017<<\033\"<\265i\344;F\231\"<\'(*<\276:V;\215:)<4\'J<vf2<cae<(\273+<\316\307D<\247\007M<%\035.<\211\200%<\313W\032<U\223]<\362T\304;\\\301$<\370\203\026<\266\264\352;\353mA<}i\"<\014\274\021<\230S+<c\256?<\3718\n<\003\200\320;i\306><\256A\327;\024\212)<\377\256I<7\035\320;l\373\004<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "network/biases_1"
      input: "^AssignVariableOp_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: "dO\365<\214\340\002\274\357r\263=>\375\r>\035\214\323\275\362\225\260=\243\225\272<\301Z\344\275=~\321<\343\030\264=\341E\006\275\225\024\226\275D\223\210\275\025\370?\276A1L\276y\305\0248}\220{\275\240\375\341\2749\014\237=\361{\243\274\003\200\326\274;\t\300\274L\342\211\275\203\017P=\261U\231=\373\234E=\024\225\024<eQ\365\275\355\364\260<\374oF>ry\262\275\373\265\351=\301\225\263<V8\250=\315\360\237\275(\362\263<\346\313{\275\334K >Qc\336\273IF*>F@\205=\273\200\220<\031\025b\274\375M\204= *\005=\364\010\200<hx\335\275\200/3<\001\352G>\312\335\345\275\253\361\037\276J\307\020\276\276\216\206\275\023\036\010=\341j&\275M\347z=D\366+=l:v\275\215%\036:\026\221\211=E%\274;3\266\000>y&\202\275h\312&>\226!\r\275\321\000\370=%0\310\275\311K\361=p~\363\274\222u\327=e\342\262\275\261\370\000\275O\261\333;\274\220^\272\275+\032\275\255n^=\242\334\344\273\202\006\373\273=\013\216\275N\344\r=\310\257\234=\346\265\264\275U\305B\276\001\034#=-(8\273&\036+>e:\371\2759\315r\275\30790>O\331\274<\266\371}<\302u\2139\333\324\273\275\224\253\005\2765d\024>J\003\344<(\\\365<6\001\216\275\327\306\304=\304S\226\275\005=R\275\345\313\341<y?\013>\226\372\n\275\256\224\213\275gA\212\275\034\372\225\275IV\267\275\3414*\274\305J\016\276\206\356\213=3\336A\276\375\235\300\275=G\327\274\237\010\367<\326E\316=\302q\237\275\302X\260\275\3008+\275^6\236\275\001\276:\275\316\333\252=\246\022\032\275\370\007\250=\010\327e<\330\262\376=\215\352?=M\236\331=\300$\204\274vi\002\276\2023\021=\323\260\035\274f\036\206=X6^\273\003\243\323=\202*\307\275\000\223\003\276/\030s\275\021f\377<[\022\002>w\264\256\275\251S\340\274\274\341\246\275\264zi\275\2341/>\014\227\237\274\314\242\263\275\007\315\276=\233\200\303=\014MC>\277\377R=\224\311\030\274\361K\345\274X\240\353=\265|\244\275z\003&\276\355[\000\276\302\322\025\275\312\003\006\276\363h)\275\332\376{=)\244;\276\033{\214\274\035\023\215=4X\314=\206\363\302=\036\315\311\275l\265,=\363\360\230\275\304\337\n>B\010&<\244kZ\275\267\200\332\275\014\205\016\276\247\312\003\272\362F\002\275!\025%\276\303\003\371\275~|\002>\371F\310=\204\207\327<\240\0066\276\017\322.=\255<\252\275\021\342\001>n\372\275\275\0343\027\2768\'\377=/\376C\276\204e\230\275\254\363\225\275=\003`=xc!\275\335\350\355\274W\307\337;ex\271=@\307\304\275\217L\205\2745\314~=\337N\222\274\303\254\253\274\246\242\264\274\002z)=\203\277-\275\0217\330<\306\262\\\275\267}\305=@E\212\275\n\252\324;A\017\231\274\224\325)>\275\030\347\274K0\007=\226\216\345\274w*\211\275\211k\304\273\224\346\335=\277M\343\275\376\226\265=\010UJ<\366\031\023>\224\352,\276\026:\003\276\222\356\216\275_s\325\275\362\215\017\276\253\266\214\275\'\326!\276\377\364n:\341\356\217\275dC\006>\267\017C\2768\\\211<\351\010\033\276\257\322(\276\225^\253<H0\007<\3048(>\377\352\031>M\361\036>\241\302\267=Z\252\313;\006\202\023=\376{\226=Y;\021>\2162n=\313y!<\006^\235\274h\207\310\270\271\313Q\275}\215l\275\332\255.=\306\230-\276\354(7=\025\371m\275%<\233\275zY\230\275\330$\347\274P\254\304\275I\376\312=\315:\254\274\327K\004>\314\367x\275\240\271D\275\033\005*\276\251\266\377<\026w\270\275\366q\232=\3166\305=\342N\322\274O\350\014=\270p\002\276\tt8\276\r\201n=2\036I=O E>\347\316K=\202\236\337<\n\253\025>p\376\014\2769\274\252\275VB?\276\312o\365\275 &+=FQ\347=\354\370\326=%\335\347=\303\215\377=\307e\300\275\261`\271=\377=.\276\215U\333:K\335\245=\315B%=5\004\005\275\273\016\n>\004\246\016\276#\233_<\265\001\344\275=\256\301\275\2246o<\232v\244=M\027\033\276X\003\341\275\032\024\214<\331\2365\276\203\245\001\275\240\234t\275\356\275\214\2754f\324=1\223\332<\375\033\340\275r7\263\274\214\275\367=\301\271s\275h)\267<\264S\230\274r\362\215\273\243k)<`\340\253\274\265\2670>y\352\315\275\371\300\246\275i\272\246=\252\027\266:+Q\025\276\024\345\201\275HB{\275\r\267J=\366~==\306\225W=s\363\000\275NC\301=\177\221\357<\342\200 =\313\034%>\332\373/=\250F\315=\264\223D=>b\231\275=-v;\222\345S<\361\0172\275?\303\\<\033\346\002\275{\343B\276\2613\224\275+\363G=^\250\240<\330\264\035\276\371\352\010\275\277\307\314\274\313\300\261\275\2160\312\275\361<\356\275\337\226\320\275{\003\355\275\230\246\330\273\024\357\243\275\314V\261\274W\263\352<o\235\314\274~8o=A\304\024>\210\030\230=\326\003\302=\344!\265\275\217@\332\275sd\253\275\t\311\322;\350\'}\275\312\223\277\275\225@\262\275h~\300\274-\233\231\275W\263\022=\210\250\323<1\214\243\275`3\275\275\326\336&\274\246\263\272=6w\257\274\335a\260=\343\240\037<\337\257>=\3442\"\275\256\200\320<N\200%=\220\236)\275\267v\360\274\260\036\000\275\023J\352=@\207\022\275\363\342\262\275\207\203\225=\314\351\320<R\030\321=D\342\367\2731m\226\275\201|\033>\301\202\230\275c\260\327<\004\002c<\347\363S=W\r)=M\215\026>?p\315;\262\037\353=\014\376\351=\230\356 =\313\303K=\325s=\276[d\214\275\206\226\330\275I\251\337\272\321\220\032=-\264&=\020\221\211=\030^(\276\344\245\207\275\023\242\277=\022e\024=\313\320 \276KY\363<\\$\032>\374`T\273:\236\213<6\2301\276\034\027\342<\316E(\275\374\222\"<\303\312\357=\024\330\257\275m\362\374<Su\254\275nZs\275fl~=\013x\021=\306\263\'>2\234\'=\244\234\022=]\343\277\275\014z5\276\027\352\260\275M\236\n>:\233\312<\2049\341\275\342\2146>\353\377\231<\2318\246=\367\241\273<\000\227\344<*N\236\275\002+a<ly\351\274U\302\320;\220\nj\275A\035\362=\026z\270\274d\027\216\275Z\206`\275P\343\200\275\327\247\352<\336v\014\276\207]Y\275(\350==\371>0>_7\t\276\014\022+\275\006@\200\275\360P\002\276\032\037\225\274z\312\306=_\026\260\275\r\344?=\363\250\371=\353\341\n>\237\217V\274T\3204=Q\255\357\273A~\260<\261\303\223=p \342=\214R\301<\372z\306\275\2271\203\274\337\016#\275\347\310\355<\247\263\020>N\334\342\275\347\225\214=\004\\\014>\001\344\364=\3076\\=\225\327\230=\0224\n\275\265\022\275<\334\3613>\227^6=`\334\205\274Fu\333=\353\375\352\275\262$p=\\1\301\275x\364\303\275\324\231{;T,A\275\365\253\226:0\021w\275\257gA>\311\331[<\373\'\020>\336l\305\274\177\003\003>\333\036\241\274\220\301+<\003^\314\275\357\2107\274p\311\341\275\345%\233\274o\240\005>\330C\235<A\000\232=\300\331\340=\262Y\n>L\326\014\275\320g:\276#\276 >\345V4\274\234\264\317\274\312\005q=}/q\275\205@\201=Ys|=\003\310\220\275\266\265~\274\223L \2762\004\243</[\350:\250\324\313=\025k\261=\361\310\200\272\\e\260=\204q{\275\316\343!=\207\016\273=\202a2\276\3709\013=\177%\024=tc\232=\352\324m=\037\276]\275\004\324\036\275\332\213%\275\016\334\372\275\206D\"\276\243\214\206\275\366$\333\275#\272\000=\310\004N\275\300\307\275=\037\203~=\214J\014=\302\300Z=_\342*\275\317\350\214=4\313\026>\260\375d= \006\\=\024\222\376\275BX\376=}\335\217=h;K=\005\265\223<\374\360W<\317\306\331\275 v\000\275\034\361\004\276\2134~=\014\220\334<0\316\244\274b;\301=8\rV\275\346\242C>A\r\236\275\024\016=\275\346\2325\276\266E1=HM\333=u\221O>1\311\252=\2348\016>_{h<\327\t\217\275\225\376\321\274\303\263\301\275\331\220}=\\\366\034>\2374\r;\364\205\006\276~d5>\262p\223\274Bh\274=D\005d\272\376\'\234=X\250\033>U\326~\273\213\031\245=\344 \021>q\333\324\274J\233\342\273?-\372\275S2\241\275\215\375\214</\223\364=\035\273\020\274\260\305\275;\366\215\034>\252^%\276\254\271\033>\237[\326<\303\037\345;m\3535\276\302\237\346\274\017t\032\275\375\233\031\276\313\375\231\275\352\226\013\274\235\363\272\275B#\t=\022\330\312\275\250/\301=\210s\261\274\240\372\007>G\tI=bp\271=\032\224\253\274\222\212\311<\224\203\306\275d\370C=4p =j15\275\0039\n=|B\037>\247\304\317=\'\356\343=\344\251\244\275\252\240\273=Vx\307\275\020\'9=;8\364\275`\216\301=t\025\347;\245\326\305\273=rl=c\332\217\275\320\322\323=\201\034,>\312\305\341\274u\365x=\274\304\342=\361\247\374\274\331\275\320\275\342@\377\275p\r\274\275\214\310\234;\214\330\327\274u\3314>\252\371\344\273\033\345\202\275W\233\245=7\206\223\275\261$\222\275ci$>\013,M\276A\241\023\276\343By\275\376\365\023=5Fb=\364U\216<M8\247=g\007\034\275;\370\354:g\256\331=5\342q\275&\340@\275v\351\347=\364\345>\273L\"\243=\225\'D\275\300\363\377\275\205X\030\276q;\315=\205\236]\275.\316\351\275)\t\251\2753w\250=-3\227=\035\270\020\276\356\243\270=\261\3365\274\177\000>\276\213\222E>C\375c\275\016\332\267\274.*\242;\022r\312\275\370\212\025>m\276*=\374\250o\275W\274\010\276~h\217=\016\305\000\275.@\347\275@\211S\274D\262\000\275Yy\224\275m\0008>1\236\251\274*\204\332;5\217\033=\331\016\272\275\t~\244=nt\222\275`\3336=#\213\323=\355j\242\275\242\377\240=\220a\377=\251~\303=\364\030\263=\016\001\224<\033\230z\275\032o$>\353\254/;m*\202<\030q\356\275\3426\031>K\345\216\275h\366\366\275T\016G>\275\357\024={\t\213=\372\376\004>\027<\275=O\230\312=|\275\270\275o\032\2229q\222\017=U>\020>\360\247\343=\245\032\000\276\232\024[=\005\033\272\274\226T\020\274\237X\307;v\252\017>\323C\t>W\212\245<\014\214\203\274\376\361\362\274\024\341\340=:W\001\276\215?]=\213\225/=J\375\021\276n\374@<.\315:\276\354\016H= \'\022>r\006\036=n%\312=%\332]<\261# \273\022\276}\275\177\031u=\353\'\200<B\277\016=\177\006\304\271\215C\257={_\352\2744\305+=\322\253\244\275\013\227\017>*\363\227\275\000\000\302=\275\265\301<\036\r\205=D\236\025=vv3=\017\252\346=\225\373\024\276\325<\021>|\034\242=\310\336\325\275W\r\361\271/z\210\2742&K>\223\\B>\002\r\026=\326\310\214\274\251\203*<\225\2344\276\220P\211\275\201P\036=\333\212\261<Y\363\023\276I+\204=\211\033\014\276\254k\310<\367Q2\276\202G2<;Q<<\250\355\017>\243\332J\275YK7>\300\200\212\275\340\3769>\244\306\225=2\347k=\254\246U\275\222\230\035\276\337\000z=\332\0258=\231u\357=\313\272\252\275\324\305\245\275b;\257\275\242\220\253\274\226\224p\275#\334\276=X\305\307\274\205\227\227\274\271]\330\275\256!\355\273J\273b\275\327 t\274\366\226\350<{\017G\276\020m\222\274\262\262v\274\n\235\t>\226\002\244=!\202(\275\375\204\t<\263r0\275\"\035h=\177b\201=\007\016\252;\261\370\233\275\264\013\265\273\rz\350\272@#-\275%s\325\275=<\036\273\300\364.>w\352\207<\264\213\353<X\334\216=\342y>>B<2\274c\022D<\256\272^=\230<\243\275\355\022\302\275&\307s\275\215\025\262\275\341\335\217=\200\3756\275\361\324\">\016\200\243\274\253\337\206\2742\2514\275\363b!>\316\202->\035\275\253\275&\220\251=\321\250\300=_\200\244=\220\273\262\275\370\"\253=\317D.=w\332\307\275Sr\002>\177\355\207<Z7\267\275\231\306\270\275\000\005s\275\247\306\366\275jNE\275c\234\001>\242P\013=&V\003>\2419\246\275W\355\306\275\232\267(\276\366\006\230=\227\351\257=\300\026h\275\305\303\272\275\035s\371<\037+<=\022\034\006\2751P\312\274g\307\022\275xF\330\274\355\373\263\275>\237a=\242t\302\275V9\006>\337\213+=B\000\021\276\234\212\007=\342R\356\274\035\025\270\275\261P.=w\201\263\275\234\327X=\210\251\320<L\304\246\275\323t\212\275@Y\342=}BC\275\035\214%\276\265\313\237\274\003\3149\275\223pv=\'\377r\274Qi}=E|\003\276\r\3546\274\2259\n>$\037\207\274Oi\240=7@L\275\373\342\253=\277\221#>\244#\221\275\334x\014<\204\324\250\274*\275\210\275sJ\361=\366\234\356<~0\221<L\252t\275Y\000\032\276m71>\243\203\322=\206\352\201;\207L\266:\240\271~\274\254\240\220=\n\237\226=3\241\337<\263\274\266=\352w\303\274\356\201\263=\207\020(>\026\246n=F\014\224\275w4\333=-p\251\275\037\321\316\275$1#\276\317s\346=\215\335\020\275\026~\r\275\026|\340<\003\214:>\304\034\237\275A\216\213=\263\342\360=\367\307Z\275\3230\200\275(\001\257=|(\365\275N\024\032\276\026\027\035<\006\007\000=\347s\236=-\242\020=\345\3610\275\213a?>K%\235\275\262/\020\275?\372 \2727\316\201=P\302%\276\345\272\333\274\365a\210=\326\367\026=\004Y\243;!|,=\211\014 \276\361\272\'>\354\272/>\232\325\\=\177\315\013\276+\343\004\275J\237\272=~\021\020>\222]\367\275Fn\004\275g\203a\273\t2\027\276\267J\253\275\232\245S\275\024\203\232\275!\213\253;\262@\366\273\236\276]<i\314\013\2765\264\034=D\356\001=\327X\231\275\035\251\020>K\200\322\274\376*\254<7\002~\275\325D\262=\315/\344=\224\200\013\276hWN\275yE,\274\307R\315=\222e\373\275\212\316\232=\035\356:=l\264=\275\355A\304=\262\2114<\203T\231\275H \'>E\251\211\275\332\374;\275\0333\214\275\272\332\367\275\364\303\022\276*tW=\356S\362\275\'o\200\275\221\273\351=\247~n=\263a\252<\315\360\203=\237[\322\275\252Z\376<z\336/=Y\212\272\275SA#>\032n\241\275\274\333\213<c\334c=\267K\341\275g\343+\274\330\253\025;{\2712=>\313*\272\205\n\023>\264\276\236\275\033\010\023\273\367\362^\275\201\021\271=\023\261\273<n1\032\276\203\324\220\275\265\215m\275x\337\216=z\006e\275f\246\331\275\256\021;=\341\344$\276\253\235\224\275Rp\346<\346\177\245\2757\264\214= \n\337<V\241\032\275\235\2636\276\020R0=\304u\340=%\374.\276\267\006\300=\007\203\261\275\246!}<\342n\346\275A\221\217=\014\244c\275\325\230\335=mG\233\274Y}\261\275\214\271\031<\3747\335=\267c\035=\t\006,=\320(\330\275Z\361\001\275\'\326I\275\233\270k\2758\023#\276\321_7\276\257\270K<&\350\005=\375\234\223\2748\200\002\275\361\315\276=c\274\274=\341b\267\273!\276\002>\247H\n=\302\311:\275\277k\032;TR\233\2756\032E<[OI\275}s\271\274\331\334\026<\275\020f=\313&\302=\372-\242=\240\204Y\274\313F\370\275OTN=9u\003\276\357\3178=\330_\326=\030\341!>$+\035>\010\232.>\3149\207\273\237\r\255;\3646\005=&\017\n>\226\263\255\275\2479e\275e\243\233\275\025:s\274Z7\233<0\271D>\335\030>\276\2219T<1^7\275\360y\326\275\253\275\227\273\002\2623>3\\\317=\306\327\202\275\t\221\300=s0\362=\303_\351\2758\257\000\276\227WN=\275\006~<\032\206\222\275\016@b=\232+N<ED\357\27594\250\275Ajm=\334W\'\276\311m\363=\036n\361=\311\255\'=&.\262\275|\365J\275\336\255(\275\302\254\207\275N\263\213\2750S\314\275;l\000=dk\n\275\003s@>\245\371\034\276(K\001>\035\336\270\2754z?>\330\350f\275q\333/\276C\221\002>\347\300\313<$\266p=\037\225\243=\305P\352\275\303\216+\274\2776\340\275M\240\232=V\177@\272\021\251_\275K$\275<3g\206\2759<\375\275gM?\275\247\373<\276\036\245\026=\006\0108=.\272\377=2{\344=\374\372W<\002\245\027>\375\315\260\275^\200*\276B\'\327\275]\304\230=LW\345=R\t\277\275$\365\231=h\303\220\275\330\301\341\275\357\212\251=H\2037\274\036\256#\275\322\215\014=F~\003\275}k\354\274\247\220\341\274\250\257\\<sv&>+Su\275l\033\246\275/B\202=\206\250\224\273g\207\270=\032\007\265\274\347\250\264=\365\343\377=\213\2666\276\254E\212\275\006\006A\274\355\200\242\274\037\213y\275\337\313\200=\356\366h\275\220\355\226\275\227\271\003>\276k\304\274\265\345W\275\275\234G>\227\314\353\275\330\3403>\200\302&\276(\rf\273y\\\277<\n\353\311=\360\223\"\274\371\317\021>\002\207\246=\302s\356=_\355M=\273!%\275\031\231=\275\210j\210=\247\"\337\274\3135m\272j\r7>\243\'\307\275\r\344\"\276\017\313\204;\035\207y=\350\221\005=O\351\3749$\206\017\276D\300\324\275\257E\354<\321*\333=:\023\t\275\260\036\002\276\304\023\251\275m|W\275,\345\361;\2660\242\275\244/d=\201\303;=S\377\001=a\346\264=\334\3413>dJ\336\274\233\177\313\272[H\'>\005\257\237\274\013\270\216=T\356\216\275\253\340+>\236f\206\274U,\234\275:`\241\275\314#\306=\350\231\307<\271\016\206\275\366lT\274B\370\352\274i!6\276\252d6\276\317\251\247<_@\016\2763o\210\275\006\022\342\275X\361\210=\202\327Y\273{h\201:\302\315\016>\353N\022>\032\356\231\274\020\332\010\275\"\340G\276\2052)=\372f\210\2755o\361\275\177\210\327=2\206s<\304\034\257\274\\M\362<hp\341=z\352s=\177\313\204=t\315~=\241\317\211\274\335\262\t>f\254h\274\237)\204=XX\306<\244\205=\2759HH>-9(>\017)\244=\332\235X\275C\255\377\275LET=\023<1=c\326\007>\005 \343\275/\311R=\235\251\363\275\374\221\032\275R\310&\276XR\310=\215\350\'\276?\275\024\274\2206\245\275\321\034\263\275/Q\001\276yk\014\276\236?\231\274\326/G\275\336\306\374\274\254e\032\2752\3127\276\250\373w=\002\240\300\2756F\317<yv\313\273\352\277.\276\220\177*>\214qp\274:\003\'=\\&\266\275g\307\007\276\365\372\273\274\207\005\304=\024A\277\275\276\270\206\275\245\362\214=\177*\305\275\347\375\316\275\203e\177=c\352\234=\236\t\021>\205\330\363\274\370\276\345\274\376\013\356\273\224e\267<\301\036\223\2753\352\250\275\023\005[=\024\340*\276d)F>\245|\375=U\236g<\244\371\026=\327\030\020=\014\t\332\274O\026\027\275*\323\274<\247~\233=`W\352\274\266s\345<^\243\205=\377\300\342=C\211g=|\237s\275\037\203\260\274U2>\275\357\340n\275\0272G\275\330\0068\274\026\206\334=sX\t>\346f\250\275Q\320\222\275*\003\036\276\336o\204\275>*\267=\212\276\223=\351\362 \274\302\360\351\274\252\341\220=m\243\306<\362\036\357\275\224\371\021\275u8\317<Z\r\244\274\364<\257\273\243\346\351\275X\025;=\265\024\202=FN\302<\014:&=\312\335b\27350\210=I\n\215\275Z\307\316\275\247NP\275\316=-\276\265j\243\275h+\225\274\205\367\324\275T\010\001\275\346\330\240\275F\305P\275p\027\254=\243\006N\274W\231.\276\273\222\316\273\rk\316\274\024\345\305\275\017v\307\275o`q=\3756\206\275\316y\357=\237+\246\275\350\332I>P\224\245=\267\342$>G\r\016\275\016\030\241=\320\204\350=\342\377\037>T\322\304=\010|\036\274\245\243\313\275x\212\227\273mt$\275\232\017\002\273RWE>\362\224 \275\314\325Q;]\266+>W\036I\276&j\236\275]\365\230=u\031\330\275\001K\203\275\311\016\020\276\034NB\274T\310\226<\343a\302=\203\237\376=G\252I>\n\222\343\271\326<\256\275=\2643>X\024\013<P\000_\275\017\317!\276\004\366A=<^\364\275\371Y\325<5#4\276:e\004\276\221\214\367\275Y\307?\275E\245\327=v\310\026=\2747\335\274&v\276:$m\016>+\035\345=\004e\202\275a\334\216\274BU\372\275T\020W\274W\202<>p\306\217\2756\360\001>\225\031\236\275\023\t\325<NP\202\274.q\367\275\373\274\214;\037\"\301\275\320\217\242\275,\241\250\2755\374\225=C\010\'>Y\350,;\002\022\001\274\210u\033\276Z\263\024=\354\3458\275\332a\325<\313\014\203\275\3243\273\275R\206\224\275\\{\322<\307\231\345:\360jU\275\007V\273\275\305\3568\276 \376\177\275\221*\326:\370\344\332=\t\321\"\274{\221T=\254\245n\273\244O+\275mVS=\327L\023\275\276\333\357\274B\210\007\275\355\035\370={\236\232=fA\217\274\313o\200\275.\310T\274\347\222`=B\372\313<\235\344\327<\334(J>\223\353F=\226=\030\275o\006\\\275\034O!=\277\302\024\276\365\262\270<\301O\254\275\005\224W=3K\230\275\275\320\227\275#\326\210;<p2\276kH\007>\347\203R=\2328\010\276H\245\306\275\\\2510\275\323\005\232=\252~\027=*\025\215=\207\314Z=\206rb=\001\365\211<f\247E\275\035\213\025\275\264\337\373=\205\327\270=\004\203\265\275\257\2705\275p\025\261<\240\226\323=r\374\014=\340z\341\2751\343\001>\337\354\216\275\013\3543\276\366\211\322\274\250 \255\275\'+\261\274\013\307\305=\201\337\302=b\333\233=P\253(>\021]z\275\016\265\242\275e\261\213\275\203w\005<q\303k\275N\364\230\274\343\252\216\274\362\t\020\274\255\324\213\275j\t+\275\251Y\314\275\340\312\236\275\277a\007\275&\013\310=\013\246\234=P.\202\274:h\243;\026\327\327\273g\017\327;0\201u\274\300\244\351=\032\362j<|\274\026<\014\034$\276\350\310\002<\033~\344\275*\313\022\276t|\003\2761.@>\305\213\321<\036v\007\276\327\005\301=$\363_=\270C\007>\031R\007\275\216y\214\274\200\2260\276\022\215\317=@5\006=$\251\000>\230\034}=\007+\245;\177\306&\273\330\252\223\274Jc\376=/\270U:\3529\214\275\212\365\247\275\277G\222\275\210\241\017>\350\354\n>`\'->\344\251\252=\326\354\250=z\317\251=a!8\275\022_\211=p\326B<\001\327\307\275c\211\363=A\351\320<w\361\223\275\270Z\000>\210/\312\275_\315s\275At\241\275\035\342\226\275\316d\002=\362\027\214\275\357\374\027>\207\304s=\226H\322\275|\334\002\2761\0335=\367\270u=\357\304\002=[6B=\2067\001>\275\265\253\274oJ\034\275\202\030*\2750;a=\344\274\233=\221)\252=\001K\305\2759>\020=H\026\361;\311\354\207=qv\">(\341\013\276tnY\275\335\004\357\273\'\252\325=!\033-\274\017\233\023>\372,\375;Do\245\275~\250\n\276\202Z\221=\373\365z=w\016\321=\n\367\254<0\324\215\274\0024\014\276\333\261\261\274Q\371?\275\211\244\367\273\225P\270=\203\211Z=\320\304\r\276\340?\372=\0356\033=\370%\220\275\'\005e\274\327I0\276K\373I\276\t\005\201=\200\225\336=\217\226\245=\212G\261\274\210l\273=\227\225w\275d\346\305=\177s\037<\022w\234=\016\302\266;\362\203i\275\366\3232\274\215\320\314\275j\323E<=\337 \275S2\224\275%`\200=\326m\300\275\360\230\025>\311.%>\271i\033;8\335#\276\217\0142>\273z\244=\216(\'\276\250\331V<\037*\263\275M)\370\273\363c\200\275\260\210\004\274X\0028>E+\322=~A\372\275\205\376\n>{v\206\275D\270#=\375\246\013>\361\305\">\302\271\014\275\272\307`<\251_\223=\303\312 >\273\357\206=\270\300\016>u\273$>\274\231\016=\214\211;\273U\345\277\274\334\222\326\275\032\223\277=\300\304\233\275\302\355\021\276\232Y9>\030V\361=6\3432\275,?\273\274oy\355\275\355C\304=d\260l\275\006\t\004\276c\244y\275\001\317\305=\322\324\016>9\356\307\274p\253p\273(\014C=1\340\356;-\031\342\275W\364\'\2763\363\016\272\245\314\224=\333\213\007>u\010\207\275\301\336\225\275\274u\322=\227@\276=\014\2376\274=\316\261=\357\366\347\275l\346H>\370\'\027<\032\220\207;<\356\214\275\265\266\020>*\375\250\274\215\241\204\275\210K\000>\"\321\242=Pe]<\026\2276\275\020\331\273\275\276\345\306=\246d\010>\272\330\344=.\n\203=b\021\220=Sg\244<\255\370\343\274Zz\020\275\375\023M=\007\007\230\275!(\247\275\215\337x\275B\006\357<*\2052=\337\361\026\276\312\325\231=\326\033\251\275\247P\270\275;=\025\2762*n\275\261n\300\275)N\022<\2462\271=\207y\231\275],E=\247G$\275>\270\251=\342Z\261<\216\310*=\215\272\276=\0237\367\274YW\236<\'\341\300\275\364G\263=\024ff\275\306\310\361=P\273\202\275\342\212\n>\010\363\322<\305\334\305\275)\005\336<\202\345\203=\331\021\311=W\242\\\27475\n\276\236\336\352;\357\014\013<\356hH;\256\260f<\025\251o=B\345\301<\242\233\245\2738\361%\276\366;\341\274v\320\361\275,3d=.\203w\275<%\346<\341\251\016\276\000g\367\274K>\300=\216\211\327;\036r\327\274~\300K>\373\\u\274\255\323\263\274B\243\021<\236wS=\2477\232\274\221\t\212\274\021\341\037\275Ou>\275\213lF\275go\257<\325\020g=\342\344\034>>\355\"\276@\253\330=\022\275x\274\242\t\343\274\217\027\370\273:\021\330\273~\220\271<\216\340\267=\006;[=B\314\350<\244t\336=\347\302\246\275\312\257\230\274\365\240\037\275\334r\331\275\313 A<\273\351\267=B\323@=\026\3666\275\330\254\257=R\363q\275\235\004\233\275]6\264\275\023\341\027;\325A5\276e\005\031\276*\224^;\210\216\032>30\240\275\256\375\215=\357\245\313\274h\007\205;TQ\035=\177s\333\275\360{~\275\035\374<>\300x\310;8\346?\276\311\262?\275Z\315\005\275bfq\2758\210+=Ho\033\276W\226$\276\320\244\024<\017\036\010\275~\010\013>}\210\306<Y\007\002\276C\217\324\275\376\027\031=\376\274\310\275~\204a\275\221\315=\276\367\\<>O+\006\276{\271p\274l/A\276-\241\261=#\026\010>\207%\237\274c$\031=~H\363=\250 \035>B\307j\275F\270%>\272N(=3\342!\275{\335\364=-\333\"=CH\206\275y\273\211=\264\340\303=\036\031\220\275(CR\275\212\270\360=\220\177\330<M\267\303\275\264xr\274O\263\020\275\305*\036\274d\022~\275Dq\236<?\200I>4\203\233\275\233\342r\273\360bh<2\243\013=/\223\345\275G\256\335\273\277\261Z=\305\246t=Td\347\274\3007J\276\344\301D<jq\357<\251Q\200<\265\020E\276\246\366\221\274.+$>\025e\230\274\356N\010=h\273\022>:\001\335\274\2645\020\276\340\244\\\275\377\324\216\274\260\004\323<s\361/>\337\342\004\276\010\r\274\275\356\204\263\275\355`\366=\372\220\'\275\353\372\301=B\350*>\332\024\370\275;\352\003>\3001\347<V\036`\275I\302G\275\215\236\005\275\001\372\">.HK\274$\374\021>.\342\375;\352`\262\272$\020#>\263\014\231\275\267L;>\275\303==ooJ>$\263>\2749\032\227\275i\325Y\275\017\275E\276}\374\203=\324.\316=X\266\320<q\010\243\275J\363\242<\355\267\240\275\314\205\205\274\214\254\200\275\274\356\034\276\004>\224\275~\260\367=\2116\314\274\357\010R\274\374\"\302=\223\007\243\275\025\241\277=K\211\344\275\365(t<q\257w<\204\247\030\275V\223P\275\001\347\027\276YUR\275yA\353<\246\241\002>\226\242\202;b\005\241=P\374\326\275\203S&<\213\212\241=x`\344=\017g\t=\252\033\227\275mm%\275C\277\020\276\002.\r\276\341\220\362=\004\365\035=\355\261\n=\230\177\272=\314\027\361\273a\013\203\275\302R;\275\306q1\276tO\300;\014\277\037\275\336\344 =\330\303\316\275\351\212\223=\230$1\276k,\234=\374\000$=\371\213\026\275\3709\025>S\2614\276\t.\304\275zx\246\275_\020\005\275\347]\363\273x\362\231=au\253=+\252\023\276\271\360\303\273\244{\216=\037rv\275/\263\n=\303\263\223<\342\304\215\273\301\210\322\275\374S1\276\200\371\301=\334>\020\276\030\220\200\273\207\331$=\350\311\263\275B03<\004*\236\275\3503\261\274\326\202\363\275\336\337\335\275u\215\001>\316\'\364\274\305\265\245=\t\313\324=\357\367\217=\213\026\241\274J5u\274% \177=!\2269\275\261\271g=M\021\261<|\265\257=K\3242\276SL\203\274=\215\013=\364\364\016\275\031\311b=\355\367\206\275\335(\031\276\327\"\005\276\177\257@;\360\237\024>Q/\r\275\373\363L;\322W\002=zI\030\276\277\373\243\273R\341\314\275\230d\311\274\"X\022\274\030\372\314<\342\016\244\275O\243\215=n\177\021;R\326S=l\231\026=\225\033\033\276\373rI\274\037]\227=\371\305\017\275zgI=\217!\350\275\222[+>5\255\326=\334\370\375=\201\035\031<?*\371=\021\210\234=d\326:={\016R\275\272\304(>J)C\275c\016Q=\356\353D\275\341\\\024\276\243`C\275\225\3671\276J\2040>-kJ\275;!\330\275\322!\220\275p\014S=-\241\023>N\0043=\333JB\276\206\252\246\275F*\021<9\305\206=\017_\346\273\3324\336\275\215\000\353\275QET\275t5L\276*#P\275%9\376<\221\365\222\273\312\006q=\225v\337\275p\224<>\323\231\250;j-\016=\232@X\274\252\245\260<\256\346R=\254h\224=b\277\202\275y\246\250=\352`I=\313\270^\275\303\235 \272\345f<\275\304)\035\275\320\274\247\275\253\335\317\274\306r\311;w\347\376:\207\337\267\275\374\2743\275\'\357\030\276\373v\324=\320\201k<\244\3778>)\362\262=0\007\002\276\242=\331=\257\225u\275?t\207\274SZ\037\276N\234\243\274u\3627\275\2529\223\275[a\241=\343\321\252<\025\331\364=\"\242&>\211Q\270\275X\225\r\276\272@\355=\025\246\227\275\003\306\254\274\021\237\220\275Y\206\342=n\240\206=\027F\273=O\273\233\272S\020\032\275\207\037_=^\215\214\2759\264\355\275\277\355`<4@\020\276L\312\005=:]\220\275\364\001x\275\305A\017\273\264\"j\274\257\315>\275\257\260\000\276\032\343/>\232\327\302\274k\251\217=\222\236\003>\206\270*=\227\2166>\300\277=\276\365\010\215=C\005/=,K\023<\253~\306=#E\022\276\224i\333;\322\272C>\310!8>\000Y\230\275\353\315L=\222\004\027\276n\014\035>H\276\020>\330\362\235\275\370i%=\316w\001\275\021I\311=\016\177\324\274\351\351L=\361`4=5\315\350\275\265\276\212\275R\261z\274V\030\243\275Sh\000<\323\356\245\274\002\235\030=\366\304\303<^^Q\275\227G\204\275mY:\275&S\006>\227\033\340\275<,E=T\342h=\304\370\346\274+\331>>5\316\265=\237Z\366\272\302\243*>\350\250\257=w\023G<\254\351k=\007\261\024\276\326h\216\275\205\010$\276\350\354\265\273\244\227C\276s\354~\275;\255\267\275\315\301>\274\017\357l;\306\361\214\275\212\"\203=\300\313w\275J\342\246=\210\261\206\275\363\367f\275\305&\200\274P\006\027\276L\213\331\272\240g\235=\\\035k\274\374?\034>\002\214;\275\252\223+<\037\275\001>/\203\032=\023\257\364=l\214X<\304s2=\220\210\035\274\234\370\223<a\320\246\2757\362\237\275B\352u;oA^=W\242\r=\230c;>Z\3642>\272\273\247\275\274\337\364<\314]\326=%;\026>\201\360\354\275\010\255\261\274\372\342\252\275\323j\336=\034\300\010\275%\311i\275\300\305\264\274\313\2504\275\335\007\3019\215\336y=\226qt\275nR\247\275\200\214\025\274\020\177\362\275C\347\021>\244\225R<\235A\256;V#\224\274m\216p=\347>\022\275)\314\007\274\263\031\227\274)\232$\275f#\013=:\302_\275\013\022\031\276?\324\025=`}_\275\357K4=\304i\240=\244\001,>q\3007\275l\275f\275\251`\364\275\211\343D\276\321m\375<\207\210\235\275\335\3632>\351\221\210\275\345\221u<\204\007\234=\024\344\315=\303a\261\274\247U\027>\343j\321=\013B?\274\351\342K=>\345\355\275\245\177[<o\266\021\276\273`~<\207\260\006\276\026\253\235\275e\332\312<8\021\251=\021+\315=r*i\275;W\255=\207\013\306<\237\032\240\275\267\212,\274U\202\356<\001\351\252<\211f$\276I\247\235\275\311\255\010>\334h-;2\360R=\336F8=\001\230:=\271\360F\275!yJ\275\375\313\307\275\312R\014\276\322nI>\375Y\367\275\261\026\022>\014\357)=:\024\211\274\023\032\003=\236p\253=3\325\215=]u\201=\272D\310=\002\246p\275:MA\275Qf\362<\317j\275\275\t\325\327=\224!\225\275L\373D\274\365\262\013\276`\250\261\275\257(\263=\"\"\345=\225\3504<\352\377\327\275-8\274\274o,\244=\212;\206=\365\037\267\274\026\263m=\004\345)=\337\366\253=7\301\331:\307\327\343<W\0356\2741Y\333=\374\330\241\275\236\326\366\274R&\217<,/=\275\333\362\324<7\260\272\275;\3003<ns\260<d\247\017=Qjq\2748\363\t=r\324\367=+d\257=\345\'\300\274\210\025\311\275p$\207\273\330\241G=\230\252\n\276k-3\276\372\305\333\275\361\324\023>1\311\t=\233\325\224=\330n\272\275\373\2672\2751\237\377=\323=1=\354\020\220\273\352\025\250\275GW\013\275\241rY\274\223\306\315\275\260\254\241=\263*\240\275\315t\335\275c\321r=\244\037)>\000In=]\037m\275K\274\236<\027)\371\275b\320z<\201\236\346\274\223.\204=\344\036p=\255\366\242=\225\310\352\273\354\333->\374\241\247\274f\007b\275-D\223\275\370X\241\274\223PH\276HM\252\273\361\337.\275(0\r= \3711>\0369\256\275\211\220\007=L\252\337\274\346k\266\275\262\226\020\276\362\243\257\274A\216\222\273@\216\024\276b\324.=\307\264D\276\230:]\275\300\017\255\275\333\004\253\274\335\023\221\275i\310^\275\027\365\034\275;\252!\275\r\202l<z8g\275\346\036D=\341M\341=\327\261\013\273\253\031\226=\017\277\372<n\243-\276]\335\313\275E\332\251\275\265V\355=\365\316\001\274*\236|=w\034\035=\245\003\357\274\265!1>\347l)\275\376\327,<\254\"7\276cn_\275\215\".<\260y\300\275\264\005j\275\363NT\275\336\211\231=O\234\364=5X\351\275^=\001\276\251\314\347<9\2726\275\311\r\210\275UN\234\275\361\251\225\273+=\010\274\254\'5\274\236m >\241!\213\274\305l\r\275\030\222\356=\217\323\036>\202v\222\275v\"\257\275N\361\260;N\2749\275q\225\362=`\364\214=\376\316}\275\357\333l\275\332\030\227\274\203GO\275\256\341A\276\277g\333\273\220\216t=o\205\035=\375\003#\276[~\313\274\\\201F\275v\036\\=\255\265\376<\222\250`=/\254\314\275\275\016\001>b\002\375\275P\207\211\275A\334\225\274\n9\374=&\300\001>J\030R\275\254^\031>\243\004!>j\215\341\274\263\303\372<Z\016\'\275r\331\223\274 .\003\276#G\265=u;\315\275c\337\r>\251\3257>\331\256\n\274u\254\037\276`M\325\273\2338b\275-\233\227==\250\202=l\027;<9\021\351\275\024g\260<|p\353<:\337(\275yA\357\275\344\327\003;\214\320\275\275\257_\246\274\335\340\240\275t\326\246=\201=O\275\240\365\033;\224a\036>\004\310\\\2753\236#\275\240\351u=z\307\013\276\265RF\276L\260.\276\341\224\236\275\345\240\307\275\355\276\231=\374B\262\275\320.\035\275\221\250\260\275\266.\253\275,\177\213\275h\r\035\274d]/=c!H= \271L\275\352\016\005>_\243\247=\201\366:\276\"\250:>M=}\273\337\260\2049A\331\007=\370\254\200=\030\374\317<\320n\035<\270\334\207\275y\301$\2761\340\023\274\276U\273=\246R\336\275\350\233\001=\001B\021=\363\2740=|\352\375\275\313\354\365\275\200w\034>%\277->\037\021\303\275j:\340=}\021\304;\017\320\361=\300\225\002\276\343\257\271\275\323\376\323=\035Z\224\275\243,\220=\237\222\327\275>MU=c0\323\274\215\326\360=p+\003\275\301dG\276\000\016\326<\354\227$\274\374:\324=Ay$\276\025\325 =:\303\246<\034\206b=\324Q-\275\207\\\217\275W\201x=\0253g\27523\300\274\354I\214\275\204S\016=\024\007]\273\371\347\241=\234l\207\273Fj>\276p\365]<k\302Z\274\342\240\033\2731\010\334\275jW<\275\026\002\315=\345d\027>\332\036\017\275\226\303[\275\331\014\262\275d\200\237\275\261\277\'=\241\253\235<J\327\372=\374\222 <\235\357\201\275\354\014\263\275s\370\243=!2M<;\233\323=u\234\207=V\025\035\275\322c\354;\240\232\343=N\235Q=\270i8>\232\202,>+.\007\275\372Z\025;1\0305=\363h\014>\260\036+>k\224U=|\010{\274A\2564=M+\323\275UTl\274\034r4=\335\274\350\275\213\r\216\275H\036\014=\0269\265\274\245\217\221\274HY\346<\224i\354\275F\'\">\272l\n<^\254\234\274\350Y\343\275\263\276\335\275\332{\315<\344\345\256\274\223\207+\274\207\221\007\275z\315o\274D\353\261;M(P\275\256\033\367=#\247\036\275i^9>\252=\371\275\252\374\337=d\252[=\236I\371\275#\223\034>\252\252?=4\370\356\275\337\030\254=\260\247\276=\202Li<ygJ=\306\036C>!(\203\275\210\203\n>\331\313`\275;\226\321\274\251\037\344=\367Y\272<\r\236\">\r\252\253\275\370\300\350\275\021\273\337<\345\350O=\207\014\206\275\021\275\035=\200k9\273\0361\332=\266`\001\275\322\023\302=\330\234\256=H\324\304;|\177\005\276ZB\320=S\365\025>Z<G\276\270\354\214<aL\342\275R\323\253\274\322\"\335\274Z\345\301=j\225\351\275\333\003\211<g\177\345\274\337\353\255=\"\307\263\274\2757\275=\237@\204\274\247\303\276=\360y=\274\242\325_=\322\251\373<U\034*\274\032\262(;\221\327\306\275\"\274\267\274\301\303h\275\340\207\307\274\340\032}\275\357d\253=i\007\277\274i:\224=\271\361\243\275\316\241\036>+\257\220;\300\2471\276\2533\013\276\271\364\000\276\206R\355\275U\003)\276\004\255\007>R\320\272=\350$\215\275\262\275\266\275\220}-\270N\2600\275\360e\202={\2617>\276\3573\276\345n\214\275G!\t\275X\004==,\250\264\275M\007\243<\375\321\221\2759\231\203=8\342\365\275\003)\217<\206\3372\274!|Z\275\227\315\361\2755\364\356=B\276\007>\201\326\305\275\260>1=.\205\216=\036G\206\275\0033%\276/[\361<\325\363\272\275\222Up<w2+\275`\333\357<3\300B>\263\241\221\275\2333\307=\304)\366\274\020\250G<\"\311\331<\026\247\226\275d\203\232= ?\017>\265\340`=\223\252\017\276~\277\025\275\247E\216\274\006\277\315=9\344\313\272)\177\212\275\271\230_;.\243w\275)\242\356\274\224g\000\275\217U\003\276\265?\272=\270\251\357<\013b<\276o\341a=\344\021~<$\225\200=d\333\370=\377#\030\276\220\313G\276\255_\315\275\370\177\367=\247\312\004=H\3248=\"q\352\274\3442Q>\315\364\013\276\322\334\217;\263\353\324\274\213T\242\274\271\375\030<\351t\205:\346F\213\273(\320\034=\231\203\330\273w\'\230<\301\206/>\232\342o=r:L\275\242\327\223\275\003 \214=@\353p=\237_\007\276\223<\255=s`G>\217\032\203\275\001~\334\275\211\215\232=\002\372\351\275\203lR=\272K\336\275`\320\240\275\312\201\270=\305\377\257\275%\337\201=\340g\234\275;\245@\275u\021\340=\021t\216=%\243\327<\024\3672\275\242_\016\276n\274d=\340\n(\275\367\216\321\275 )\363\272\307q\372<\0052\004\274\037^\362=\347\366\021=S\353{=\267\241\247=SU&>\357\017[\273^gk\275q\250\362\275\222\330\002>\235\007v\275&\r\361\274.\226X=J\034E\275\346\332\363\274\320\324!=:\342>\2768{\314\274\326H\227\274=\235M\275\356\216 \274\001\027\231\274\016#\204\274\037\001\003\273o\272\341=\250\203\247\275Q\234\262=\353\3501\273\265\271\024\275\013v\004>\227\\\365\275,/\354\273\232g\005\275cx-\2750\332\013\276\004\r\355\275%\202\330=\002JU=\346d\200\275O\t\027<2\305v=\231%|;\332-x=\354)y\275\302\0202\275\305rP\275m\"\310\275\233b9>tu\302<\200\310%>&\224\325=\367S\001>\354\270\220\275uVT\275\242\017\250<EFR\275\246\301\262\275\220\000\010>\342+n\275\374\"y\275\020\240\323=\255h\343\273\317tp\275h\315\210\274j\351\243<R&\264<\224O\341=t\221\240\275\261\250`=\257\251\314\275\327\372\273;\235\2046\276\224R\231\275\2128\006\275c\351\024\276\254\375?<\370W\233=pB\367\275#\034b=d\004\321\275\202\221\312\274i\217\001\275m\007\254<\251\001>\276t\333\235=;\035\252=,\325\241<\252\334\001>\\\377\245\275AUN=\014\n\220\275R\003\210=\203E\002>\016\343\n\275\217\022\004\271\220\225\301=9\000\273;W\270\205=6\322\013:&&\333\274\217\356\345=\250e\272\274\362\335\016=\232\277~\275\233\221\016\275\345c\224;\004\212\270\275~\2133\274\253\000\345=\312\312J>y9\006>;\3047>+\021\236\275t\206\362=\241U(=\022\276\240<\320\321~\275\256\327 >\350>\276\275q\321\221\2740\351@>\354P\205=x(^=[\211\007=4\245\346<\322C\316=\317\225\246=Z%\270=\334\322W<\014\243\305=\357)Z\275\010\023\315\274~\345\322=\264\232X=(\244\255\273\356gZ\275h\366\203\2752\022\225=\300o\366=}.\307;\014n\021\276B\362i=\036\010\031\274\0131z\275\'\211\001>-\311\202=u]\234=\362FA\2743\252\323=I\302\351=[\213\226=\020\275\023>m\366\335\275\357\347)>;\032\230=\334>\232\275@\311%\275\030g\223=\020\265\321\275\273\305\347=\355\205\247\275j\026>\275\253\223\337\2754\301+\276\326a\251\275<\232\035>\201\201\350\275l\304(>\270\250+=\377&\360\275\301\204\027\274f\214\017\275s_\321=\325\2749\275\321%\246=\260\033\003\273\302el\273\306q\331=\257\235\330<2\324\r>\213rm:\222\216\230\275\365\023\022\275\322\004D\275\270y\376\275\'5\313\275\217\256\214=\271X\215=)\'\256=6V\325\274<\024j;?\210\342<\217\335\233\274\257j\211:\'Y\314\272\t&V\275O}\203\275\033\340\007\275u\331\021>\340\314\205\275\"\304\314\274,\215\272<\337\342\020\274\261\006\223<\270\230[=\257\035\306=\254?\254=\243\313\354\275\014\347\213\274@\276\227\275\233\212\010\2752\2202\275\000\003Q;\226\016[=M\271G\276\377\262\344=I\362\243\275\335|\000=\177\310\004\276j\001h\274\257\247\024\276ir\r\275\2239\022>\234\342\026\276\254\365\227\275<\247\027<9\033\214=\251\343\207\274\223\336b\275~p\253\275\230\010\277\275\250\2430\276\017|I\276\332p\002\275H=\332=\027G\310=P3\336\274\210\004%\275j\360\020>\021\367W=\222_\344\275\344\335\256=h\034r;\363\346\352=\357A#;\014{J=\375I\333\275\275{\233<\317\351b=\354V\311\275\3022\221=5e\025\276JB\267<\022\032\343\275+\007\305\275-\277\037\2742a\361\275\227\340(\275|U\003>a\217\244\274\222\367\005\275\340\257\274=\326\315R\273\362|2\275\245\343U=\335#\306=\235Z\377\275\324\223\376\274S\031\":\025\250a=\351V \276{\321\241\274\004\266\350<\271\343+=N\005\016>\002\332d\275\262V3\276\235P\206=\310|\314\275f\246\361\274\016\n\262=\233\266!=\273\017c=\213\370\337=\240og=\315J\024<\211.\270\275\326/\265\272\353\335\017\275\326\277\212\275\224Va=\033|\026\276\017(>\274\372nC>\360\022?\2759(\000>\340FG\275P_\303\275p*\362\275b\320\241:\377\3511\276\225\337$=\376:\003=\251\216\261\275\263n\332=\242$D=\tzQ\275\022\374@>3\323\251\275L0\310\275J\004$=\334\356(>8\377\253\274\320\255\003>c\3305\275\3152~<@\235\342\275z-^\274\270u\013>U\204\331\275\013\255\004\276\030\310\265\275\327\374I=\3316&>n\344\270\274#\310\030\273ys\016\276\305\3222=A\364i\275U\235\340=\231=\337\274\206\216E\272\266\020~\275pV\265\275\024S|\275F\335\306\275\006\354\315\275\335$\331\275\317\224D\2746\206\363\274\236\013\206=>\232\325\274\\.h\275\335\316\326\275M\260\322=/\256B<\263K\373<\215\240\023>\362\265\017=\320\2256\276\021\306\304\275\343!\016\275Y\210\264=.\037\270=\263\372\216\275\'\035\225=\370=\227<\241\3646=\210\257\034\276\370F\301=\303Q\033=R\212\213<\351?\337\274\314\200\314\273\302.\236;\277(;\276\306\303\324\273\247II=~,\204\274R\227\304\275\307\"\030\275\2526\315<\243\301\205\274\371\0350\275q\2002=K\\\037\275\257\002n\275l\203f=J\014.\276\327\327\275=\233\225\237\274I\003\\\275\000\222\310<l\336\244\275\275\232\260\275zf\265\275\371\"\254\275\246\005\217\274.\334\256\273\251\222\317=\300\352C=\340P\022\276\254{&>\323hY\275\337\201\352=\273\t\273=\t\326\231=\372\035\264\275R\351\301\275\342\223\t>\036):\276\025\311H=\230>\033\276\340Z>\276.\t\020\276\005\222\205;r$G\275\373\321\004\276\336\253\244=\252\314\344\272\255\203\352=\306\002]\275\034\010Y\275\361m\207=\327\367\245\273D\321,>k\016\004\275?\017\214\274o\222\321\274\267\007`\275\237\240e<*\3046\276D\271@\2751\223\345=\003\254\307\274:\312\n>/\331\233\275\3145\222=\256)\013=\214\365\226\275\027\317\317\275\233\335\203\2753(\271\275\207*\005\276\345o\306\275\303\221\323=\303\272t=\276\374\014\275\204.+=\251\302\201=\312\221\264\275\254X\342\275\263\264q=\373\277\250=\'bc\275i\361\357\275C\222\030\276\3115R\275J\230#\276\311\225\002>@\304\034\275\004\2734=\370}\213\275XP\006=,7)\275I\253\247=\216\235\366<\245\267\005\2767\300\010\274\271c\370<\360=\370\275<f\027>\244w\036\2767e\257\275\034`u\275\266\222$>S>\377;\260\002\376<\366W\351={R\020=]\353\247\275\303\034A=/\253\r>\032\\\'>\006\342\356\275\356S\004>P\020\204\275\374\264\033>\245\2043\276\226e\352\275\357\243\216\275\\z\207\274l\345\313\275617>5$\343=\027<->\275\2653\276\005N%={\2346=#t\217\275\355\330E\275\224\017\251=\026UZ=\222\215\304\274jo\222\273\017\3525\274\r\314\234\274\0336\023>(F\321=XFI=\31080\276\237}\211=Q2\241\275Q\003\336\275]m\257<\000*\357\274\"N\n>t{\003\276m\212\271;\366\256\r=(\327q=O3\270\271H\006|\275,\353\321\275\261\277\334<[V\'>00\313;\344:y\275\200\034\004=\237\204\351\275\214\271B\276\272,\205\273\350[\002>\276yA\2759O \275\202\260\351\275\227\323.\275\333\363.=\205\366\\\275r\2145>\217;M\275\301nJ\274\203\344\225=z\267\220=\254\216\334=\037\356\000\275\311.)=\372\002\007\275\206\236Z=\031Y\031\275\220OY\272\365\036\202\274\333\212\354\275\3773\202=G\036\226;\376\2450\275J\354\220=z\350\362\274\257b\000>\266\264\n\275<\232X\275\264\210\014\276\356m\">K\320\357<z3\225\275u\302\227;\234\345\013\275Zj\'\275\251\2362\276\345\030\014\275\242\036\316=\274\3277=\033\n\004;\203U\203\274:\314\243;c\343\271<i\303\370;\342\230\341\275z\t\027=L\374\024\276\310<\\=\262*\373=F\242\r=[V\306\275U\365E\274O\301\017\275\250k(=1\010\202<g\207\305=8\373\267\275\277\206\253=/y\236\275WY/;\271\235\'\276\026\341&\274\235\3772\275\207\216\253\275\003\212\031\276\010b\\=!\237\231=8m\227<J\007*<:`\305=h\247\301\275,:\021\276\004\\\252\273hr\201\275\370\341\236\275V\253\001\275\306\276\354\2748\310\350=v\203\361=\024s\014\275^\241\003>\351x\037<g\230L\2745\330\002\276\274\251\264\275r\210\230=\203|A\275\371\206\023>^\013\001\276\263\016\337\275<\351B\275\261\0079=\033\240\201\274\314\251_\275\003?=\276\252\307!=J=\024>\207\206\221=\246?\305=\013A\201\274\031t\324\272D\262B>B{\363\274J\227\370=U#\240=%\371\220\273t6,>9\3137=\224\014\226=/\216\302\275\226\037.\276I\000:\275\216\260\337<\216\034|\275\037\365\233\274\247\355\377<\366\'E=\314cy=\r\264\003>\250\315\032\2754\314\323=\274\216a=\214[\255\274\350u\037\276\315\271}=NV\316\273a\322\033<\311\243\235\274y\253\266\274^\310\331\275\265p\222<LK\306=8K\247\275MIz\275\363\022\234\275\301\264\346\275\006 \010>o8%\275%\t\270=\353bn\275l_\200\274\364Y\205\275qn\210=\2357\022=\363=\202=\341!\316=\2027\220\275\231X.\276o\371\020>\352\312\250\275\002\371\023>\266\034\r\276r`\252\275\366\031\241\275\265\332\004\275\256t\357\275v\223C\275\357Mi\274\001R\377=4\334\302;\210\331\237<\210\177\313\275\315\247\212=\010\307\354\274\337}\001\275\336pM\275\342\033\013>\013k\366=F\366\325\275 \232b<\307\227`\275\026a\276=X\360\006>\240\344\001\273\333\365\261\273\330\255O\276\361\335Z=\026S\241\275<\263\276\274\020\021\356=\207\225\351\274\220\345%\275\235\342@;;\005\302\275\273\200\373\274VQ >2\344#<\026j\"\275E!\255<\337\302\361\274Z\270\222\275\255\230\335\275\336\2053\274\325\232\255<\003\346\265=\332\267\370=H\251\227\275\202\3348=\370C\270=PD\371\275s\376\266\275\023\202\">\375=\316\275\020\235\235\275\234\007\031\275\002fV\275\221R\241=\323\366c<H)\302=\321\346\n>r]\004>\032H\001\275\177q\302\275\225X\243=v\n\035\275bJ\\\275+\007D\275\303&\204<\254\370\364\275\225\021\324\275\272\230\324=\267\254\371<q\331X\275\031\022\301\274GI\271=+\374\027\276{\313\265=\241\030\250\275o\3665\276\203\\^\2753\312\304\275\352.+\276jFA=\332\243\017\275\265n\317\275\201\334e<5\030\354\274\227\255\010\276\010on\273\226J\306\275S\334%>Ni\211\273\236\235\376=\3643@\274\0071@\276A\370\362\275\241\0362\275\323\261(\275gws\275\\\343\007\275\247\336\016=\360\362\336<\332\233\201=\333z\n\276\336\262\027>\031&\r\275v\310<<\026&\221=\023\205\366=\235Tc\275\027g\370\273o\215\301<\3470H\276\025\224\225\275\231N\327\275\375\353\240\275\257n\253<,\271\306=\216\250\372\275\'\324\211\274\013\315\032\275\301L\224=\325N~;\n\322\312=\243\366\201\275~\323\004>1\201\322\272\005\303\022\276\264J\n>\363j\276\274]N\304=\232\353\013=\256\t\035=\372z\255=(K\207=\307\310\234\274\341\303c\274\\\'\213\275~\376\341\273\216\371\204\273\271\331\254\274t\037\265\274\242\270\036=8\341\017= T\241;\007%\360\275C/\371\274\032\345\001\275\212o\204=\234}\r=\204kH>a#S\274\023\247\266=h\302\232\275I\332\026<[\235\314<\r\317\240=$\356z\275s~-\276k\354\261\2759b\r=\004\021O=6\332\275=\331\021\277\275%|\r>\021z\277=\303\363\332\273}\274P<\236]\260=\035\177U\275\002\333\"\275\\(\241\274]\273\030\275\234\355\345=\034&/\276\272k\231=\206\271\r>\262<>\275*\221\272\275\275\304\303=y\302\327<\301P\264;\332;\207<\257T\231\274\tp1<\324{L\275\222\225\324\275+\3004>X9\224<\264\273`=pV\025=\005\251$=^\375\370\275\215]\210\275\241\370\347;E\373\353=\222P\254\275X\303\006>v\271%=K$q\275\n\001\324<\363\235|=\227\3022>\232\271$\276W\3470\276\0077\326<\302J\202<\264\344)\275|\n\007\273\354\035z<\224\024\034>\337\201\311=\201\024\210<\271\267\004\276\3616\260=V\230\366<\367\362S=wx\010\276\016Z\315\275Uy\2679_e\333<\377\374\200\274\223#\226=\255\265#\275\272Iz\275\035\023,\276XH7\276\373\231\035\276o%y\275\341\334\263;0R\001;\372\362\307<U\353m=yk\233=\211\373\'=\203lq\275}\255*>\023\003\220\275\257\274\316\275\315v\261\275,\205\002\274DWT\275\363\371\n\276\272\211>\276\2205%>\211[\245\275\332\206\304=\320\330\234<}Ji\274SE\327=\017<B\2755\017\r>\215^\303=\255}\225\275\245\253\301<1\017\203<t\250x\274\002\236\324\275<\323\260\273\245\226\233\274\245\206\224=/\307\203\275\373<S=!\361S\273\373\006\r>v\337y=\362\3425\276e\014\267=\'\017\340<\256s7\274\225\300]<\246\213B\275\324\311(\276@*|\273\r\3139\275nL\343=Q\244\322\275\312t\313\275\256\243f\275\236S\"\275&\261\376\2742\274\031<\027\024\233=B\277\355\275@\273T\275\326\014\202\275\373\n?\276 o\241<P\364\203=\3126u\275\371\025\026\276\357\003\016\275[\3146=\220>\225=E\004\273=\364\002-={\227-=}[\363\275\303f\300=\201}\262\275*\004\227\274\023v->\230\307\211=\201\321+\276q\3309\275\354\333\270=q\037k=\201\343\214<\223k\246\274x\365\344\274\352<\217=\354\253\202\275<\220\305:\377\340\373\274\355\306\035\2752\220\247\275\347Fb\275\237fz\275E(\r\276^\003\037\275\014e\207\274\322qO\275>*g<\373\374\036\273\314o!=\372KG<\313\021\314=\257L\017\276\204\017\245:0\302x\274\253\327\352<\330]\225;\037\335\244<(\212\214=\026\247\330\275\313\0260\276\350\3110\275\322Mm\275\255\311S=\310\337m=\334\265/\275]\010+=Q\355\247\275/\220\014>\232\242\340\275\270\372\236<_\326t\275\323d\321\2755r7\276E.L>(\200\232\275z\304@>\006\225\022\275xb\210:\371\261\016\276\nh\255\275\'\264\254\275\326\031\033\276\226\245\000\275\236\'\307\274\221\214\326\275\223,\023=B\033\250=`\212\304\275*)\251\275t\207\026\276Sm\202=]\275\013\275!\370\314\275.\027\203=m\024\324\274\305\235\206\275\364\223\024=\304\364W=\206h\360<\347\274\247\275L\213q\275q[\'\275\353J6\275|\345\223=\230\000\352\275\344Y\010\275\034\251\037=-\357\275<1f=\273\224\357\025>\340$7\275v\364\253=\311\221\323=V\005\033=\367\321\243\275\363\370\n<&\314\257<\245t\372\275E\"\373\275h\240\010\275X\374=\275_\371\300=w1A\274\363}\205=\013cz=A\3171\274a\276\217=`\271\220\275#\177\013>\224\324\003\276\221\305\270<\343\367\220\275W\332<:8\017\236\274`\211\032\275\301\267\t>\372O\274\275\372m\316=\0009\004\2759\353\306\275\342\361L=\241\354~=\264i\343\2753Y\n>\"\277v=\352\310\205<\227\211\3549\r_\245\275?\353\005>h\3149>\230!\364\275\203\277\336;\362\251\n\276\355\203\327\275\214\371.\276\203r\017<\271z\243=`K\256=\273\320\335\273\265\372\353\275m\247\032\275\2643B\276\224\006L=\277C\034=\303\314\351\274E\n\\=7\314\231=\3634\007\274\2305\005>g\031\n\275-2\343\274\316E\017\274\341\235\315=\037U\225=\227\\\207\275\370\363(\275\274h\022\274\316\344\021:\311M\211=F\2512<\005Xj\275\344\363\366=f\016\236;\027\224$<\020\217\003>\031O\211\274\333\333\n=\300\000&\275\342\365\251<\371\370\304={\035\037=\323\203\243=\242U\204\275`\225\000\276/7B\275f\237q\275\3108\031>\017{C\275\326\004x\275\365G\217\275!\316\234\274o\245\301\275At<<\322C6=\006DZ\2753\231k<7f\333\275$\375\340\2752N.=?b\023>O\232\326\275\254\372~=\036J?=^\331\n\276[\367\313<p\245\006>\377\276\312\275`\336\002\276\251\324\035<\252\274J\274\236(\024\275\020P\216\275\343\261\254=:\010G<\271\253\347;\374\010\021\274\000\034\021\276*-C=\010\377\301\275\310\005\242\275g@\323\275\000E\331=zYE=M\215\220=\250\355\273<f\270\270<qdU<!]\021>\355D);t\341\035>h\010\243\2753A?=\032\376\177=D\376\243=D\223\005\275Z7d\273n\273\315=V*\307<\317U\357=41\336\2753\301\337=\333\213\004\275\200!5\276\275*\000=m\362\245\275z\275\r<\304s\231\275\271\037\247=\222+\033\276s\305\"\275{*D<\263\212B\276z\3453:x\244\226\273\247\345\360;\233\230\036\276\233\337|\274]W\271\275\265B\223<T\275\347<\261m\255\275\322y\367\275\223\376\r=\032?\347\275\342\360\274\275\372]\201<\r\203\304\273~,~<W*\371=2\346\354<8\242\272=4\\\277=\240D\t\275\\\326\032>\320~\306\275\321\347\031>hI\362<@\3729:\177_\271\275\253%b=\305n\000\276\332x\354=Q6\233=\016\266\311:S\177\027>\356d\223=\030D\236;w\306G\275\327\267(>D\325P\275\002\232K<\031\222\021\276c\nM\275#t\252=\311V\223\275s:\364\274\277\215\211\275\237vX\275\201\371\024>d\303\316=\245K\253\275\344\024\224=Y\263 \276\240\240\221\275\243[\314\275<\216\302<d\234\272\273\343\267\302\274\035\224\202=\377\224\034\276\316\031\317<3\365\356\275\017#\227<\276\030\004\276\307\034\253<\223Gu\275K\257I\276\273.\316\275\352>\343\275\373;\324\273N\305D\275\220\017\346=\022\007\211\274Z\341)\276/\026\024=\020\017\316\275=X\232\274\307\255p\275v\354\354=\227\025\205\275\261\204\312\275\245\234,=o\212\343\275\037\016#\274s\027\347\275(o\220\274?\375*>\257\303:\275\260}\010\274r\325\251<+\251\256<\245\213\330<\373.Z\274?w\034<\353\340{<\254I\272=o\037\343\274\020\217\262=\351N\026\276)\257\234\275\202\250\200\275She=\323\\\362<|73\274\206I\255=c\013\021>5O\207=\"\2069\276\363\377\373<\231\030\303\274?\354\030\276\342P\240<i\215:>\315LQ=o{y=\230e\244=\250\234\216\275\275\034\236<\345\247\335\275\310\256\234\275X\227d\275\013;F\276\371\2069\275_B\250; 9\336\275D\241\242\274\343xw\275OA2=\373\207\001\276\036a\n\276C\342\335\275\321\302D\276\2473\255\274\213H\302=\274\221e<\\\262\254\274\252\275N>H\204\342=c\311C=\336\022\n\276>\367\205\275\337U4>\252\331\033=Jh\031>\271\037\310\274\214\243\030=s\271\352\275F&\330=\267\305\315=^\237\023>\327Y\024\275\257el=\017,e\274s:\376\275\343\302\221=\334\310\334=\3013\037=8\020M\273\245.\372\275\331\300x=yr\243\275\243\361\234\275\007\305\232<\201\272\320\275<E\001=f/\227\275]gd\275N\032\205\275Q:\220=\366\235\226\2757\003\007=\224K\016\276\372\313\343<-\323\252<\305\235\037\275\311\350\033\275\214{\264=\222-\311\274bo\016>\010\177\201={y\340=\320\027+>\355\356\243<p\t\341\275\0246\210\275\257\314\240\274\n\251 =\251,L:\213\261\024=o\203\360\274:#\312=C3\227\275\205?\017\276y\207q\274\341\'\233=\"\304$>\255c\037>\342\333\301=u\274+\275\030\340\277=5^\371=(\350\372\275i\321r\274\322\0339>\202\004\324\275\234V\352\2746\310\221=\321\"\212\275\340{\231=\035\330\000>\264X\231=\3772\271<\210:\214=\211\004T\274\036\336\r\274\307\354W=*K\241=\311v\276=\370\221$\276\n,\215\275;\304\275\275\374\017\314\2742\005\332=^\314\273<\212\350\234\275w,\353=\342;u\275q\364C<\226\n3\275\370\372i\275\306\375_\2742a\265\273UJ/>A\326\010<\215G\223=B6\227=\211\3758=\246=\376<\234J\212=D\327\311\274)\216h\274v\026\304\275\217!#<N\225\210<\367\203\243=\023\241\034\276\275<\326\275\215\"\224<\341u\244=d\031q\275[\031j\275a?\215=_\325\205=9P\027\276\016e\275=\222\333w\274\215\371\342\274\271aM\275P9\315=\'\356V;\315\212\201\274%\330%>\350)\354\275\215QS=x\244\265\275Y\373\213=\r\\i\275xq\3559\\\224*>\367\303\236\275\263\312\257=\314\'\004\276gK\t\276C\362\267\275\032\017\013\276LF\304=\371\333\310\275\204|t<\327\360\336\275\005\213\210=\216:\214=\215|]=\025\"9=\337\231G:\267H\000\274\234\211\222=\2624\037\276i\363?\276\247=|=\353a\330\275\350\2374\276\213>$\276o\361\263\275c\371\256\270\300\177\242=\311\323$\273e\332u\275\021\205Z<\360\363\216<\361\357.\275?\262\272\275\223\353P\275\251\024\310=\344\254\211=\273_\005>(\020\277\273\033\3050=:Z\021\275Q\034\265=\301R\022=R\230\353\275\322\371\223\274\272\2373=\275O\250;\026\266\245=\026\276]\275\201_\362\273s\361\016\276\234\337\234\275h\325\235\275Ln\034\275d\227!\275\240\202\277=\341\362\002\276SO\363\275\tg\024>F\332\352<5P\026=;X[<\346&1\276\"\210\032\276\353\364\246;\371T\201\273\213\r\317=&\247\024\276\224\243\343=2WC>\337^\366\275\217\343h=\330\355q\275]Y \274\343\377\334=\265\311\023>\020/w\275\330\370K<\327\242\"\276G\264C=+_c;\341>\312\273\177\016\352=\257\032\314=\244\324\216<O`<\275\353\313\230=\303u\315=\364^\374=z\254\350\273\353m\337<\"K\215\275w\271\337\275,\245\371\274\216\266l=\365\224\257<\214\210*=\267\247\233\275\303\313\263\274\230\336\252\273\233V\233=\275G\245:\330\267\237\275\177?\005=\3451\370=#\355)\276\235\037\203\275x\255\037>\030\225\241=k\006\200=\265\027\212=\000B\325\275\320|\277<<\264\277=\333\366\373\275o\331!\275\222\207\261\275\003\371\200=s\013\330\274J\376\347\274\272h\017= %\325\275\346\032 =\362\034\306=3\262\377<\353`\242\275B\266\202\275\204\r;\275yj\322=\256$4=e\371\013=?\231\333\275C)\362\275,\033\206\275e\371t\275+\373\314;\340,\310\275\264a)=\021(\235=~\313m\275e\244\224=\2506\205\275\256\341\024\276p\357\024\275\311\374\r=\303(0\276\266\207 \276\236\237\206\275\002\034 =\236\212\263=\253`O;\r\037:=jp\023=X\\\n<%\236\347=\3473\263\275\243&)>\214\025,=\356v\327\274#\t\030\276\"W\321\275\366\272\001=\336p\005\276T\212\307=\360\224\323:\000\"\234<\267G\214=\267\232\347=\326e\013<\271\312\034\274\221!\227<\235\213^<\243\351\330=\376\251\365=\204R\221\275\320\266\256\275\371\241\002\275i\270K=0\026\270\275\0308\326\275R\026\301\275s5\030\276\202\212\305=\2066\333;\036\003\301\275Q\360>\275\267\234\n\275!\352\212\273\300\255\000\276\227\350\231;\025<\347\274\027]\313\275\261\240\274\275C=\037>I;\254\275\335\017\363\274a\226*>\231\223\025\276m\222\251\2746\t\245=2\253\217\273R\204\352=g\355\371\274{\220v\2750\255\330\275b\031\330<\343\331.\276\000\321.\275\001\021\010>S\310\323\275ab\264=\370\241\312:\253,\005\276\266X]=\301\252\204;g\356\365=\340\227\266=\354$_\275nlR=\374S\216\275\277sl;f\214&=\342\211l=\356\242\022>\361s+>DIK\276c\3629\275 \013u<R5,>\026\337\355<`\006_=/,\305\273\332\022\013\276Y\3673\275-\323\317\2755B~\274\304\306\010=\234\274F\275\r\3463\275\r\254\230<z\373\206;\344\034\377<@\202\265\275\373\305\223\2755u\004>V\242{=zs\010=O*_=t\343\331\275\247\036;=\036\016\324<2\370\374=\3554\332\275\303\006\315;A\211{\274\373]\244=I~\313=U\201\004\274;\314\203\275\004\365\223\275\026\252\270=\221\304\037\275\273\202\023=\356\246\313\2755\264\327\273\324\317-\274_\260\326=\\\265\202\274\333\321\342\274\350;\027\276\027\334\037\275\033\267\262\274\033\364Q=^\020\252=\224\357\363=\023\230\277\275\320\177R=SVC;\313\360\227=-\271\220<\2323\005\275\311\365\274=\262]\016\276\200\261\350\275\211-\245\275\006\307\030\276\237Q\317=]8\324\274\230\017\245\274}l\212\275\367\212D>\353\374\304\275\317\347b=\347m\224;\313\3053=\325\323Z\275\241Pk\274\rh\246\275\307`V<\027v\226=\317\252\032<\321\006\223=\n\224\025>\270M\006\275J\031\225=\027Z\215=0\0370=0\003\267\275_\354\370\275\t\304d=4\031\016>\010\266X\274\241\332\346\275\203\316\321=?5*\276?a\344=\333k\223=\353VH\275\022\037\345\275\275:\237=]v;=P7\240\274\370\237\003\275J\3275=\030\016\330=U3\201\274\304f[=\024\271\330\275\270\327\014\275Q3\347<;\301\364=\321a\357=\310\224}<b\314_\275\2773>\273|\216\364\275xk\255\2753\256\247\2753\177\274=U\264\303=p\215\360\275\334\361\233=\241\303\347\275+r\306=\340l\202\275\033\375\212\272\342v\004\274\013F0\275\n\3525>\367\257\327=l\372&=>\035z\275Up\375\274yZb\275\245`\254=~?D\275\320\315\266\275\310\254\234=\'\272\344\274\351\213a;&\321\332\275(\310\304\274\302}\373\274a\032\025>j\232*>ir,>\017r6\275\'(z=\303\033\030=_\177;\2766\037\205\275V\365N=\255\016\340\275\327\352\210\274\0325\364\275\267\241\230=\363\377y\275$\203i\275\373\020]=\343\306\363\274\033\345 \275\311\303\255\275\274\t\022>\364Z\365=\200\030Y;\261L\020>\356\305\353\275{\272\267\275k8\036\276\313\227\267;\n\274n\274\263\311!\275\nm\030>I`\n\276U\3546\276\267\306h=\366\323\245\2746\273\232=\250\350\361=(\020/\276\262H\263<\"\255\227=CzZ=Z\337\207\275\"p\032=b\225K=`^\360=\355\373\213=p\014\342=\364\343Y\273\260J\000\276}\212\325=&\214\265<\315\220$\276\255X\251=\256+\341=\270\003\342;\211b,\276\255/\014>^\320\005>\030\207\206;\250\004\370<H\016(>\245\341\262=\177e2\275=\231\252\275\361P\242\273\225\242.=\344S\235=\013\177\n>\250\225\r>(\021\223<\025\341\313=\324\314\014\275\345\005\310\275+J\032>86\326\275\276\225\336=\231\254\305\274\016E\362\275\\\227/<\372\347\321\274\004\322@>\037\3235=^\343f=\273\322\311=\263F\003>K\234\374\275\225\262\216\275\000\217\022=\027\205\335=\351!G=*\377\032>\315\371\223=\272O\037=%\372Q=\207\177\207\274\326\354\353=\202\333P=\006m\215=\234v\007=[k\255\275\335\211\345\275\200\227\227\274x0z\275\003\331A\275i\\\301<*\362\014\275{\010Q=\247\235\314\275v\004\235\275D\317\274<s\252\201=X\201\025\276i\037\004\275[4\212=\220\330\014<\370\271\300\273J\237z\275|\026\226=:6 \276\273R\t\276\310\270J=\304l\016\276\240\261\317\275\214\216\250\275\277e&>o\263w=)Ct;a\341[=kL\247\275,x\034\275\266q\253\271^\364\n\276\222\177\304\275\343\024$\276 \242T=;8\016=?\330\030\275\234\342u=\341no\273\034\342\037\275\3724\302=\227s\203\274\264\253\312=\251i.>\307N1\276d\345\303\275d\t\032>\301\313\224=\310\326\025=X\034\217\275c\007\006>\226\332\237<\257h\256=4\371\254\275\035o\014\276\271\211\"=\301]/>\255H\250=\347\361\335=\263:\273=L-\332\275qQ\356=ce\207=M\322\003=\262B\007>\346T*<O\244\256=\361y\006>r\3247\276\024\353\261=\354\247\023\276U\307Z\274\243\006 \276\305\035\231=\202x\274=\003Pa=&j\003>\220E\020\276\360\200m<\304\347\305=F\313\305=\337j\201\274\274R\325=\307\3219\276\367\252\254\275\216\255V\275\255\n\215\275\n\200\315\275f\374(>\312\357\024\275\340\265A\275$\331\315\275\206\325\007\276!\266*\275D\024\274;\250\367\375\2753\031\241\272\346\205\212<\346\207\227\274m\027,>\365MI=\233l?\276\326\361I\276\r;\003=\031\372\022\276\340K\253\275\205\215\310\275\321D\205<e\367\313<\254\327\333\275\232L\204<\223j\254<\364\274\037\276\363\212\212<\344?i\274\353\357\273\274\334\343+=\375nU\274\274\335\216=\216\361\263=\236\242\022>\000\353\001\276\265~q\275/\357I\276\211\362\217\275_}\005>\"q\260\275\356\225\2019\204+\222=1\331{=\300\323\t>o\025\023\276\250\036\300\275)\325\264\2745\260A=J\262);e@\006>\321\341\003\275\013T\276\275\001#\211\275Id\355=I\210\253\273\312\022\347\275\007U\023>\333\256S\275u\320\007><\223k=w%\356=\303\307\251\275\031\211\221\275\243@\332\275\016D\277<\265u;\276\245\014\241\274\320\006\016\276\307\247\362=\203P\237\275\236\350 =\276A\356<P\323]\275X\314l;P\306H>p\200\351\275\234\245\203\275\310\302\033\275o77>\017j\200;\033\035\321=\321\025\032\276\211\320\244\275\221\250\324\275D>\232=t\215\'\275\224\261\271=c\372\336<\177\315\"\276}\034\215=\203\225-=8\350$>\240\343\374\275\017\245\371<7\2335>\234\2106=M\363\013=\035\'L=a W\275\212\276D\276\326LI=\353\'\274\275\3555\210\275C\003\367;\344\265\005=u\325\206=Q\216k=\276GP=\350\221c=\372\232\365<\226\255H>\272\300\246=\207P\356=\035`\336<\216F->k\373\207\274\301V;\276\211\025\037\275\325\037\270\275(\177\374=)\237K\275\277\026\035<\272\315\006>s\345\356<\300W\357<\'v\265\275ww\272=\027$\300=\362\315\201<\244\257\261\274o\271\341\275\212\323\311\272\014\020_\275\010\331\024>\265U\234=\367B\031\276\341\354\226<\232e\240\275\256\240\243;\354\263\027=WBy<3\"x=\272\236;<|V\024\276\247\265 \276=\203\216\274\237\020\013\276\003\2540\276\241\2705\274\013KJ\274\016 \374<U\014\250=\345\346\367=\211\277\n>)\260\323=LZ\031\276\022\240\372\275\002\3510=s\344\231\275F\325\245=Vu\317<\247\375\254<xq\201\275\030_=\275=C\216=\037\000E>\206\"[=\006j\241=w\213j<o\310\n\274P\024\337\273^\373\000>r3\347\274:\010\032\2768\003m=\020lj<\3174+\275:\014\032\276\241{\214=\237_\241\2750\357\250=\334\351l= \037>\276N%\335\275`d\367=\3161\017\2768\'`\275\2527\361<&\354\014\275\375E\233=~;b\271s2s<\263\227&\276\253\215\t\2763\364\201=\314\357\024>\233OI>\204\"\017>\370\337\244\275\2415\233<\277)?=\340)\024=T\266\222\275\211\201Q;mB\224=\335\343\232=\372\341\025>\035&\017=je\001>\254\236V<,\362W\275A\025\313=Ki\010=\202\031^\275;N\017<\262ZH\275\345#\344\275\253\221#>\244\347\006\275\244S\253;\263\231\344=|\323\330<A\030\210\274\232\344\003>\342C`\275\326Z\232=\245\204\214:-\206\024>\373\006\320\275/\235\315\275\r\305\222<)A\321\275\341,\016>\300\255a\275\004\3247>\212r\361\275\256C\216=K\244\322\271{\363\022\275\tR\362=\260\346\003=\005\3372=h\303\251<A\032\225=\003\017\325=\366I>>\023\350K>#m\363<\374&\240<\323\007\030=7\204:\276\376}\321=\255\240\320<Ks[\275\302\333\367;/\202\r\276\215:\352\274\300\367.=KW\204=tP\006\276L\344 =`\264\251\275>\330\264\275\220t\023\276:\346\210=}hW=D?\321=:j\000>\202\243\341\274Lp_=\n\226\247\275E\0160\276l=\032\276\214$\360<\375$!=\023\305\376;,(\312\275\210>\034\273X\267\325\274\360\374^<\010{\253\274s\314\004>\365\236\t\276\"\030\235=\037_D\276n:\273<\247\205\204<\360\352\026>\001\247\273\275\305\200\036\275\275\221#\274\013\000\250\274\"ic\275\250_\000\275\'{\207<\3677\274=\314(\274;\000\236\304=\264\354\360=\373\360\365\273\033(1\273\342\2729\275A\264\005\275\rA\216\2749&\300=g\t\232\275\325\222\020\275\245\240\277\275\332\351\341=|\021\351\275f\377\023\275\272\234\010\276d@\032=$\330\225=!\370\362=\204\274\254\2733,\216=d\274M\275\310?a=\236\355b<\350\275\217=\215\023l=\200\255\263\274\203q\002\276\\\000\323\275!~\032\276\242\004M<)\325\322=\362VQ\2754+#\276_\004Y<\020.\350=\234\313>>#\230=;\n\004\244=\344\260\004>\'\222H>\016*\261\275\217\242\243\275=A\030>\020\'\312=\006K\246\275./\332\274\357}\327\275\236\\\231\275-\n\234\275\237\025\203\275\314\234\277<\246]\301\275\233\320k\275\264\014\003\276<\0307>w\364\351=\265\252A<LzQ=\3705\260\275\3006&>\371u\200\274\235\361\240=x%\307\275\270\310\037\275\201\003<=\300\316.\275\211\212\325=\275\264X=\270\233\r\274\237\235\037=\223\307\226=y\376\352\274\2402\026\275\024-\022\274\021\306\276;\363F\223\274\221\302b=Z\r\267=\265\266%\276w\346(\275\224\234*\274y9\371\275\256\036\377\275\001\365\240\275c$o<\371t?=\265{\206\275\025\020&>\253_\257\274e\215\010\276\250\235J\275\216\300\223=\002\2253=\346X\277\275\332\335n\275\240\274\307=\266\361\202<\364\037\203\275\212Q\033>G\306\224<)c\265=wd\373;\227i\301:\n\351G\276\340+\273\2751\306\261\275q\377z=\230g\315\275\212\014\027\276l\t\242\275d\233P\275\202\360\003>|r\311\2757,!=\257\300\n\275i\003\007\275;\306\024>>\215\344=\r\305\272=\246\3558\275\217\"\212=~D\017\275\245\266\376=\001\341\226\274\361\2340=\036\036\003>\346\354\242=\277\024V\275mP\247<r\361`<v?\325=\013\333\202=\021\377Z<\"\373?;\325\315\336=\261P\013\276\274O\311=Sh\003=\320\363\252\275H\'\344=\255\212\010<@\234.>>\234\200=g}S=\250\277\325=Lf\232\275\256\177\005>\330x\024\276\265D>\275\2479\323\275Mh\022>\227\311\335=\217\027\021=q \0029\200-y=\204\322\013>\376\027\365=pD\302<\311\001\250\2753\373\230=\212\021\242=\0304\023\276k|\227;\017\227/\274\240\326\013\2763\336\323\275\335\243;>\255O\035\276~0\331;\270\360\204<\270\306q<\320\010\324\2757o\215\275(\374\325\275p\264%=\265C\327\275\301\302K>\357\'\342\275X\006\324<g\337\251\275\307\231\361\275\215w\033\275\004\253\211\275-&w\275D\016\351=\213s\300=mI;\274\t\3667\276\323$I\275\n\3523>\333\344\236=\270F\216=\201\300t\273\316t\001\276$D\203=.jA\275\304\223\001>U\270)\274`\024\231:\252>T=\034g\301=<\307\023\275\372\\?=\216S\216\275\251\022\252\275\001>\220\275H\302\020>?\317\210\274\007\016\241\275d\277\007>Q\274d=pj=\274\352aH\275\200H\275\275&\232\"\275\350\362\373\274\340\272\017\275J\204\377;V\036\311=\243\224\010>\301\262U=\225\2267\274\206u\023>vi\340=\275td=\305B\014\276\032\305\222\275\253\343\'=|\272,\276\'d\233\275\366u\277=f\265\217\275\212\216^\275\356\361?\276\2504H=\354\031\001>\224\204$\275?\373L\273\305\\\030=dD\024<\'hA\275U\3637\276\220\226\355;\0354\337=\313w.=\241\013\025\276\364\301>\275\303\2175>\350\322\240\2752\336\321\275?J\355<]P\343=\261\205\334\275\212\337\001\276\262v\031=Y\3627\275\353Z\213\275%.\262<\303\331\000=4\342\332\275\365\\D\275]&7=\365j\315\275}B*<\356\320\213\274\253\335B=O[\211=\220}\035;\302\347\177=*\236I\275gh\035\273\006x\324=\367fe=\007\310n\275v\354\016<\310P\342\275\033`\363=>q\371\274{i\023\275\243\270\310=m\371\352=\307j\225\275\243\032\376\275/\026\371\274\327\210\313\274:\351\244=\030b\264\2743X6\275\233W\354\275\226w\020\276\264\247\016\276_IE\275L\323\312\273\030\177l\275J\262\306=\253\2023=A\337\373<: |=\224b\207;\275f\214;bBT\274if2\276;><>{\',\273\262s\271\273I\323\214\274J\243\036\275\217\023-\276(Nd\275\252\343b=\332\272\330=\365\000\344<\224\016\315\275S\255\232=d.p\275PnZ\273\177\3341\275\241,\247\275KBE=\001\372\353\275\274\271\375=\020;\t\276U_.\276\310\217\265<\342$\366<\356j\323\275\024`\343<Z\001h\275\351\177\006\275#Kb=\355c\003\275%\017\370;LD\331\273=\273\372\275}e\350\275\307L\311\275\025U\224\274+\260e\275\034T\304\273\345\030a\2740\201s\275\003/7\276\374\024\321=\3758\216;z\340b=\2748\275;\234p\022\276\374\322\004\275\'\371\337=\335,-\274}J\203\274\304\302\030\276T\205\227\275\225D\330=X\251a=\363\276v\275\320\373\222=\036\314\013>C\350\262=p`\367=e\231D\276\334y\243<\233\307\275=\306|U\2751\365%>\242e\307=DU<\275Qk^\275E\314\002>\024\031\261=3\237\217\274\240Hz=)\306B<\243\036\034>\r\364Y\275\307\314\220=*)\206\275\321\"\001\275\257\255d\275\026\rT\275;\\\221\275\375\365\230\273&>\207<=\333\377=\255\373\221\275\356:\360;\354\016\202\275\227E\026\275Z\352S=4?\t>El\365\275\033O1>}\242\326<\275\366.=\334s\006\274m\364\361=\204\377<\275f\321\024\276\025\220\016\276\r\004\030\275\210lI>\033\013\312\275\240\306\261;\257\210\236\275-\312\022>T%\251\273\347\321\231\275lg\357=\022\2004\276\273iO\274\240\313\324<\351k\356\275\207P\314<\300h7\273\351\330>=u\225\241=>\301\332\275{w\022=\234.C=\233Q\204\275;:\006\276\200\275\201<$\323\373\275\212T\370=\327\217$\276\231&\t\276\3363\003>k\330\316=\241\323\226=\2040\271\275\270\324\">\377\356\355=$\2010\276\334_!\276F\021;<;\324\025\275\315\227\252=\332\304&\274N\243\233;\301\345;\275\026\367B\275\003\272t\275i\352\204=H\322==\013\336B<6\374\377\275\213\322\316;m\363\202=nK\235=v\332\303:I\007\323=\023~\270\275\256\262n\275\254\025\006>\307`e<\241\275\210=\270\305\230\275\204\275f\275\332\274g\274C\246)>\236A\254=q\244\270=\311\177\254\274\032\357\332=\323\335C=KH\216=\212\345\030=RD,\276\224b\350=\235\231\255\273\247\317\253\274\002\033\305\275\317\240\003\275?&\233<!J\227=gL4>\235{\021\273\237\0365<g\313\222=\311k\227=]\206\245=Ac{\275K\304y=gZ\233=\234Q\204\274\323\216\344=\374\215E>\340<\224=\347\201g\274\360\342\026\276\034\223=\276S\340\357=\323\200\311<\023\034=:\2358\216<J\221\342\275&\255\220\273\341\277==N\027\002=i\351\316\274\361\343\364<\341N\025\272\261\226\335\275\314%1\275\267H5\274\376\344\315=K\001!=U_\226\274u\234\334\274\272\022\277\275(\301m\2752\022\273\275\236\241\022>\025\004\021=\340\357\224\275\262\333\333\274\252\251\000\276\355#\320\275\335\231t=\257o|:\336\022\264\275\rU\"\275\226\263\320;\210\256\210\274c\200\321\275\343\263D>\016K\230=\027x\023>K?\264=\264\215\207=\221\272\300\275\214\370)=v\010\273=\357\276\003\276p!!<\257\236\251\274E\366\225\2744\177\310=\317\017\010>\\\0248=\006\204\t>\037o\220\275\003\ry=jGH=%1\303\275\000\023\206\275\366\306\235\275\022G\301\275t\026\024;\303\225\205\275\237Q\260\275\300\323\254\274\375\314T=\334\233\330<o87\275&\021\310<\357\255d=\250\235\265=\377D\340\275,og=\307\341B\275\313\272\273=\371\350\027>I59\276\327\355\021\276\005\243<\275Da\354\274\223\003/>\203\265.\276x$\001<\200\343\305\274\240PU\275\225\271\374<\'G\203<\315\307\033\275\226\205\300\275p.\217\275T\252\355=\r*e\275\215\374z={\273]=O\264\016=\206\2225\276\2475.\276\210\035\336=&\325->|\311\267\274\375\330\301\274#\377\265\274\343|c=/\216\024=\205\306H=S\371^<\031\303\014>\206\246\340\274\205\311b=l\003\216\275\006\022\275=L~\263=\026\032\030\276+\306\321\274\024L\350\273\303\037\234=\004M7>\216X\322\275\315\245\n\275= \021\274iO\250\273\020T\025\274 g\324<\266I\016=\330\237c\275\374t\004>0\302\013=L\272B\276\2761\177\275\227H%\276K\223\260=\220\304q=\317\234\231<\221\347\261;\212\026\003>S\220\003\275g\347\336\273\211\373#\276Y\323><\275\314w\275\215#S=\022B\230<\025C\316=\227\235\306=\026y\210\275\242\360<\276\240L_<N\347\351\274\261\206\376\2735x\266\273\2339+\276\226\3303>\271\243\370=\362l\007>\222<L\275P\233D\275]Cy=\276\234\346=\'\277R=C\221\201=c]J=\216~3\275#\220\235<\263{\013\274\236\260\026\275\236\334.=\310\023\222\274\334\272i=\337\\)=\220j\252;mFw=|\363\312<\371\202\376\275n\257`=\027YT\275x\204\220\275z\342\243=\006v\320<\2132\256=\346\336#\276\177\231\241\274\347UV\275\177dX\275f\266\203=\372B\023<\363\255\321;\302\375\346\275\224\005\332\274d.\032=;\314\023\276\204\315\363\275D\357\204\275\217\326\301\275\230\232\033\276\322\332\267=\'\357\007\276\014\362\'\274\253O\033\275e\227\332\275\035G\230\275*rE\274\237\356\223\275\227)\233;Z\350\257\275\324\221\\<\022\035S=\335\214}<\027 \276\275\303e\030\274i\251\n\275U\377\017\276&I\325=W\306-\276~\2030>=:B>Q\216\250\275W\035\013=\320L\252=\343u\231=\017\330\260\273\214PQ=\303{\320=\257\235\316\275\002\356j\275\327\340?\276\234\345\214\275.0\013=\235mn=kS{\275\226\373S\275\351$=\274\351\2147\275e=\t>\313O\307=Fl\033<\276O(>\216$\313=:\311\\<\356\027\225\275\024\200,=zH\001=a\\t=\241.\004=\035q\223=\312\223\263=:\310m\275\005\351\221=q1E\276\251\324&\275>w8=\200v\266\275\013\322\267\275\210\034\202=\371\341>>r\343\220\275$w\311<\302\312\226<\327\033\262=Q*\377\275\013\342\361\274\306\024H\275\255\267\312\275\331\010\002\275L\205\273\275j79=DB\004\276\237\307\177<p\327\207\275\364\333\304=:\307/=\006\213\343\274\0054\030=p\rP\274 \262\262\275\020 >=\254U\036=\177aK\276\353\230\273\275r\024\010\276\023\340\002\275\363\306\225=t2\223=\326\314}<\001\210\266\275\344%R<\347\005\352;\346d\336<.\367\230<\275\203\345=\372\355\005\275\374Z\010\276de\014\276\257\234o\275\271\rV\274<T\317=\177\366\223\275\215}\357\274\002!/\275\341\245\362<\006\242A\276\326\002\301<-\243\002\273r\346\263=\364uy=J\013\212\275\251\377==\003dO\275fBn\274\202\026\254=\213\250,\276\r\216a\275&\202:\276H\356T=Pty\275\235\330e<\226|\251\275\353\352\371\275`\r\226=\314\267N\275\036\326/>\261\346L<\032\234v=\r\342J=\026^~\275Y>\346\274v\3473>\260\300R=\231\324\263\274e\310 =9C\304=vF1\275\010\340\373\274\213IX\274[\224h\274\037\"\027<\201\302\313=\"h\347\275\300\250\244\275\202\341\331\275\210\213D>\360\377\245\275\017Z\343\275v\262\266\275\370\305\227\275\351\013\303\275\341\352\366\275\233\373Z\274}`>>\262r\037>\261Q\235<\215\036\223=3\222\373\275$K\014<\313S\"=\232\350\260\275\340\261\t>\223\004\227\275\336xv\275\376FK<\0251g\275\243\246\255=\206\225\354\2756\027=\276\313F\201<\177\021\271\275r9\030>\312\322f\275\007D2=\362\216\315=*R<<C\370\372=\3433\001\274~k\354=z8\246\274F\027\246<\226\315(>Fy\000>\177\344\357\274>$m\275y\355!\276t\023\327=\210\021\241\274\367[\261\275\314@\003\2750\337&=\324\301\317<`-\307=\347\264\311=\036\347D=\326\371(\276\337\2506>\305\001\343\274w\277Z=\240\276-\274=\276\223\274\344\337j\275\277\270)=\224\354\033\276\247\316a\275\006\205\001\276\265-Y\275\362\331\370=[\374\t\276\331\313\014=7\236Y=\t\202n=\272\204\230;\2426\241=\353\360\302\274B\337\247\275\013*=>\006\351\013\276\216{\'<6:I>)\230\026=o.+=\356\344\235=y\321\214\275\177\334\226<\367\\\027\275(+\321<`L\302<h%V=I\252\245=\225\230\000>\335\r4=\274H\213\275\035\332\024\275k\367\241=A\346\264\274\277\205~=\014\330\020\276\346}\000=G\3701\2755&\355\274l\0163\274\271\261e=\271m\310:\272\306E9\344\250\034\276\267\357E\275\"\214\034>\310\321\310\274[\330\302\274\034\255\313\275\331m\356=\346s>\272|iX\275z\334s<\223\300\246\275X\217\357\275r\252w;p\265\316\275\030~E\276\327\031\030=X\250\026=\311\325,<\236\373X\275 \353\007>\rt\261\275\313if\275\254\376\373\274\005\265\274\275h\357\352\275\021b\036\276\224\343\315<\220\237\333<n\3074\276\346\312\024>\357\036!<\345\345\032=\315[\241\275\275\240\204\275a\346t=\350\013*>\345R`\275y\024y;\232\236\273=Q2\003>#\324\030>\36339\275\245\235Q\275(\3262\275\270Q,=V\305\004\275-5\336\275\262u\360=g\247\247\275\260\314\347\275\317@\373\275\375=C\276=\316i=\356\325\244\274\254:\305\274f\230\374\2751\014\325\274&\220q\275\273\301\222=B\334\370\273[\300\243;H\013Q=\371^\214\275\371\026l\275\207A@\275\220\224\263\275\212h\236\275\256>\036\275x\264\331=a\300\302=\340\252\230\275\355\223\010\276\352<^<\333S\377\274S\364\371\275\352\367\352\275\177N\021>k\\\270=Xj$=^\375\025=\257~\023<\364\337);\213CU=_\004\315=\314k\036\275\013\254\234\275\014\341\214\274\352\250\r\273\223\340\345\275\317\225\245\275*?\346<\342\312\007<\201n\010\276\337\234|=\017\267\035<\n\030%>\3326\016\275\317\201j=\340\263\037\276\313\310\'>;\245\272=/\221\335=\001\344/\275\202<*>\270e\327=\352H(\275X\036\216\275\244`\'<[\241\227=\034u\020\275\362O\256=\007\321\375\275p&\335=\227\375\362=\363K\240\274\223\243\336=\326j\333\275\307`\315\273c}\305=f\177\010>2\2616\276Y\027E=\274R,\273\377f\023\276$(\300<b \326\273\277\256\032\276pO\255=G^\017>3%\345=D\346A\275O\302f;\036\233\256\275\037\004J\276}\014\307:;D`\275\016\334\343<Rk\266\275\020\377\326\275\343\360\311\274\013\316-\275\225z\332=\203\261;>>\303\205\275\354Q\004\275\262m9=\276\311\265<w\242~\275\367\213\r>j\222\255\274\205\017\201\275g\210\242\275_/u\275\r\215\023\276\370\234\020\275Z68=5\005L\275LS\237=\372\304.\275\024\241\221=\207\016\370\274\377\222\002\273[M\261\275\373/\220=\177z\377\275M\326\306<p\211\255<\233\312\334=\206\201\246\275\364\203\000\276H6\264\274\0225\221\275cs\310\274\207\260\311\274\\\000\001\275\312\253\303=xh0=\242\226\020=\271\364\210\275\367G.==8\333\274\253\3154=V\252\201=\357\377\273\274o\226\002>Gh\211=\227\n\376<\033\362\'<\267\357\003\274\373\033\330\275\350\033\346;\036S\026>\365`\231\2750R\200=$\354\361=\325?\276=\002\312\223=yC\r\276\266\246\234\275\202#p\275\345^$>\307R\335;0w\221;\245\253I\275\237\336\017\276\315\277\210\275\014\301\311\275l\252\025>\213\233\346=\207\020`=\035\230\013>\3452\245<\210\374\325\273\023(\271\275u7\346=I\227\213\275m\355\253\275\232\020u\274\013<o\275\004\351\t=k6D\275~\257\260\273t\334\201\275`\032}=Ko\023\276\201\007r=-h\253<s\035\033>\242D\240\275mg\"=\305\251z=\351\377;>W\264q=@yj\275/\3472\276\323\026\t=Bk?<\217p\317=\316J\325<~\232.>\r\206\024>\326\rX;\002i\001\276\235\tG\275\204o\007<\267\025D\276\315\210\256=\324T*=\312~\036=\027\220\300<\274\202\213\275\367\004#;\327<\036>VV\213\275\347\213\026=\364\2328>\017\261\265\275\"B\007=\364\256\313=$\034\n\276\366\002\377<,j\325\275\360\263\321\273l\032\t=\030zD=\347v4>\2409\311\275\007\246\037>\354#>>\236\303\010\275V\342\340\275\231z\\\275}[\236=\317\272\002<\032\263A\274~\003\315\2757\301\362=C\370\031\275\252J\314<p;\371=\331\002\344\275\203\002^\275\251\000\n\275\262h\235=b\247C\276h\034\206\275K\204\013>bt/=Dv\252\275\322w\236=\331R\217\2746Q\234;\221RR=\233i\\\275\244\265\225\275\377\213\007\276\312\210\023\275\365\006\236\2758o\260\275\244`\352=\217g\311<\315\227(\275\034b\260\275(\272\250=\247(P=~\260\003\276\2134!\276\243\366\003>\014\325?<\357\245\207=G\272\252\275\341\212\256=\350\314:=\245\255p=\375>\322<\373MG<\227\306\010\276m\361~\275\3669\355\275^\3736\275J\274\365<-\315z\275\321c\252=\002\323\336=\t&Y\275\231V\243\275\377\360\217\275\373\202\317\275H\"\311\274\000\037\330=\223\275\316\275\334\232\221\274L\343,>{}\354=\000\345+>\037\355\247\273\267\324\232\274\336=\311\2756\241\202\275&z-=g\314\252=\021\312\205=\337\316\267\275\250i\021>\357G\333\274\323N\014\276\320\034\203=Uv\007>\300x\220;w\226\024=R\355\017\276\320\241\267\274^\303\227=\274\027\202=\234\003\223\275_\352\211=!\270H\275\202a\344\274J\333a<Q\344\272\275\326\263\350=5\203\215=!\364\307\275\270\370J>y3\000>,n[=.\307\273\272\274\217$\275\t\231\222=\345\300\237\275\332\226\262<C^\261=\367\"\320<\312\336\202\275u`H\276b\"\257\274/n\020\276\355d/=y\223\006\275\361\225\342=\260v\203=7}7;\335\373\022\274\250\220\352\274\010\2576=\2403\000>\331\314\030\276\032t\t>J\257$\275\261J\023\276\302\300\216\275\3708\324\274Kw\224\275\271\036\345\275\266#\303\275\351\010\206=[\025T\275\023\367\251=m%\371=^\243\227\275M\024\373\274\220Mb\274\270/\211\275\224+\265=\324\370\313=r\341G\276JY\300=\273\226\312=)\250q<\370\373\327=\025\265_\274\310\215\212=\363\rw\275Z\252:>\220\377\023>Eoi\275D\207z\275\037W\277\275\006Zi=\242\024W\275\002L\200=y\277\221\274J\'A\276\010\177\317\275\206\177a=\221\014\031\275v\211\021>\201\013\033\273%\356\270\274\216R\017\276h~\367\275?&\274\274\231\274\r\275\323\351s=\362\032\221\274\266\244z\275\000h\302<\206J\232;\010Z\267\275\222\277\264\275\257\016\202<\305n\022<\213\273\032\276\014\313\243<\234%O\275\231\355\230\275\231U\t>q/\343=\343a\227\275\301\202\242<\254\324U\275%\346\201<\333B9\276\351\027B=\240\310\373\275\311\272\'<\276\035\242\275\327\234\342=\265\235\347\275\213\252\035\276\177+\314:L\005\016>\220\214\374\274\003}\201\275\241\307q=\216Ji\273\264A\220\274\341\010\220\275!6\004\275\215T\374<\3518\025>\367\007\314\275\203kt\2753\344\371=e\203\223=p\2667\276\235\270i=_P\261=/\022\260\275\221\002\207=M\351\256=%SQ=C\270$>r\230\352<E\024k;\236\241\027\275\006r\252=-\256\332\275\377\223\013>Qb|\275\210\2606>\222h-\275ec\374\275\327r\001>0\n\037>S\317J>\334\340\363=?\252q\275\372}\014=\272\223\220;\000\035\\\266[\224c<P\336\207\275\271#9\276&\302`\275v\331\222=\033\360*\275\217\363\202\274\352\367,=DX\261\275\347&\007>\022/\211\275\200C\002\275\301\347\020\275\360\2738\274C[\201=E\207\323;\211\002A\276\375\013\350=\006P\005>5\300\213\275\235{\265<2\377\020\274\002L\355<LC$>\354\365\353=;7\253\275\232\375+>\033\256\245=I\270\006<\005\214\204=\361]%\2768\301*\275A\336\370=:\3621\275\216AC\274\211\302#\275^\205\t\276#)\322=[k\316\272\364\030\254<\371c\224\275\344{\271\274\031>\326\275\247S\003\275#B\275\273\204%\213\275\026Z\242<\315\254#>+\2346=\242\035y=T47\275\303_\307<\215\232\251\274\021V}=\3223\340=\302b\233=\230\320l\275\317=\373<\'\215\300=M}/=-\017K>\337\021s=\006x\344=T\327\024\276\274\324\357\275\264\001\004\275jnT\273\244\352}<\006\031\223\275\325\270\017\275\\|8\274N\246\322=Ur\243=\223\234\372\274m\375\346\275Tz\343\275_\327\224<N\351%\276H\035\226\274\204#\345<\311m4>\364\036\204\274\020T\037=<\223\323=\177O@\275\026:\340=\200\352(=\241i\005\275\352\242\361=\257\276/=\274U\376=\251r\346<F\370\202\275\\W\251\272H\234\356\273\237{\032\275\247\364\030\276`\336n=\275\260/>uR\201\274,G\233:av\351=\034\n\032\275\220\323\274\275}$\237;\310\010x;\023c\006\276\033.\331\274\235\r\224\275\342\255\374\2753\244\223=J\354\255\275{\225\014\276\325Z\'\276\307\357\t>\276\275\300<\232FH\275\235\370\027>\352\2576<\253\315\257\275B{\215\275\257\374\323=\365^k:%\254\326=]\r\024=5\316m;\376R\013\275i\203\370=\333\253\007<\031\215\002<)\362\031\276\337\341\352\275\205Y\224\275\215K\212\275\2560\367\274\247\367 >\377s\336=\2113\216\275\327;\374=\216\374o\275\206\020:\276\330\257\273\273\330\2070=e\023L<\014X\242=Y\003\333=\305\227\333<\330\010J\275\246L\n\276\311\275\007\276\270\025L\272S;\006=\212\306\010\275\232\314}=\340d\257=\371\024\217\275+\306\342\275\243\274\305\274\211\255\243=\320\261D=\270\356D\274\337-\r\276\375<q\275g\205\222=0\224\252\275\213\026\327\275\323\257:=\305\333\276\275\335T\267\275\210\204T=>\212z\275\211\037\257=\310k\023>\271\016\271\275\216\273\251=kc-=\253?\346=w\224\255=>\337\236=\243f+>\227\3112\275\270\254\022\275\272\372->pP\350\275\233\312\005>K\004\237=i_h=\313-2\274\024\217\360=\\\274\303<2\224)\275_\254\325\274\020Sj\275CDp=1,\323=\200\242?;5\375C\274\005\"\031\274h8\003>u\224\000>rg\216=\374\\\311\275m\361\301;\235\363U=\252\003\321=\215\202\263\275\"*7\276bp\335\275\363\215\004>\311\3325=Ad\305\275r%\004<m&\354\275\313J\310<\304\006\010\276\347\377X=\227\272<\274a\224\326=Em\220\275C;\204\274\373zN>\204:\321=l\352=\276h!\226\274\035\231@>\275\271H\2753\254c\275|\366\314=\327G8>\005\323l\273\"eE<\335%N\275\276\227\274=JF\217=\372\312\242\275\315\312\013;\003.\250<\335\267\034\274\276\010\370=\377\200\024\276\316\022\330=\347/7\275\377\207\361\274He(\274il\002\276\3713\000\276\005\311\213:b@\307<@j\010\275e\202M<H\0047>^\257\305\275\273Y\203=\010g\241\275\236\263\035>7\201\016>I\3240>W\027\303\2747\010~<\263\203\357\274+m*>\035j\006\276\254\314\032\273\006\373C>\346\313\234<\031\210\250\273\322\332*=\303\242\025<r\n\032=\260\200\204=\370\367e\274\377\226\003>\002\354\005>Q\006\034=\241xQ=i/\t=\257\225\316=\241x\034=\3523\004>0~\253<\023\246\001=\353\205+\276(\313\300\275\266\234]\275\361\375\002>S\3443\275+y\275\275^\233\005\276\30081>w\300\003\275\254\022\334;A\223E>\n$,>\217\314\314\274\026,X\275m\347\014\276wb\307=\333\335*\276=\270r\275\030\266\274<\263h\320\275\323\354\223\275\316\016\373;\361\177\234\275\304;\263\275\'\242\020>`w\364<\266\3467\273:\347\356<UF\231\275j\200\035=%\204\244=\224\212A\275\307\341\002=8\006F<\362z\311=P]\005=\310\'`;v\003\340<\333\032\325\275\331\352\275=\031,\301<\005%\251\275\022\301O=`3\356=~\2721\275\346\242\305=H\034\226\2753\361\247\274:k\306\274[\332\007\275\365p\356=\354\326\t\276en\033\275Hg0\275}\363\336\274w\016\237\274\354\233n\275\2551\010\274\r\n\002=\3410^\275\021\247\347\275\\#%\276\246\000\023\276&`\376\275\324\224\356<\345Rc=\210Z8\276\255RF\276\221\006H=\033\302\212\275rdx\275\306\000\271\272~\265\035>t\247\021>\326-\210\274\344f\024\275;\332\005\275\210I\236=8\330\235\274=\206\311\274;\341\331\275\214\234k\274e\200\031\276q\003W\275l\272\241=\253\364\245\275Y\036_\274\177\336\355<O\004\332\274c\013X=@\351\277\274[\317{\273k\246L\275\n9\263=HK\227\275:\224\326<\206\225U=\0061\334\274jl\276=\271\326D>\212\307\007><;\366=K\351\265\275s\r(\275]X\276\275g\032\002=\021\355\236\275.\334\244<\357\204\010\276\030\214\214;D\301\001<\333[\034\275\222\250W\275\213\366\035\276\0206\000\276\301\304\231\274\233\203!\275\377o=\276\270/J=g\2110\275\'%M\275\336S\335\275\031nv< \213:\275\222\031\372=\206\006%\275\216\222v\275\365y\013\276\374u\256\273\276\367b\275\037\001\001\276\001\202\271=z75>?\254f\275\223\221*\275\244D\301\274\256\263x=?\342\352=\375\366E<&\342\255<\t\0102\275\303\324\342\274\241\220\'=\246X8\275\307\'\265=\355\375\230=<\035\036<\016\235\323=*\260\311\2753\215\333\275\006\270\010>0\264\351\275g`\347\274\323\376\246=\344W\310<\326\325\003>61\000>\360\261\231\274\365\270\273=\341\273\260=\355\014G=\377\005t<\\if=\371\334\215=a\312\311\275bm\311\275\307\216h\275(l1\275J@(\276\021Tx=\223(\005>\216\357\030;\030\367\352=\254\373M=\215\205\315\274:\300\346\274\204\021\265\274 \032\230\274\352\222\236\274\205MU<C\224\t\276\024\300B>\215\221\362\275\342\267\006\276\342\t->\230\322(>\236\231\221<\311\016\r>\237i\352<|\315\236\274\341)/=\300\234P\267V\316\221=\260\024\337\275\243f;\275\222\n<>\376_\027\276F\244\210\275\255o\030<jO\330<r\202\252=\231}\035=Je\315<]\3050;\n\n\025>w\337\275=\344\203\210=E\351\261\275\267\010\346\275\275\333\355\274\306\303\241=\246\245@\276\026\000\333=\005f\332\275JL\256\275(N\357=\010w\273<J\225\201=\230\220\344\275i\320P\275c\000\340=\215\215\035=\030\343[\275\275\3310\275c&:\275D\350@>\332v\200=\316\211\000>\021;\341=\243\207x\274\023\270c\275q\n\210\275\304\002><\371T\007\276\326%\210=\244\364\316=\362k3>-Q\333\274\273\254)>\227\264\372=`\267R=\323y\217\273\372\003\036=\325\213\000\275O\266V;\270E\330=\216 \201\275\211\033X\275\273\304\213=\215*\274\275\037\201\206\275[\302\217=)\020\225=\254\356\277=\274\315\215\275\334\327\024\275\034\002=\276\377\256\231\275\325\253\236=\211\301\205=@b\321<y[%>\025\217\206\275\220\004\035=\035> >\233\220\177=\366\304\345;\274L\032>_`\023<\360\'\010>\304\005\275<\217\314\333\275\214\310\014>\313\2350\275\372N\376\275\240\307m=\017.\307\274Eu\260\275\216\341\235\275vh\254=G\332\347=\237w\"=\2172l\274{\310\203=+\362\366\274\345/\377=\0005\025\276\375\317\315\275\333\2511>\200\235\025>\226s\010=\266\301\007>\016o\236=\'\230\026>t\330\037\275\253k\330<\017c2\275|D\201\272\005\013\363<t\362i=v\005\005\275|Up=\3628\201\275\337R!\275O\203\346=\314\0170=\025NP\275x\374\002\275\304\033_\275;\300%\276\337\034 \276\236\250j\275\354\330\325=\023{\020>\350\025\235=\006,\345\275\312K\026\276\207\362^=}\313\237\275\010j2=/*\333=\003\225\232\275*\221\335<C\346\352<O9\252\275\323Z(<L\251t\274\353K\370\275\332\252\262=B\273(>\210o\364\275\204U\310=\372\300\215\275Gp)\274\005\226K\274\335\354\234\275\256\022\370=\037K\341=\370\t\243\273i\010\324=B\201\003>\312\244\333\274\303}\211\274Ag\007>:\227\24784\023I=\251~I\273\364\002\204=\020\267\300;\010\276\217<$-\016\276L\241*\275\204\335\224\275\021\341=\275\344\235\320\275\345R#<\355\377\356;\353\341H\275\227\364\335\272\365\343\013>\034k\363\272\262\3148>\371\347\025\276\024\341\325=\226~ \275w\023\373=Z?\037>Z\255\243=e l\275x\350\301\275Z\273\314<.\265\003\276\320\355\213=\354\257\335\275\r\353\374=\\fH>\026\261\236\275-\2460\275\3379\r\276\177\307\227<\233\360\342\274f\354q=\234\306\326=|\304_=\004\273>>\216\336\222\275\371\340B= \351\254\274:\242\320=\3528#\275o\377\367\275\273\340\247=\342\022\002\276V\375\t\276\335\"\354<\221k3=2\313\034=\262\315\003=\037\200I\275\265\247\034=<\275C\275`\275\322=\204\030F=\2734\312\274\000\242x\274\026\002\225;p:\274\273UB5<\272\253\037=\224\213A\276\215V\000\276\257\360x\275\254\371\341\275\017\356\034>\014=\216\275\306\204\031>\007\313i=\256\031\265;\337\255\356\274\253\313\203<\335\342\263=\\\253@<|\361\357\275\371w\256\2751\306\274\274\230\367\010\276\252t\274\274\227\202\252=\"?\034>S\356\034\276NJ2=t\2274>\024-\\\273g\2644<\014a\351<\035\271\217\273\237\213\304\274m\357\021>\004ES\275\342\032g;\221y\313\274\332\002\010\276\216\304\002>\357L*\275f\022\022\276\346\316\215\2754-P=\014\213\001=\355e#=\212=\'\275-\\*\276-2%=&\220\266\273\246;\003\275\302P\212=1\035\253<\306\231\n=\314\313\201\275u}8>\226\271\360\2745?\210\275n;\344:_\033\000\274\225\037\004<\207\032\020\276\213^\240\275\201\214\201\274\354\\\303\273&AU<p9C\276\234{\"=m+\306\275\355\227\204=\227\316\365;QJ\336=\227\226\r>c&\271\2746+\253\272\335\362B=\251\376\020\276\002\351\325<}\377\363=\327~\020<{\271\241= p\221\275\230w\251\275\231\020\024\275t\027\360\275Y\003@\276\273\254\203\275\205\006O\275\326\366C\276&\247[=\006\232\220;\357kL\275W\332\365<i\344\215=\373o\024<T\001\017>\023\027\210=@W\266=\310Q\262<R\000\226=\214\210\023=).\266=\017\372\310\275Q\242\006\276jj\214=\242\361\312\275\345O\n\276L\265\214=\372a\352\274\006\312\242\275\265\\Y\275\237\031\323=\224\2166\276.\240\330\275\366\217\221=\365\247?>\252t0\276\205\314\033\276\317\003\202\275\213F\272=\267\200\243<@\033\352\274g\317Q\275\"!D<\277\277\362\273\n7\373<\257\252\277\275\2040$=f\273\277\274\r\362\221=\032=9\276\007\223a<u$\222\275s\010U<\316\3515\275\375u\367:\252Y\220\275\025o\207=ZM-\274$m@=\024\0312=U\362s\275\0373\267\275\363\201A\275x\343H\276m\265\036\276X\313Y\275\264\213\031\276;\261\251=\240o@\275\275\017\226\275\325{\240\274\216d\241\2733\177\341:\357Ob=\354Mn=%\273\310=\257*\352=\370\371\231\275\302\211M\273\007\255\304=\365\323\344\275-\021\345\274~B\350=\377z\r=}\026g=\022\331\221=\371W+\274\226\353I<\260\032\204=\256M\366\275\330\347t92\232\022;W{\003=J\346\375\275\017\005\001\276 \321:\275\023G\223;;dn=\030\017\024=\260L\232\274\035Y\344\274\2624c\274\031\236\020\274\322\212\000=?\255\034\276\226\360\212=\255\r\202\275a\271\002>\262\242\n>\354\000\315<\265\347(\2750\230\001\276\210\025\316;hY\320\273\214R+\2759\021\356\275\217oU:\353\255>\276\330\010/=OT\214=\364\267\360<zA\024\276\311R\007\275t5\226=V\347 =D\235\277\272\212I\304\274r\027\211\274\366\321\210\275\030%\216\275\255X\306=\255\267\377\275\351\177\001>\327\254\023=1i\n\276\024\365\261\275E\341Q=\365\223\331=(\277b=.s\204\275\000\035\335\275\233\251\221=\212\034\301\274\323a\274\2753\217\234=-i\344\275\345\311\034=f\315\214<\300mX\274\360\347s\275\376\271->\242\360&=\004i\235=\315\202\250\275\210\224\314\275\243{\023\275\247\341\221\275\205I\257\275\210\257\027\276g\357\232=\371\261\206<\036\372\031=\024\342N\275\214\276\315=\265\006I<t\362\272\275\372Qx<\276m\214;\227\352\030\274\031\267\335\274\027\001\005\276j9\013=p(\303\274\321\230~\275\361t\322<\225f\264\274\367\177\014\275(\363\364<\037\020 \276\205\304b\275\360m\022\275\371\241\247\275E\227u\275\351v\217\274H\373k=vA\237\274\347O\337:\323\264\326\275x\252#\276Y\347\006\276%l\031\275k\325\016=m=\003>\324\341X\275#2V=\252^\213\275wK\204\275\361q\211\275\204\205\000\275\337W\026\275\334\345#\276\230\336\360=k\r(\275\204\227\243\275\2527\003>P/\340\273\212\234\206=\361W\371;\000\344\217\275Z=\032\276\211\260\237=\201\230\215\273\321I\260:k\221\224\275\224\372s=\211\306\276<\257u\005>\035\223m\275V4\305\275\256\004>>oAa\275\356\035\255\274\242*\274\273\223\333\251\275f\372\001<\304\303v\275\325T\t\275*\201+>\005\355\304\275\256\240\347\274la<=:Ow\274\013F\224=E!\200\275b^\r\275G\327\262<\034#\256<9T/:i\206\231<\305\312\017\276W\303\203<\036\361\032\275\307\3719\276 \243I\275\371\345\207\270\200u\252<k,)\276j\367P\275\241\271\r\276\3624\265\275\000\271\"\275\321\361o=\243\265\211\275\274\317\000>\341B|=B\375\277\274\300\014_=\257\201\212\274:J\257\275\'\311{=\257&\032>k\261L=\023\260u=S\302\353<\253\260+\275\242\2622=MGR<\332*\027<M\t\030\276\340\330\201\275\335\027\301\275\231\270\253\275\003\032i\275\261?\320<\223\267?\276\2538\326=z\321\022\275G8\255\275\241\2616\275\224j\001\276\026+\313\275\307\217\001>\247y\335<X\377\367\275\\\266\202\275\202\255\337\275A)B>!\027H=\230\232\202\274\224\350\324\275\304\031\217\275\034\010\273\274\223$\233\275Ot\024\276Xso\275\331\023\346\275\n\324\262\274\276V\354=\\R\341\274\235\360L\275\316@\264\275^s\232=p\235\217=J\222\226\275\206|\356\275k\010\177=hf8=\352X\010\2768m-\276\224[\372\2746\201u<\261\243a\275Tf\231\275\340\234*=y\204\203=\367\372T\276N\377)\276\270\263\257=\030[~=\224\032\006\276\225\371h=\3176}=\236\337$>\307+\251=\305\202!>\023M\350\275W++\276\305TY\275\307\023f=\013Kw\275\025?6>2\213\273;)\233\327\275\244Gm=*\\\354=dA4>f\313\321\275\317a\351<\361I\236=\363U\220=r7\323=\345\230H=\367\224\000\276NE\255<\3300\343\275r*-\2768\366D\275\030\211\363\275\217L\031>\247\201\014\276\377\223+=\032\376\301\274\267w\246=\313\037E>\026\032\327=D[:;\225\271\340\275\225l?\274\353\277>\2753\360]\275\024\005\201=\247Q\222=\266\221\367\274\210G\020>\213h\021=^\037\224\275\232\207\357<\030\231\343=\312\034\033\275s\013\\=L\350\360<\365$v<[\372\016\275\253\311a<G\342\360=\213\225\"=U\227\217\274.i\346=\246P\242=%\205c\275\236\277T\2755\0105<;\316\237=\204H)<0a\256\275:\260\224<o\200\204\275\016\345\255=\204\357b<1\021Q=\331\225 =\024\230\333\2759{\t\274\3448@>\370 \016\276\213\335\344;\234\337\243\273\262\256\334=Y\321\033\274fj7=v\267\346=-*\"=j\252;\2765\\\036\2752;\301<\017\276<;_fR\275\331`e\275A\323Y=\331/^\274v\2518\275q\267*\2757\360,\276B\026\255=\'-\237:\263|\325\274\335\244\242\275J\246\353\274j\354L=\237?\025>\022\234\200=\327gi\275\000G1\275\326\246\265=\001\026\310\274\204\333\364\275]0\242\274\2211#=\344\330\331\275\277$\211\275.K\340;\236B\260\274Z\016\362\275z\231\371<\201\3563>\272}\266\275\3276\272<d\365)=\0011\376=\356F\007\276%\343\014<\273\236Y\275\306&\275\275n}m<\261|\373=3d\315\275\257\376\023>\261b\276\274\205\241d\273\230\265\272\275\334\246\r>\370\3051>\306(E\276\376\371\000\276\241\033\235:-\213\205\274\335\320O\274\235p\342\275z\2626>\354\207\022<l3\327\274^:3>\255w\204\274Eue=\302\247 :(\337s=\201\360\013\274M\371\n=\n\003\000\276Y\226B\275\034\215(\276\232\311\257=\2376\325\275*E\336\274|\371\313\274\034\022\353=\037\2737>\317\000\327\274\311\263\025>\255U4>r=\271\275O\366\214\274\333\367\333\275\225\252u=\376!\371\275\216\221\325=\205{\026\274\031\247\022>*#\245\2759\272d\275\023\255e\275Ka\245<P{\343\274\330-\024<\025Fa\275\343D(<\240\223\365\275\214>F\274 \237\314< 3\235\274\354\203\203\275f\\\035=i,\310\275\253\014\252<\302\244\270=n\267\346\274\010\211\232<\333\362\364<!8\276\274\230\330\331\2758\321D>l\273\206=\321(\233\274\325\322h=e\243@>^\317\317=\330\0079\276\376\013\342=\357\036\313\275j<\027>eCR\275\323\032\312\275Z\264\235=\306\324)\276\341\004\367\275\372\202\272=@\266T=\331\260\037>\26677\276\316\245\260\275\2530\255=\326^\232\273mJG=\360\207\356\275]k\211\275\005Y\336\275yyH\275\332\203M=\336r\345<\331r\026\275\301 \034\275\236r\306\274\370y|\275d\177\005\275\265H\263=\037m\232=\361\252u\275O\262\207=\"bQ\274M\277\273=\245\205\021\275\026<R\275K \001>\214\304&>fF&\275c\005\354\275\201!\226=jx\362<\264\240\007\276I~\246\275x\352H=\253\023 =\241\224\273\275\014\224\006\276\242n\206==\000%=k\003\220\2753,\030>\0042z\275w\366,=\002`\003>\314X\207<\367\324\310\273\214/s\274\r\254\210\275I\232\300\275\314\233\037\276\311&\254<\300\305\323\275\020\214\023\276\264\222R\273\005E\251=\336(\263=t\234\271=\260\357\032>~\325\036\276&\312F=\3540\253\274W\026\342\273\255b\342\275\241A\232\275iD\333\275\221i\252\275_\205\315\275\351\251\212\275\303l\266=u\236\371\275PK\353\275\320\205\316\275e\261\376\274\">\210=p4\004\276\322\352\t\275jz:\273\017\261l\274\002S\003\276]+\332<`\001[=\313<\020\276?+<=\036\215\\\274\232o@>\246\300\321\275)\207\353<\324[\317\275\020T[\275\335\303\302\275 \374\\<*\025\017\276_F.\276\303\020\276\275|\233\352=k;\326=\021\313\237:T\261\231=0\252\304<\031\336\005\274\231\322)<\276\364\205=\326\357\350=\2055\341=k\352\236\275h\016\356<\207L\'\276\027\376\215=\263N\355\274\025\001c\275N\321\005\276\224\3148\2752\212\246\275]\336\022\273\245\367\030>p\332\321<-\211$=|\223#=Zc5=b\252>=|*\'\275\2462\t<7w\250=w&\312=PFS\275l\205\342<\314w\232=\233\233\251<y\340@\276\370\"^\275\327\n\227=,\344\032<z\202\342=\200\367\231=p\226\224=q\371\"\276/\363S\275\025\222y=2\226@\275\207\214%=\346\365\270;b\311\205=L\342\366=\233zI\274\np\032=J\005\371\274\274\016\237\275\250\354\304\275%(\274=Bwz\275\372Lc\275BS\271\274\204\037 \276\312\rb;\342;=>\001\277\004>\037M\016=\035\226\307=\277\034\000=>\371#<\337@\261\274\024\241\322\2757r\342\275\214\316\010\275\350\275`<\351\242I\276)\352\232\2744|\351\273Rr\321\271\365s\245=\350\373\225\275\221\n3=v\270 >{$\230\274\341RO\276\264\373\345<\263\021%\276.f7\275\270\370\002\276\000o\224=]. =\323!\225\275\205B\335\275\n\214\275=\337\321T\275\263\334\272\275\314\212\335<\352D\331<\276/\031;\227\276\216\274\255\361\377<\354\355#\276\335xo<\257\255\207=\320\205\032\273\014\3477\275\312\310 =\320R\237\275\270\t\273<\340g\276\274dj&\275\300\312o\275L\310q=\352\345,=\246\340\203\275\001\231\203=\031\365\232=\310L\202\275\024`\233\274\334N\302=\300{0\275M\272\237\275\345g\010\276\277\014\031>\000\'\306=&!P\275\302\301}\275\370`\202=\203\217\311\275.z\313=\362I\200;\002\315;=\345\332\"\275R\027\342=c\375/>\024\273Q\274\277\351\263\273\221\323\004\275\353\365\310\274\205\361\371<\271\353\231=/\000\235\275\337\256\365\275\252y@\276P\230\200=\275\243,\276\037\032\243=\326\273\264\275\207\251\325<\t\261\260=\252\354(<\342\220\340\274:4\205\274\317Ll\275\372Tw=\315\364\345=\230\301\270\275l[\253\275\033]\215=\000\010\205\275wiI\276\234\205H\275\323\037\276<qRf\274x\025\016\276-\227\355=M\020\361=\237\343-;\271+U=o\211\244<\013\2606\275:\313\340\274\266\324\237\274\276\235\245<N1\302=M\362\t=SVJ=fg\265\275\357\315\223<\3253\226\275X\177\306\275\356\017\323<\330i\260;\002\035\344:\366\014\277\274\322\325\320<\274\266\322<3{\213=\227\364H=tw\027\275W\200\256<gP[\275\261\307y=0\361\005\276T\253\014\275\315\365(\276\231\3132=\3444\336\275\003\330\371\275\342\230\313\275\362\031\220\2731K6\276\242k\305=\277\236}=\335\')=\241\222\004<\225\365D\276\363\326\365=#,A=\364r\264<\337\377\266=\376+E\275d\037\230=\314\'\'>I\024\023>\335\252\324;&\262\030=w\\\236\274;ax=Y\272\004>\002\2129<\245\364A\276\320\325\317=\362\315\356\274.\177\302\275\362\357\020\276\353\322\336=\344\201\256\274\313\033\365=\020\247\246=\255n\371\274&\265\330\275\224#\252\274\001\324\305\275P\372\005>\030\235\323\275\245`\001=\223L>>\223\010\245\275\363\004^=1t =\2078\">\227\267e={\334\205=\216y\n\276\272dy\275\261\002\226\275X\320\247=\366M\021=?\006\307\275\314\250\375\274<O\332\275\311\316,\276\374\232\271\275\270\001\252\275\270\262\244\275ww\214\273s\025\r=Y\032\305\2755,\265\275Ff\214\275q\337\240\275\310@\017>\"\240J;\002\032+\276w\311\324;`\223T=,\237\242\271n3\273<\330\240\'\276\2214\004\276\237\331\270\274\213K\241=\251\264\266\275\345\240\224<\207\313\213=R\030\211<m\212\217;\220\271\245=\253\365U\275\351r\367\275x\300`=\374/\020=h\211\200\275\014\'\026\275\364p\253=\260\037\341=\031\325#\275jj\2049\342q\261=\353X\261\274\245\377\206\275\303\0273>YU\355\274}_\335<\372Y-=\244\236\230\275\305\007\371=1V\271<D\030\247\275a\317\277\275\356\177\007\276\330\355\213\275\273\367\206\274\367\367\007\276\376\2236>h\207\306\274\0331\">\237\010\177\275\3605\233=\340\275\205=\245\215\212;K\206\250\274\362\370\206\274\262{\233\275\257\256\262\275\315\352\307=\"%\373\2753\2405>\364\225\036>\321\265\314=\356`\346\275\312\375\344=\260\227\302=\265\247/=x:\307\275J\000\030<\250\306\253<\243\017\001=\367\235\347=Y\370\014<\026\235t\272Z3\274<\235\202\002<\201\251+\275\014\252\342\272\334\250\200\274\330Mr<W\277\200=\356R\371=+\373\236=\273\250\202\275\245q\324\273\002\312\341=\024\312\035>\230>I=\332(j;r-\273=\265\023\322<\342\022\377=\026*\314\274\021-R;A\t\305\2751zY=\273\017\021>GvD\275=\005<\275\233\233\322\275\362)n\274\204p\236\275\304H\261=Y\243\214=\270\031/\274F\361\203\274\267#\301=\264G|=g\347O\275\320:\331=\211\203\337\274\2021\235\275\265\013\364<\304b\374<\"\330;=t\306\203\274\233\323\017\274\350\301\033\274\003\301\367\274k\305s=q\323C=\244\366\273\275\037X\214\274\203\313\276\275\313\360\267\274v\323\346=\270\251\336\275%\343\335=:$/\275#\304\022>\327\330/\274\261y\260\275)\234\230\275z\322\254<\022\3179\275\371\216\022\275\244\317\022\275\272\347\033\276<\320\230\2748\203\023>\307@x\275\366\302\'=\247\263O=j\344\323\275\2720\326\2732\327\245\275\347\365\235=\375a\263\275ZN\017=\027\200\036\276\336\216\257\274;\033\205=v\207\212=\226\265\035\272\302\253\030>h\376\324=j{\035\274\240\034\014>\252\225\014=zi;\275\377_\017=\037\034\231=\370\036\030>\351e/\275\203V\262<\317\330\264=g\335\230\2753\245@>c\367\215\275\242\343\034\276\020m\353=\265I\263\275\340{[=\000\255V\275\277\3363>\203\224\016\276\353n$>.\341\230\275\271IF\276\215\317\231=\366T3=\036\016\241=}\002q<\203\311}=Up\350=\005,\236\275\354\313\037>\010\307p\275@5H\275\030\373\005>hO\027;\245\325\365\274-e\010>\320q$\275\013\347S\275\003\357\017\275\205C\035\275\253\350R\274\253{;\276\222\360\332\274\240\331\224\275\364\246*\275\325T\000\276\374\237\344=\374\325\034\274]\205\242\275\034\313\007>\233a\261=\325V\004\276\273\236\350=4Tm\275\325\366\357\275\307G\361\275e*\213<\013s\366\275btb\275\200,\370\275\206\262\004=\031\3759=!t\201\275\230H \275\003\223\033\275b}\315\272\305t.<<s\352=\031\353<\275]\277*\2750\304\305\275\265\007\000>6\205\225\275\253\333\311<RZ\355<q\355\251\275\005)h=8\324\n\276\307/\355\274l\021\324=\353!\344\275\235\253(\276\217}\374\275\326V+>\322\352\336<\353\340\335=\364\301\227=\n\327\216\275\276\245\"=C\245r\275c>$\276[\262\220=\372`2<\324\307\216<\017\354s\274k\273D\275\256\224\217\273I\333t\275\263\375\263\273\007!\356\274e\035J\275\272j\225\275\314i\013=\255\233\272=\207\020n\275\255\r\353\275\022w\302<\225\277\375=\010\306$>\252\203<=(\327\226=\206\235\210\275\303.w\275\277v\334<\324+\205\275\356\262\300=\304B\223\275\251\360\016\276\366\334\027\276\260c\350<&\213 \275nj\214\275\206\211\322\275\362\026#\276\002\004\005=z\307\336\275\274\323\033\273\333r\233<\345^\016\275\320\241E\276\317},=\306Jj\274\370\030+>\016#\334\275+\331\275\275\016\347\013<\215~\243=\366\225\257=q2\321=\034\366\010=\024\304\275\275,\245\273\274\204\201\t\276f\261)\276?\207\026\275\001\207\265=I\271\006=\353\004w\275\037\007]\275\244X\244\275\324n\001>Q\341#\276\256\226\240=)\220\311=\267\016\250\275\006\033\216\275h\327\320\275\372\347\225=\325\324\301\2744\242\353\274\302\205\355\271\343\203\332\274\324\257\320\275\203q\'\276\247\250\245\275\324\322c\2751r\372=0\266\202\274\361\236\257<\362\243;>\322\361\277\275N\250\250<8\245$\276m\371\304=\236u\373=\314H\260\274u\206E=\272\324\261\274K\261\236\275\315\326\244\275\241\274\251=\366\023\254\275\327\377\251\275`\225\233\272\200\023\200=&=\223\275%;\313=\363\232\371\275\211\217`=p\305.\276\346\233\026>\014\2533>\225\213\007=\257\\\362\274\234\323\202<\341q0\275$\245\327\274\265\362\320\2741\321g=^\251\372\275\365\231\014>u\313{=u\325T\275\343\331\033=\364\221\351=E0\372\275\032\255\260\275\211 \267=r#\021\276\2647L\276\217\234\321=\233M\226=\250*\021\2760\254\002\276\346\206\274<\220\230\340<&\0335=E}Q\275\310\222\376=\232\254d\275\320-\364\275\320Bv\275\007\312\350<;T\253=b4\221=a=\013=\202p\256<x/\377\272\274o\211={\354\244=b7\030\276\306\330\033\275\003\376m=\337M\252\275\022\337\013\276T/\323\275\301xt\273\003\023\353=ln\344=>\010\347=\246\235\303\275*\261\333:X\241\243;\336\037\331\274\347\037\263=\177\252K<\262#0\274;\200\364\2741\247\312=l\036\317=|\216\237\2757{\260\275l\300\312<\266<\030=Z\272=\276\n\026\003=A\362\200\275\r5\305<\346\370)>pjL\2765\366\010\275\0357[\275)\314\367=\350\213\373=^\016%\276=\336\034=\332{\371\275\221\225=>\345\237 =3CI\276\005\346\210=\356b\277=\235*\370<\026DG=\361\215\222\275z\367b\273\242~7\276\356\005\201=\027]\202\275\223$\364=e\331\032\275{\014\344=(\300\235\275\037\263\203=\243v\251=\021\243\203\275<F\201=%\207\371=\260f1<B\2358\274\334T\000<\261G/=\304k\210\275\263\332\320=\364Wr\275h=\366\2759>\332\2753\371\206=\375~\235\275\035E^=;\322\016\276\\\023\223\275d:\204\275^\3772>\312f\263\275\201\211.<0\021\235<\203\306\264=\276;\242\275o\322\246=\266g\270\273?\021D\276\305\002\274\274\321\330t\275Gs*\274\330\3509=uL\207;\203_\355\275\301\034V\275\305\335 \275+\002\016>c\210!\276r\276~\275>\262i=M@t\275R\204\357\273\006\317\267\275\250C\001=\213e\257\274\272\206h<\204\334\230\273-\272^=!R\177\274\263\370\242=*y\342=G\006f\2758+\306=\200\370\301:\026\342\031>\216\242,9\r\344\350\275\304\2003<~s\020\274\361K\215=?\031\265;B\326\316\275\271\317\204\275\204_.=\\Y~\275\020.8\276v\306\317=T\302\003\276u\274\370=$\364\320=\227\366\326=L?P\275\033\303x<\225hL=\025\246\357;\226I\311=\'\020\365\274Y\275\227\275\207\260c=h\330L\276g\275\240<\243\022H=\360cl=)<\022\275\330\026\254=\0371\365=}\274\262\275\236\344\032\275x\244\376=|p?\276\372\206\021>,\377\014=\317\272\370\275,\033U\275\356!\227=\001\345\354;g;\017\276\\\016\005=<\242\033\276\255|\252\274\2156\003>fx\257=\017\243\232=\013?\024\275\227\352\216=\251\255\233=\360F|=\007c+>Sls\273\236\0049>\202_\234=g41\276\310!\302\275\315\014\315\273\306\010\"\276\216\336\306=\350\333\220<\3076\350\274\252\331\303=UZ\365\274E\026\032>E\325\023=Ds\"\275V\310\033>U\204\250\274\305\205\206<.F\024=\300\326\227=\037\216\212\275\354\276\215=\223\211\253\275\3666\024=\306\373\215<\305\364\177\275p:\266=>\023\265\275\257\233\335\274b\267/=F\214\317=\374X/>\366\033\270=\257\272\034=\263H\004;\231>X\274\026\224\251=\203\206\231<\024n\250\272\002\376$=\225\007\200=\356\354&\275-oz\275\333\340\'=\243\220\375\2748\033^\275\202\227\271=\260P\327\273\016\217\204=\332\031\\\275\361\223\245=\246jO\275]e\217\274\215\350\244=\225%\245=\264M\014>@\202\244=\352\000\341=\206\305\353=_|\005>~\367=\275\204G\224=34\354=\3361\367<\313C\024\274\341U\315\275\234g\272=\nr\267\274\254\361O=\357[\025\275$\266\244\275\311\273\262\275\377\262V=\326\353$\276s\361\360<\241\341\024\276\334\203\372<\241\215F<\030\363\022\276\314\341\341\274\256\000\300\275\222\002\231=I0\210\275P]\265\275\365\302\223\275\265\017y\273 \037(=:d4=E\271}\274\230\326i=^tD\276m5\007>\302T9\275d\201i=\356\000\204\275\242\217\206\274K\264\223\275H*-\274\217\337\243\275\302\007\327\275%\025 =\n\005\003=^#\'\276\324\207\203\275`U\003>2\231@\275.\224\026\276\272a\312\272\333-:>\326)\200=\353+A\275\206\353[=\214\372.\275\245\312(\274,(\334\274;\206)>\377\243\255<E\303\277\275\240\036!>\270G\266=&\345\277=\372\227\233=\242\322\006>\200\240\212=\207\212\272\275\351\302\233\275\312\371\005\275\223\330w=\017\243\334\275\375\330\244;\177\305\025<\2650\251\274\365\003*\275\257\253\220\275\254\255-\273/\206\253=\024\262\007\276\255\n\214\275\207\220\254\275\361\3170\276\036\376L\275\345J\246\275C^\230<\322\366\241\275 i\317=Y\002\024\275\221`\332\275\341M\014\275LRQ\274\217\036/=.\034\300\275X$\367\275q\331\243\274\206\270\323=\022\211\214\275\223k\345<\305\225\322\274\304+\220<\324\363\201\275[4F=\023\363\321<7\350%<Bc\373\274\215g?=\334\212/\273\322\372\345\275\304\274\347\2755\365\262=\276x\270\275{&\251\275\312\031Y\274\363\003\267=\205w\312\275=V\r>\333\230%>\\3\320<U\001<=\233\274%\276\375\255\010<?:\300\275\340\272,\274\252\370\313=\276\200\321=\367w\237=\030\2249\276s\265z\2754sF=G\316<\275(k \275\336`\371;\265\347r=\242g.\275J\306\301<\237\350\375=Y\211u<\035\024\365<x\267\214<\027\321\267\275!\342\025\273\000n\201=\336a\034\276\363\351W=\214\214\177\275\037\377.=\"\216\233=\221__=T\377o\275\036\0148\276\222\321\014>\322\244\032\276v\273e=\002l\025>\261M\332\275M\370\345\274\211\200\006\276x\177\276=\237\3570\275\327\001\224<E\313\000\275t,\234\275\214\254\214=L\304(\276\363G\301=T\222\204=\233\037\020>\233\270;\274\020\023:\2745a\013>\267\225\245=\225\374\007<+\353)=\027\r\352=\256\014k\275\233\263\323\275\300.\345=\\+a\275]\022\003\275\343L\215\2751\356!>\210\010\301=\274\202\246=\320\177\203\275?mI=l\2065\275\267l\235=\370!\233\274\316\353\2068\371\013\025\275;O*\276d\030-=OY\242=\t\022W\274@z\331<[\225\330<\031P\216\275Z_\221=\'H\243\275\212\220O=\253\270t;]tU\275\351<\330\274\227X\030\276\023l\303\275\317\273\223=\204\362\271\275\335>\010>\332A\003=\\\321D\274\354\004\326<\266&\264\2750D!\276d\3557\276 \2578\274\245\212P\276\220\215M=F\242\256\275\247\304#\276\365>\302=\323]5>\257\324\252=\351\324\213=\031\005\230<f+\266=\'\266\233=m\241\260\275\375\346k=\263\3609\275\177\325\023\276mD<\275f\350f\274W\267:=\374\270U\275\017\3373\275\313.\262=\335\334\244=\367\323\225\274\276\027!\275\334\027\320\273\322!\372=\350\302\366\275\225\322\206<D\353\330=\277\201P=4w\355\274&3n\274J\356\221\274\224\020|=8\247\247=]\243\247\274~H\202=#n+=\214V\325=h\205\007\276 \236\003>\305\035I>\325T\033\276\213g|=\253\020#\273\344\277\227\275\374\254\035>D2\210\275\2529\325;\n+G\276\357\264\303\275\324r\251\275\250\266Y=}\035\346=\241\213\006=\'3\245<\252\222\027>\303\\\376\274}\265\001=4\315\211\275<p3>\001\257\234\275\307D\036>\241T2<Ur\024=\240?T\274\t\302\203\275\247 \245=\361\354\333\273\356\037\233\275\230?\005>|\201g=vx\264\275|\000\007=\034\242\371\275\307\330\246\275\233\200\360\274\303\216\212;\366\250\331<\345\211\323<GC\260\274\324\024\"\276\377\351\r<\250\322\257=\364\343\351<\214\327\361\275[t\241:\251\205\241=\202\207>\275j\3573\276=\001m\275\003[\"\276!D\250=\035\253\231<DR\373;k\304\016>\3416\035<\"\267\350<\256v\035\275\027\365u=\023\304\016\276P\2551<\307\250\363=\000\213\206\275\263Q\264=\213\376\200\273\370\240\035\275{\032\257=~^\002=5\036\027\276I\373\036\276;\207\251\274\'\033c\275\273\274\003\276\314\305@=<\026g\274\266t\200\275\264k*>\2118\010>x\322F=\036)\343=\371\233%\276\272W5\276x\357m=\232\201 \275(6\216:\275\343\034>+\034\252=h\237\223\275-]1<\232}\240\274\002`\353\275n\277\026\275N\273$=\317L\321\273{].>\333\336\342\275\333\343d=\'\'\022\275\244g\237\274\212\263M\2740\217\335\275\303\234J\274!&\026\276\242\001.\274\373(\257=3d2>TH\207\275)\323\332\275`\225\221\275\310\357b\275\224V;\276\370\360\376\273\214\302i\275\200&\375;\232 _\275\205#\316\275\332\003~=\310z\241\275\270\344i=f\r\244\2754\263J>F\210\330=8\3556\276,\350>>A\271\010>\273n\001\275\322#\t\275\275\371\022\276#\313\206\275\247J\236\2747W\361\275\326\316\034>\337`\323=h\271\201=\212\303\256=}\t\001=\3716o=\375\026y\275\200\233\010>\302\273\241=\3566\242\274\016\336\230<\020v\237\275r)\306=\021D\014\276\0170\036<7\211\236\275\213X\343=\212\032\003\276\277\234H\276\361\367\323\275\356\234>\275\200\006\220\275\360\327V=s\300)\276(\264\245\275\316\372\000>\300\246\007>\226\'\264=\331\365v\274\210\306\240\273\364 <=\222\243\250\274\374\325\353\273B\360\244=\351\344`=,\331\261=\234wU=\223\254\243;,9.>d\254 \276\362\2233\276\330\231\033=\204\231\321\274\002\337\332=r\032\212\275\273\035\020\275fuB=_\200\214=`\365\373<!\262\023\274o\257\220\274\200\272?=N\016P=\376\004\005>-\202\036\274\003V\"\276\007\345\321=e\3408=\026\220T=\004\0030\275\245\201\326<\324\312\262\275\352l\313\274$\031:<\315\255\262\275\276t\000\275\204LA\275\246\253->\317(\301;\347\226\301\274\223\331\005>\370\036\004\275\017\005\017=\347\227\025\276\270\001e=\306\257\006\276\312O\213\275\355\376\323=\260-\365\275\340D\201=\307\023\263\275\362\244\220\275;\037\354=y~\214\275\201\334[\2740\r+\275\206\377N\276h=\005=\333X\030\275C\010\376=i\217\376\275\211\313f\275\253\372\336=4N\025>\322\342\007\276(\024\226\274\21393<\003\033\211=\265\236\365\275\rB\211=\232p\250\275s\311\000\276p\035\250\275 wv=\330\366\236\274\023\017\030\275\035Z\234=\024_\260=O\256W=`p\346<\216l{\275$h\307\275{\302\214=\362\353X\275\271:\220\275\r+\032=\244\0130\275u\261Q\274W\230\t\276i&\031\275\n\311\357\275\377\227{\274!M\036\276\202-\360<]s\006\275\263\340L\276\017\253\223=\335\016\330=\307\346\013=L\226\037<\376\200{\2754e\034>\331>\203\275\262\026\t\275:\262N=G\261.\274ie\360\272QI\r\275<\241\000>\334\254#\275\223\340\232\274\0214\021\273\013\333\002\275Cs\"\276\2645_\275\276\354-\276\334\374\t>\343T\347\275^.\330=\231\353F\274:\2235\275\304\211&>:n\263=\330f:=\264\177\261<\244\341\243\274\373i^=)\375w\275\201\177$\276\351\026\344\274;V\007\276e\324\306\2745W?;\367\334\344\275rw\215\275\025\262\217<\001|r\275\010=\257\275(\321\033>\332\254Z<S\370\030\276L\030\031\276\000\231\314\274\2176\200\274bJ~\275L\264\336<{t\n>KO#\275\342P\002;Y}\242\2754^\245\272*+N=\022\242\234=z\026\222<\324NU=\367w-=X\013T\275\034\262\247\274\227yp=\335\007>>\251V\027\276\306|\020;\244\025\023=&&\376<\244\037y\275\017\227\\</D/\276?\247]\274?6\005\276\025\031\340<M\324\371\274d\024R\275\244D,=)\203)\275\365\355\013=Z\035\303\275J\201\357;\342\276\270=\371\343J\275G)7\276\320?\217\275.\357\217\275+\216@>I\362\351=A%F\276\026\024\320=\247\340\2779\216|\235\274\260\350\336=\001\303B>\177z\312=\361\315\271<\325\310\023>=8$\276\014\034\362<\324\260\036>X\223\033=+\207\336=-\0055<fK\307=9\206\341\274\237\370K=>t\222=_\357\324\275\314h|\274v\375\026>\213o~\275|\270)\276\264\0056\275\237\366S<\254\212@\276lN\034\274\343B\216\275\001\020\35591\371\270=t\276\266=\236\007\341\2737\267z=%Rr=B\036\372\275k\"v<3\024\205<\230\261\354\274\371\344\366<@J)>)z\204\275\221O1>\t\337N\274>\374\336\275\213S\024\276S\317\016\275M5\361=\216\256t=\242F\241\275\215R\251\275l\327t\275\374^\010=\330\232\355\273\355\001\367\275\255\306#>\021v\205\275\272\227;<^\003\205;\006_\266\275\016\264\236=s\305\364\275\372\245s<q\214\206=\274\'\353;,\342)\275.>\306=w\216\267=\356\301\241\275+\313\216\275\240\330\321\275\211y\231\275\223\361N\275/\330S=\235T\312\274\303$9\275\267\356R\275\331F\005\276\244\201.;\035E\224<o\274\201<\334\235\005\273\030\217\035=#]\354;%\326\333<\326\271\232\275\370\376\355;\021V\256=C\223\033>\315 \017>\364-\333\275\tO\021>\252i\326\275`L\250=\026\2217>\350\005\"=\010\363\023>\240\006\006>\372\366V=\007\312\263\275\253\033\250=\273\221\246\2758g\027\275\217\021w<\006\266I\275\207\227V<|N\337\275I\t:\275\350\014Q\275\223\200\017\275\304\243\241;\314G5=\'a\341<7q\207=\310f\016\276\367\256\262\275\275Cu\275\300\337\r=\244\234z;\264G\227=P\226\017\276s\365\335\273\376\325C\2749\037\350=\203\223\354\274\371X\361=5>\243<\371\240\365<\374|\312=o\033+\275\331N\255\274\r \347\275\026\023\022\275\312\310s=\307%S\275\273\326\214\275Mg\260\274;\033\006\275\271\000\215\275k\365\315=\310\225\376<Bo\220\275\224\335#>h\243\226\273\351\320\355=<\247r\275*\223\234:d\250\273=I\237u=\230\200\273=pM\256=^\247\024\275\270q\255\275\336\202\266=^\246\321\275\323\213:\275\346|\265\275\236\320\035\2761\276\240\275c\036\235=\234\020\302\275\305yJ>4!\331\275~\007\205\275\255\344\216\275\030\277\022\275\320M\334\275\0052(<\025~\005>\206\006\201<\300\t\307<\222\274 >\274q\323<\224c\211=\232oY=\027\035\354\275oh\'\276tyS;O\237\237\275\365\262\251\275\253\247\261<%\344\360\275\377}\035\276\000\211\024=\354\223-\275\307\250\230\275\346\262?\274J\267\340= Fh=\213\257z\274\242\226\022=\031y\315\275L.\037\276pP\033>5\035|=\017\274\331\273\311\001\373=\361\364\033\275\237\365>=\203\340V:\343M\224\275\306{\331\274rs\243=&\340\002>\311>\262\274\267z.\276\202\224\253\275\223;\301=q\276\235\2755\361\017\275\371\335\343\275O\231%\276\344\212\266\275\n\3238>\201\217\025>\226\261\274\274;\003\347;\270\213M>\030\236t\275\235\355\216\275\250\254\314\274x\000\351<:\371\013\276D\215\206<Up\246\275\203\020\273=\244\214\327=9+\014=S,\226\275t;\273\275\326\350%=\313\000\000\276;\363#=w\314\023\274\370\276\021\275is.\276Z\2641>Z\260\225=w\177l\275\215\324\242=Q\014\203=\273\202E=-\247\000\275\347e\326<\205[\237=\274z>\276\002!\217=\360\3324\275\303\271\006=\226\246\273=\246\247\302\275AqS<\200\276\036<\177\202\246\273\246\325\302\274u\375\004\274b\305\232\275\036\252.\273p\354\270\275\031[\031\275>9\231\2746D\355\274-\357\271=\215\367.\276\024=\023\274\271\366\035=\233W\247\275\321|5\275R\034\r\276~(\223=\013\254\247\274X\317e\275\330q\350\275\212\021\207\274\035e\351<q<*=`\335F\274=\036\256=/\320\002\275F\200\"><\306^\275\237\221H=@Y\t=\303,\224=\254\256\337\274\\\266\377<\261\004=\275\371\353\252\275\306\224\302;H\267\032\276\307\366\203=\025z\217=\334|\260<\331[T<he\225\275g\262I=\003\300.\275l\303#\275I\0369<\371\230\321;\204(\237=0\2745\275\377&:<\027\355\t>\003\027\303<\301\3203=n\\!>\017M\016>\177\007r\275\265R\216\274?C\347=\353\342\211\275B\357\273=\363\363\036\276x:\220<\2430\347<]h\340<m,\325\275\337\264\334\275\325\335\314=\237%\320;\246\255g\275\373oC\275k\021\320<\331\005\004\275\366\362\366=\005\r\027=\334\010\263=\356=\000\2763\007\020=\347\231N\275k\230\213=q\263\245=T\025\345\274\325\363\347\275a=_<Y}\223\275\312\323\336\273\332u\036=\272\216Y\275\232NF\275y\241\273=\212\375\303;\304\230\r=Gy\277\272\257\355\005=C\256\177=\027\207y\274!(\016>z*\226\274\341\361\263:c\006\264\275\235\227=\274\257,\022=\321\362\022>\233\224\250\275\322 \235\274\271\265\'>?\277\370<!p\234=gk\312\275oX\357\274\306\010\330=X\266&\276#5\222<\305d?=\332B7\276\333e\035\276\322\377H>\320\223\262\2757\225\255=\327\332h=\256\006\224\275`\023U\2735}\346\273\335L\316=\336\220\334\275\211C\250\275\375\221\224=8U.>\r\323\343=_)H\275\352f\234\275\021\240\303\274\362\006\025>d\216y\275.\224\252=&\246\014\275\013\305\273\275\016~\033>&+\374:&\200\034\276\016\221 \275w1\262<\264\027\276=r\317\004\273\201f\244=+\017\332\275\336\330\204\275v\355\322<M?\202=Q\007)9\035\246H\274\367\242\007=\304\t\273=m\202\332=H\370\253==\035j\275\022,L\276\227\004K=\no\274=$\347@=\351\332j\275\2452v;H2\300\275\277\240\204<\0015\034>\003\316W\275.\322-\273\033\020,\276G\034\202=\304\336\037\276\3076\026>sm\216\275\023\260\366\274\322\013\333\275j\243\253\275g\353\230\275R\343I\274\330w\030=\00457\276\365\213(>\222\333S;@\0212=\014~\037\275\371Bd\274\311\240\236\275\365R\311=c\214\016\276SN:=\227\372\235<\332\2022>r\374(\276$\345\001\275\032M\006\275\340E[=\345\265N\275GR\036\276~\237\272\275o\n\350\275\345\332J\275K8\030\274#\253\275\275\002s\336<\265\364r<b\241b\274>\246\351\273\232\002P\275X\241I\275\005\250\272=J\256\002\276\243\243\007\276\036\230\316=\344\375-\275%\326\031\274\3346N=\001N\270\275\302w\216\274\n;\037\276t\214\026=py\252\274\023\036L\276h\271S\274U\201\002\276\013\243\t<\345\250\347=\242\037\305\275r\312\347<[b\205\275:\371\021\2746\344\013\275\243A\317\274Av\005\274\374\003\240\275c0Y<\021O\234\275T\273\204=\305bY=\347\350}=\251\221[=\265\371\027>;\037J\275\356\222\007\275\334\336H\276\364U\274\275\251r\217\275s\302\036>\300\305\234<R\272\030\273\362\220\222\274\333\326\255=\335n\213="
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "Const_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "network/weights_2"
      input: "^AssignVariableOp_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "\200l\n<\n\327#<_\232U<\010;\024<\3562\024<\214\346:<\000\360\374;\321t\016<\022\026\027<\236\204\235;\036\262\026<\n\327#<\037}\"<\363\3524<\2746\021<\206Z-<\320s#<\306\337\025<\201-\020<\215\3002<C\213R<68X<\215\224\004<\036U\023<\313K3<\307Q(<\205\273\014<\203F\025<\231\334G<\314*\036<\311\244\026<\'\202\245;9\\\020<B\244.<^\341\035<\343\302\353;o\276M<=\3242<\204\210I<zgg<\262\226)<wN!<{-\037<z\365\366;\r\300R<P{\031<5\235\034<\351\223\310;h\234\366;\263\306!<\354\374\363;\372\236+<\023\247\034<c\315\035<5)\'<\261\317\371;\n\327#<\250f\245;+e5<\207\300U<\004\000S<\214ax<^\322X<5\017\355;\n\327#<\273\370z;\241\371\n<\372\n\n<5\013M<\245\3778<\016EY<qO=<\n\327#<\004\207T<\177)\343;\361*^<\326\201\001<#G\r<\350\371\021<\247>\026<W\177\332;\n\327#<&\224\035<\336\035 <\013\342\334;\235\340\r<AR+<LI\362;\035|\024<\0177J<\247\332C<\345\232I<#\212\272;\241\315(<t\376{<FCE<\376\314\010<i\013R<\n\327#<\036\242=<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "Const_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "network/biases_2"
      input: "^AssignVariableOp_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            tensor_content: "\230^j\277\034\333/\277?\037\362>\267\226\237\275\247\001\233\275\222\310\372\276\315\257\310>\210\273\207>\315~x>\374\235\302>\254?\014\277T\034\t>\231\026\005?!^\333>|/?<6\241\236\275Q\3601\277\261\356\335\276_\021\244\274\333<[\277\354E\016\277\322\013\024\275c \274>\017,L?\377\237\341\276G\270B\277\317;\225\275p\363-\277\316\352a?\224\353\243\276E\274\356\275]\253\035\277\033\334\200>\307\242\r\276U\313\t\276\215\2408?\376\224y\276T\014*?\017\222.\277\360\'\304>K&\n?\307\267\344\273\\\257\273>\037\200D\277\260\2115>\005\321\333\276\373\037R\277\317n\324\276O\032\344>\272\0207\274\230\227\276=W#\225=\252\263\007\277\0017%\275h\355\216\276O\264\306>\031p\313=\243\034\206\276Ik\002>\243\317\025\277\374\rE?x\355y>r\353N>\010\323\224=\221\346\016\275@+\007\277\303\204\263\276\363\'M?\r<\327\275\347s\017>\036\207\277>\311\272\026=\2453<\277\237\321\364=|v[?\346\266\037>8Y\337=\"\311\326\275Z\n\017\277\206T-?\013w\023\277\213\2030?\0215\253\276}\367\r\277\332\207\314=\337\331*>\244\370\275\276!U&\276\251/J?\250\220P>z\367\352=+\275k>\'y\026>\201\303P\275\344\225,\273_5\257\274\316}\010\2777GQ>7\265^\275\207\377\033>\023XV>\021\377\370=\367\273\232=3\346T?\r\266)?\031\004\310\276k#\036?|\307\342\275K\205\014\2767\223e>t\252\223>\207\356e>M?\355\276\005\251\241>5\225W\276\366\376N>\371\272=\277\331\031\205>\250?\t\277\322\247n\276\313\254\226>l\364\021\277\227L\023\277\211\243\322\275\300\342\275\276#v\251\276q\274\205\276\313\247\321\274Y\026\305\276\233\235#\275\215q\r?\024\336+\276hz\304\276%-!\275\n\210B\276\243v7\277\332\265I>p} <\240\302\331\275\362\222\026?3\233\376=)/M\276\0316\367>\360M\273\275~VZ\276\3518\245<\357\240k>\337\250O>u\317p>\016F\247=8{\221\275\307/\316>p$\177>\311q\213>\326cN\275\244\026\r\275\0143\255\276\225>\335\276\326Oy\277\254\2350?(\357\024?Mm\n\277\337R\225\276\340\233\353>\327\312j=q\013\204= \340\307\276\230\352z\276\356e\353>\326\266Y<\200\371\005\277\014\252\237>\021t9=\320\031\204\276\200\031\035>\270\245\226\2753\256\265>\255H\371>\035\275\024\277{\207\246>\325\013d>\327`\246>\025\177\025\277Sb\254>9c%\277\016\354B<Vy\217=\222\t5?\205/\t?\367\367\364>8ly?\346\013\013\277\036\257`>X\277H\275\244\326\t\277\313\322\324>\031\3010\277V\320\353\276\204j\242\275\326\336D\277\341b\016?]\325\321\276\300\'\032>v\342 ?:|c?PJ\330>\031\025;\277\224#/>\367\177\340<\231z\313\276]\353\231\275\205\254\022?\0074J\277\343\3442\277\204\226\362\276\324\305\347>\275\t=>\022~\205\276\361\220\013\276\274\376\020?\365\312\027\277\272\211\265=Cy!\277\210\343\233>6\3001?\207\331\010\275\244\3105?s\005\372\276|\242\213>\322\226\211>\205z\277\275D\303T\277 \007\026>\335\253\003?\325\216\216\276\010\032\026\276\361\361\371\272\032\324;?\217l\t\277\206\347\364\274[w\261=\274\370E>(\256\331>\373^\013\275\305\010\262>\022\341\031?\253}\205>\231(\232>\200\177\014?O~\014>\343o*\277z\306\242\276W\222\n\275e\334\326\276U\021h\276\256\3028?\250\206\231\274\271\223X\276\3610N\277bJ\377>\006\033A>O5\267\276\320\001B?\3362\213>\356\363\350>(\360\001\2774\r\312\276-\212P=\341\227\206>\002\177\312>\024\214~?}\347\342>\227\020\275\275\'\346\003?e\235\370>\257\004\036\277\311\322\363\274c\036\022\277;\200h\276\357\325*?\025\366\250\2763e\302=\001\224&\277d\207\004\277\365\347\321\276\'CM\276\340%\265\276\002\374\210=\325\315\265<GZ\327\273\r\3749\277\237z\033>v\240I?\303a\310>r\231\240\276\026\"Q>\376\245\025\276\263\345$\277\263\267\264\274\004\207x\277\211\344\303>\274\304[>\023\205f\276\266\017\374\276\253\227n<\317g\033=\353\275\263\276\262\347\207\276U\321>\276\3434y\277\221\231\352\275o\357\005\276j\233\274\276`\316\025\277Q\312\303\276\016\345\200>\t4.>\227I\261\276\266\363\347>t\014\r\277\017\344/>>\271U\277\032\007\332\275\216\tf\277\247\301\366\276\031\266v>\361\224J\2779\014\r\277{\023\376\275^\365\205\276\220\244R?R\203\335=o\235\215=}vL\277u\t{?\246\230\"\276\343\003->\nF\305\276\243H\220\276\032\375\234\276.\n\301\276c\032\205\276\375\275\177=\207\342a\276\375c\030?\"\341\364\276\036\023(\277\333x_?\217V\n>=v\346\276\021\033\257>\244\236\235\276]\360F?\242v\240\275\"B\177>\t\346\355\276\2503\333>\037\350\222\276Z\306\360=\030\300m?\365jY\277\312\330_\277f\"\'?U\202E=\261\364\000\277:C\357\275!\324\n\277\311\260\221\275\225fW?Q\210\363=f\027??\034p\\\277\235y\353>?\'\323>F\316\316\272;\"\"\276NX\201=\223\373\204\274\226<Z\275\035\326N>`{=?\006\363:\276\317\230\007?\347\235\316>]XL\277\275c+\277G$\316>\232\031\351\276!s\227\275%\324\024?cV-\276\223\203\002>m\362\017?/pl\277\\p\267>\217\204\006\277\035\261L?\321\217^>\303\320`\277{\247<>"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "Const_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "network/output_weights"
      input: "^AssignVariableOp_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: ";\204\037<\273\241f<_\203\003<\200\206&<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "Const_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "network/output_bias"
      input: "^AssignVariableOp_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/filename/input"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/filename"
      op: "PlaceholderWithDefault"
      input: "save/filename/input"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/Const"
      op: "PlaceholderWithDefault"
      input: "save/filename"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/StaticRegexFullMatch"
      op: "StaticRegexFullMatch"
      input: "save/Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "pattern"
        value {
          s: "^s3://.*"
        }
      }
    }
    node {
      name: "save/Const_1"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ".part"
          }
        }
      }
    }
    node {
      name: "save/Const_2"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_3c4898ffdb0047a9b69881a8cfe579cb/part"
          }
        }
      }
    }
    node {
      name: "save/Select"
      op: "Select"
      input: "save/StaticRegexFullMatch"
      input: "save/Const_1"
      input: "save/Const_2"
      device: "/device:CPU:*"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/Select"
      device: "/device:CPU:*"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "beta1_power/Read/ReadVariableOp"
      input: "beta2_power/Read/ReadVariableOp"
      input: "network/biases/Read/ReadVariableOp"
      input: "network/biases/Adam/Read/ReadVariableOp"
      input: "network/biases/Adam_1/Read/ReadVariableOp"
      input: "network/biases_1/Read/ReadVariableOp"
      input: "network/biases_1/Adam/Read/ReadVariableOp"
      input: "network/biases_1/Adam_1/Read/ReadVariableOp"
      input: "network/biases_2/Read/ReadVariableOp"
      input: "network/biases_2/Adam/Read/ReadVariableOp"
      input: "network/biases_2/Adam_1/Read/ReadVariableOp"
      input: "network/output_bias/Read/ReadVariableOp"
      input: "network/output_bias/Adam/Read/ReadVariableOp"
      input: "network/output_bias/Adam_1/Read/ReadVariableOp"
      input: "network/output_weights/Read/ReadVariableOp"
      input: "network/output_weights/Adam/Read/ReadVariableOp"
      input: "network/output_weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights/Read/ReadVariableOp"
      input: "network/weights/Adam/Read/ReadVariableOp"
      input: "network/weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights_1/Read/ReadVariableOp"
      input: "network/weights_1/Adam/Read/ReadVariableOp"
      input: "network/weights_1/Adam_1/Read/ReadVariableOp"
      input: "network/weights_2/Read/ReadVariableOp"
      input: "network/weights_2/Adam/Read/ReadVariableOp"
      input: "network/weights_2/Adam_1/Read/ReadVariableOp"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/MergeV2Checkpoints"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Identity_1"
      op: "Identity"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "save/Identity_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_2"
      op: "Identity"
      input: "save/RestoreV2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "save/Identity_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_3"
      op: "Identity"
      input: "save/RestoreV2:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "save/Identity_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_4"
      op: "Identity"
      input: "save/RestoreV2:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "save/Identity_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_5"
      op: "Identity"
      input: "save/RestoreV2:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "save/Identity_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_6"
      op: "Identity"
      input: "save/RestoreV2:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "save/Identity_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_7"
      op: "Identity"
      input: "save/RestoreV2:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "save/Identity_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_8"
      op: "Identity"
      input: "save/RestoreV2:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "save/Identity_8"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_9"
      op: "Identity"
      input: "save/RestoreV2:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "save/Identity_9"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_10"
      op: "Identity"
      input: "save/RestoreV2:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "save/Identity_10"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_11"
      op: "Identity"
      input: "save/RestoreV2:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "save/Identity_11"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_12"
      op: "Identity"
      input: "save/RestoreV2:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "save/Identity_12"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_13"
      op: "Identity"
      input: "save/RestoreV2:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "save/Identity_13"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_14"
      op: "Identity"
      input: "save/RestoreV2:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "save/Identity_14"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_15"
      op: "Identity"
      input: "save/RestoreV2:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "save/Identity_15"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_16"
      op: "Identity"
      input: "save/RestoreV2:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "save/Identity_16"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_17"
      op: "Identity"
      input: "save/RestoreV2:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "save/Identity_17"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_18"
      op: "Identity"
      input: "save/RestoreV2:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "save/Identity_18"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_19"
      op: "Identity"
      input: "save/RestoreV2:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "save/Identity_19"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_20"
      op: "Identity"
      input: "save/RestoreV2:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_19"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "save/Identity_20"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_21"
      op: "Identity"
      input: "save/RestoreV2:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_20"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "save/Identity_21"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_22"
      op: "Identity"
      input: "save/RestoreV2:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_21"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "save/Identity_22"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_23"
      op: "Identity"
      input: "save/RestoreV2:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_22"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "save/Identity_23"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_24"
      op: "Identity"
      input: "save/RestoreV2:23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_23"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "save/Identity_24"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_25"
      op: "Identity"
      input: "save/RestoreV2:24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_24"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "save/Identity_25"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_26"
      op: "Identity"
      input: "save/RestoreV2:25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_25"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "save/Identity_26"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/AssignVariableOp"
      input: "^save/AssignVariableOp_1"
      input: "^save/AssignVariableOp_10"
      input: "^save/AssignVariableOp_11"
      input: "^save/AssignVariableOp_12"
      input: "^save/AssignVariableOp_13"
      input: "^save/AssignVariableOp_14"
      input: "^save/AssignVariableOp_15"
      input: "^save/AssignVariableOp_16"
      input: "^save/AssignVariableOp_17"
      input: "^save/AssignVariableOp_18"
      input: "^save/AssignVariableOp_19"
      input: "^save/AssignVariableOp_2"
      input: "^save/AssignVariableOp_20"
      input: "^save/AssignVariableOp_21"
      input: "^save/AssignVariableOp_22"
      input: "^save/AssignVariableOp_23"
      input: "^save/AssignVariableOp_24"
      input: "^save/AssignVariableOp_25"
      input: "^save/AssignVariableOp_3"
      input: "^save/AssignVariableOp_4"
      input: "^save/AssignVariableOp_5"
      input: "^save/AssignVariableOp_6"
      input: "^save/AssignVariableOp_7"
      input: "^save/AssignVariableOp_8"
      input: "^save/AssignVariableOp_9"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    versions {
      producer: 175
    }
  }
  saver_def {
    filename_tensor_name: "save/Const:0"
    save_tensor_name: "save/Identity:0"
    restore_op_name: "save/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "train_op"
    value {
      node_list {
        value: "minimize"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
        value: "\n\rbeta1_power:0\022\022beta1_power/Assign\032!beta1_power/Read/ReadVariableOp:0(\0012\'beta1_power/Initializer/initial_value:0"
        value: "\n\rbeta2_power:0\022\022beta2_power/Assign\032!beta2_power/Read/ReadVariableOp:0(\0012\'beta2_power/Initializer/initial_value:0"
        value: "\n\026network/weights/Adam:0\022\033network/weights/Adam/Assign\032*network/weights/Adam/Read/ReadVariableOp:0(\0012(network/weights/Adam/Initializer/zeros:0"
        value: "\n\030network/weights/Adam_1:0\022\035network/weights/Adam_1/Assign\032,network/weights/Adam_1/Read/ReadVariableOp:0(\0012*network/weights/Adam_1/Initializer/zeros:0"
        value: "\n\025network/biases/Adam:0\022\032network/biases/Adam/Assign\032)network/biases/Adam/Read/ReadVariableOp:0(\0012\'network/biases/Adam/Initializer/zeros:0"
        value: "\n\027network/biases/Adam_1:0\022\034network/biases/Adam_1/Assign\032+network/biases/Adam_1/Read/ReadVariableOp:0(\0012)network/biases/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_1/Adam:0\022\035network/weights_1/Adam/Assign\032,network/weights_1/Adam/Read/ReadVariableOp:0(\0012*network/weights_1/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_1/Adam_1:0\022\037network/weights_1/Adam_1/Assign\032.network/weights_1/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_1/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_1/Adam:0\022\034network/biases_1/Adam/Assign\032+network/biases_1/Adam/Read/ReadVariableOp:0(\0012)network/biases_1/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_1/Adam_1:0\022\036network/biases_1/Adam_1/Assign\032-network/biases_1/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_1/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_2/Adam:0\022\035network/weights_2/Adam/Assign\032,network/weights_2/Adam/Read/ReadVariableOp:0(\0012*network/weights_2/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_2/Adam_1:0\022\037network/weights_2/Adam_1/Assign\032.network/weights_2/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_2/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_2/Adam:0\022\034network/biases_2/Adam/Assign\032+network/biases_2/Adam/Read/ReadVariableOp:0(\0012)network/biases_2/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_2/Adam_1:0\022\036network/biases_2/Adam_1/Assign\032-network/biases_2/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_2/Adam_1/Initializer/zeros:0"
        value: "\n\035network/output_weights/Adam:0\022\"network/output_weights/Adam/Assign\0321network/output_weights/Adam/Read/ReadVariableOp:0(\0012/network/output_weights/Adam/Initializer/zeros:0"
        value: "\n\037network/output_weights/Adam_1:0\022$network/output_weights/Adam_1/Assign\0323network/output_weights/Adam_1/Read/ReadVariableOp:0(\00121network/output_weights/Adam_1/Initializer/zeros:0"
        value: "\n\032network/output_bias/Adam:0\022\037network/output_bias/Adam/Assign\032.network/output_bias/Adam/Read/ReadVariableOp:0(\0012,network/output_bias/Adam/Initializer/zeros:0"
        value: "\n\034network/output_bias/Adam_1:0\022!network/output_bias/Adam_1/Assign\0320network/output_bias/Adam_1/Read/ReadVariableOp:0(\0012.network/output_bias/Adam_1/Initializer/zeros:0"
      }
    }
  }
}
