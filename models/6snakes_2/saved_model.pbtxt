saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "AddV2"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_aggregate: true
        is_commutative: true
      }
      op {
        name: "AssignVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        input_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "BroadcastGradientArgs"
        input_arg {
          name: "s0"
          type_attr: "T"
        }
        input_arg {
          name: "s1"
          type_attr: "T"
        }
        output_arg {
          name: "r0"
          type_attr: "T"
        }
        output_arg {
          name: "r1"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "BroadcastTo"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "DynamicStitch"
        input_arg {
          name: "indices"
          type: DT_INT32
          number_attr: "N"
        }
        input_arg {
          name: "data"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "merged"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type_attr: "index_type"
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "index_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Log"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "PlaceholderWithDefault"
        input_arg {
          name: "input"
          type_attr: "dtype"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ReadVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "Reciprocal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_QINT8
            }
          }
        }
      }
      op {
        name: "ReluGrad"
        input_arg {
          name: "gradients"
          type_attr: "T"
        }
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "backprops"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ResourceApplyAdam"
        input_arg {
          name: "var"
          type: DT_RESOURCE
        }
        input_arg {
          name: "m"
          type: DT_RESOURCE
        }
        input_arg {
          name: "v"
          type: DT_RESOURCE
        }
        input_arg {
          name: "beta1_power"
          type_attr: "T"
        }
        input_arg {
          name: "beta2_power"
          type_attr: "T"
        }
        input_arg {
          name: "lr"
          type_attr: "T"
        }
        input_arg {
          name: "beta1"
          type_attr: "T"
        }
        input_arg {
          name: "beta2"
          type_attr: "T"
        }
        input_arg {
          name: "epsilon"
          type_attr: "T"
        }
        input_arg {
          name: "grad"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "use_nesterov"
          type: "bool"
          default_value {
            b: false
          }
        }
        is_stateful: true
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Select"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "t"
          type_attr: "T"
        }
        input_arg {
          name: "e"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Softmax"
        input_arg {
          name: "logits"
          type_attr: "T"
        }
        output_arg {
          name: "softmax"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "StaticRegexFullMatch"
        input_arg {
          name: "input"
          type: DT_STRING
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "pattern"
          type: "string"
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "TruncatedNormal"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "VarHandleOp"
        output_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
        is_stateful: true
      }
      op {
        name: "VarIsInitializedOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "is_initialized"
          type: DT_BOOL
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "2.2.0"
    tensorflow_git_version: "v2.2.0-rc4-8-g2b96f3662b"
  }
  graph_def {
    node {
      name: "reward"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "actual_move"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 4
            }
          }
        }
      }
    }
    node {
      name: "network/input_layer"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 9
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.3333333432674408
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal/mul"
      op: "Mul"
      input: "network/truncated_normal/TruncatedNormal"
      input: "network/truncated_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal"
      op: "Add"
      input: "network/truncated_normal/mul"
      input: "network/truncated_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights"
        }
      }
    }
    node {
      name: "network/weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Assign"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "network/truncated_normal"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases"
        }
      }
    }
    node {
      name: "network/biases/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Assign"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "network/Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul"
      op: "MatMul"
      input: "network/input_layer"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add"
      op: "AddV2"
      input: "network/MatMul"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu"
      op: "Relu"
      input: "network/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_1/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mul"
      op: "Mul"
      input: "network/truncated_normal_1/TruncatedNormal"
      input: "network/truncated_normal_1/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1"
      op: "Add"
      input: "network/truncated_normal_1/mul"
      input: "network/truncated_normal_1/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1"
        }
      }
    }
    node {
      name: "network/weights_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "network/truncated_normal_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1"
        }
      }
    }
    node {
      name: "network/biases_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "network/Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_1"
      op: "AddV2"
      input: "network/MatMul_1"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_1"
      op: "Relu"
      input: "network/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_2/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mul"
      op: "Mul"
      input: "network/truncated_normal_2/TruncatedNormal"
      input: "network/truncated_normal_2/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2"
      op: "Add"
      input: "network/truncated_normal_2/mul"
      input: "network/truncated_normal_2/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2"
        }
      }
    }
    node {
      name: "network/weights_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "network/truncated_normal_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2"
        }
      }
    }
    node {
      name: "network/biases_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "network/Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2"
      op: "MatMul"
      input: "network/Relu_1"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_2"
      op: "AddV2"
      input: "network/MatMul_2"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_2"
      op: "Relu"
      input: "network/add_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_3/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mul"
      op: "Mul"
      input: "network/truncated_normal_3/TruncatedNormal"
      input: "network/truncated_normal_3/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3"
      op: "Add"
      input: "network/truncated_normal_3/mul"
      input: "network/truncated_normal_3/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights"
        }
      }
    }
    node {
      name: "network/output_weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "network/truncated_normal_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/output_bias"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias"
        }
      }
    }
    node {
      name: "network/output_bias/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "network/Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_layer/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_layer"
      op: "MatMul"
      input: "network/Relu_2"
      input: "network/output_layer/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_3"
      op: "AddV2"
      input: "network/output_layer"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/output_layer_1"
      op: "Softmax"
      input: "network/add_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "Mul"
      op: "Mul"
      input: "actual_move"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "reduce_sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "reduce_sum"
      op: "Sum"
      input: "Mul"
      input: "reduce_sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "policy_gradient"
      op: "Log"
      input: "reduce_sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "mul_1"
      op: "Mul"
      input: "policy_gradient"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Neg"
      op: "Neg"
      input: "mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape"
      op: "Shape"
      input: "Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/grad_ys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "gradients/Fill"
      op: "Fill"
      input: "gradients/Shape"
      input: "gradients/grad_ys_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Neg_grad/Neg"
      op: "Neg"
      input: "gradients/Fill"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape"
      op: "Shape"
      input: "policy_gradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape_1"
      op: "Shape"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/mul_1_grad/Shape"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul"
      op: "Mul"
      input: "gradients/Neg_grad/Neg"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul"
      input: "gradients/mul_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum"
      input: "gradients/mul_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul_1"
      op: "Mul"
      input: "policy_gradient"
      input: "gradients/Neg_grad/Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul_1"
      input: "gradients/mul_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum_1"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/Reshape_1"
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape_1"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/policy_gradient_grad/Reciprocal"
      op: "Reciprocal"
      input: "reduce_sum"
      input: "^gradients/mul_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/policy_gradient_grad/mul"
      op: "Mul"
      input: "gradients/mul_1_grad/tuple/control_dependency"
      input: "gradients/policy_gradient_grad/Reciprocal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Shape"
      op: "Shape"
      input: "Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Size"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/add"
      op: "AddV2"
      input: "reduce_sum/reduction_indices"
      input: "gradients/reduce_sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/mod"
      op: "FloorMod"
      input: "gradients/reduce_sum_grad/add"
      input: "gradients/reduce_sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range"
      op: "Range"
      input: "gradients/reduce_sum_grad/range/start"
      input: "gradients/reduce_sum_grad/Size"
      input: "gradients/reduce_sum_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Fill"
      op: "Fill"
      input: "gradients/reduce_sum_grad/Shape_1"
      input: "gradients/reduce_sum_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "gradients/reduce_sum_grad/range"
      input: "gradients/reduce_sum_grad/mod"
      input: "gradients/reduce_sum_grad/Shape"
      input: "gradients/reduce_sum_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Reshape"
      op: "Reshape"
      input: "gradients/policy_gradient_grad/mul"
      input: "gradients/reduce_sum_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/BroadcastTo"
      op: "BroadcastTo"
      input: "gradients/reduce_sum_grad/Reshape"
      input: "gradients/reduce_sum_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape"
      op: "Shape"
      input: "actual_move"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape_1"
      op: "Shape"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/Mul_grad/Shape"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul"
      op: "Mul"
      input: "gradients/reduce_sum_grad/BroadcastTo"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum"
      op: "Sum"
      input: "gradients/Mul_grad/Mul"
      input: "gradients/Mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum"
      input: "gradients/Mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul_1"
      op: "Mul"
      input: "actual_move"
      input: "gradients/reduce_sum_grad/BroadcastTo"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum_1"
      op: "Sum"
      input: "gradients/Mul_grad/Mul_1"
      input: "gradients/Mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum_1"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/Reshape_1"
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape_1"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/mul"
      op: "Mul"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/Sum"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul"
      input: "gradients/network/output_layer_1_grad/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/sub"
      op: "Sub"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "gradients/network/output_layer_1_grad/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/mul_1"
      op: "Mul"
      input: "gradients/network/output_layer_1_grad/sub"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape"
      op: "Shape"
      input: "network/output_layer"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape_1"
      op: "Shape"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_3_grad/Shape"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum"
      input: "gradients/network/add_3_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum_1"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape_1"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      input: "network/output_layer/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_2"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/output_layer_grad/MatMul"
      input: "^gradients/network/output_layer_grad/MatMul_1"
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/output_layer_grad/MatMul"
      input: "^gradients/network/output_layer_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/output_layer_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/output_layer_grad/MatMul_1"
      input: "^gradients/network/output_layer_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/output_layer_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_2_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/output_layer_grad/tuple/control_dependency"
      input: "network/Relu_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape"
      op: "Shape"
      input: "network/MatMul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape_1"
      op: "Shape"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_2_grad/Shape"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum"
      input: "gradients/network/add_2_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum_1"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape_1"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_1"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul_1"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_1_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      input: "network/Relu_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape"
      op: "Shape"
      input: "network/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape_1"
      op: "Shape"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_1_grad/Shape"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum"
      input: "gradients/network/add_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum_1"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape_1"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul_1"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      input: "network/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape"
      op: "Shape"
      input: "network/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape_1"
      op: "Shape"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_grad/Shape"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum"
      input: "gradients/network/add_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum_1"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape_1"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_grad/tuple/control_dependency"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "network/input_layer"
      input: "gradients/network/add_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul_1"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "beta1_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta1_power"
        }
      }
    }
    node {
      name: "beta1_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Assign"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "beta1_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta1_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "beta2_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta2_power"
        }
      }
    }
    node {
      name: "beta2_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta2_power/Assign"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "beta2_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam"
        }
      }
    }
    node {
      name: "network/weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "network/weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam_1"
        }
      }
    }
    node {
      name: "network/weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "network/weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam"
        }
      }
    }
    node {
      name: "network/biases/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "network/biases/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam_1"
        }
      }
    }
    node {
      name: "network/biases/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "network/biases/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam"
        }
      }
    }
    node {
      name: "network/weights_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "network/weights_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam"
        }
      }
    }
    node {
      name: "network/biases_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "network/biases_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam"
        }
      }
    }
    node {
      name: "network/weights_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "network/weights_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam"
        }
      }
    }
    node {
      name: "network/biases_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "network/biases_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam"
        }
      }
    }
    node {
      name: "network/output_weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam_1"
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "network/output_weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam"
        }
      }
    }
    node {
      name: "network/output_bias/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam_1"
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "network/output_bias/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999747378752e-05
          }
        }
      }
    }
    node {
      name: "minimize/beta1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "minimize/beta2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "minimize/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.99999993922529e-09
          }
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights"
      input: "network/weights/Adam"
      input: "network/weights/Adam_1"
      input: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases"
      input: "network/biases/Adam"
      input: "network/biases/Adam_1"
      input: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_1"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam_1"
      input: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_1"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam_1"
      input: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_2"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam_1"
      input: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_2"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam_1"
      input: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_weights"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam_1"
      input: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/output_layer_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_bias"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam_1"
      input: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_3_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/mul"
      op: "Mul"
      input: "minimize/ReadVariableOp"
      input: "minimize/beta1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "minimize/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "minimize/mul"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^minimize/AssignVariableOp"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/mul_1"
      op: "Mul"
      input: "minimize/ReadVariableOp_2"
      input: "minimize/beta2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "minimize/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "minimize/mul_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^minimize/AssignVariableOp_1"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize"
      op: "NoOp"
      input: "^minimize/AssignVariableOp"
      input: "^minimize/AssignVariableOp_1"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^beta1_power/Assign"
      input: "^beta2_power/Assign"
      input: "^network/biases/Adam/Assign"
      input: "^network/biases/Adam_1/Assign"
      input: "^network/biases/Assign"
      input: "^network/biases_1/Adam/Assign"
      input: "^network/biases_1/Adam_1/Assign"
      input: "^network/biases_1/Assign"
      input: "^network/biases_2/Adam/Assign"
      input: "^network/biases_2/Adam_1/Assign"
      input: "^network/biases_2/Assign"
      input: "^network/output_bias/Adam/Assign"
      input: "^network/output_bias/Adam_1/Assign"
      input: "^network/output_bias/Assign"
      input: "^network/output_weights/Adam/Assign"
      input: "^network/output_weights/Adam_1/Assign"
      input: "^network/output_weights/Assign"
      input: "^network/weights/Adam/Assign"
      input: "^network/weights/Adam_1/Assign"
      input: "^network/weights/Assign"
      input: "^network/weights_1/Adam/Assign"
      input: "^network/weights_1/Adam_1/Assign"
      input: "^network/weights_1/Assign"
      input: "^network/weights_2/Adam/Assign"
      input: "^network/weights_2/Adam_1/Assign"
      input: "^network/weights_2/Assign"
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            tensor_content: "\205\2765>\377d\351\274\'\277 \277\204#\331\276\344J\267\275\232\265\227>zv\317=\027\202i\276NU\020\277,\310\266>\230\341\355\276j\036\203\276\037\251\356=\010\t(\276\307Z\247\275{\215\220>3tk>g\010\227\275\237\343\366\276\317F\027>\3507\211=\255%\'\275\335\202\227>\374bn\276\204\030\320\275\0254\376=\232\327\202\275\313`&\277\030\322\206\276\367\372\245\276\214{\355>\376z%\275\352\017P=jg\257\276\034\003w>)$\372\274\263k\003\277iD\345=\2553F\276e\365\213=m\307\327>\014\034\000\277\374\310\t\276\316\271\"?\214\326\016\276\177\034a\275S\017]\276\352%\373\276W\210H\274MX\037\277!5\243<5\200\000?\266\3531\2766x\330=Ki\341>\275}\351=\006G\006\277\207F\017>\267\2332\276\206\004\255\2758\203D\275V\244\'\2769\347w\276\021F\363>]hD\275\"\336\332\276\313\276\"\277\312S\207>@F\347\2746|\267\275\352\000R\276\324T\354\275\r\'\r?\234^\245\2756X\336>\223\315C\276\377\034\'?\202\023\353\276E,\223\275i\342L>\'\267{\276\375{\014\277\323&<\276\257\321.>\177\300z>ph\213=\036\207\276\275b\350\021>g\344l\276o\020\310>P\345\\\276\005)T\2763\223*>\3020\357\276\232\017\262>M\261\320\276U[\307\276\233-\\>b\333.=\340\013]\276H\242\240\275nz^>\333\021B>!b\010>\266\315M\276\006\325g\276<\255\034=\003\000\264\276Jk\302>\340\221\212>~\252@>W\021\330=\007^\251>i\211\206=l\346\350\275L\214q\275\317HA\275\030\364\330>\210\231\020\277\321\357A>vd\255\2760\014\375>\010\314\020=\265\365]\276\000r\326=-\357C>p\375\351>P\377\356\276\251S\t?\246Y\026>\374\237\000<\354\306\313\272%\032\335>\003)\204\276\345\366\002\276\227^\356\276?\354\010?L/\325=!]y\276\333(N>\007\212\300\275y\332\253>\343\3557>,;\213=\267?9\276y\347\002\277F+\231\276\277\366\232>Y\231\366=\026\330\322\276\270\026g>\307\267\233\276J\227\367=\244y\335>*\225k>v}\266>Ia\224>\216\220\217\2769\371\201\274\230\356\r\276@\304\217>6\244C\274F\002\031\276\317T \274\024\272\033\276\025\343\331>-AO=\354X.>\256\224x>\211\221R\275r\312Z\276H\206\317=\2601\354\274\027n?>/R\030\2777H\305\276\250Q\330=\245\372\316>\rt\027>\024\364\242\275\236\303\361\276\005~,=\006L$\276t\n\227\276\030v\253>\306\217\232>\326\221\005>\244Q\340\274}\357\271=\2217\376\276@\240\233=\256\024\030>\333\214\326\276\363\215\016\277Q\212\347\275\306\344\263\275A\r\363>\305c\253\276\'\354\006?\221N\336>\014\276\006>Y\017\355=\323\227T\276\331;\017\276[\247\303:\245\177\007>rUa>\346R\346>)\363F\276zyc>s\233:>:\023\250>\225\\W\276\257\035\'\277\312\331\341\275\245\211\253\275\034-,\276\266\342\317\276\346>f\275\330\343\263\276\022\260\247>Z\367F\276\371\214Y>hf\253\274o\216\253>\024\235\303\276\335JQ>c\227\305=8\3071=\016\247`\276\2512)?\002[\236\276m\001c>\347n[=\327Q\304\276\025\270#\274t\336\300>\361:\034?=\354Q>\207S\364=\217xS\275\204n\304\276\2335\234>-\246\314\276\374.\220<\266\037\264>\006\232\235\276A\006\321>\343B\020\276\370\377\212\2750Bc\276\215\344\007\277\'< \276\010e\001?J*S\276\362\305\004\277O1\314>\231qU\274\013Z\036\276]\244\343\276X\320\252=lbV>\001.\223>\323\364\202\276\234H\341\276F\321\206\276\0175\363\276\301KN<\375r\255>\375\t\'\2761V0\276K\231S>_y\237>\211\2100\276\302\266\357\276\367\033\265\276>\002\t?\271&S<z.\200>?\246\312\276[c#?>R\347>\245\021\356>\267x\026\277V\367\031\276\244c\262>+\014\362;\234b\247>\366\017\213>M\200\200>,\260>>\246h4>\000\3076\276-2A\276\244\243\225>\330\217\266\275I\255\370\275Cr\004=:\t)=\031\272\242>\205m\177\276\317\256\r\277\235\004\255\276Ebq>\201\0367\276_\000\301>\257N\035>\270\333\333=)\270a\276\266\re\275\361\205\337\275\377,\024\276\241\242\324>$\311\201<w\307\267\274g\202\016\277hA\033\277g\314\234\276P}\036?\366\010|>S&\325\276\010\300\263\275B\007\345;\026\250\034\277C\331\271>\243\353g\276t\233\257>\350\222E\275\316\222\245=\014\241\215=\023\312c\276\003\242\001\276\315\350\240=\027\255\211\276!\346\013?\334\206\n?\0275\273\276G\305\336\275\301\260\252=|R\230\274\311\255\365\275\274\361@=T\010\005\276\013Zo\276\353\215\312;\277\221\262>b\270n\276\020V\201\275\234\021\304>\030\314\254\276\035\n3=\321\273\250>\216\032\224>70\221=\220\270\257>{\216\352>\010\032V\276-\036\260=\356\341\025?\231\322\370\276g\301\235>\'\307V\275\024\207\254>RV\236\2769<\030>\027\260\217>z\345\023\275>\233\322\276:\313\020=\3705n\276p7\034>\310\014\356\276,\025L\276\226\277\013?HS\253\276\353\352\373>\361\265\243>\230R@\276\325K\206\275Hq\014\277||\267\276\272j&\277;\034\317>()\307:\367\326(\276\276e/=\237\260\027>o\377\014>\237Ks>\200\320x>\332\343\334\275+x\316\276K+\241>\017\310\234>\253;\311\276\2556\211\276\020\211\024>\030\250\034\277\031\314\022\276f\374\006\277\211nh>2j@\275V\267L\276\313q\344\275;\343H>\023\215\223\276!\364\217>F//\276\265\245?>Y\000*\275\030P)\274\367\374\375\276\274\325\346>4\252\022\277\264\266?>+\256\371\275\260W\241\275\317\274\032\276\364\212\r?\343\211\205>\031WM\276\371\247\262\276;j\317>\355\021(>\376\247>>\371&u\276\016,\242\275 \227\326\274l\256%\276\024\344e\276)0q\276\321\302\233\275\371\241;>\235\311\272>\325D\t?\361.H>\303G\241<q\343\312\275(\361<\275\373\257\223\276YV\t\277vi\002\276^\224\265\274\010Bg\276tVH>\233\363\t?b\205\243=\336\021\013?\002}\316<\027\232\300=\330\374\021>H\320\207>\010e\356\276\374\r\013?\240K~\276\032\303\376\276\2500\337\276\244\023\3168\334r\316> \260 >:}o>u\377w\276N,\346\275Za\243>J\236\372>\031\301\277>\020\345\334\27642\300<c\031\356\275\272V\365=)\270\253=\224\274\253\275<\251&=f\212\351\276\334\367\t\276\373\'\033>\303\014\'\277o\320\007?\361 \t?|\204O>s\350d=\014\036\025?\037\033\205\276(\203\016\277!l\315;<\033\037\277#\350T\276\261\370`>\262\362\235\276\311/\203>\224\3502>u\272z>\202|\350\276}\023\256>\202w\000?{\265\352\275\200\367[>\353;\273>I\254d\276\376\t\211\276>\310\357\275+\350\324\276Ie!>2H\325=/H\t\274\253\332\274=\\D\000>\355\202\354\276F\021\014>U\026^>d@N=\272\026\347\276\374\272\310\275r\230:>[\317\251\276\226\321n>D\260\244=g\264\337\276\370y\">\211O\237\276y\347\2459\313D\033\277\206t\n?3e\210\276lZ\032\277\267X\305\275&\027\330=RjV>\205T\307>^\306\234>\024]\255\276\326\327\r\277\277\'\246\275\3045\023>\334\306\255=\010\313\233\276\3764\233=\352h\330\276:Rt>|`\324\275\001\225I\275\370\034\355>\000\342f>eL\202\276^\350\025?\301\014\366\275M\361\026<\020\353\266>S\350\316\276\336_\265=S\026k\275\376\247\003>Y\017?<6\236\203>{y\202\274S\325h>B\021\004\277#\016K>F\361\200>\332\314\220\276Gn\315=\371\024\261>\340@\300\276\021\233\304=\000B\305\275\2123Q>\344\006\247\275\201\271\254<1\272M\276\'\031r>\347\263\204\276\221\024\211>\203=\002=6\364\204\276\306S\257\276\373N\177\276tJ\266\274\000\340\351\276\217\014\005>d\247\364=\370H\356\276\tf\212>_\320A\275\312\2134\276\363\217\033\275HJ\274\276u\014\035>H\313\352\274\351\205\243\276\312\326\266\275>\252\241\276\200\027,>dp\201>ud\225\275a\324>\2768L\371\276\2700\330>\001\326m>LL\006>\320\353\242=@\260\\>\261\316\324\2758\024H\275\340\277\315=\000\255\004=\214]K>i\264K>T\362\276=\250\334\032\273-\337\263\276\351L\372<n\005\235=\201c<\2760[\305>\005\361X>\325J\303\275S\367q>\210o\255\276\257\243\224\276\317\036\303>L\025\341\275\325\316\302=e\204 ?\221\225\'>\367e%\277\t.F>\311\314*\277\370I%\275\027M\337\275\036)\236>g7\251=\233\025\347>}\325%>\231]3>\211\225\353\276\235\341^>\231\036\034\276m\246\231\275\275lZ\276\362#\205=`\264\002\2768\313\r>\027_\332=\00789\276\323W{>\374\001\233>up\016>\225\351\006\276\021\213\331=\303\327\010?c\374\306<eI\262>\337\307\013\277\245\313\256=\205`\330\276\034\333\245\275>\231\t?\306Kw>!\234\373\276\237\365I>;}\001?H\226=\276\251\371\377>\231|\214\275n\212Q>\236\377\361\275\020\300\221\274\215WK>E\211\210>&\241h>K\310v=Dv\003\277\256\351\316\275%a\351;\2460\276\276M\254\346=\365\247\233\274\2329\253\276\320\032\364\274\352&)>\201\377\207>\256\023|>m?\316>e\302%?\377M\322>7\212\347\275\230\242\036\275\205\272\243\276\211g\'>=\364\205>j\303\223>)\352+>\034!3\275\010V\023?\375\251\351\276\376\207\230\276\267k\262\276\267\302\016\277\253\202\206=\360\014b>(Z \277\005o:\2768\225O>O\033X\276K3\205\276Q$+>L\260\321\274\335rJ>\316\343\217={\320m>G\271\032\276)\342\013?\221\032\007\276rJ\326=\007\331\302=\334\215\203\275\262K\202>xi\307<\340YG=6>\365\276\365\372\341\273\177\241\010>\234v!\276|\226\364==\350\017\277z/\262<l\274\303\276EH\031\276\200\366t>F\263(\277\273\232c\276\205\2707\276\233J\013><:\372>\373j\372>\362m\276=\324;\000\277\316a\t?\027\004\266\276\036k\301\276\254\262\257\276C\014\276\276\332\272\305=\350T\200\274_\025\224>\203\006\013\276:G\326=\335#$\276S\316\014>_c\002\277\3663\r>\210\235r=\302\031\t\276\027QQ\276i\014\347\274\274\027@>\221\362:>\301x\212=\3770&>\022\377\302\275/\212\304<\365x\303\275\013y\370\275B;f>\002\315\037>\233#U\276\235&\263>Ul\302;z\215\201\276\303B\307>f\356\373\276\233\342\023=7w\001\277\344\376\021\276\033q\373>\241\t\363>\243\337\305\275\3576\270=\202\217\004\277\376\360<\274,\017t\276\345VZ>\211\325\210<\346\337\324=\216\257\331>\206zd\276+\326\r\277xZ\375>~\371\220\276\177<y\276\355\241$=-pa\276l\034\340>$\036\207>V1\302\275\300g.\276\276(\220>V\373\230=U\036\316<\tG\037\276)\234\363>j\n\372\274\t\315\210>\326\360\252>&W\036?\311\243\303>\365B\363>B\025\314\276\227\031\351\273\205D\025\275?\254\231>\371-I>\304\370W\276\"\212\240\276fV\3359\"\274\214>\036S\341\275Z\300\370=\211b#>\377\222\233\276\301\311\361=\354\224q\276\345\017\363\276\235\366\253\272\253\330x>\232\227_\276\222\210\r\274f<,<-0\373>\014\330\'\277\'3]>\'\305\265=s\032\326\276\360\221\003?<O\250=\314\177\207\275W\331:\275T\375\033\277+\332h\276Q>j=\220\354\234=\3763\000?\244\357\243>\201\356\230=4k\027>Z\340\035\2761V&\276\347c\244\276u~\002\275\025\006\353\274\025\363\023?\n#\t>\r\216\260=\231\340\213>\272\334<=\344\200(\277\201\331\233\275^j\260\276$y\n\275v\217\200=\365\013\007?\033\307\335\275v\177P>%9\001>.m\224\276\231\273\032>~v\362\275\316\257\\=\274\252P\276\237\006O\276\317/\217>\231U\201\276\336\376\306\272\272D\316>\322\377\215\276bt<>\324on>%\345f>\275\303\241\276:\377\243>V\346K\274\230\"\000\277q<\242>K\205\321>^\206\036\277.D\'?\\\311\031>\004_\322\276J\324\346>\331\201\n\277\004\2569>\013{\024\277\260\322\024\275\3104\230>\003\300\252>\236/\252>\200\311O>)MT>Be\275\275\346\275\037?"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      input: "^AssignVariableOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "\360\013&<\344v\260;\231\224\002;\314v2<\027{\206<z\312\027<Q\230\323;\340\000\354;\377\275?<\375_7<\007F\322;-.\322;\351W\351;\344,\203;\224s\207\272\0210=<J\305\224<EVX<\3755}<\360\177\210<\3541<<\341\033\036<\\km<\372f\177<X\201\004<\220L\272;G\226Q<\rO#<\226\034b<\323\355D<q\327\016;\357\317\245<\337*\030<\312\321\022:\200\255j<g\232\035<>\212\004<\034\313\204<\250;Z<\023\030\014<\025\350\256;\325,\031<k\227\035<6,\364;\336i?<oH\215;\010\301{;\365VL<\210\230C<\255l\321;\227\233\221;3\036\303\270^w\270<-\263\373;\210\347\267;o\246\262;\206X\336;\001z\"<\342v\215<\264\366\264;\020\357\"<$FF<1\nK<\3417\300;\220\034P<\264\027\365;\0004 <\355\244\232<\250\254\037<\254\206\"<}^\221<IT\262;(m\203;\336\nq<\262oP<:\244\366;\r\250\020;J\t\023<\224\214\225<\230w\246<\247#8<\037\200C<\177\367\r<\250\264\212<\002D\300;p\267\n<\214\370\267;\342\263\204<s<f<\330bs<p\276E<\256\240\203<\264\036\200<wPf<g\204\2529 O#<\234>J<Z-\002<\004p\200<\310\213\320;"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "network/biases"
      input: "^AssignVariableOp_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: "^\035T\275\252\376\267\275\206\276\351=\204\375\311=)\037`\275\235\0144\275y\277\243<4\307\010\276\326\354\355\274\004\315\036\2767\237\001\276\\\376\031\276\031*\326=\010\024\264\275\216\232\347=z\005\303\272\027+\215\274tA\271\275x\016\377=\334\256\n>\257\217d;\235\223E\273kz_=S\243\032\275=X\206=\371PP<\223\230\034<\002\347\016=\365\020\330\275\226(-=\265%\244=!\327\271\275\\\301p=F\371\001\275\327`e<\363\222-=5y\335\275\253P\342=\337NT\275{\227\020\274\237\344t\275O\300\324=\034l9>*\302^=\323\0219>\275!\233\275\032\215\001=\216kR\275[\010\324<\364\312K\275\266\270\213<\303\357\003=\340J9>\350\225\323\275\370\341\027=i\027P\275\351\354\240\2753\255D=\025C}<7\323\021\276\273\344\210\275emv\275e\227\316\273\326\245\r>\025c\266;\003C^=J\025\024\275#:h<\375DH>m\201\022\276\267\337\004<\270\026X<\025\023\303<\247,C<l/\363\275\246\n~\275\276W\344\274\211)\331=\314\013e=\363\010b\275\002\005\230=\320T\354\273\350\347i\275x\265\276\275\230\254\004>8\333\002>9\023\247\275\365\023W\274\266\347\353\275\336u\321\273\252\357\022=YZ\236\275\334\030\033\274y\322\261=\'\222\367\275\331\026\r\275\265T\343\275\303\256\316\275\207\007G\276\343\031A\275L\020\263<\327v\003>h \242\275\304\360\215=\235\251:>\242u\203=t\005f\275\370\013\322\274\345\336\243=f\034\366\275\005\247\316\275b\003\365=\210\320\212=\334\314\036\273o\257\235=g\335-\276\305\022\236\275u=\365;h\352\000\276\033\356z\275\342\027\333\275\262\306G<\310\034\'\275\275\177\354=\207B\n<\376\222\021\275\355\326\262\2741\377V;\243KN\275\335\033\320\275\243Q\202\275\016BT=@\023\250=\2566\026>@;\265\275\237\001\274\275\350\221f<\301I\205<\266\245\227=\352 e=\253r\014\276\204\222\360\2730)\213\275\3732\215<\034\\\010>\364\026\355\275\334\226\021>\324\337\013\276t\002d\275\006\253u\2733,\262:\024\211\265<f\374\374=p\022\264<\212p\035\275^\213\333<\035N/>\177\257\363\275\032\304\356=\274w\303\275\252\211\266;\254w\212\275C\277\226<\000\031\263\275\203\363\271\275\"\302\364=\335\221\301<Q\364Y\275\205|4=\235\273\n>\243\034%\276\341\030\001\272\341!\364<\354\346\031\274CHJ\2749\'\014\275Jy\016>\331g\001\276\226v\334\275\223\340\373;\'\242\237\275\276\270\026=\021\234\217\275\246V\014\276j\"\362=@\351\300=\rP\255\275,iZ\275pN\316\274\275I\260\274\223\026\002\276cL\024=\335M\274\275\023^3>\335\207\335<\254$\025<\250\237Y=\035f\317\274\216-\377<Z?\n\273\361\362\260=\204\002\035\276\030\'A\274\257`1>\324\270\177=V\367\303;\357\203\331=O\266\247=6\217\261=\245\306\025>\033we=,\216\n\276\310a\262=M\303\n\276\227\2377=~\370\343\275\rO\264;%\302T\275j\246L<\013\375\256\274\264\240\007\275\355=X\275\231\206\200\275)\340)>\353\354\302:\270\215=\275\212\307\300\274\272\367\205=\243\267T<.\0373>@\230\326=7\347,\275E3\";\020\303\257=\357P.>\330\211\037>\267\254\255\275\231\241\231=,\336\340:!\377B=\347\257A=\267\336\272\273>1\277;h\026\016\276\374\021\243\274CL\324\275\323\323\017>\226\320+\275\357\0313\274\304\310#>^A\r\275\271\245\006>\231\037u\275\331[\271\275\037qK\275\360\316V\275\000/.\276J\210\320=\t\323\001<\366\341\276=\220\303\314\275\315\250\223\275\233\245\343\275t\214\010>\232\206\323=.\\\362=\000\005\233=\315\347l=\020\360s\275)\361\027>\250 c\275\221q\006>e\227\331\274\332\370\303=_\013\177\275\272f/=+\262\010\276\321\037,\274\3328+\2757(\003>\r\377\241\275\330\342\223=N\357`\274\'3\234\275\315uM\275M\213\214<\256x\266\274S2\221=J\025\263\275\202\3709>\330\377\006\276\360,\213=\2141\264\274\234\201\"=7\034\315<A\021H\276m\2448=o<K=\240J\276=\265\334\370\275_\001\206\275\215\240\231\274\203\326[<\000|j=\272\363r\275[U<=\202\310\004\276\363-L>\360\025=\276Y\371\r=\245>\263=H\237\016>\376\177\305<k\022\271\275\276\375\366\275t\0166>\026\177-\274\014\001\300\275B\027\361=\365\306\002>b$\013=F\320\023\272\216\361\024\275\301s\030>n\217\320\275\324\237(\275\214\316J\276\364C#\276\320\014\322\275\325\323\210\273\324#.>)\231\003\276\300\227\346\275\270\237\027>t\214\313=\250\"z\274\254\377\005>\357y<=\263mP>\211{h\275\211\364\253<\253\220\356=\355i\265\275\376\312&\273e\035\006\276\372\323\367\275|\244\227\273aRv<\363rC=\250\271\213=\360\234H<\214\212\022\275\3658\317=;\331\007>\001x\n\276\210#\315<+ \206=\204\273;=E\321\024\275\0377]=s$Y=\377\301\346=\000X\006>\335\361\327:\t/X=\272\345\301\273\016\252s=\374\n\263=\237\341\230<\356A\307\275\300\030$\276L9\004\275\331o\005\275\314\204\300=)\234\004=\264M\307\275*@\203\275\2177B\276\2004|;\013\222?=\351h\207\274)LT=\320\036\310<\360\356Q>\371&\314\274U\374\236\275!\312\204\275i\2746=\206\233(>\253h\000\275L$\235=\333~5=S\2163\276,\254\336=\320\241}\275\222\324\334<-eJ\275\332#\201=\354D\327\275\222\3654\276\350\033\337=\360\2126\275\000\372\237\275\367\363[\275]-&>\032\021\303=3\211\271=(\233\210<*A\036\275\035\333g\275\265\220\311<#\034\372\275\024\222X=q\302\255\275W\271\202\274F\272\212=I!p\274p\342<\275\022\272e\275\0004\225\274\366b5\276\274\2041=6V\007=\n\370]\275\243\345\364\273B\374\254\275F$\254\275\264\254J<\222\244\007<\203/y=\241\361\026\275$\250Z<\250\307\325;\337_\336\274;\300\'>#\2039>=\025\343=\220\tY\275t\242p=\317r\023\276\351\332L=\372\341\036>\023\004s=\354\264\007\276\236\243\034\276&\354\237\275\003\220\333\274-\272j<\265K\372\274I\217\223\275Yn\326\272\222^W=\327\360\005>Q<\262=\301\277\017\276m\002 \275\0238\233<\326\251\256<\374o\352=\271\244W=`6[<\302\034\314<^\251*\275\376\251X=\273\354\337\271\\\205\211\275\353\r\024=;]\231\275Y9\223<\205\213\255\275\032\361,= \222\223\275\205\013\257:7\232\267=\3725\223=\371\032\345=\361\364\024\273\272\332\032<\024\216$>M\313x\275BO\245\2744\242x=\177\244*\275\267\0012>r\247+>V(\234;^_\214<\031?\215=)K\014>F\314\207\275\031\214\335;.c\314<\226\027\342\275\215\232P\272\365\256W=z\007\020\275%\320Q\275,\241\316=\243\223\022\276M\323<\275\333b7=\333\265\347\274EY\026\276\026u\031>\304\300\245\275\210\212?\276\t\212\215=\207lP>\r\217\217<\033.u\275\313\227=\2756\026\215=+ma\275\2242A>\367\223\035;\241m\314\275\004P\204=\241*-\275\033~2\275\02232;|\206)<m\202E\276s\263\033>\003m\360\275DD\332\275[\221\210\275\004\360\023\275\020\274\005\275\356)\316\273\351\276\202<\330\303\340\275_\017\364;S\376&\275\234\343\003>\033\241\374\274\207\215E=\207*\202\275y\331\205<\032\303\355\274\230\3673=y\271C\275\364\321Y\275\022\242A=\023\342\021\275r\002A>l\352\254\275\242{\004\276\351\222>\275V\361\261\275[\212\225\275\227\331\256<f\210\000\276\376\261\006\275cs\232\275\331r\264\275\275\310Z\275\244\004X=\217\351}=\037s\244=#D\003;\313\364\000\275\216\342\362=\373\221\333\275I\327\247=\247\330>\275j\327\321\271\277\203\204<\003m\002<K\257\252=\323f\236\275\204\241|<\001a\240\274\265\\\321={\342\307\274\310\315\344\275\002F\321<s\247\000\276\272\013\214\274\320\214G=gq\303\274\361\242\246=6\243\026>}\205\342\274k%\250<\340\3248\275\215[k<\240\3772=t\337\332=6\216\223\275>>;;\324\343\332=$\371\033\274t\035\200=\250\362;\275\203\356R\275\257\301\364<\272$\312\275\031>\360\275tp\346=7\243\006>X\222&>\367\267~<\213\222I>R\t\300=\006P\302=\306#\202\275\231\354\035\275\225\262{\275\213sA=\221{>>\273~\007>M[1>\244l9=\271\240\324\274\246\375\253<\201y)>UB\251=\336\330\265=\305\324\023\274\375li\275\366\202\006=\362\006\215\2743\317\031>\376\210\\\274s5\225\275\310\243p=\347\022\t\276V\201D\275\267C\225\274o\237\334\275\003\347\013\275\330C\214\273\217\242x\275\207\266\014=\032\364\233\275BU\'=\242^j=\233qG<\005i\261=7q\272=p\307\032\276\235z0\275\213A!<\341\341\343\275\325x\237=n1\371<\254\nP=\245\007\257\275\234\3642\275r\365\220<hkc\275O\212\214\275s\376\350\275\341\302\215;^\355\240=\345\315-\273Xz\350<3V%=\230\030\272=xJ\341\275X\226k\273[\'\006\274\264e=\2766\373\013=\275\036\230\275Q\370\344=^m\245\275\231\252i\273\005b\200\275\003\354\225\273\343\347\313\275\215f\222\275\356%^=SX%\275\031\361\340=\3429\177\275\240|\312=\260\372\272=h{E>i\341\362<A6r<\262\003\334\275\021\211\304\275<L\305<p\322\270=\004z\313<$\360\327=mL(=\010\346\325:\256]\223\275H\265\301\274\266|\255\275Lg1\274\212t\303\275\302\205F=S[Q\274:\000\232=\350g2=T\226\215\275Li\345\275\377\024C==S#\275\020\334\225=\272\342\376<Y\024)>D}Y\275\310X$\275b\346W\275Z\271\355:\267X%\272\227\021\t\276\207&o\275\276;\036<\354h\324<rWc=\000\317\021>-\262\326\275\276\336\302\274\343}\314\275\334\024\234\275\357Q\325=\330nh\275\251E?>\217\225\346\275JR\200\275\237\264\333=\223\343\313=\2159\216\273\330&\317\273\254+\027\275uJq\275\033W\360=\256\2439=l\227 >\'\206\030>\207\260\222\275\332\300\001\276\227h\001=\023I\024<\331\260G\276\345\223\226\275\367!\342\274w\010\371\274\373\221\032=\034\335\222=\333\343*>\345a\314<v.3\275\007\214\232<\310G\001\275\245\033\312=\227Ky\275,f\231<\212\023\356\2734\352\353\275\223\']\275\013\231.\275\3224\005=\3676\320\275\034@\003\275O\2245>\243\0319=e\300\006\276\036)\217=\273\311\227<\004B#\275(\306\266=$-\037\273\022\375\310=\332\022\235=\022\352\233=\252\324\351\275\022&+<\026\302\033\275M\200\024\276\205\001\355\273g\235\211\275;i\032>\350\262\224=y\246\315=\366^\370\275t\267[=O\270\271\275)\316O=!\010\223\275\223\2734\276b\301j\275/\210\230\275\3663\342=V\027\331\275:\217&>\231\257^=\033\252\233\275\206\004\237=\343hC=\246\205\237=a\'q=p\320\034\275*d\025>\240z\362<\211\203\373\275\022\216d\275;\230\235\275\177\227\365=\311\r\205=\312\213\262\275\'\310\035<\'\342\231\275\230O\004=Y\3604\2765\273\273=\260\370%\275\277\337;=\361=H\275\355\225\215=\2620\276<\333Q\216\274w\211\351<|5\243\272\3442\274<\2067\212\275\305 \231<k\250%>\360\022\211\275k\260\202=\211-\371\275\233\'<=`_\022>\3148\000>\337\231\232=e\\\357\275\371\354\033=\250\030\253\275\256\024\335<\210]\304=\327\322r\274\374\371\237\274\376y\324=!\245\215\272F\207\356\275*\271T\275\331\302\207\275\021F\220\274\214P\316<\360M~<xl`\275\240\302\363\274\304$\253\275\271U\365\274\033@g\275\240\321\326\275;\232\001\276R\325\200=\010@\315\275\202\332\223;W]2\275O\3702=D\346\027\274\303\317#>\227\230|\275\270\020\360=\371t\301=\240\275\274=\230=\272\275Z-\235\275b\313%=\026\314\374;\333\361\301\274WK\332<\300n\274;\323\202\265<)\334\225\275\267(6>1Y\206=\317=\013>\346\223\256<\223Y\266=[Hw\274+\362\332\274\002J\353\274\037\317\357\275?=\327=\202\334\021\276?\336\366\274\356\214p\273\343\277\322=\266\tN=\350\237\"<\322\360s\275\211\016B9\2037\035\275\213\265\205=\034\2303\275l\372\361\273I\t/\276X%\306\273\177\357E;\352\373\331\275\024\3445\276\300\234\211=1\334<\275\247\206\220=DX`\275\t\006\205\275{=\007=o-j=d\203\033>\253\257\227\275[\2647\275\010\3243=\203\014\003\2767R>=/\344j=\205\265\257<P\255/\274\333\301\327\275;\336R=\226F\002\275IM\326=\026\245\275=\226\324\341=\245&\302\275\310\037Z\275/\312\326\275w\267\353\2758\001p\275(\342\240\275c%\310=\021J]\275j\257\364\275E\365\201\275O\1778=8\314$\276`+K<i\351\256=\303\376S=l=F\275C*D:+\326\226\275\250,:>\264j\220=\334@\324=\000W\024>\352]Y\275\233B\226<\205\263\244=\361\212\032=\353\325\230\274\202SC>\210\264\332\275dS\200<`\035,>\350\233X=\372:\322<\377=]=\"V*>g\nv=6\334V=\203\261F<\214\302M\2758\"\217=V\375\352=\215M\222\275\006\261\016\275:h\274<\363q\201\2747\270\022=y\343\370=$\265\216\275\037,\007\276\227l\'<f\251\360\275x5)\275\357\264K\2740\006\212\275S\036\272;\2312\257=\005\316\200\273\007\273\342=8[\016>\212`\350<\177\276\236=\227Mi\275=\223\250\275cjJ\276\317`\345=g\356Y\275\246.r\275\036\264\202=]\201\210\275\021\233 >\202U\314<sz\241<\0245\356\273\202\201\206<\221\020\224\275=\271p<\321\355\241<\327\tE>\032\273\205\275~\277f=\335\346\232\274\313\3618<hYI\276\007\216\331\2749<\033>\247\013\262=}pg;tb8\275\304\344\001\276\374\364\267=\277\306b=f\235\201\274\316\224\262=\221\342\'=\2703\221<\350\334\363\275*\217\022<R\021\275\275/\027\330\274\307\315\341<\276\333\252\275Lir<\313O\007=\030\241n=\305\010\356:4Z\327=\023s\345\275:-\024=\333MB=\013\r\354\2754}\032>\207\nB=r\2037=\213N\320\275\323\220\221=q\234\250\274\307l2=u\333\036>\210H\033=\033\r\t\2760\266\265\275\352\240><]\206\346=\007+\"<\032|\351;\376K\t<\334\350&\276\277O\357\275\t\262M\276v\311\350=\202\222i=\37153=\357\376\013<wl\004\276\225\204\344<\r\021\034>\321\276E\276\n\202\023\275T\034\306\274\275\375u\275rc\016>\260\330L<d^\024\275\332cT=\t3E\276<\t8=\354\232\203\275\n\230\214\275c\374s=dj\025\275\207n\037\2751\241\274<D\315A=\236 \005>w\364\026\2764>\337=\330\016\206\275\276&\240<\354\252\034\274\211\250\304=\303\337\010\275\035\332\033\276l\315\014\275)\036\255=X/\240\273\373\034\212<\325\255\005\276\354\"\214\273\002\365N=\264\0231=!\005\254\275\241\021\260\275\263\322V\275\362\246-=\333\255\207\275&\037[;[Z\316\274. O<\240\360\261=\225\003&<mT9=\242\312\315=\236^\243\275\014\217\214\275\324\227#\274\300\2704\276\264v\001\274`\232\277=`(\020>=W\232=\257f\226=\217\260i\274N\266\327\274\007~\342<\346\302\010=:\231<>\311\020\200\274\306\377\033=)?*=\276W\360=\350]\222=\025\030\217<\316\273\231=\220;\n\275\021\200\004\275\240\246\216:N\013\036\276\353\265!\276\233B \274T\346\013<3>\330\275\030\360\314\2753/W\275\270\2334=\030-\272<\356\026D>I/\227=h\200\266\275o\r\226\273\025\207\231=\013\2240\276\305\232\317\275\345\351p\274\235Vt=\225\021\014\276\331\223\010>\377\205i;\003N\213\275\347\000\004\275\023(\033\275\334.\337=\027\374\004\274\316)\231\275z,\330<8\304\014=]L\311\275\325\356\027\275\037\0024\276\272\312.;Mi\2529\254\302\354\274\017\0047>\361\221A=Z\025\255\274e\375\232\275\035\202\014>\357J@\276\264D\312=\230\365\233=:\177\244\275\327\227\003<@\375\312=\373\202\306\274\270Y\277=^\360.=\256\021,=\366\177\202=\r\3216=j\241\223<\020[\177\275\006\007\376\275\025q\236\275Q\177 \275\375\366\324=:\232%=\203w\300<\304\305\306\275\256]\367\274n;\246\275\257I\270=\207\365o;\324H\337<\3651\330=<\231\210\274\2338\207<!\0137>\003\001\317;\256\007\344<!B\202\275q\361\215\275\002E\'=\272tw=\024?\254=\235\34309\255\216\263\275a\256)\272\360\215\022>\neI\276\005\341\376\275X\244\005\275\007w\375<{T:>\007.\302\275C\346~<wH\240=\220\374\246\275\343XF\274v(`\2757=\315<b/%=fg\260\275\370\223\307=\213\376\027\276\353\355\373\274\241\021U;\260\277\035=^\214n;\222\225\221\274\250\207\322=\236 \223\275\204e\027\274\'M-<\312\334\310\274h\274.\276\021Y\237=\022\231)\276\341\233\006>\336Eg\275\220y\017>q\347\024\276D]\236=S\036\004\274\204\347(>]\n\247;<\031\365\275N\224\331\275\004\316?\275bs\247\275K\214\022>\373 \352=\334M\316\275\250`\252\275\212\315(>\233\344\363\275\237\320\341\273\036U\022=\226\034\037># \274=\346Q\365\275\\]\336<\\\354\317\274{\246\241<\212\202-=pJ\275\275\243\314\223=nT\224\275^\0071>\212W\005>\257\035.<\235,\005\276\2236 >\247\007\344\275/\377\002=\331\030\277==\230k\275\232\323\371\275\223jP<]\253}=\355\223.\275\251\333$\276g\331\017=\016\244\213\274\346\363\227\275\235\264\206\275\361/j=U\352\355=\243R\213\274oM\207=[H\347\275?\231\003>\303Sc\275clE\275*\371\014>A\004\240=\337\221\200\275b\301\300=\365\311\t\275\273\013\r\274.~\207\275a\1771\276R\371*\273\306\321;>x6Z\274,o\342\275\026y8\275\315\234&=w\351U=\231\002q\275\245\177\017\276R\257\236\275W\376\240\275\347\344\275\275g= =\344\025\265\275\335\322\217\274\213<\352=\364\201\276=\246\222>\276\022)\326\275\265H\242=\354%\223=iI\317=\032\014\006>=\303\333=\372\026\252\275\254{\265=\'\356\006\275\006\222\027>\260k\003>\312\262\227=F\252\320\275\035\310Y=\255\363\314=\211\347\200\275y\300\233=\301\310\372\275\007\335\207\273dm\273=\235\212\"\275\337Wn\275\t\257a=\312\032\360\274F\267\312=\3607w\275\264}\037>{\337\004>\314\306\352\275\2037$\276;\250\246=\3278\324\274\007\212\222;\266\026?\275;\202\200\274\345\303\336\274\302\367\317\275\202b\254\274\357\255\014\276\003b:\275\345}\236<wEw\274\226\254\363=\237T\017\276x\335\"=\357t\226\275w\315\314\275v\032\310\275<\\\013\275\210\334\010>\307%-\276!\025\331\275\207Z,\276`:\364<#\333\027=Bv\316\275?\335 >b\265+>\365Le\275\2740\254;\003\311W=\007\032c=\315>\235\275nu\267\275\342\014\302=\202,%\275\267\305\n>p\227\022\275\350y\376\275\245\222\177\274%\013\335\274\014\371\323=W\n\302\275k\223\031\275iv\024\276\250\005\323\275k\266\275\275\204\336`<\003#\331<(\265\233\275\342\343\300\275,c\304=\222_\035\276\240\304Q=E\324\317=~\203\250<MM\340=\307)\036\275\367G\372=\035yU=i\252\203=\032)\212\275\\q3=\330\334\010\275\003\340\342=u\365A=\016\001\270\274\034\373\000=VII=@\0273=q\273N\276\344A\324\273\201\'\237\274\242\241\037\275X\261D\274fU\301=\277(>\275\264\000*<\333ax=\t\222\000>\357\r6\276\017\223\273=\307mi\272\242\315\331=\032W\246=w\247\370<\035\313D>F`\271<k:\252=\016\324.<l\r\263<Fy\'=\227\031\222\274\t\215\365\275Y\261\n\275\330\016p=gi\373=\3577;>8G\224=\025\263\010>3\0164>\027\214*\276\361p\350\275;p\211\274\216\r\215=\216\255\031\276\264\360\233\275\352\177d\274h\307\t\276w_\014>\340\300i\274\313\366\226\275\022\231\254\274\177)\317<\374r \276\n|\217\271;\354\262\274qW\004=\267`\267=\230\030\374\275V\r\330<\251\257\017=\306X\303=\216O\355\275\205x\227=\266.\243<%\261\252=\274^t=\000Z\027\276\273@\305=\027J>>\335\034\320\274\026\014r\275\276\323\223<\277)\216=(A\203\275g\037\211=\270\206\014>4\201\311=\311\022\321=/\262\014>\001\246\306\275Vg\007:\024\315\256\274\307|&=\211\030\337\273\312\225\255\275H\3701>\356\253p\275P\222\007>\245\276\371\275\270\313A>\316w\212\275\214 \005\276\300\321\264=\023\002H\274\220\321d\275S\212\313=\267\267\010\275\203:Y=fr\032\274{\314\222\273\275\246\344=\375K\346=\275\034\313=\354r\334\274\211\016D\275#o\321\275\001~\275=l\034\000=\037\211\243=\277\006\223\275\033\223*\276\026\242\220\274\203V\004\276\360qw=\352\367<\275\265\027\022=S\271\226\274\017\037\272=\027\025\013>\tB\245=N\\q\275\"\301\255\2759#\371;\222\261\013\275\362\202:=\330H\212\275\016\220\236=\032\350%=\010\233@\275T\260\006\276FE\364\274G\006]=\222\016h<\345h\307=S4 =\257\025\206=bwc=\302\014H\275\027\211y\273\222\3365>\013\276*<Ml\217<\367\030\213<Y\321\355\272\223 \270\275\251%\270<\023\001X\275\023Q\345\275\035\231\247=\201\376\204;\260\005.>\214-1=\356oK\276\031_\246=\356iS=\351\023\312\2758G\336\275\214\215\300<\270\2023\275QR\t<KW3\275\354j\351\275\300s\232\275\375\214\020\276\352U\253=R\005\"\275\017n\362\274I\0215=\325Ky=fF\303=\260\320\353=q\207\016\276\020K\332=\274A5>m1\352\274\317\314\223\275\277\333\372\274V\0053\275T\372*\276\314\360I=\2458\353=D3\247=\022\267>\274]j%>\277\003\232;\032\220\016>$\005\017\276{X\306\273,\027\327=\302<\030>p/g\275\nk\272\274\320>\357\275\330O\022>\2336g=\0066\230\275\331\247\344\275\222\3132;\002\343\001=\024\254}=\030\177\036\275\332\352\200=n\002O\276>[\260\274\006\024\002=\360f\261=|\263F\274\250[\343\274\201rl=\257P\340\274\263\214\362=YQ\271\275\321\316`\274\002f\005\275\205\014\224\2744h\224=\213\005\343\273C8\344=&\205\000\276\352\337j=?\025\225=\007\"o=\374\251 =\302\373\326:\376=\223\275\347\2279\275\004\232\344\275\210A\371\275f\271W\275\273\343B=D\371\004\276/r\366=z\247d<\323\013\227\274\014\225j=\231\256\324\275\"\223\347\274F\265\205\275tRS=5\030.=\007\200\332\274\007\260\022\276y_\035>\350\217:=M\276X==\375T<\376,\000=\330/\026\275\354f\217\275;\262\233\274~\241/\276\236\240%\275\"\005\005\276w \032=\267\347\274=\264~D\276\r(\364\274\3704\354:\304\212\231=M)\t\276\023\207\020>\017\202\313=qhI=\340\245\341\274\341\352\332\275\023\036\373\274\237\273\251\275\025\035\225\273\206\344\005\276\372\330\336=\366j\242=h\227\247\274s\247\314\275MA\016\274\031\353\001\276q\227\035=W\222Y=w~\206\275\036VQ=\245_\237\274\035\031\327\275\306\032:>\373U\324\275\007y\202=!\256\372\275\302\225y\274{\t\003=\257\311\033:\372\277\341=\221\211\271\275\224i\216\275\366\343\215=\246\200b=\314\336}=E1\017<\037\331\333\2740\005\266=\302\310\211\275zi\336\274\320q\253\274qFI\275\342\252\024\276s\304\211=\313N\343<\335\211\376\274\241$\004\276p\206\346\275\0109\363=\371\357\347\275\201\016\340\275\370\235\313<l\326\203\275z\0247\275{dO\274D\332Q<\262\312(>\234Y\270\275\276\215\030>\001\332\310;$0\001\275\0143(<\326V:\276io\202\275\345L\225\2757\3350=\311\002q=\003\204\362=k:\235<>\363\241=\202\363\005>\'[\376=R@\344=\205H-\2751\316\301<?\236\253\275t\316\334\275H\030\020\275z\0012\275X\233:>4\021D\276\016(%\275\370\230\213\274\211\215?=\266\327\356\273\'\235w=\215/\311=\036O\001>\022#}=\027\326\346;\267\201\221=\326\210\223\274H\330]\275\227\036)\276:\323\261\275\026\362s<\321u\220=|Z\003<\256Z/=\326\321%=\313\345\265=UX:\276\013f\n\276*<\245\275\230\375t\275\232r\000\276\336\020\035>\353`\000\275<\277\032=\375\314\021>\235\300\027<\260\351\211=\246\355\327=I\272I\276}\211_8~[\037\276,\251<=b}\016\276\221\372\343\275\304\"T=k\"\016>Rn\010>\205H.;\344\360\000\2752\276!\276\016\254\361\274\312\344\036\274\222\345g= \304\220=\261;w=\037\360\301\274z\022C\275\230\365~\275\010\350\354=\205x(\276<\200\205=plw<\344\200\026\2763\243\274\275\222\253\224=\316\353r<q<\265\275\335d\250=E\320\243=\314\030\002\275\030{e;MV\021\275[\233\237\27518\220<E\202\"=\023=\026\276;\2402=6\255\340\275\271\345%\276\376\241\256<T\362\212=\237\033-\275\021\242J\275\251;1=BL\367=&\256\361\275\003-\031\275\025P\220=\202\302\374=\034{\016=\221_\247\275\346c\355=\313P\200\275\036\274h\274y\376\322=\2733\323<@G\247=WW\n\276\302\356\272\275\300\244\313=f\325:\275DI\316\274J\302\314=\311a\332<\352\242->Y\302(=\027\351\263\275;\200\354\275\214\001\344\275\230\n\320\275\305\217\'=7\351\257\273\336\231\230=\276\255\035>y\347\303\275\010\225\251=\030\203\264\275\342,\037>\005\007\230\271c\251\231\275\0279+\276\261XF\273[\256;>-\354B\275`\360[\275/\260.\276\336\216\377\275\303\205t=\010\002\213<p8\304\273\271\361\212\275\312\213\027\276X\312\205\275\314.\350\275r\n\230=\271#\254=\006H\202\275i\256\337;\3040J=\340\331v={\325\023\275A\277\030<\254\331\275=\023G\331\273\340\r\032\274\357\341\270\274\303\273\323=\3343\207\274\314\262T=;%\236\273l,\300=3M\255=\201\205\222\274\264\300@\2757\342!>Iy|<\313\332\355=\261\352\000\276\263\036\313\275qS\234:.\373\024>(\241\272\274\355t\215=l\327\272:\025\332\002\276\032U\265\274\343\024\033>\025\032\275=C\022\311=\017\255\005\275=\211\363=,\214u\274\300l\341\274\332\336\214\275\337\'\317\275\001\367\355\275J\021\221\275\246\3131=(7\003=\032b\312\275\214\313S<\t\221\226=\341P\352<\232t\022\275\346\253?<\264\260\327\275hr\035=s\316\337=A\032\375\275\350]\313<\267]\300\275\251\357\273\275\230&\347=\261P\270\2752\252\215\275\355&y=\257\265\033>\300\020Q\274\374\360M>\331\205$\275\263?M\273T\262\336;\235\364U\275\t\271\333<\004\226\370=~(\310<0\243\034>v\246\312\275H\214\313=H\025&\275\'\230\"=^\026\210=\302\271\300=\300\340M<\231\261\332\275\205\336\373=\023\226\325=\360%(\276%\252\002>\370\233\026>\245\254/=I\005\305\27522\314\275\374\233\203\275\214\377\025>\177\031,>\264\302\354=\247\320A\275\013\243,=\235\263\256\275f\360\346\275\243M\374\275#\342^\275\321\031p<\370/{\275\232\000\342\275t\265\242\274r\333+>cE\236<4+\246\273\2217~<j&\365\2748\201\253=\301\327<>\n\354\016\274Z\300\262\275~]\006\276\3655\240\275\312\375\325\275\344\001S>\001t\277\275\342\026\002\275\366Q.<\221\257\246\274\303c,>/\270\357=\010/T\275\016Ns;(\022^\275\256\312\261\274\235\352\327<\333\204\010\275\202 \250=\306X\324\275\275qS<\026h\340\275d\247\002\276GK&>\305\335#\276\347\026{=\227\377\333<\306\324\266<I\224%\275\366\004\016\276\031\235;=\207\223g=\231p\250=\371-\367=h\014\342\273\265\354\201\275\302\220\212\275\254\326\004\275\255g\004\275M\225\313=v^\333\274\235\215\026>\\o\002>1\337\357=\322A\310<\264\365p\275J)\220<\017\2249>}\306\024>\201\031\326\274g.\266=\026\355\035\276\326\317\347\274\347\353\267=(\220\322=\324\316D\275\334\2762>\324S\256\275u\"\005=\310i\023\274\257\300\215<\023F\005\276\203\325\370;\357;\255\273\205\242\202=\265\374%\276\377=\023\276.\200\325=n\272\352<\307\317\354<W\000\022>Y\225\237\275qs\264\275O\203\234\275\350\324\250\275\305h1\276P!\210\275\004\250n\274\236\005k<\235!\350<c\353\222=\257H\014\276\267\245\225\275D\014\213\275r\267\233=zA\245\274\314=->\007lx\275*\372\001>\375S%\276-8L\275$|\367=\352P\036<F\025>=\367\333\002>[\004\205=\211\367\202\275\263e\326\275\275t9\275\253\241\212\273\273\312\371;H\274O\274\236\002\200\275j\267\212=\342a,\275Z\375\016\276o\317\234=\321\271f\275\342\252\304\275S\217\027<4\272\021<\265c\247=\356\003\241=`\234\037\273\214R\016:\222Z\235\275\n^\374:\236\372\330\274\2116\236\275\316\305\251<-\237C\274\264\354\217=\305x\330<\222A\230=9\224\005=\r\304u\275\217\371\251=@f\005=\202\200\355=\271z\014=\201\347\007\276\312e\365=S}\312=nU\211=\007\304\237\274d5\247\274M;\240\275\017\267\207=\255\2160<\0005\035<\255\337\303=p\251$\274\302\337\025\275e\302I=^\251(\275G\340C=\020u\327= \267\322\275c\033\010>[\216\347\275fT9>p\332\230<8\346\214\275\0107\336=\017}\257\275\207\313\372<[0\360\271\022\3461\275L\034\306\275\265\256\006=N\216\332<\235x\314=\233H\324=59i=\301d5\274\240\371v\275\345\256\223=t`\232=V\343\236\275\3472\233<\242\343\037\276V\245\214=\310\266\262\274A\020\026\2765\323\200\275\217\225\262=\255\241\r=uil=\262G\333\273\245\274\255\275\301\310S\275\216:A>\336c\352\273[\335\220\275\270\272\212=j\032T</][=\206\236\270=N\356\267=\234`\254\2756\001%>\222e\325\275\243\220G>N\204\361<\324\360!\275\230\304\272<\320\376g=\010\027E=\234\317\320\274k>\307\275\014\216\314=\362\265\230\275h\235_\274\267\232==\320\231\270\275\224\014o<\2000 =\003y\362\274\005A\257=\026\271=<\312\364\026>\233q{\275?\1779>Q\177\205=\272dz=_\004y\275\020\005\222\275\020%s=\037\231\302<0\003\343\274\276\212\327\273\227\007\276=\252J*\276\240Xk\274\273\223\252=\t\025!=\304\'I=\206Fg=j\370\002\276\253\365O<\314\351\031=\343we\275\332?)\276\212\350}\275$B\365\275\210B\326\275Z\014\t\274\242\307B\275o\310r\275g\266\220;\245\261\336=\214\346\220\275\241\010\300=\016\366\373\275v\t\267\275\320\007 \276t\235\243;\257\000\360<\253W\226\274\371\246\351=\033\324\377\275\207Z:>o\0012;X\010\013>\005\370\222=\274\004%\275\014\2673\275\375\034\347\275\002\266,\273\202?\375=\216\266\016>F\340\211<\235\244\200=d&\'\276^\266\020\273}\276\343=\336m\215\275\223\315\323\275\336\274\352\275cq\217=\026\334\247\2741\306\266<\234$\t>/\206\220\274\"\017\317\273\304\255\205\275\204\262\032>P\302\260\274E\327\262=\350\022\363\275\230\313\227=\032Q\r\276\364\3018\274\342\366\331\274\311#\273\274\365E\237\275\200\207\022;M\307\341=\205\2066\275=\320\322=\2500\350\273\342d\271\275q>\236=B+\247<h\200\t\276\362\3015=g8\024>K\305\300=\222\313\255=\237\202\201\275\323\310\021>t\036\224=Ak\033><\370\320\275\273\275\022\276c\033\312\275\366/$>\377e\244\274\027|/>R0\255=\276\312\304\275L\373\001\276<\343X\275\3223\270\275\323,(>\367\2639\275\250\003\340\275\300\211\0248\004\337\362\274b%V<\205\r\202:\250\323\033>\2742\t\274\024\t\205=\177\037\003\276\213\t\t\276\233\327\256= *\341<\273\276\266\275\273W\254\275\313R\210=\\\340\202\274\263\025\001= \006B\275\322\341\273=y\373t=\227\374!>\207\373\302<\017]L\276\022\307\370=\303\377\177\275\273\277Y=\0029\250\275\34443\276f\204V=\332\245?\275|\204\214=Q\014\016>\r$7\276\222\020\372=\033\355\220\275\242|\t=\332d&\276\020\346\">\215\320=:\230\247\314=\223$\315\275\034!;=\212:\364=\372T\260=\030\327\206<\030A\240=(S>\275\204\200\023\275\326\242\223\275\377\360O\275@R\331\275\t\374\016\276\273\211%=\224\302\026\273\242\025\004\276\022\327\356=\317\232\242\2752;k=\333\221\303\275*\216\036<\351\337\016\276\260\003$\275Y=\363\274\3352\016\275\245\263\317=8\021\266\275L\276\000\276\335@u\275\016&)\275Jm#=N\350\004>\227\307\231<\320\356\372=\251\002\360=\333_\266\274\224>j\275\207\250\237=\211\261u\275\210\270J\272iO\023=\t\004\005\2759\212\033\274\226\277\205\275\345\021\034>J*\356\275B`\276=_\210&=\001\302\037\275\325\251\250\274Zw\307<\271\357\357\272\037IK=\0333\325=E4\017>\321\273\000>\204\'\341=L\376\016\276`Z7;\227)\343=\256\265\334\274\177n\305\275\207\273\371=\237c\301=\320g.>m-8\275\357\003[\275\307p\253\275b.\"=\037\343->\333\233\364\275e\017\377=#&(=\214\274\301<u\027\317;\307$\211\275v\257\272\273\366?\212=\346A?;Q~6\274_:\342=\245Nh=\242\264\301\275t\031\020=]E\214\275-V7>\0005\375\273z\222m\275\251\nO>\240\377\252=\275D\276=e\002\234=\236\221==\034\325\014;\204\0205\276\372B\035\274h\365\033>\036T\226\275\373Z\314=<d/\275\320\016)<e\024E\274\034\316 \276*\233\371<\226\340\362<\256.\243=\351\205\273\275\351\217\3229\025\276\n\276\200\r\301;\326\006\363<E\224[\275w9;\274vYd<F/\304=\304\361\t>\343u\264=TQ\325\275\031$\200\274\036\023/\275\236\372\363\275\343\270\242\275F\226\313\274\335\307\342=\322^\023=5\303 \275\026\235\n>@\355\365\275\312f\006>\016\250\000>\013?\357\274\216\347\206\275\364s\320=Hto=?\3043>\027=\364<\345\016\230=\216\206\302=o\313\257\275\005\350\202\275\251\2000\276y\371\037\276\202\r\010\273g\222~=;\n2\275\033\010\344=\007g\304\275\"\313\300=\310\016\353\275\r3\003>\266\211=\275\370:`<\036\312\262\273s\232\222\275\222\361<>\337\245\207\274\250Q\203:\031mC\274\204\301*<\263\266\'\275\232\361\267<\335K\321<N\317\357<\270\255\276=h\301\257=\2415\330=\216\233O\274\246\311\353\275k\027\332=T\031\213=\357)\003>\346H\205=\212\030\363<\346\223\r>d\000Q=`G\263=\013\030\233\275\023Y\307=\272\230\017<\007\342\252\275\035\326\010\276R\245\255=z\303\303=\306\232F\2754\231\206\275\027!\342\275\024I\257<\n\0220\274\357\200\363\275#\206\000>j\3613<\251&g\275J\322\306\274+S)\275\370\026\326=\354\255-\275\307\203\036\276\356c6>\342\010+\274\371\233\370<^.\016=\004%\n\276\363\265\315<d\254\205<o\232+\275x\243\265\275;\027\021>=\035\232\274\003\003\231\271\026\372\373\275\266\374\325=\323\t\0049\316\324\037\274\273\033\362:G\301\023=j\271\031=d\016\026\275]wB\275\352\210\312\274\317\252\356\275\332\212&>\333\311\013\276\330\214\370\275+@S\275\337\351\347=\245\370\303<,\343\250\275\275Yy=\246\356\300\275\035\320(\276\261\0211\276P~w\275\005\361\'\276\214\t\262=Pb\265=\014\337a\275\236\374$\273\013\313P=\324\205t=\230VO\275uZ\026\275G\204J=\330&#>!.\315\275B\214\210=\243r\275=>\340\n=\236_\206\271J\024\202=\007\006\354<\322{\363<\336<\336=l\374\235<\3100\354=\363f\365<\244\227N\273\327\337\230=w\324\211=\250#\300=7\261\256=F52\275\265Y\003=\341\3670\276!\372:<\322] \276\366\343\301\274\312\0022\2764*<\276kt,>#\275\365<C\210\224\274\217\014\314\275a\200*=#\273\324=?X \275{oL<\240\260\t>^\t\350<8^\370<#8\275\27440?=\324\212\267=\320\2567\276\"T`\275*\236\347<\233\254\252\275K\334\317\273\242\000\317\274j!\366<%\3774>R\000\314\272B\347\n;]9\317<\206!A>}\022\253\273\350\320\321\275\215\017l\275\331\225\257\274Ud\227\274\323\\#=\346\3635>\362\020W\276\014\3065\276w\225\277\273hS\033\276\302\357\027\276A\207T<\206\305:\275\224\205e\275_\216\343\275R\036\331=5\347\367=\354\204\253;\304\017\241=\270m\005\273\242\302:\276\270=X=\246\227\221;\025VL\274\035\'\224=\322T(=\231)\303<\216\356b\275\223#F\276\375\267\331\275s\340\206\275\335\216\233<\026\330\262\274\233\372\265<\316\351`\275\026\261R<\236\t}<\001$%>i\'\243\2739f\305\275K\201\246\273\021fA\275GX\216<\361E\002\276\274M\343\275\262\221\";Z\262\343<\263\331.>\021m:=\322\311Q<\343\021\345\274\030\323\200<`\357g=A\366\014==z\214=Mm\250=Y\277\316\275&k\246\275A\312\272\275\003\267\373\275\"\250\271\275Gp\006\276\240Y1=\266\360\257\275\247<\025\276\262E\260;S(S=\202\023\300\275\353T\303\275+\025\352\274\273\257\002\275\302\306\357<\003\357S\274\341\262\311=q\325\310\274w\017\005>i>\274=Q\205\216=\230\263$\272:\202\253<\263\322\266\275;\304\212\274F\226\357=\302\337H\275~0\317\275\177\243\362\275\367=\265\275\177\035\027>\360\r\007\276\021\307\316\274\243\256\210=W\257\036>D\256\000\275lXT;K\362\320=\336\027\341\274d\267\336<\254\014\207\275\007\273.\275\312\227\033\276\346\244\274=\355\000\333=|3\301\275\027\254D\275\020\254\352\274 \345\n>\224R\255\274\230\247O=\300\001\177\274B\267\200\275O;8=\204\364\327\275\236\332\232\275G\312?=[D\330\275\273!\032\275M\034\234\274\'y\261=\023Z\232\274T\221\210=T8\325\2738X(\276\322x,<\312\215\\=\236R\302\274\305\306\262\274Z\242\267<Z\266\026=\304\303\314=\221\232V=\320\315\326=\221\020e=\250\010\266=N\274\032\276eK\201< \2439\275xX*\274\362m1\276O\\\204\275v&\300\274\224t\367\275\276X\254\275\303\314L=\022\374\326\274\324\2238>\362s\034\276e\013\206\2756\270\210=2\217\254\275\254\351\021=5h\017\276\250\240;\276\341q\037\276\350\010\327=\312A\330\275\005\310{\275\321\013\021\275\'\007\344=\024\264\034<\200\211\214=\344Q\344\274\227_\211=\242\230\203=~\242\374\274\034e\267<M\235\266\275\356p6\276l\370\007>::\254\275\247E\330\274,\354\034:\372\023;\276\267O\302\275\242[\212=\261a\352=\232F\207\275\332\177\275\274\235!\207<\004\202H=L<\347=\342\245\372\274\201og=\310\017w;S\2750\273\"<\004\276E\\\010\275+`\254=\313\003?>~\331\002=g\241\270=\216\033W=\276\004\305=\235\261\331\275\264u\302\2750\257$==\375\370\275\014\3718=\025\222\262=|z\375\273\275\035`<\3003\361\2753\266\007>\206\333\277\273\265\246\014\276\263\370I\275\231q-=b\203\330\274F2\332<\225z\225\274w1\207=\331D\013\276\306\316\207=\214\343\346=\0068\002<\341\215\303\274`r\020\275\252\034*>_\334H\274\370\332\007>-\306E=\t\205u<a\345\000\276\022\233>\275\245\024\343\274\362p=<\231\241*\275I7$\271\365|\247\274\250\272\247=\037\3743<\375\260\265\275\216\201.>\002\002\276<\225\216\201\275\272\340\310;E]\207\272*\326\207\274\250\244\034\276\002\231\017\275z}\016=\nk\036\276>\241S=\031_\r\275:Z@>\226\207\267\274\342\343\327=\023\206\264\275,\345Z<P\240\311\274,\273\272;\326\t\371\275\234\343\274\275\224RN=\360!\025\275\350\330\260<\343\267\010\276J\336\r\276\333I%\275+,\035\275\337A\331\275\026\324P=a}\013=\275\255/\276\271\346\270<K\323\223\275\200^\246\274\257*\322=\203\331\026> \303-\275\266\272\225<\232\267\033\276\006\257(\275\313\034\r> \337\233<\320\027\325==\305\264\275-\205\217=9\332S=B\255\025>f_\205\274\347\037\302\275\350Yd\274\032\311\004>\021\n\206\275\336\006\341=B\255\035>\000\347;<\311\226.;R\023\234\275\264\275\312\275\345\274,\276\231\234\220\275!\2231;\250\014\254\274>\\\343=\3336\304\275\360\342.\275o\n\016\276j\251\035\275\266\n\344;b{\277\275)\032\206=\350\343\235=\025\230H\273\301\266\266\275A(\256\275\255\265s=\252p\333\275&\037\230\275\313\001H=\374\371w\274\340/1\276Q7\225\274=\232 >\332\205:\275\366CY\274\001,\035>\277j\'\275l\371\312\275\021\220\036>a\372\256\275\036\226\037>q\235\236=\177Q\\\275S\313\337\273E\325:\275k>\203\275Fl(\275\363\261\215=68\240=\206\373\002;\016\266$<\222\371\216\275\316e\010\274\240\352)\275\034\212\r\276\345\341T\275\255\2138\275\t\315\231<dS\231<\222P\351;/\223\262\274\271\r\207\275\207\325N=\371t\265\275O}\275=\213\244\323=\231\357\243;\276v2=\261\260+=\223c\364\275\224Y\333=\213\310\017\274\'\341\312\275\245>\032\276<\303\225=[m/>\311\245\350=\226\345[=>R.\276-\3765\2750\207\013\275\237\235\325\275n\262|=\354\361\235;F\2028>\227{\363=\272\207\231\275*\216\277=E\216\002\275i\202:\276\3054\364=\256\211$=\0007\215\275\005\216\224\275j\001\222=\234I\324\273\025<\303\275\2425\027>\t\361$\276<d3>\000\317Z=\362\032\016>\007\032\367=^KJ={\262%\274\032j9=\231\230\254<\232[\252=\365>\034\276\337p\377=\270\2363=1\257P=\350rB={\3346\275^n\363=>po\275\201\323b\275\177\327z\275\252#\322\275C\370\232\2754\353\246=\306E\'=m\356&=\210M\354\275iN\023\273\345\017\201\273\232\006\210\274\232\274\201\274%\314@=\266\265N<\325\204=<\317\373\312<\335\332@\274:\257\327=\376\307o\275\341\231\300=\310\006\025>}\014\001>\000\342\355=\273YS\275I\324\354\275L\302\333\275\375\270\221=\346\310\241;\262P\200=oR\221\275H\302\002>\253E\007=~\rP<\257\206\005=\306\317;>\212\360B;8\211P\275Q\023\234\274\347\220.>v)H=\305\245\274\275\007:$\2758b\013\275\201\223\317\275\001\315c=XlA>\205M\256\275t\243b=\3602V\275J:\335=nn =\344h7\275\316;\241\275\r\204(>cE\332=\260\007G\275\235(\037<\021~\032\275\307\021+\276c_\275\275ZbK\276JN\024=*z\364=>\343\027=\214|J=N<(>\227+\262<\244\227\366\275\303\270\016=\243C\315\275\251\340\316=\333\021\036\275\037\300\271\275(\314\n\276\325?3=\222\270\304=SA\022\275_/\301<khd\275\344\326\230\275\206~\031=\243\216\366;\305\2778>Euw=w\243\315\275{\003\216=\243\032\372\275\226\377\035\275\006*\005\275D\007f=?\263%>\006b\r>-:\035>b6\332<\234\254\207\275R\313\276=\031\007\361;\235\253#\275/R\277<hd\302<\002&9>\364y \276\2163\030\276\274F\231=f\037\263=\n\361\014>>r\223=\272\334\037\276\340#\245=\202k\362=\242\237\366\275\377d\025\275\256\3634=\266\224\206\275ZJ\214<\266\275\217\274\313`\206=\025\277\356\275\345r\337\275\r\310\277<\345\276N\274\376{O=B\340\372=\\$\267<s\230;\275\234\346\341\275\313\244\315;8\002\374\275\252\276\226\275\265\275\331=2\305*\274\022\315\206\274eL\031\276*\302|\275*\203\030>\231\006\262=\234uB\276iB\371=]\234\235<<b\235\275m\t\374\275\340\221\277\273\rc\034\276l\2427\274\n@\373\273Xx\314\275\004\325\341\274*`\320\274\343N\202=q\351\027\276\002\025d\275F\375n\274\311 \207=\230\252*\275\372\235\261\272um\330<\325\222\031\276RM\005>\367>\255=\036$\233<Vt\004=O\363c\275\034\207\336\274s\367+>\320\267\273\275^\225s\275\357M\277\275\342\3478\276G\020\226\274H{\355=q\323\360= \"\266<\362\323\231=\301\200\255\275\262\344\035>\311m\r\274W\220\331=Q\302\246\274\306\232E=uF\234\275\016\274\230=\215\305\010=\324\263w\274\3215\210<|\346\033;\210au<\233B\217\274\263\016s\275\376\250\222=U\350\363;eW7=\336\222\244=\264\022\211\275\025\251\207<\226L~\271\016\205\237=M\016\250<\013\313\210=?\335\205\275P\370N<\371\027\376:\330u\215\275b\214\204; \250\323\275\201\374:=\275y\243\275\027\300\000\275$\375\251\275Q{\010>\212c\270\274mv(=\200\256>=\364\005+\276\346\241\n\275U\007\002>\3028\301=\262\207\262\275\253\333\246=a\215\037=\331\201\251=\356\336\324=\001r\325=h\0101\276\014\203\352\275t\236\000>4v\206=\304c\355\274\316:b\275{\224<\272A\256\212<g\347E\276\310<\022>\301\313:<\243\370\345=H\320\320\275d\267\336\275\244\362r\275\357\377\t>\2624\017>A\350\002=\273\354\013\276\311\321\230=\221?#\276\010z\275\275)kC\275\313\300\333\275\362\222\317\275\311\271\374=\347\212\310\275M\0012\275\033\270\240\275\215\275{=\363\256\007>\303\244\237<\276\256\211=~\020\327\275\227\034?=\247\233\222\275\325\2300\276&3\226=aL\202\275\n/!=\311\334\216<).\203\275\213l7\274\251\335s= q\234=\363\031\305;\2742\311\275P:f\273\350bJ>-\345\227=\252\316\362\274iu.>o\324\264\275c&\251\275\002\230\226=\355+\004\275\277\250&=\266\003\346=\362J[<O\336\265=\026\326\250=\277\240\275\275>\317\300=\016\255B\275<\320\227=::n=\204Yj<\242\225\302\275\254\214~\274\177\303\005=\031\304C=\252Z\260\271/\031\013>\247\250\037>$G\342=\200\356\237\275\271,\177=\341l\371\275\203Y\233\271\233\016\027>\303\236\\=\234\333\314;\023\362\262\274\253\010)>\022S@\276=o\005\275\322\262?=\202\320\273\274eIP=\221*\235=\0279C\275\351\333\032\275\037\026\203\2755]0=]\270\314=\234[\267\274W\0222=\350d\343=\342\344\203\275\371\3641>o\323\201\275\226\272\345\275\232\367\273\275\313\362.\275\235\253\363\2751\243\236=k\217\031\276\037\014\306\274F\351\340\274S\326y\274\274\'>\274]\332\202<\0370\220\275\331\324B>\336e\252\275r\r\354\275\363\031\375=\253\274\205\275L#\035>M+\023\275EA\301\275J\246\303\275U0\250<\352\206\323=\010\253\201\275\222\272\n;=\025X=\276o\356<\322\310\350\275\026\037\326\275m\326X=/\034\364<\317\263j\275lZ\362\274\356%:\276z\237\017\275\221O\323\275\025\242\365=o\337\372\274|\202\223=+6\010=/\031\337=\016E\312\275q\333\032=5\010\032\274p\213\244<\003)\013=\024FO>wr\241\274\323\361\005\276x\232,=\364\363/\276\334\250\226=\235\3454\275\177\001\210\2745\261\375\274\000M\303=\353\270K=\334\304\020>\241\332\036=\316l\260\274\310\216\334\275U@\025=\353B\002\274\277\352t=\346\231F\275x\2005\276GbU\275\275\341\316=+\326}\275\216\363K\275\201\275\207\275\224\201\201\275\000j\037>\022Q3>\364\263\004\275\243\003\304=\360\210\010>_D/\275/\177\254\275\353c\322\274\252\374\333\273\222F\324\275\321\316>=\0065\'>\243\3651\275K\255(=\360\3764;\341\221\024>\216 \\<FYq\275\321\251\262=\321P\\\275`\371\357\274;\237C\275\367eJ=p\030\267=l\022\317\275 I!\276\300Zi\2755\257\250\275\351GB\275\222\004\013>\027\326\026>\001Y\362=\275\230\373;d\370(\276\371\227\033\274;f\340;\005\207t\274g$P=l\271\255=]\003\006>\026o\004>*\327\315=\344\227\206\273\201\0257\275\262\007r\274uM\234\275F\351\256=J\247\014>\247U\016=\247\360U=tg\244\274\377\307\204\2742\266\001=w\202&=)\001\211\274\206\255\306=0[\354\275\3278g\2753F)>+\335\333;\t\005\372\275u\366\203<\321\202\332\271\255\211\274=U\200\n>\257\025\340\274\n\'\017>\262V\234\2751`\361\275P\272\031=4\002+>\253\003\014\275_\003W>\253V\363\275\0002\300=\244\241\202=mp\347\274\310\276\203= /\035\276z3\031=\201\022\201=V\200\374<S\236\217\275i\234\007\274S({=\321\332\260<\366@3=\242\tI\275-\301f\274L\3766\276\221>+<\277_\001>\316\332g<\266\261j\275\234\260U\275oB\311\274\260\337\200\275\261R\003=\254\314\353\274n\036\334=\026\262-\274\351N\352\275\366\357{\275\217\2168<)\217\315=\222\332\320\273\277\217\030>\033\277\214;\2535\302<\256\254\033\275\274H\216=\017\232\017=PZ\300<3\254\271\275\r\220\'\274\037\205\263\274\251o\007>K{\301\274\236\361\003\276\267\214\263=Ao:\276o\365\033>\262\"\346\275\357DH>\332\215\204<\t\235\256=;\245\225\275u\331\214\275\231\312)\276\210\234\353\274\360\220\341\274\001\254\371<\r\227g\274\003F\303=E\253\r=G\0037=\260\244B\275\375[\004=\032\r?\275V\177\233\275u\312\005\276\233\366\344\275Fr\240=\204I\254\271\371\261,=\330\343\305=\233\353\017=\026\024\242\275\356\331\233=/w\022=4\322\347\274\351H\377\274\003\361\277;:\353a<;\265G>9\252\373=\006Z!\275J\261\016\275\226\365\255\275<\261\036>\274\214F\275sd?\2765\255S\275{3?\272\361\234\365\275K\335\261\275\332\246\224\274\341\020\246=\377\022\221\274H:\264\271\202\223$=\010\354\007<\224\214A=\337fV=_\355\237<\223\333<\276\203^<\276\341B<=W\211\352=i\373\266=,2\250;\331\255\033>\314\346$>e\3178\275\203\242\226<\260B\257=\335s\204\275\222\204\023=\3313#=\307J\237=i)\330=!jo\275G#\000\276\'\353R;m\313\340\275\376jB\276$7\315:\014P*<\223T\345=\264\257\242=6Kk=\355[\014\276k\017D\275#\000\217=[d\261\275;\2053=\230I\343\273\202H\301=\307Jz\275\307\021\312\275\363\006\363<+P\230=\007`D\275\344\033\034\276\207\257:=\002\337\305;x\243\237=\301\304\351=\003o/\275\243\267?<\203\341}=\305\351~\275|5\350<b9\310\275L\3252>H\267\003\276\231\244\030=?\215\330=1\244\335\273\326V\232=\252\352\306=\225\010\347\273\376X\365=\237\005\221=\211\261\001>9\352\277\275\241S\236\275\360\277\305=\217\233]\275)xN=_\344\344\275T\357\321:\014H\364=\\\310\323\275=\233\343\275\254\375\037>n\366+\276x\335\347\274o\017\366\275\252\365\007<\275\336Q\275\337\347\010<\356\010\021\276\301\225\374\275U\273\202<k9\014\276\1770\204<\324`\004\276rv\247\274\306O\035>\365^b\275(\262\337\275$>\001\275$Z\335\275`\247\244\274[\325\202\275\035ZA>\036\270\312\271$\004\207=\345\251n\275\252\335\342=\013\372\013>\367\223\">W1\035;y\005\321=\2101v=.\343\361<zV\017=`\374\367\274\300\367+\275\036\273G\276\332\007\025\276\237GC=z\230y\275(&\372\275\325<\360<\253Pn=\341\245\265\273B\036\215=\'\237\241=A\003\243\275o \241=\307R\203=\030\213\320<H\3044=\366\031\251<\003z\357\275\331\324.=\262\267\032\276Z M\276\322\200\236=*X\201\275K\311C\275{\027\205\275\274y\006=\300&\006>8\\\362\273>\na\274\2479D\275\360=\226\275\304\232\202\275\244E\210\275\376\311f=\3313\005>6^\213\275\240w1\275\255g\207=\267\263\252\275\016\215\355=\202\003\017>$L(>\346\n\003\276\313\342\262=\023\366\006>\227\314\t\276\250\"\247<\335D\261<\260Q\365\274<fY=$\315\274<b\323<>\353\030x<ZI\235\274R\243`=\365R\222=-u7\274\264.a\275H\332\031\275\233\372\001>\017\304\221=>\260\236\275\346\177W=]\222\244\275.=\256=k\205\201\273\300\"k<\343)\243=\3334\211=l\2267\275\027\263\317\274\267\030\344=\371\370*\275\353\315\016>w\253\231\275\345s%>\251\343-\276%A\002\276B\267\\\273\243\345\031>\002\236\033\276\223\215!=\221\376\302\275t\304\316=rY4>\023\360\250\2753D)=\033\306\372\274p\322y=w\372\000>\334k\240\275\036\177\177<qc;\275K)\021>\220\247\007\276q\257=\275v&\247\274\304wx\275\255\200\035=VKG\275\304U\220=\315\227\000=\201\021\376\275\333\357\352\275\014m\337=\215\332\265=\007\206(\274\273ut\275\266-\257=\314\325\256\275\273\001\205\275\003\020\275;\265|\361=\021J\357\2753\334@=\222]\021\274&Z)>b\273|\275\237\234\022\275`\277\312\274t\035\360\275\346\023\311;\"\310H\275\273\256\004=,\3108=\273\217\021>\003\274\022\275\244\002\241=\r\334_\275b\212->\353\374V=\006\234\320;n\003\257=\206\000\005\276uo\372\275\177\303:\276v\2269=\232\321\312=[@\366<\331w4>fZJ=\240f==\231U\343<\364\'V=\017\"\010=\327\2151>\310\277\031<\325\217\001\276\327\344\210\274t\327M>Q/\210\275CU\312\275\035\217\371\275Y\202_\275$\017\n>l\317m\275\013\244\225\275\254\313\364=K\343 =\344\366\t\276!4:>\310\232\013\275\3560\241\274\313\233,\275p\030\240=\333Q\336=/0+<U\355\023\276Ff\253\275\245\022Z\275\304z)\276\257\205L=y\322\202=\345\322\276\275\216\013\250\275\252Ya\273\301\032\037>ht\307=\373?\304=\347l\251=\010\003\234\272\300H<>u\005\004>\215\257/>wV\353<\225\245\003\276\355_,>^\205\261\275\023\210g\275\260!@\2768\345\214=\304\354]\275\233\274\001\276\346TK\275\030X\371</\357_\274\336\311\024=9(\204\274\0325r\275\211\363A\276F\245D>A\223\376\274YL\360<TZ\315\274\3036\336< \234\213;xk\355=Y\222\203\273E\215\241\275\303\024\304\275\234H\006\274\2518\001>\371\345\344= \307\215:ES3=Qn\022>H~\225\273\033\222\367=\372\023|\274\177\037\021\275#\250\"\276\277\237\331<\371\237\033=\300\325\020<\345*\211\275\360\234H\274\314\001\234\274&\336\254=0\327\320=\3356p\274\360\364\214=@\270->\350\364\371\274\210\363\226=\350\203\201=\304\323\034\275_\354\204\275}\270\023=\n\373*>\374e\277\275\207\230\370\274s\204\212\275P\032)\275\336~=>t\364\034\276\225R\022\276\311I$=\n\201a\273ab4\275\370\313\017\276\022\007\211\275\014\327X=\037\241\240=\021X\306=\376z\024\273\204\326\031\275\272u\007<\276\230\307=\270v\247\275\242\243\232;s\336\333<\017\301\321\274G\r>>\341w\240\275\340(|\275Y\213\265=\274\214\360\274xP-\275\035\273\306\275\270u\315\274\256M\310;T\307\246=13\032\276\315\332\210<\022\207#>\234k\367\275K\032F=\366\237\302<\034T\236\275:y\362\275\273Y\025\276\201\270\224=H\000F=\202\017\220<!]<=\241\250\321=w\354\303=\001\240\256<\255\245!=u\356\233\275\0003\344\275N\212\021>\30569=\263\372s\275s\n\354\274\303\221D\274\372\017\331=\202f\334\275\252\220\257=\363\002\254=\344]\264\275\264\202\217=\271\2424\275\352\037\244=\367a6>D\257\273=\223f\005>\3050,\276\227\355\020\275\325\303\023\276\201\361\243<\361k\216\275\327\3023=`\005\317\275\320\355\035\276>`\243\275\274 >\275vn\003>W\nJ\274a}D\275\306\027g=\033z\022>\3313W\275 \267\340=Xj\215=\215\300\214\274\322\275x\275N\257\001>\314\203|<\307\277\223\274\220~\267\275\215h\334\275\017\371\023\275\216\377\254=1H\330;\372\361@\276\341\244\016:g\364n=t2\274<\304{\377<\235\361u;\337]\026=<\316\024=\347\276\232=\322*\262\275.\t\034>.\272\033>\332~\362;#\315\033\273\313N\023\275\321\"\223\275\354\215\010>9\261\223\275z\330\035<-\370\262=\313l\321<:V\330=\264\022\004>\3236\"\276R\236\256=\020\352\355\274\231W\355=\352\207\336=\017c\016>\000\\o=1\013C\276\004S8>\3214\330\275\341\245\313=\370\341F\2766d\177=J \247=NQ<>\252\021\360=\001`\245=\024A\371\275\007\323\370=\333\303S:J\265\330=\354\0235\276\246\230\001=g[\265\275L\016\005>\021SE=\r\377\003;\225_\301\275I|\260\275\335\274U=c\217\025=c\352L\275\036\242\263\274\274\340k=\340\273\377<\361\240W\275c\034\374=:\'f=\343\364\311\275UV\361=\361\235%=\240\377/\276C\211q=\216\000d=\367d\361=S\256\261\275\240\377\236\274D\210\225\274\265\344\253\275c\003\326=\3537\323=[\364\321\275^$\215\274\372\367\224=/\314\216<r;\006>\264\376\225\275\017>\337=\365P\355=Qi\325\275\023>\211=\360/\021\275\346\241\260<\327\271\252\275\000WZ\275(\032\007<\004\261\370=\226D\030>\266\372\026=47^=,\224\333\274K\036\010=\310\372\372=\016l\362\273@?H=\215\333\273<mF\235\275\366\272\361<Dx*\275]r\003\275\021)\344<\021\352\023\274\366\331`\274?\311R\275\327\323F\276W$\272<\305\361\211=\347\024\207\275kM\205\275\357\354\214\275\276\310~<\221\352\341\275\n\n\300\274A\203\213<\235J >lE\200=B\026\002=\353\361\034>\257\367\317\275\010\313\306\275\262\243\233\275D_\244<\354\331\361\273\n\340\353<\267E\346\273joK\275\355\023\372=\322\024,\276\023\250\031\276B\037\342;0Z\377\275~\022\307\275\035l/\275\257\216\007\275\321NF=\217\3318\275\0101I>\300\226&>\207G\025\275Rt\344=8x\346:S\362\024\276\002\024\203\275<\037\237\274\356\275\341<\350\035e\275\347\2173>\014@?\275\220Mi=\253[\222\275\321\271U=\027\204\351\275oP\276=\266\313\025>\205;\257\274\323\343\367\273\007\034l=S\020\337\275\313\353\275=J\353\247=a\275\324<=\231\000\276\001\324\312\274g?\374\273\364p0=r\224\273=\226\201%>\003\334\327\275\340-/\273\000\257\024\276\363\307\006=]E\013\274\376#\230\275\2028\331=\320q\221\275j\263\245=\367g\226=d7\253=\357F\263=\226\002\033\275\374R\334=@\306K=\237d\326=\306\021\366=\267\201\023=\204\207\230\274v3\323\275\365\361\020\276\001~2\275)\352\241<\204\023\002>\324\361R\276\361\037\\\274\271p\212\275\257[\224\275\320U&\276;\203\355;\202\345\245\275\203\274\002\276\2715\235=\202V\313\275\333\273\250\275\032\352\207=\257\227S\275\013\310\363=\n\r\372\274:9\'=\367$\335<4>\322=\360\245\033\275\201\247\205=\027\315\313=a\244\315;\030N\226=\314u\304\275\331F\245\273\337@\016\276\342^\314<\253Pt=Ay\310=\027\016\266\273\323M\211=<\245\016\276\365_C\275\311\3622\275.2 \275\0309\027>Tm\345=\204\013(=\212\271\035=\223\005\243\274g\316\316\275p\005\242\273\315\214\001>&A\272\272\354I\207=\002\347\026=5{z\275\363\277*>\244 \375=\2402\273\274<<\230\274\rV\365\275\214#\202\274\241\344\020\276\332$\357\275\363Z\013=\325\030~\275\221\001\322\274\357w\357=\306T\202=\246:\227=\277]\252\275iL.\275;\014\301<\223\315];f\005\221=\031\277\316=m\3620\275\240\0108\273\315\274\356\275\341\357\362<*\303\252=\"y8=5\330\333=\256o&>\312\261:>\240\2071\276\300\342\223<\323\340\267\273\346Y\364\275V(\214\275\316\223.=P\'\032\275>\375\200\273bq\210=\024\\*>\277\241\324\275\265\267\372=^\356\301\275\023\002C\276\256\232|\275\200\004\212\275\367\310\014>r\314\010\276\344\370\336<J\325\003=\'Q-\275+G}\275.A;\276\023\246\010>\242\2554=\021\257\201<\357\350C\275\n\271]\273\235\370\n\276R\262.\276\010e\332=q\340\345\275p\244)\276\316$\332\275\330#\t\274\340\301\010\275M\212\014\276\262l\344\274^b\266\275\250o0\275\276\374A>f\274M\275\257\307\270\275s\322r<\330e\007=\234,\255=G\342$>:;2=\257\347\346\275\263\277\265;67\244=\341%\313=,\313\305=t\217\372\275+B\326=\275\017\215\275tO\275\275\371\226\207\275\225\302\373=r\326=\274\227U\231\273W\277L\274\344\210\200\275D\233\260=e\033\344\274\2450\211\275\270>\003>\371\277\226=\264\253\327\275A[\266=vY+\2759p\354\275\262\277\330\275\355\t\255;\271\273\226\275+\367\206\274K\355_\274h%\203=J\231+=~E\002\276\231\367\337=0\030^;#\270\265=\014d!\274\2306\223<`\273\316\275Z\325\245<_U\034\274\177\345T<\300H\356={\310\321=\000\365D\271\266\350\271\275yd\325=\372\266i=P\273;=\201\351\343\275Eo3\276\364W\224=\315\357\002\276\310\020\217\275\325_z\275>o\343\275\334<W=\250A\351<\263&\225=\370\322\000\276\362\031\334=\253)J\275e\213\346=\370\274\347\275\226`\002\274\317\031\006\274\207KL\275\375\222\262=y8<\274\362\332\307=~F\000>\017d|<\360\t\022=\262\232\033\276\361\032\013>rA\020<\" (\276q\323\001\275\013\332\334\275\356\216\213=\244\305\267\270\344D\263<\276\023\305=\244\321\357\275YC\024\276\320\325\225=\254\354@\275\313\354\365\275.\273\221\275j\242O=|%+=\225Y\365=\340\003:\275\353\240\346<\323\\\"\274(\222\232\275\261\017}<H\213\001=\246\177\342\275\030)i=bs\024\276$\223\024\274\005^S=\004\220\014>\266]\327\2759\260\013\275\236m\234\273\212\227&\274\037]\271=\337\317\223<y\326\267=\2579k\275|e\035<vk$\276\356j\\\274[\270\306\273_\002\"=\372\321\312;\353\305\034>\003=d=\205\211\224\275\227=\277;\332\341\272\2743\300X\275\311#\202=\303p\350=g\314\001\273;8\007\274\025C\241<9\207\334\275\263\320\315\274\234\342\302=\036\273_=]+\216\275x\2363\2766\031\273=\204\205\021\275_\231V\275\025\n\311;h\331\n\274\3167R=\203\225S\275\343+5;\225A/>$\276#=\0104\224\275Ab\235\275\351\376\220=[\315(\275!\210\t\276\245\354\305\274\\\352\276\275\337\342[\274\377+\260;+\306\302\275\223\216\363<p=\007\276\377X0\275\202\016\201\272\212\0016\275\354\027\241=\037N\031\2758\034\001\276e\372\001=\230\247\350;\223\036\013\276\006\374\315\273\346\031r=<\265\264\274\201a\224=c\004w<\316&6=\017M\r\275X\227\357\275e\233\263\275\235Ik\275^8\202=\261\006\361;w2\323\275\222\200\005=\202\206\311\275#\026\241=\256\037\231=keB<A\320\r\275\336\343\344\273\031\0211>\374\312w=BY\352=5\365\010<\372\243\'\276\221\324\341\275\005\350 >\200\342\311\275p\'n=\210\360\005>\335_\343;\267\200\216=W3\037=\004F\'\276\256\307\201=zw\261=\213\267(\276\006OE<|\311\262=\002\277\345\275\265\245w\275|[>=\326\031\343=\327\310K>@\262e=\021\315*=\256\305\260\274`f\311<@\227#\276&\3266\274\300?\262<\2555L\275\010\356\337<.\305\275\275%\334\227<I\303\016=\226\217\351=?0r<\245C4=\242B\212\273(\001\252=\3427\307=~\326\035\275\375-\240\274\246\252\274=\313\325\202\275\0303\372=\202<\213\274z\t\002>\257`\t>\324\'\233<\035\341\237\275-n}\275\371\261!\276$\350\353<B9)>\315Ld=\250\240\221=\024T\314=Bv\263=s\332\273\275\3106k\275\307i\231=V\210u<\263\334\333=P\217\007>E\350h<\301C\322=\n@\335\272/p\345\275\371I.\275\263\017\264\273=\307%=\235J\301\274/\002\035\274yE\356<i\340\266;z\0138\276\240\326\250\275\016\323)\276~\341 >\317\252\245\275J\226>=\221\345<<\350BY\275\350^\355=`T>=\216u\212=hG\300=\317\330{=\356\370\343=\005\213\203=O\361\221\2742\371\217=\006R\334=\367\337\324=\177\177\336<Z$W=\014vt\275\273?\313=w\273\231=\232\004\033\276\001\314\310=\241\375M\275\266\020\274\275$\331\310;\255u\304\275\245p\360\273\002!g=6I!>[^\340\273_\312\003\276\323`\261=\376\272\003\2763\r\305\275\335\006\324=\367j\022\271\226\224t\273\327\006\314\275O\213\020>EP\223=;b\001\275Gj\263=\366\220T\275i\336o\275-q\370\275\262\277F>>\007N=1\321\316\275\220\205\213=Q\301<\275\345\254\262\2759I\216\2743w\232\275\243\335$>\204\250\034=(\270\231<\333\016\321=\3463c=\253N\245\274\313/\320<\362\r\210=hu\325\275A*z\275\330[\021\275\375\331\t>o\300\250=M\303\006=\024\220\266\275\027\307\262=\265bo\275\256\026\036\276\315\260\221\274Jj\366<\320RG\275\241\013\023\276\353\255H\276\203w\000\275\272\304P=\275#\334\275h\236z\274\343\022\300\275\277\t3\276\372\265\310;\240\3738<\245\262\235=\313\356\334=\233\325-=\007\027\300<w)\260<\2440\016\275w\200A\274\014\210\301;\321\227\224=N\256\332\275\205?\024=\005]\022=\276\276\304=-I\260\274%h\017\275\\\352;\274\317\316\330=\317\303\243=\247PD=\2441\267=\343\273\364=y{\203=D\313\004\275r\323\261\275v7\310=\362\327Z\275\336\264\025\275K\343\262\275\217\215\255=G)\004=F\237\024\276\215X\232\274\213\007<\275\265\237<<\234\232\372\273\260\202\r>\230AE\275\214\027\234=\343q\226=t\270\017>\006\215\037\276?WR\275\314\024\377=\014\373\376<xB\236<\204\355\316=\260\306$>\003\\\010\276d\216\370\274\251\224\033\2766\227%>E\312>\276!\250\333\274zz\274\275%:\307=\324\317?<\363\\\220\275\255f\214;\335u-\273L^\004>\356\371\233=1K\030\275\230\205\033\275\330\177\303;\013\323\334=\264\337\262\274\340\260\333\275\260\336\033>DV\031<c\025\356=\022\227\202<N\264\313\274Vkj=\354\3057\275\213\256\033\276[\337\223\275\'\177\010\276cU\307\274nv\334\275\337\244\020\275\236\323c=\347R\331\274p\235\246\275o\306_=\003\364\276\275\177G\003\276\242\230\307\274X!\007=\332\205l=R\2476\275\200s\243\275BE\214\274\235Q\013>\260<%\274\221R=\274\276\310\254\273\375\344?;\221w\240=\267a\004>J2\002\276\240\310P<Y\322?=\223d\360<\265\031\221\274\346\204<>E;\207<\235\"\277\275\314V\027\275y1\325=\225\237n=\033y\017\275\253\310\212\275\246\001\222=H\002\222\274,\007:=\211\004T;\355\254[=mw\022\275\315\037\034\276\2256)\275L\003B=\344^\014=\334\"\226=\344\202\037<\177\302\233\274R\200\017\275\335`\024\276\017\013\347=ML<\275\\h\033\276(]\220=\3054]=\355\276\213=\347\236\211\274\013\326\262\275\273F\373\275\022\374\213=d\021W\275\364a\327\275\341\233\n\276!\271&\275\350(1\276\206\307p=\352k\325\274\"\322\327\275\210\203\351\275\334\"\227\273\263\003\221:\320w\237=\336\022D\275\376\022\233=\340\375\274=\3118\200\275fGU<\226z\r>\361\264\010\276\3328\037\275\342\002\033=\263P\362\275\t\322\207==\315!\276&\3255\276\261\037\345\275x\3627<\254c\n=\014U\025\276\335\3344>\301\002&\276\003R[=:$\221;\2762\306\275\016iY\274re\205\275\227jv\274\33324\274Z\354\020=\374\374$>J\031\242\275\376\3125\275\016.\005\275\207 \320\274\351OB=#\031\351=\326\361S=\375\334\002>}\323\321\275\004o\274\275A\212#\274\022gU\274Z\252\335\274F\234e\275\026\010\014;%\314\361\275\006_.=\027d\007\276v\205\"\275?,\325=\'\"\344\275\367\353\000\275\246\267\277\274\261\213\320\274\0241\221=\330j\030\275\303i\214=\343\231\026=\246$<=\001\265\247\275\330\276\372\275\220\t\374<9\243\363=\302j/=sjo\275\224\3013\275\267\356]\275S\217\262\274U\203\217\275o9\372\273H\013\315=)9\235=\010Q\000>B-A\274\tH*>\233~O>+\362\370\274\031\213\363\273\325\002\204=\002=!\2750\374\215\275\236\212\332\274\361W2=\362\262W<\245\200\327\275Cz\001=\321\254h=\340\200\271<\237\224\327\274\326\362.>:@\243\275\262)3<\210\026\261\274\302\013\323<H\205 >\312\266\367\275\025\024\242\275\252\325u=\374\305\244<\316\010\364\275\235\2541\275MK\273\275\245\217\271=\261\345\310\275:D\023>\353\017\202=\016G\033=\335\237\214=\223\315\212\275\002\342\333\275\223\270\000\275\2257\374\275\314y\225\275\261\316\256=\234\236\361\275~\343\221=\031\021\304=\362\276x;M\262\303\275Zg\377;=~\246\275+\262?\276UY\017\275^\206A>j\226M\275?1\342\275e\270P<\235\227]\275&\334\200=*\345\033\275Y\235\237\275\244&\351\2752\274\033\276$\rN\276\354\001\034=\226y\004:*\"\323<\374\352\022=$\r\266=U\235\025\275\301\222\237\272[-\225=\221\367\355=\245\326\252=%L|\275\273xh=\016\0069>=\371-\275\375\277\251\275\345M\002<\341\300f<\205Q\337\275\221\253k=A\262\023>\255\263X=\'\013?>\360\250\000\275;Q\030\274P\214\232\275\317S\360=\210\343~<\010\341\005>\230\036\223\274\260\271\261=\2437\376\275\226\263\256\274\264\001\250\273\255s\324=l\323*\276x@\021\276^\310\034;\353\256\226=\275\264:\276Gu\024=q\301\221\275c\253\033\273\376\260)\276R\230\217=$!j\275Re\240=\r\360\370<\372\002G>\326\\\375<\246\321\212\275\242+*\276\277\341\006\276\'\0225=\276h\357=U\274\"> \244\352=\322\261\277<B\357{\275\251(\206=*\367\302\274Dc%\275\376f5=~6\r=\265\366\361<\362\025\272\274\306l%\275kiE\275\022\207?\2763o\356\275G\365\225=\336\347\341=\214\t(>\355\010,<\354\253\300=4P\202\274\304#U\275\267\347W=i,\306\275\223!\202\2750\026\016><;==\370;<\275\206\301\025<K\362>\276\261\024/=.lP=\231\244\201\275\016\226P\275;Q4\275`O_\275\'\252\3679\237e\002\275\032\334\264\275\240\006 >\345\324\364\275\211(\330=\200K;=\213\014>\275\377\255\216=}\177s\2740\333H=\210P \276\022\211\264\2758q\371\275\214\342q=\350w2;\334.\246=j8\035>\333\371\371=l\265 <\246\037\317\2759[\202\275Q\225\271=\230A\034>\374\301\374=\177q\275<a@\326=\344\202\023=\024{L\273\346\314\252=\030.\350\275\024{\334<T\225@\275\331\223\313\275E\304\253\275b\004\016\275\006\233]\275MC\300\273\223\' =\301\205\305<\327\352P=\226\234\316\273\226\3073\274?\227\225\274\277@\306\275\371\3707\275y\361e\275\317\264\014\276O\267\353\275\377\242\220=\331(\027=\3605\336=\220^R\275\302):\275\367!\263\275\310\236\010<v\002\213=\n\340\323=\333\345\275<\320\022`\275\351\223\360\274\367\007\230=x\230\225\275\312C\204\275\3731\r\275\217\322\214\275\"\364\217\275]\032\334\275\255\344\242\275\014m\017\274\357\341\r=#\223\330=\002b\004>\307\343m\275M>\t=\216+\017>l\006C\276\317\250\017\276\355C\007>\276\233\232<8\202\267\273;9\014=\301\021\023\276\267\004\006>P\242h\275t`8\275\020\222\253\274\216BF\275\311\027;\274\2364\003\276q\313\013\275\000/\021=\037\321A\274v\014\215\275\374\250\227=\235\276O\275\272\005>\275?\375\314<\325E\274=\223d\323=\230\264\247=k\364\345=\200\"\201\275\265\016\004=1\311\272\274\034~\240=\255\016\'\275\013\374X=$C\226\274\007o\232=\362\306\271<E^0\275v\323\275<\225{\365\275\362\337\207\275y\320K\276/K\313=\302\325\335\275R\025\326<\277\336\277=\267xl\2759\301\005\276\025\265\005\276\364\306F\275\373\345\252=\327u,=\032\267\357<\231\021\254=u\351\307<\205\377\036\275\016S\242\275\242\344C=\263\335\204\275\350\270U\275i\310\365=\257\001\243\275\355\203\330=\252@\013=F;A=\350\240\302=\321\036\270=\010\260]=\360\337g\275\320?\363=\227OH<\272*\214\275\335\221\332<\036<\022;\305J\004>\337\340\032>H\0220\276\2332F\274\253;<=\036\243{=\377\331_\275V\006\313\275\331>\221\275\":\031\276<0\227\274<#\206=\343y\r>N\274\320=\205w\264\273\351\265[=\031V\000>-Q,\275\0100t\275\310\n\247\275\320w1:\250\335\031=\243+@\276)\016d=\032j\215\275M\021\251\273\321\236V<b\001\226<\t*\237=\033\254\312\275|\016\254\275\324\"\233=D\201B=f\374\225=\332\313\326\275\224%\345\275Y\271\003\276x\000,\276\r\260\340\275\233\250E\275ER)\276\240\020\251\274\3134\270=B\013\n>\350\356\035\275\272\243\317\274\205\255\366=9Y\r\276\330\273#>\331\3658\276:B\204\275\247\027\006\274\021h\315=GE\'\276e\000\313;O\316\313=#\320O=O\201\324\275\224\333\276\275j`\331=\0066$\276?\232d\275\266v\277=\252&P\275>43>\030\323A<\350T\230\275\277\362\276\274y7\021<\0309*>\031A\014\273\\\252}=\207v\240=!\254\213=\335*\364=\314H \276v\036\030<\325\034\253=[\342e=\3227\371=\243\207\346=\037\351\323\273\220\277\242\274ET\023>\031\362\303=\352Q\256\274C#\205;\251\022>=\017\325\"\276\272\357\230<\2154*\275\245P\347=o\024\344\275x\032\235\275\346I\267<!:*=\364R\337\275&w\016>c\226\332=\373\366F\276\312\020\276=\033\004\217\275\373]\020\276\344\347.\276n\215\275=D7A\275\350b\200\274p\314\336\275\227G)>W\026\037\276r\000\337\275e\nK\2758\257;\274\233V\000\276U\213v\275\2702\205;\024\334\332=O\340[=\245\217\360<\343x\263<ln\330\2754\3356>\326\335\004\276v\250\032\276*\377>\276=\004i=c\245%=p\017I=w\270I>\"\316?>IIT\275Q\324\304<qh\353\275n,o=\224\361\007>\374\247|=\373BC>\323.\335;\324U\002>\336L\017=\"p\007\276\347T\315\273\370\270\311\275S+\000\274\331\223\001\275\366X<\274\365\224f\275\344Jw=\367$\033\275\215\t\010>\263\320\246\275\037\373\304<\266\'%\274\202i\241<\247\243\024\275X\253\263=\247\322j=\031\366\344\275\3426s=\344\017J\276;\241-=\227\037\023\275Xc\251=@{1>~\367\354=k\213\223\274\021x\006=\023P\225=^\340\271\275S\265\005\274\251\005\t=\221\023\000=\3238\366=R\\\032>2\374\002\276D\273\245=\216t\022\276\230z2\275\363\010\004>\264i}<\307\266\032\276\220\236!=\241\257:=\230\275\032\276\345It\275\253|)\274\273\034\204\274\267\320^=v\341\351\274DVm<\\\355\353=\006O%>/\362=\275\\\026\270;\360\377%\276\';\'\275\210z\007=m\254\001>3\237&\274\006~6>\031\003I\276\207H\017=^\335\226<|\246;=\3213\252\275\363\010\006>\223k\031=\010M\t=\035\300\215=\220\312\036\275KX-\275\343_%>\017\355\257\274\345\237\317=2\204\252\275\272:Z;B\227\006;\245\363\364\275\267\014p\275\311G\210=M\t\373\274\311\002\245=\336\360\265=\037~5\276\260;\211<\214d}=j\376\305=\327e(\276\213\210\257\275jD\250\275{y4\274\322\2671>\361w\210\275\366\241\300\275\032\242%\276\371j\007\276\370\306\276=@\242\206\275\3473\355\275\210\213\324\275\251\2018\274\246\036\361\274#\201\255<\263d\367\275\245\276\350=1d&=0\030\311=\366\"\346\275j\2336\276\222\371\001\2761\273\302=B\005\027>C\262\220\275\366\365\236=\034\036W=\242W\000>V\023u\275\243\226\016\276\342\026i\275\214lU<\324\263\217=\204&\364=C\361\020\276\3171U\273F\340\251\275\236\205\241\274\006\273\310\275\371\375%\276\024\242m<*\352\340\274\027[\031>=\250E\274\231\225K\275\371n\024\276\203\004\027\276+\216<>J`\203\275\324j\360=\335x/=\243\246\366=\033iw\274\276~\361=\360\'\320=\375\231\235\275\361S};\342\020\203;a,\026>\260\314\232=>\204D\275\252\201X\275\321m\'\274\337\303\007=\267?\315<\2158.=\346d\271<\230\3172>\245T\376\275}&\270\274;\025\276=b\217\204=\360\274\320\2735\003\203=\020\357\376;\211E\324=R\351==\n\375\364<\345\375A\274\376\007\026>\260\321}\273\262\031\206\275nl:>m:\r\276\306p\005>j\366E\274\027\016\'\276\201\314S\275\007+\301\273\3767N\276{\342\000=\2147\214\275Nw><\205\376\371\274f\337\360<\345\265i\273\375\226t=\342\365\253=\323kq\275J\350\356\275\323n\\=\334\245A>\233\212)\276\037\376\357\273\235\230#\276\342\026\217=\177\005l\275 \235\236\275?\375\006\276O\301\302\275.\224\327\273\rH\221\2751\034g\275\316x\030>!c\240=>\240\360\274\022A\210\275\002\354\225;\320\344\216=\014\315\000\275\007\221\274<\227\021\323\274\312/\214;\363\376\242=\366\226\310=\350\206\262\274\327\3750\276\312S\252\274\006}\020=\256\313\355=\237\343\261=f\344H<L\230L\275\304Uk=f\377(\2768\315\000>\251\007\314=.\021\350=\241/\330<\322p#\274\232\374\366\275\376f\006\276\200\261\"=g\211\">\360\366\220<Bgp\275\317\231\336\275\001\332z\275L\333\215=|\246\224\275\304\r\217\275\245d\031\275\217/)=\"\'\351<T\227\347=\215\006!=\222y\346\274^Xj\275\323*#\276s\362\023>i\345a;ws6\2766\373\306\274\263\246\275<\235\350\316\275|\212\316=}V\323\2756\241\352=K\312\021> \007L=;\006\226=\271yK\275\267\375`\275z\373\246<\274/\357<\024\n\006<\211s2=\211\266\352=F\204\332\275\016\306,=\311R\350:\200V\361\272\025\256\342=\352\036E\275\357\371\361\274a\256\215\275n_L\275\316f\031\274\3226\n\276\315~\321=\215\327i\2756*\001>\302a\202\275{\\\334\275_\356\364<\2308\344=P\251\275\274\300\033\312=\206\305\004\274]^\266<\326\021\013\273o\007\023\275\025\300\202=0\2509\275\335\346\002\275\267\033\231\275\303\315\017;\274\377\005\274\021=C\274;z\037=W;\244\274\000\240\363=\301|\335\274\276\022\300\275\331\340=\274\313\2416\276\304O\306<\026b\255\275\334\020j=%\334\311;\337\2453\276n~\016\274\022o#\274\365\374\357<\270\201\237<\2139\206<\271\252a\275\026\320\320\273\330\035\203\274\347\337U\275l\267;\275\022\031G>\340\214\312\275\272m`=)2<\275\312l\n\276\267\252\341=\370\030a=\334\377b\275{Q\254\275l?l\274,\377\211\275i\250\367\274D8\202\275\3164!>#go=\346\031\302=8\271\264\275\260n\351=\025\177\250\275\'z?>\334s\250;D=\024=\276\360\017=\220\236\210=\314\024\016<\243N1>\240\252\023=e:N\274\347\303\020\275\320X.\276\267{\'>\372z\333=\024M\344\275J\037\300\275\261\273|\275{t\273;\355\276\301<\220P\333\274\3474\003>\364\"*\275l\027\'\276\010\244\257=4\030\245\275\023\276\243\275\216*\213=\230g\300=\331\370\206=\307\244\340\274\232\025P\274[\377\037>\305\311\347\27525@>\3306\206<\326\003\'\274\255\t\340<\025\306c<M:%=\200\241\225\275\003\371\222=\237\272\010=\225Qf\274b\206\352=\006\202\026\276\205\255\245\274\032\307\345<Y\223\334\274\223\230\r>\030o$\276m\274l=\247\256\024=\'\211\020=\204,\247\275\342p\225\274\333\373\306\275\266<\235=\032.\035=\313\210&>\3767\374=\340iG=`\240\342;#Z\266\274\332\342\034=\"M\326\274/\014\234=\014\301\274=r\232\310={W\204=\237U<\274\036)t\273\337!\334=\252UW=\244\300]=\r\225\016\275\204\2117=+\322\224\275\257\250?=j/\364=\207\273\251\275E\3245>\200<\277\275\321\344\010=g\3773=\361F\224<:<\007\2751\213\t\275\362\354\327<\375\301\201\275\354@\212<\203\252/=\277T!={o\220\273\310\032\212=\367\303\214=Z\023x=S\326\037\270\326\340u={\263=>\216A\004\276\320\027\363=\221\356\271\275\341s\322<\302\302\367\274.>\204\274\260\306\217<\224\257\366==6\313\274y\242o\275\244P8>\327\254\316\275u^k\273\000B\207\274\227I\021\275\202\264@\273<\202!\2761U\212\275b\216Z\275s\204\004\276yc\336=\262A\354=M\364`=\314\266z\275`v\205=S\316|<\024\354\026\276\326\234\315\272X1\331\275\211Bl\275k\252\237=\t\022;\275\3108\031\276\204\250;>s\342\267\275\\Z\036=\307K\004>+\246;=%M\244\275\257\363B=\004\341\235=bG\001>\302*i=\007\234\235=\210}\n=\207i\013\275\"XQ\276!-h\275\336F\t>\177\323p\274\235L\303=`\375?=\336\343r\275\361\227\205=\037\354\354=U\317\250\274{\007\"=\016\270\t<ct\204=FyU=SC\323=\t\240\210<\24102\275\236\303^\275\213\203:>\340:\206\275\'L9\276\232\367\340\273\025DJ>\262\225\306=\250\216\201\275c\035+\275\223\213^=2\014\226\274Tz\013\275f\035\216=\032\346\352\275z?\030>\007\217\363\275W\331.\275:\266\362=C\336\004\276\312k\310=\355\221J\2758\013<\275\244\340(\276r\337\017\276\307\273\025=\021\314\001\275\360\343\016\276\357*\036=\267\033z\275o\002\230<k\327\226\275\315F\204\275\273\272\342=#\254\277=\241L3\276\035\302\307\274M}\331\272N\250\222=ZF\022=1\030g=M\212\224=\247!\277\275\371\213\224=Z`\303=$\376\305\274\035/\022\275\221\251\036\276\301\253\247=\n\351\365\275\310p\006\275\000\266x\275\352\360?\275 1\331\275\326\224\352=\373S\201\275\250\335\025\276\266S\002\2757\025\237\275\324\263\212=\361v\017>\257?\017\276\232\263\244=$\026O=\231\221\261=]\016\022\276R\327\001\274\227e\325\274,\022\2709\213\270\r=(\306g\275\237\340!\275_4<=\251\216\306\275\230\206(>W\2514\276\223\220\205\275+t`<4q\217=E\t\017\275T\"\352\275P(r\275}\302\215=\226H\334\275II\233=\263\034\002\273\211\262\007>\'\260\201\275`MI=z\245O\274?\035\210\274 8\311\275\334\360\231\275\323\251\360=V\025\237\275\023\\\001>\347H\302={M\247\275\347\365\273<\033Z\253<Mv\347=\272\351\032>\351P\006\276c\253\210<\013\037\261\275(\241\361<\271\357B\275\374\314!\2765a\215\275\310\2767>\310\252&>\366V5>\251\342\264=\274V\215\275\033\346!\276)\263\355\274\014\321@\274\276\331\255\274\327\316\205=\023\004\226=&\304 =\021)W=:\333\364\274\310\3654<\226k\273=\352\007*>\026\372\230=)\014\t>\333\270g\275q\240\321\273\025\301\303\275\013\355\032\275\324\242\021\275y%\272<\332*I=\307\000 \276\207\033\346\274\037\375\025>\201\000\r>B\232\005>M\021A>\221\256_\275\371|\315\275P\315\277\275v\034\233\275\027\016U<\274,\226\274$\035\027\275\225e\376=\001\272\363=\226\377\201=\311}\323\275\255\350\345=(\315\253\272ICN>\2549\023>\307\215\363=\363\177\\\274\350\260\357=Y\007\303=60?\276\355\203\371\275\311ri\273~n\361\275\005z\014\2769?\233=\370b*\275\246D\020\276:E\321\273\033\327\335\275\020\253\013\276\037\361J<\314\236\247\274]\366<\274\307\356\217;\032\222Q>1\030\322\275M\217\001\276\230E(;\206\014\363\275\003_\222\275d\262\017=DZ\215\275\304]-=\260Z\031\275\204\321\315\275\267\026\020>#\035\233=B=\263\275.\033\262=\000\364c\275\230\312\341<\256\316\017\276\251|8\275\313-\365;\027\2130=\371&z=t\341r=\377\255b=\020\372\221\273\330\2157=\244\302\007\276\277\026\367\274\352f\034=\311\231\014>P\234;\276\370\276\352;P\212\013=\224\233\223=\330O(<\231s\250\274\377\023#\272\362f\204=\304\177\014>\350\313\206=\376\306\225=)\264\272=(\204#>]\320c\274a\361\003\274\tk\004=5)\250=\200\362\214=\275\376\255<\322\024\203\275H\301R=\222\332g<\007\245\361\275)&\016\275Ey\225\275I\006C\275Ll\236\275<dQ\273\300h\232=@\256\213=3\265H\276Ch\304\275\013\226\034=\373\222\274=j|;>\220\201E\275\273\320\232<\307|\336=m\266\356\274\306>V\2758\000l<\204\361\373\273Y#6>*\365\206\2742g\341\275\2271\367<N\270\300<\031\323\260=g?f=\030\0136\275B+\301=\"?\363\275\371\325\247\275l^\211\273#\356U=\3102\270;^j\247=\230b\001>3;C>4\177\210\275\261?\336\275!\201\025>\365/%\272\317\005\302=p\206\251=\206q\263=b\021\372<\231\232I<\327aO=\014\377P\275\272\032\212\275\201\014\330<\016\344\377\275\212\331\244=\340\361\036\276M\"\235=\247\376H\275\344\356\322<}@\000\276\214\253\215\274\354\314\255\275\274\246\277=ua\022\275n\333G=\271{\201=\251\347\016>\363G\010\275\207F\244=c\214\257=\357\'=\275-\213\032\276\307\304\273\275\205\315G\276MZ\322\273\215>!=\372#\236=Ah:=\2168\033>_o\224\275D|G\276\223\002\332\275)h\374\274\210\261n=\021\021\303=\373\263\032>\222\021\037=b\2134=R\t\004=\370j\345\275|\225\315\274qQ\243\274\264F\274=\241-\246\274D\231\225=\001+\206\275\276\202\315=\361\264a\274\264\0269\275|\224M\275|\237\265\274\232\377M<\204\311Q=\306\257\3109\206\201S\275\215\357\243=\337\314\234\275\3056\277\275I\213\271<\0230!\275%\327\324=v\201\347\275v\245%\275\005\373!>B\357\203\275\301J\243=\325\332\344=z~\240\275\334.\225=\236\370\374<0\3164>t\374W=u3F\275b\230/=7\250\202\275\364y)=\255?\026\275\313`\254\274I\264\017\274a\013\372<\266\"\'>\2040\340\275\252$\t>L\030E=W\327\016=:\354\251\274\251B\234\275a\013\014;\000\336\312<\345o<\275\331\n,>\351[r\275\325g\007>\377\366\363<\303\220\352\275\313\210\263\275\323\213\002\276\220\361\276=\374D\215;\247\016\374<nL\316=D\332K\275k\355\221\275&c\210\275H\327\004\2762ND=\256C\213\275\2448\343\275\246:\310;\326Z\362\274\217\345\013\273\267\260\201={#&\276\224\306T\275\316\334#\275\272Hw=H\321\255\274\247`\364=w\017\001\275U\240\004=\021\241->\201\347\013\274eY\304=\377tI=v\301\224=\245\036g\274U\307\177=\317\233/\275\272!\356\275?\341O=\320?\006>\311\307\216\275*\347\037\276\312\232\031\275Xq\325=\337<1>8\346\340\275\224\234\004\276\257\001\311\275O\213\020=\335I#\276%*\223\275s|\005\276\307`\027=hdK=c\022!\275\251l6\275\363.\267<\221\300\364\275Q\242\317\273\270\026\215=\212\034\025=q\354t\274-\340\206\275\000\017U=\243\207\030\276j\377j<*\210\357=\364\335\220\275d\212u\275\305z?>!(\227=\247,\320\273\007\017:=>\255\232\274r\231\272\275S:\020\273\206\255`\274|P(;\315\266*\276g\260\276\275c\212P=\231\360\323\275\212!\036>\361-t\275\037\303n\275\265\363 \276\3028\201=\274\201k==\242H=xj\235=!%\n>9?\234\274Z\347\241\275\006\330\005>\3677\310=\320\357\373\273\311k\214=\210Z\366\275\'\347\372\275\365\']=\247\003\201\275YKp\273\246fG;\272\344\275=@1\222\275z<o<\240\364\006\276Q\230\275\273`\210\251<\350\200\247\275\331,\223\275\372\004Q=M\360E=\030\271\225=\177\210\016>\203\266\267\275\223\323\221=\336\347B\274\257\253B\27513$\276be\037>\301l\013<\365R\377\275\014\350\253\275}\234W=\250\300\303\2758\225\361\274Di\335\275\001\"\t\273\213^\371;d-\013>\005\335\004\275\031\250J=\354\337\303=\377\021\245\274aQ\212\275\213\020\322\275\357\020\n\2769\317\233=\305).>@@\253\2742\242\025\274aP{=\364\240\260=\355di\275\333\321|=\005V\022>[vE>\373\343\251=<&\232\273!\235\217<\354\257}=\305\255\270\273[m\306\274\336\361\340\275H\321\217\275\322\223\245<P\022\313\274RDR\275\352W\313<\n\035\345;\327s\341\274\321$\332\275\277+\221;@p\014=\250_\223\275;v\035>[\207g\275i\240\242=\035\034\206\275\027\263$=1\223y=\255\273\340\275\2705J\275\2716\026\276\252*\325\275*Qm<\270H\261<\350j\006>\007\257\215=\341\315\246\274U5\004\276^\022\320\275\273;\327\274JV\225<6\300d=iD%\276\317\324\220=;\277$=\312\202+\275\257(\333\274\207)/\275M\262\355\275\'S\224=sT\346\275Qe\353\275\205:\006\276\024n\321\274\2629\002\275v\242)>\361\246\217\275\234\230X<\024WI\275\362\234\267=5\267|\275\257?Y\275{\n\314=\311\316\214\273p\250\231:\034\366\244\275\315\325\016\275F(\242\272\307\334\343=\306\t\372\275\321u\363<\313V\304\274P\350\023<io\201\275+\236\207=\020UT<\006DO>\227\300\330\272h\253y=\214\203\345\274\212n\027=\014\233@>\302.\363;0N\"=qN\226=%\241\357\275\022\3677=\034\215\213\275\013Z[=|C =\201&\261=\224\013\256=\001\243\215\274\003\366\310=:\214->\304\250{\273)\366\200\275\213r\252=\253\261\003>\333%\024\276\303*\334\275\2261\370\275-\336=\276\204C\017\275\201\373I=\203`\243\274\001B.=2?\333<7\341\260\274g\3449\276\002!\t\275\204\n\035\2757\244\205<\341zj;e\000\263=\234\207\375=\301N\274={\363\240;*\304\235\275\363\352->c,\301\274\207F\257\274d\373\203<\n\002\002<\nIi=D~\022=\260\355n\275\210\373\250:\306\210\315;\352\241\006\276\035C\016=\367]?=\335m?\275\377\305\031\275\213\302\024\275\273\024\224\273:\177;\276\001Q\304=\235\300\013\275\370K\032=mm =\3016\304\275\017\2531\276\254\341\007>%\324\037\276+\307\275\275.\253\034\276\310\325\227\274O\213s<\273\030\302\275C\212\326<\351\277\227\275\303\201B\2750C)=a\033\010\276\223\021N\275\241\345\020\274\325\376q<\305\035\025\274\035\364\362\274\205\244X<\264\212 <\3765\201\275\260\353%=y3\017\276\236#\242\275U\r\024\275\342\277\305=\331)/=ZR\230=\224Q\235\275\271\266\025\274\262\322\010=^q0>Y\304-\276L9\272\274\326\tZ\275\020\016\201\273I\r\025;\214$)>\310}>>A\321\016>n$\r<;\365\202\275k@(>\276\325\213=\026\250\271\275\271m\256\275\347\3577= \337O=b\363\013\275\222\310\372<v\033\351<J{\354\273*\315+\276/\n\243\2756/\207=\341\331\237\274\266\211\215=\343V@\275i\307\036\275\374\327\260\275u\311\">\362\231h\273?f;>\020\375q=-\333\207=\003\026==D\300\010\276\325\0313=\276q\205=\022\314D=\277h\307\274\324\026\204\275Yd\300<\325\224\234\275\037m\254\274\360\324\014>Y\240\213\274\375[\272<\363\352\202\275\022\226\326\274\303[2>V\242\273=\270Rr\274\017\224\205\274\275B\264\275^\342\340\274-\022\272=\324\311_=r\221~<j`\220\273\367i\275=\207m\230=kr\276=T\010\016\276\031\333\377\275\352\267 >\207\224\365=s/z=^\003\030\275gU\037>\236y\000:Wv.\276\004\2517\273\346\303\345\275\\\327)\276?J\273\275Kw<>\010\325\033\276k\361\005\276\350\200\365<\264JP\275kn\n\274|\036v\275\213\343P\275s5\217=\'nE\275\316\206\332<x\205~;-\2533>j\255\215\275\275dM<[\370@\276L?K=\214\206\017\275\357\t\227\274\202\216\311\274;5\310=\254UA\276g\036\233\275\3044\220\274\201\240\354\275\300\032\234=\365\020\263<!\265#=\037\361Q<\233\023\252\273Hg\221\274Ic\242\275\2563}=\374\301\025=[\223 >\353\260\343<{\363V\275\334F\245\275\345\020\035\274dsR\275\262~\240=0\022\272\274z(l=\260:\251\275xo\336<\311\2307=\207\325\014;\307-\016>\211\2715=1\225\275\274m\2115>\346+\227\275\311\224\304=SA&\274\261\032\276\274k\022\300\275*8\342=X\224\027\276\027\276\321\275\347\\\010=\034\233\001\274\371\300\317\275S\010$\275\004\244\272\275\023!\322\274fb\022\275\032D\342;\005\273\002>\022j^\275w\375\035\276\n\030\262\2751}\007\275\345\310\"\276x\350~<\274\321\320\275\314\367\035=\255JN\274\010h{\275\026\220\275=\342Q3>\317\014y<\210\272\302=\335\237x\275\2153\271<\320^U=\002\305\010<xY\002\276\301\326\273=87\013=\'[\027>NxQ=u\241>=o\375P=H\323O<\'\\\022\275\237\350\201=\"m\005>zs!<\302\374\027>\352.\n\2766\335\206\275\261\224\t>2\316\256=\007&\021=>D\344<(\003\214<Q\321-=\246ga=\252dw=\004:P<K\356\225=\323L-=f\332E=\255+G\275\264\222S=P\033*<\0035E>4\216@;\003\3647\275\254\304\271=\005\231\322\274\310\310{=W6\017>\230\245\t>\006\020+\275\375PA\275\027\351\353\274kn->|5\017>R[\232\275\217\026\020\276G:\216\274\260\317==\341\253\246=$\013\n>[\201\222=\250Y\243\275n\020\r\275\373(J>{\277\303=\357\202K>T5\020>x\024\264<\345\005,>\023\234\233<\003\254\207=\333\227\n\275\222\305;\275~\242r\275\003\203\037=_\r\234\274\303/\276\275\273\250{\275\321J@\274\263\016\242<\252>\255=\004\\L\275L\010\302\272jW\027=|\010\260=\231\223\201=G\032\007\275b \243\274Y\224\321=\304a~\275H \237=Rj+\276\310\037\303\275G@d\275\325x\263=\330\032\212=-\356\203\275$\217\352<\373L$\275\306H\314\275\030\211\256<_)==\336f\013\274\274^\306=\036v\206<9\020\334=\250j\327\275\007\325\342\274\242\315*\276\320\022\251<\233\374^\273\347N\346<\370\233:<\242\234`=\225\362\327=\023\354\253\275x\317c\275;c\210\275\316\2238=,E\251\275\341]\027=\026t\235\275\257\204W=7\230{=\334\033N\275L\304\274\273\375\361?\276O*\031=\251\335\033\276\273G&>\r\307\244<h&\350\274\225\306\317\275\374=\346\274\344y\201=A\363\233\274\014l\030\275O\350\027=~\3334<\334\225\367;\241\367L<\330\016\034>N{W=\214\335\306=X\253\201=\017\000\006\2769\343\024\2765\3742\274\030\014\226\273\324\3534=\013S\000\275\021m=\275T\377\322=\003\250\014=\210\357\215=C*\344=\266^\364\2747*v<s\276\220\275\201J\203\274\246PC\276\264<\274=&\253t<4\2755>3\333\036=j\030\222\275\322Q\225=m\203\221=L=.\276It\224=\332T\327;\374\210a=&\263|=\344o\276\275ZP\243\273\211\035\371\275,JJ=a\215k\275\304\211\004\276\204m\\\275i4p\274\243h!=4\364\231\274\373\240\357\275\371\006h\275\324\034\023>U5\304:]q\\=>\027\022<v3\271=\220\220\002\273\206\243\023>\377?\204\275\0342F>vGz<\370A8\275\215u\230=\232\321\335\274*\201>\276nca\275S\310\244\275\215\220X\274\323\353\307\2738*\353<\021\203\017\275\003n\033>+\321\313\275y\010\007\275\277\342\312\275\243\341\024\275\213p\253=\237\360F=\372i\377\275\n\237\251\275k\004\326\274\251\206\342<w\347\022\276\365i\241\274\240UT\275\310!\032\275Q&^\275\235\177.\274\004\267\027\275o\344\036\276\033\375N\276x\003\214=\266\213\336\275\364U\353=\275\374\254=\237MA\276\200s\023=\367\243\177\275\"2\262\275A\261)>\360\234\004\275\007g\254<\020\023->\201\001\017>M,\346=\370\211\007>\335\364\352=\251\206\276=ZCw\275n\305\253=\326iS<\326\017\224=\325\235q\275\013\256\247=U\310\225<\315Q7=\345+R=\202\024\375=\376\204)=\345n\231\275\271\346l=\223\261\372\275[\200\322=\344w(>\314+\315;\231\325\355\275#\331\207\275v`H=-\tS\275\323\274\363\274P\354\316=\306\005\270\275\346J\340<}\303\323\274z\"\241\275}a\021\274\177\237\273=q\217\307\274k\200\037>\016\273,\276\316\035\255=\350\302\214=\005]\224<\256\2322=;\250\335\274:\363/\275#\341o=\351\371\235\275\361\213\352=\360\354\017>z\264\001\275\351\342\213\274\002\366\227=]\366\326=\313\220\311\275\215\301\217=\263#\336=\336\351\242=`\243\322=\300g\225=\321:\274;B\221\026\276:e\362\275\373\027\326=\2216~<\307\005\200<\020\233\276=\nYO>\266U\200<\240\264\332<I\020\266\275\034\263\301<\325_\254\2750\247\360\275\254\356I=+[\025>}(\355\275\230\024@\276\305\276\246\274\303\206\024\276\032\023\007<r\250\033\274\275\377\245\275\027\235\200=\312N+\276\211\364\304<=[N=\347\334%>t\242Y=\246\314E=\272\3441<\307\376 \276\307\341Y=\205)\302<Nr\252\275FRm\273\217)\221;\312 1\275\217\225\222\275\206I\002=\335\017\">N\007a=\021s\214=\270\267\304\275t\333(>K\0031\274cOu=\373e\326=>\'\005<e\001\235\275%\340;=(\376q=\277Wj=\320y\313<}i\023>\240\347\364<YR\334\274\223X\020\276\251\371\331\274S\230\256;\311\352 >\245\365\031\276\227\241\302\275\347\225\004>\330\326<\275T\376\344=\005\262\337=\026\017\272=\004l\370=\337\353\273\275u\213\241=\236\204\002>\016\215\004>i\312e=e#@\275\236P\243\275L\351\306\275\221I\236\274\220\324q\275S\313\014\276\220\341\r>\nA\344=y\214C\276\017$\316:k\260\324\275\020\256)=\246L%>C\366\243;\334\361\344=d\203\356<\256j4>\212\211\364\275=J\224\275\304\204\024>T\301/\275|:\327=\025^T;\365\333\031>\006#\232=j7A<\331WT=*\324\300\275O\256\304=\325\251L<\255\365\035\274\346\362C=\002\212\013>\207\260\002\276t\006\"\276*\201\240=\222`\017>@\024\260=\307%\321\275\225\253\231=\341\260\331=\265\254\203=\311\t\023\275z\0063\276\250\010\001>X\225\210=\"`\270\274\236\250->\026)\265=X$\245\275DG#\276T\207b\274hab=Q\321\033>\027\335\005\276\337}\004>\2414\\\275.\253{=\215:(\274\272\266\344\274\254]C>\345\032?<Q\317\034\276\033\274\267<\303\357->\037\3152\275\345\007\177=e\220C>7A\241=kE\373=\014\331\306<\205\336\325\275r\010\331\275\260\347\235\274\375\211\236=\256\317x=\230\310\023=P\312^=\026\356\200\275\344}\346\275\264\221\227=\252_\234\275\366_\352\274\377\377\007=\306\036/>\233\342\205=g4\031<\362\211\365<;\247\312\274M\260\023\275i\000\252=\0079\364=\373\026%\275\341D\224\275#\004<\275\245\255\030\276\261\317\330=F\325\005>!\3107=\207\343P=\362\352\375\274\312\243\203=_\236\235<\250\242f<\260\327K\275\245R\332<\370\335\220=^u\020\274\353\327R\275\356\271E\275\261\203\000\275\212\267&\276zl\213\275\346\345V=\274\217\222\275O\211\024\276\017c_=\372\271\312=L6\266=\237\343\274=\372\250\333\274d\326(>\231\300\220\275\005\024-\274\207\375\375<\262\025\363=\313\276\253=$4\301\275(\036L\276\217\313\201\275\362\373\236\274\314>`\275\002/\003\2766q\340\275\230\n\027\275\372\256\267\274\342)\030\275\273?\006\275\251@S=\2561\232=3\303C<\242\372\370\272A\242\002>6\206\244\275}\224\034\276#\360D>W\242\004\274P\246\375\274\226`!\276~\337\350<\276\334\240\274|\335\033\276w\006\317\274y+?\275\265\314\232=$\336D=\331\366\026\276\210\372\365\273O\016\245\274\276/\036=n\016\022=\265\324\324\275F\346\010>\004\3304\275B\346\025\275\215\331\211\275\242\377\303\274\312\362\221=0~j\275\267J\262<\332\241\276\274\346\272\261<\325\232&=^\363\026>L\323\026=\356\031\2749L\254y=\273?@<e\"\000\276\235\256\003\276\351\033-\276\013x\256\274\320cc=\331\262!\276\235\233\217<%\2504\275a\356\031>\363\030$=\343`\032\275\363\315\247\275\356a$>V\025\301<\243\276\"\275X\245\030\276y\333{<\022\304$\275H\313\241\275\300)\322=x\264X;\311N\240\275=\263\"\276$\322\005=\232\244X7\233\330\330=\205\224\010\275\326s\251\275\205\267\334\275\340\270/\275rv\374\274\262\321 =^\227\263\275\367\252\213=\213\254.\276\266\337D=/\033P\275\243R\241\274\236a\354\275\002~\315=\256\347.=T\202\260\275}\220\000>~\246\"<\325\017\013\275L(==\315\252\002\276\347\354\311=\n\036\207=\020K\255=0\347\277\275\323\002\332\274\344o\014>\232\"t\274rk\035\274\273\260\221=0\3025>\250\345\025=\371\260\022>\316\253j\275+\210->\3139\374\275\360\347<>\247\360\320\274\275\207\235<\225\223\241<\033\264z=8\301\302=\357\372\313=\231\315M=\302\016\322=N\367\204\275\366.\240\274\004l\333< \020\253=V\327\370=\032Ye\275\342\346\331=\272\353\003>\316&\302=.W\256<\\\"\243\275\225\000\034\275k6\'\2760A\274\274\226\340\243<,\306\013\2758\3278>\232\024k\275\350>\376\274\223\036#>\306;\016\276\005\350\261<\222b\036=\346\027=\275\306\215\010=\1771\211=\314\275I=\207\202\010>\352\344\243\275\016\033\231\275\367\351)>\252\020\266=\301\365\255\275O\225\321\274b\275\366<\337\250\216\275\243\266)>\224\232\250\275\233\034\265\275\021\240f\275\257\211\265\275\031\204\n\276\342\320\030=f\301\271\275lj\257\273\307\355\324=\030\001\037>U\215\007\275\027\204\033\276\315\212>\276\026\350\233=\026O\375=\";\r=\303\2453\276f Y=\256\241*>\2057\216<\001dx=\375=\003\276#\202\305:\270:\275\274\3238\207\274\026\357\025\2757`\036>=\212M=L\n\317\274O\343$\276\3326\027\276\247\276\035\276\260\256}=P\317\005>\231\260\300<a\215\014\273\273:\205\274\314\326\220=@\302\023\275\327 \276\275o\212w\275v\200+\276\216\356\216=\007P\214=\271\306\314\275\312\222\037\274\235\324\177:\222\225$>\301!x=\334\022\023>\222\370<\273\332\005\022\276\263\273p=DQ\226=\221\230\022=u\037\211=\336\331\377\274\320\033\240\274jK\355\275\355+\263=5\230\263=J\340\025>\004\257.\276\207\220\034\276\272\206\204<\n\313\n\2742\257C\275\245\212\037\275\233\217t=FDq\275yb\243=[\352\374\275Q\031\324\275\334\223\377\275O\2266<\356u\346\273\265ip\275\253\264\334\273\350j\240=\357&\235\273\266~p\275\022\225p\273\035\004p\274}\263E>C\300\014=\214!\236\27354\004\275;\220\343=\3616O=\302\210\\\275OC\275=\214\'L\274K\257?=\270a&=F6\270;*\347\236\275\331%\211<\356\276\211;\253\330\320\272\035\000\243=S\025\204;s\034\004>K4\231\275<qC\275{3\272\275z\263\205=ac\231=\236S\025>n\022\305;`\305\301\273gF\263=k\311 \275\006\311\277\275\271#`\275\313\231\201\274\214?\216\275\267K\255=dx\207\275\373\340@\275\300\210\233\275\322Z\354\275h\354s\275Z\233\253\274\3444\356\275 \320\213:\324j\313\275\222\345\030=\211=\036\275\317\270\313\274\'W\010\276\010\301\220\274IY\005\276\231\357T\275\037L|\275\034\226\221\275\212,3>%\255\355=\253\237M=\212[\240<Q)\t\276\365D\201\275J\2434\276\266\005;\276\t\224(\276Jg-=b\230\216=\017/\017>}U\253\274C\340\220\275\233JO\274\301W\217\271\204U\222=[\304G\276\374T\242=]\3200\274P\236\004>\215\226\301=wb\376\275\317\022\224\275\360\242x\273\003\362\221\275db\277\275\246\305\010\276\222\334p\275\253\377\010<\244R1\276\343:\235\275\211\254\304=\377x2\274\374\0076\275\014I\200=\224d\254\273\236\341\247;\362\256\343<4\337\221=\232Y\343<|\334\200\275Vk\356=\010\003\326=\340X\301\275\372\024\235\275+\r\277<\243\262\371\275\245\200\024\276\203Y]\275\340\010\005>4\213\r\276O{\217\275z9\223<\241\256\010>5\322\322;\342\257o\275\255\277\345=\031\221\353\275\254\203\226\275\334\205\023=\221-?=\335&\022=\312N\306\275#Wv\275\200k\002\276\024\375.=.\307&=\342~P\275T\370m=(\340\300\275\272\227\357\275\207\302\267\2751\367\341\275\312\272\325\274\tD\032\2751z\241\274\271\006*\274~l\'=\265+\031\276w\\\264<=\304\331\273)]\004>\022\274\211\275\216\'\221=\376\222\264\275w\377\022\275\320\364\030\27696\345=\027o\335=\177\014\266<\316\200\023\275M\315P\274\244\247\204\274=\024\311\275I\377\377<\232\037\260\275oG\267<\355,\232\274V\216l=\354\222\031>^\233^\273\265\372\001\275\236\336\037=#\315\370<\357?3=kk\347\274\277N\032\276^)\254\275\357S^\275\316\305\273<da\246=jM\201\275\3141\363=\311P\273<LQ\247=\233\275O\275\343\007\261=X@\311=\374\2522\276\242\332\207\275}SF=\000\203\005>cTa\275.\303*\275\213\014\205\275\033\344\020\276\323\306V=\360\324Q=\202\312\277=\223\317\213\275!\322\035;\221,#>\306\254\235=\3235S\275\264\327$>\261\253\363<\232W\334=]\353\303\275@\241\310=b\002\241\275\034\304[<I\270\201=\221\273~;|\203\004>%a\371:1\ti\273Y\225\254\275\266-\266\275\177\211\361\275\361\341\001\275\037m\353\274\006gG\276\266]+\276\177\r9\272\361-\'=\020MW\275\223\257F>$]\216\275\370\035\216\275\326y\032>KB\206<\244+\244\274\262\002\244\275\222O)\275\240\201\373=\326\332\343\273\265\206s=&\216\002\275(\245t\274\225X\263\274\305`\'\2766\203\031\275\177\010w\274\246\372\200<&<\254=@.\220\275\243\260\217\273q\037\222=\250_\030=\213g-=N\210\276\275\2249:\274\233#\274\275\221\211\366=\335\233\227\275o2\016\275Y\261H\275\224G\017=\332oO\275n\252_<\243;\237\2750\200\202<\031D\026\275H\023\242=\373\002\241\275\330\366s\274A\210\250\275\210\325\313\275\200\373\300=\212\000\225<\240h\266\275\256a\247\275\"\265\017\276F\025\221=\331%\203\273\3050\255\275m\242L=\253\177\317\275O\276\343\275\033\2209=)h\211\274\311\030\246\275\340\307!\276\263\301\006\275\352\024\'\274\271\307\001=\200@\263\274Nk\260\274\032\034\234=\213J\005>z\3330\276\371\\,>\262\333@>\002j\003\274@\rD=\346\352\264=\023\210\023\274i\220\215\2753\235\020>J\315\336\275\211\341C\275\262\2412>\'\"{\275\330Q\370\2746\367\001\275\nO\010\276C\034\214\275r\352x=\347\037\345\274U\213<\275Ot==\010mO\274\n\341+=\315\362`;\324\001B>\344\322\016\276\336\350\001=\331,\325;\236\3061\276\212 W=\216\372\331<\260\255\347<\211\271\014>\277\334\030\275\2521;>\366\036;>~&\207\275^\r\251\275\024\256=\276D\340\231=\203\021o=`T\242=R\245\241\275\323\371\224<T\300\243=\005K\021\275\253r\020\274!\350@>W\023=\276j\311\n<\3434\265\275\255X\254\275\234\331<=\216\3005>\000<|=N\212\004=\030>\004>\016\347\357=\261\333\034=\026\0211\275\227\337;>\222\254\244<B]=\276\214_7\275\355\242\217=\257\250:\276m\315\233;\026r\236<,JW\275FD\204\273\227\373\r\276\005_\332\275=Hg<6\311==\254*\\<<\352\342\274\377\030E>\300\010\000=^\250\353=\002\324\202=u\372\336\275\324\003\010\275x\000?=i\025J=\026\235C=\013\260\367\275\315\335\225\275\0044\374= o\277=\271U\224=\2245\247\275.\023\305=85\302\275l\020\337\275\244c\365<\016\353\037=\341\025\021>\235\024\314\275[\221C>;\261_;\036n\201\275\315\322\353=\274\253\230=\375)\313\275\006\252\332=\017\243\364\275v\253\244\275O\215\357=c\247\240=\204\311A\274\363\036\354\274>\241\006>\220\254n=\357\245\000\276q\225\203=\372\ta\275\343\350\240=\345\343\346\275D\330l<%\377g=\014p4>\321\374s\275\336{1\276\357\265\353\275\266\323\325\275\266\217->\210\233\024\275\'\037=\275\244E\346\275S\317\202\275\343\237`\273\220L\331=\310\3418<\324%\036\275\303\037\276;\017q\027>\201g\233=\336\314I\275\370\214\377=\330\n\310\274\316\025y=\t\337\260\274;\035\002>\357\333\261=\021\307\030=X\204\326\2753\307\226\275\326\021\251\275B\235U\275\322\344\237=DOq=.x%\276(}\237=rb\327:\320\355\214\273\177\025\325<\245\206\321\274\25518>\212\3552\276\372\030*\275N^.=\300?\252=K\320\363\274?8\206=+m\025\275\230PB\275\307\376==Mm\312=e\302\362\275AVK\275\226]\241<\n\272\320\275\200a\377;9hz=\261}\225\274\023\222\275=S\204\\\275\320\370E=\325\001G=\007\345\022=\233\252\301\275\210(\334\275\361\365\300=\257!\302\274(\326\365=\365\315\026>\3310<>=\".>p\020\330\275\321j\214\275@\2571>;q\026<\261U \275s\222\252=186>\236o\217;u\217\247\274\356\013\277=1\304\202\275\323\325\025=.\236\036=\312+\021=\001\265\306=\034\014\356: \320\246\275y\246\344\274&\266\270\275\206\271\246<\360\334\336=O[2=\370\030\227\275lX?\275\322\343\217\275\233\272\022=\332\316\016>Y\315\337\274=\001\201\275KO\360\275V\221L\276S\234*\275\223Q\354\275K\353\243\275/81\276\244\335\254\275\362\017\225\274\312ck\275\\<:\276H\210\372<L\245\240=y\221\005>\307H\030=\221NI=\311k\204=!8\347=3\232\004\275\372/E\275A.0>\236\331\274=C\266\026=\266H\200\275X5\230:s\031p=\245;.\275\356\315\253<|\335\231\275^\237\016\276\2130\007\274\256\177\217<m_\346;2s\356=2@\332\274$u\t\276\323\307V=\373\337\352\275s\331\200\275[\276\260\275\253\261\023\276\227\222\372<\271g\005>\266v\306\275j\364\027\275\263|\304<\033\020\376\274!e\207=\272\203\201\275\001\304\003>p\364\033\274&ln=\260\363\030<B\177\242=\344o\256<0SA=\341\024t<v\310\236\275\277a\306\275EM\"\275\326\206\266=\342\312\323\274!$\352=\225\033X\275\333\302\244\275b\333\360\274\3118\243=8_\237\275\244\273\034\275\357\272\003=l\2660\276\021\026\016\276\305\"\247=!\330/>\271\316\032=\264U\351\275Bi\001\276/,\210\274w\030\003<\t7\314<K\027\001\275\014\375\276\274H\220M\270eu>\275\322c\224=^t\322\275\0048\007\275\351{\265\2736z\277</\226\223\274\013\242!\273X\235\322\275\247\232\023>y\246\242\275\235\'\256\273\271\306F\275Y\314`\275q1\243=\371Jb=rk\333\275\333-\274\274B\262J\275\363\010O=8\271o<\260\236H\276\236\001H>\303\320\005\276\030o\221=\007\305\235\275\361\214)\275\344\270\025>n\2478>\303\376\252=\276\013M=IlD=\250\364\363=c\330\363\274^\374\306\275%\271\261\275T\320\202\275Z$\301;\376\204\t\276/\306q\2751\242\272\275\216\021\r\275\344\323\036=\014#\212\275:L\305=\215 &\274\251I\010=\322\r\277=U\342\207<\224H1\275\273\310\">B~\207\274\251\256\234\275\353\317\035\2756W\330\2758\n\373=\324>\310;\3758\251<\243\252\217\274o\223\013>q\204\375\275\300\246\345\274\246\270r\274\375tw\274\247\035l\275\245\255\301\275\344 S;S\356~\275~Y\022\276\217\341\353\274\260\333\322\274RQd\275\000\231\007\275\322d_=\030%\020\276\377\260\240:\003\234\034\274Nyg=\370V\030\276\3607\351=5\270>=\305=#\274]\014\310=\\\244\000>:\314\017<\357Nf\275g\332\250\275\265Q\202\275\001\2755>=-\345=\026\206\333=\360$0=]\332\202\273\311\350\215\275\204\350C\275\2230\020>\254k\340<\255{N\275?\014\034\276\365\026\346=\356\004\'=\245\300\303\273\322\255,>\2743>\274\213\335H=j\001\r\275\025\217/>\'\032\216\275?\236\307=\022\0363<\304n\370\273C\332\r=\241\373\035\276\007\200\371=u\245S\274\366\212)\276R@E\275\323\344\223<\313\334\023\274\357\334\036=N,\233\275\026\n\331\2748\355\326<\031\363\213=\250\305\233<a\356\266\274L\266\263=\273\"\307<A2\322=\360\313a\275\212\002\025\276I]J\275\036b\232\275\356Jt=\201}h=$\264\362=\n\373\030>\307\027\301=k[\010>\311\022\232=\034N(\276a?\031\276C\004\256\274xC\261=_s\274=@!\211=\013`\326=\204\204\312<f\254\006\276\240s\250=\316@\t>R|h=[\241I\276M\232j\275\356SL\275*)I=\016}\036>\3307\233\274\372\243D=1:q\275\370H\016=c\201\"\275\030\306c\274\370\206\004<w\234\004\276V\227->\364\006/<B\200\344\275\351\352`<\270\217,\275\321\314\026>\213D\276=\202+0>\372\370\267\274\346\353\277<h\234Y=/\216\016>V\246+;\210\312s<\261\270;=l\305q\274\037\300\202=\341\017\237\275z\334\236=^|<\276N2x=\202\307\224=\215\316\223\274~\213\301\275GF\216\274\340\'\247\275\243 i=\210\0232=\307\202\330\275zS\014>m\216\005>\310p\303\275k\357\275\2758f\372=\010+\006>D\234[\275\"\356\316=\232\265\'>fG\303\274\315\031\242\274TAJ\274\316\030\370=\362\032\004\275\025\355\263=\3169\357\274\240\220\242=\357V\023=\336\212\203\275\301\253\006\2750{\267\273h\343\":\252\\P=c\325\330\273\270~+\275\306A\376\275\034ZD\276\331o\231=\021\000C>qw\271\274\2572\205=\243\032\013\276\372\361Y\276\021\374g\275\207\226\026>`\237\226=\243J\321=xx\372\273\217\222\273=\tc9\275\3772\260=)\037\233\274\252]\333\274\271\235\345\275G\335?>\273\352\305\275R\'\342\273\340\222\274\275\246\213\035>\274\226\266=\310\316\200\275\025M\002>\312\252Z\275\006\355^\275\256\243\310=A\217\322=]\361\307<2<\017>\033\355\267=>\2074=\004U%<\340\214\305<}\233\220\275QQ\036=\222u3\276qH\370\275\303\0376=\271v5=d\374\351=\305\007_\275<W\010\276+/\337=\3647\227\275\217H\330\275\276\200\301\275]\233\300=\207\226\254\275o0\216=,\250\364=[C\261\275\013\251u<W\375\230=\\8\"\275m&\252;\350\331\374:*h\271\273\353~4\273\305\032\213=+T\027\275\242#\345\274\206UZ<\222\001->7\010\250\275[\350$>\024\264\t>\346\027c=&\200v=r\216j\275z\300\227\274\255\016n=\2427\233\273\317\347\256\275\262*Y=\203Y\321=\365\277\273=\330/\230=xk\272\274\252\316\353<)\333\202=\301>\226\275\014\261\327=\370\200\r\276KZ\301\275\322\254u\273z\322\325=\032\201\005\274\2209\003\276\355\365\367\272\374\rw\274\336*\364=\010\036\353\274\223Q\244\275\344\034\334\273U\253-=\244\3770=\236\0060:D\334\'=(=\377=\214\214F>\3165z\274H\231\346\275\320\037\370=\036\036\013>@D\006\275\320m+\276\2575G>\243\230E>\374\245\213=S\344$>/C\026\2754\035\336\275\367pQ>i\243i=\200#!\275Z\330\027\276\230~3>Btw=\226\0260\271D\rt\275B\007@=\350\261\371\275i \275\275\355\253\262=\327\017\272:\025o\333\275R\3039=\365-j=\222X\205\275\023\214\024\276\342}#=\255@-\273\337\014\016>\323\217D\276@{\r\275`\005^=\002\301~=\0276\307\273#o\320\275\372\026<>\277\315\354=\273.\201=^\311L\2759{1\276\354\317~<A\244\215\274\321\241\212=\321&y\275\275\223\031\276\354\257\327\275\311>\330=\274\337\210=JJ.\275\007\344\206\275\360\355*\273\2549\233\275\232A4\276\343s\025=\363><=\346\020 =G7s\275)\262|\275\315\231\300=\030\216\313=\362\266\021\276$\376+\275/\222\374=/+%\276\307.\005\2759\367\263;C\212\r=u\242\031>\261~\316\275K\327\334<\255*\315=\r\233\261=Z\2010\274);\003\275\377|\266\274>i\270=kW\320=\333\311\214<\020\023\034\275\265Z\340\273\263p\376=\177\343[=iG\300=o\266\221\273 \330\222= \037\276=\201\023\352=\2050m:\274>\020\275Z\333\204\275g^\235\275\231\253Z\274GZ\261<\037_4>\017\035\023>\276\014\205\274\242\022\253\275\371\025C\275_\035\037\275\2259\232\275,]\003:\031\270\362\275s\324\305=\216\001\372\275gk\r>\2354\207=Ms\322=h\264\246\274\266\331O=\300\276\210<\220\351\022>(\330X=\273\327\266=\241!Q\274o>\001\276\036*n\2746z\362\274\'\233\033=-h1>\004\361R\274\366v\266=!{\025>K_\013\276\333\342z=\342\257\257\275{\235+>\003\005b<\227N;\275 \354*\275\rj\032\275\241\224\267=\221\326F>\234U\317\274\324\322\227<\212&\027>4\276\263=\214\2327=\021\306\022>\020\215\344=\222\307\322=<R\014\276t6\207\275\305\275\306\275bS+=\372\236\026>\343\263\251\275\215[\206=\346\323R=u\226\r\275\351\375$>\227I\313\274 \313\005>L\345\345\274\305\2027=:\364\311<>I \275\002J)\276\260\343\247=\276\215L=Nv\237=*\206\377\274_`)=j\320\'>\032\003M\275\307\235\306\273/\242\227=\350\345(>K\3740\275\205\222\031>\264\311\263\272\247\335\234=\036\213\034>VA\003\274\030<\312\274H\276\201\275\217\376\364\275\300V{\275@\326\256\275\001\220M\274h\364\303=\004\024\036=9C\223=\332\300J\275\327\214\220=\364\353\002>\343\215\234=v\004G=\374\360x=\370R\302<\005<\347=m\336C<\261\031 \275:\026\000<\021<\260\274\004m\272<!%\265<\233\n\271\275G\014\346\271\321-V\275\312\273C=\335\026\352=,\232x\275\360h\372=\355i\206\275\224Oc\275\200\022-<\013\276\033>\256\351\212\275\305\305\017\276\306\351\232=\217\325\250<#&\310\275{_\231=L?\260\275\301R\322=@H\023\275\321*\001\274\277\207F>\367\301\325<\317!*>\350\020\212\275\270\321o<&\270\335=bh\230=\3258\246\274\301\304\'=\201\200\302=TC\337<\267Y\022\276tS.\275(\254\303=\215\031C\275T<\345\274\3154?\276dr\214;-\327\000\276p\274\254=\026\303\235\275\006\001\205;jtY=\364\244l<\325\211\021>x\3142=\214\026\262=\266U0\276\007\003r=:#\217\273.o?=\266\254\267=\306I\336\275\360\316\220=!0\001>K\332\237\274X\275\204\274\273\020\374\274\307\261+\275X\270\033\275Nzz<\302\014)=\202\252\235\275\265\344\367<\224 \346\274:\016\316=\347L\033>&$\n<v\305C\275g\205\271=\374\225\203\275\245\344\254=\261\312\244=\334\332\257\275\301@\270\275\2606/\274\250\217\253=\355\350\201=\233t<\274CQ\307\275\235\221\314\274\260}:\276\202_\020=!\265\324\275\300]B>\225\nP\276\002n!=\223X\302<U\320\340=\215\376F=\220:\n\275`\025\306<\353\360\202=\234\024\344\275\223)=\276\036\232R=\010\256\336\275#\202\271=\331r8\275\243\025\223=t\371\323<\234\246\262=\376\277\013\275n@\316=\224=0<\312\003&\274\200\007\266=\211D\265\275k,m\273\237\322\243=\352l\023\275V\276\315=\014\200\350<\272\032O=i\227\246=,\271\260;B/\007=d\352\037\274\372\364\334=\217\375\304\275y\023 =\315\306S\275\t\367\000\276(\371\216\275PT\035>\302\231\325=4\3176>\226\204\236=\177Wj=\312\342\251=\"T\212=\211\323\341=\361x\326\274{|>\275\331\230\236\275\347\263\271;\341y\242=W\274\203\275\275\013X\275\224\224\207\275<^\006\272b\206\020\275\344,8=\207d\001==n\247\274v\233<\276e_B=\232\244\264=l\202\344=<\251\001\2755\345\017>-\\\200=6\010C=:\265V=eb\035\275o\315\234\274\365\201\345\275\201\313$<\357\336J\275\206a\342\274\375\255\373\275N\014\212\274jX\357;\323K\216=\217\225\002=j\036\013\275\275/\321\274\340\277\264\275\037\211\250<\375=3\276\314#\241<m\247\323=\332\2750\276\203\367;\275yh\373<\010\251\247\275f\025\003>;NG\276\323\026\314=\350K[\274\205\013\037>\010\035\350=\313\"\355\2759\325\343=m\307\273;\340\033)>.4\n>\374\241\215\274|\024\020=B\246\177=\037\315\007<\315\210\231\275\005\206\253\275\242S\272=\013\307\016>\271\344\321;\241Y\006\276\036\214\n>\006\3668<\242\343\347\275\215\r\002\276\247\365\363\275q\370\023\275\035\020\017>\314\207\310=$k\316\275\365\276\307\274u\376\006>\315\250\241<\266#1>A\301d\275\264\000\037\275\330\202\204\273@t\367<\252\0374=\320T\301\273\277\035\227\275\365_\356=`<h\275&K\021\275\034\360\305<V\374\225\275hZh=)\260]\275\300\262\213=\350\021\244\275\033#\311;O\270\344\274C 4=\312~<\275\323\303#>\3748\003\274d\206\371=z\212\263\275Oc\313;\200\2710=\214\304P\273\235\311S=\203\307\022\273\351P\317<=\326\216=\321\n\211=\2007\250\275\356\036\'\275\377\213g\275^^x\274\373\311$\276\332\r\257\275\220\314\256<p\360\303\275\013EM\275=\351T\275\243\217\334=D\344\202\275J\0162\274\241\276\343=\004\301,\276\'\027\345=\345\356!=\203H\016<\344\021\033=\220\360\034\276\330\300\355=\312\207\254\274\205\255\031\275\255^y<Gy\236=\035\343\213=~\343\317=\005\377Z<T\0220\276\031\231\020\275\'D\232\275K\004\014\275nA\333\274\327\326d\275\353I/\276\247\261\001>R6\344\275\215\265\353=$\342\223\274\017N\257=W\311b\272\250\216\261=\325t\005\276\222{\231\274\230\347\334\275\344\250\246\275-\306\323=\357\313\256\275\347\314<\276\265\017\005\276\315(\203=\271\367E\275\235\r\016=\315\000\271\275P*\354=\364.}=V\315\354\274\233a\312<\353\351\364<\230\301\360\275\374q\013\275\324\340\031\272T\316\004\276NY\206=\322\336\250\275\377\341&>\226\342\302=\320\246\"=\233]:>E\212\t\275\274=\n\276\210\213\303\275\317lI\275\262L \276\373=\326<T\346\013\275;\261\310\275r<\333<\303z\353\275H1R=|\366\240\275\007!(\276\014\310\257<\250\345&\276\002\002z\275\332\323\313=y\271\331\275:\304\355=\037\3003=\224x\355\275\373\000\375\275\326%[=\340\354#\2746(\n>\013\300\320\274q\257\000\275\034\324\321\275\246\345\226\274\221\332\237\274-\013\014\276C\355\367\274\226Ex\275?\365\020>\354\223y\275\310\371\r\276\264$\307=\312y\262\275r\355\223;\257r\034=\t\366\000>\215\300\342\275\336l/=0k\235=\003\270\013\276?4\\<\307\037\004\276\346#\017\275\340\317\206\275\000~s=\004\246I\274\337\030\023=\372\023\270\275@\221\027<\332\335\341<&\257\352=\215\234|\275~#\020\2755L\033\276\312:\215\273\313\361\026>7\237+\276k\2517>@QV\275\257\222\337\275\250\224\277=m\337\241\275S\303\314;2\017\333=P\207\316=rl,<\267\222>=\271\355\277=E\2434\275:\013\232\275M~F\275R\276X\274\370m\006\276LQ\022\2760\250\003\276\014*\256\275\230\371\'>,W\226\275\030\251A\275\222\316\370\274\375!u=\374\331\240\275\240$\322\275\223\005j\275\242\2264\276[\274J\275]f\004\2749$J>z\215\215<\204\034z\275[\257w\274u,\000\275\320\n\376=\266:\272=\253k)>\313l\210<Z`\224\275{\303\004=#\271<=\225\337\265\275\373&\205\275\315x\002\2756\342Q<NjE>j<\n=\035Q(\275\021\"\r>\336\203\007>w\343\356\274\377\251\343<\225\037t=)\022[\273n\202\341<\244\336\204\275>\343?=\357\365\331\275\261H\324=\226\024\022>\345\371\354=\202y\367\2718\227\246<\371S/\276\371\034\216\275Zy\364=\2242Q=\337\312\315=\231\311\331\274\t\262\017=\363\303\244\275\266\322h\2757\316X\275\271\260\245\275AU\330\2749\301\326\275\241\307\003>\034x\206\275\307\256\003>\24633>\304\315\325\274pB1=Q\275\257;\364O\231=\272\273V\275~3\003>\375\322\332<\221P\241\275]\337E>\243\030*\273\3266;\276\376L\210\274\010\256\273\275MD\t>\251\n\n\276\013\354\005>\214\r\273=\303\213<>\032\014w;X\200p\275\030\\\272\275\321W\316<\357_(=I\232\323=\227\302->\311f\024>\236\024L=`w\303\275\013r\273=^x\355\272\250\260\244<]N;\276\376\265s\275k\366\013\276a\003>\275\274g\n\276\317\264\366\275r\316\320\274=6\245\275\225x\267\275\n\314\005\276i\262\313\274\'\375\274\271\236\314\201=\030\201m<\201\201\004<\341\372&\274\001\010\312\273\233\340\t\274F\263/=\244\254\240=\315HM\275m\213\257=\325E\311=\032\270\003=.\247%\275 c\032\276.\267y=\242D\222\274\313,4\276\215\224\'>\331\317t=\235\007\314\275\271`\214=\206\346\013=PH\207\274\337\326\257=\367b\320;\250d>\275\360\220\223\275\222\021*\274\236\215\371\275t-\361\274\310\376\206\275$\010\216\275\362\363a\275?\357\335=\036\214\266<Y~\001\276\323\226\r=\202]\252;\272x\367\275\3477\n\276\323V\227\2733\231\235<?\273<\276U}.\275\254-\340=\314\345j\274\256YN>\220j_\275\257\234\314\275@\330\243<\354#\031=\3160I\274\240\345\245=\025]\021=\243\327\016<\370tx=\346.\233\275b\205\010\276V\274\026>L`\307\275\005\361\003>N\227\224=\275\312\203\274\241UD<@\\J\274\325m\331\274\233\302\202=\207\312\'\275\211\373;=\220L\343<\360\347\267<_\335\263\275d&\016=\365\223\002>\031p\353\275\377\250\200\275\2342~\2759\005\003=C!i=f\253\213\275RF&\276Y\027\'=\337\024\331;\026\254\241\274\303\255\376=1\225\207\275A\363\221=\342\212\243=\352.\022\275\022(\343=\016\326\342=Q\302\007=\002\347\003\276\206\361\037=\355\3479>\035\311\260\273eO\016\276\332P\230;\316\267n\275WTc=bA2=9Y\177=\217\255\206\275IR\017>\300\212\376\275\037\332\334\275\356\025\216\275{\241\266=\360\004\323\275\362_\252\275x\304\235\275\246k[<\326\023\221=\207p\\\275D\203$=\001w\315\274o\213\026\276\241\305d\275\366\300\t;#\032a<^\203\362\273\277\235d=\372P\235\274{;\375<\033\001\203=\216\355\020\275\3633\264\275UcK=\254\323;>SL\326\2747a\225=s\315\255=]\207\233\274\226\256\026=\265\005}\275\371A\361\275\3713\373=\024o\017\275\355\251q=\0179\253\275\374\357\375=\353\325\302\274\302\217\000\274\177\336\361\275\307\203O>\350V \276;\372\\\275\321Z!\276\202\032\337\275\370ph=\247rn<RE0\275\303i\343\274?\002\000\275\214\351\031>\216\342W\272\217\313*>]t\224\275\252J\344=s\366\367=\255/\020\275\316\343\036\276\221?\001\276\'\032S=\031:\312<\260\272\305\274\"\023\236\275\300\252\203<\005\217\343=\3777\327=<\320\255=\t\003K>\374\355q\275\220wv\275\023\000\253\274\204)\320=L\244\006\276\352X\351;s+\265\275\204m\370\275\374\324\254=\021`\272\274\363\331\353\274o\246\376<\34254=\027\266C=\316HS<\365\003O\275\037\304v=\360\350\035\274Bp\031\275\340@\371=\306\303e=\036\242\003\275\255\023$\276T\323%\276\326\255s\275\202\376\010\2752\346?\275*;\r=\026\254\220=\344\357\337\275\345\365\030>\374:\354\275\260d\334=\356\177&==\223\245<b\221\213\275\005<#\273\363\300\204\2754x`=\030\336\321\274\246|\265\275\234\026\035>\2050d\274T~\342<\336\315\227=\030O\215\274*\365\271=\330\032\242=\023\277\204=_\255\322\275X`\241\275\305\227@>\226YG\275\030\\\220\274\005\210r9\013\322*\276\222\2523\274\n\"\374\275EFK\276\n\370\030=\357\246\272<eI\177\275\3503\203<py\360=\365\320X<F\245&=\304\004+\276M\306\002>MJ\301=\270Ng\273d8\226<\374\005\256<\220\204\355<\352\274\343=nd\t>\"\241\255<\337YX>\361X\215<\031#\037\274K\014\226<\207\241\316\275\202B\024\275\313\033\334=9\327P<\326\336\360<\214\201C\274}\017l\275%<_=k\350/\275\004\004b\275&\337\034\275b\003\177\275\203\275\353<\001\364\034\275\241\250\r>\312\316\237=2\006s=\005\323;\276p\347\273\2758\306\034\275\273\212\356\275-\274\240=\213H\355\275\205\260\374\275\247m\252=7\223\263\274<Wi\275R\244\010\276\276\215\343=\367x+\276\037\336K\2748-K\274/\264\242=\305\226\332\275\340#:<\203\022\332\273\312C\363\275o\364Z\274\004!\202=\345\201\274<\221\201\023>\001\325\327\275\321\027\373=\205\213.\276\311h\252\273~z\211\274\214\030\243\275\241\316\236;|\351~=\317\2208=2\242\337\2742\377\214<c:\005\275\273\304\313\275~\\\024\275\353D\270\275\205\244h=\017\006\366=ue\244\274Z\363V=8~&\276K{\010\274\351\352\227\275\267\243\356<\270;\205=\244\356\324=\345-\263<\324\035\022>I\224\244<e\211\001>\016QC\275\205\351\211\275\026\261-<e\363\332\273 \"\017>=\250\025\272cJU\274\227\235\254\274\372\326\353\275\360\242C\275o\023\311\2744\232h<\320\374\342\275\377E\032\276-\2651>\272[\032\275,\351x=\272S\026<\325\371k\275\301\023\005>^nR\275\334\206E\276\316\376\032=i\332\224\275=\245C=|\n6<\236%\260=\272\340\026=\264H\020>\013gj\275\360J\r>\342m\326\275~\3176\2769\322J=]\352\335\275E\246\327\275%\2559\275\256\310\003=\273\023\213\275d8\242\273\265\267\216\274\3310A\276[\336\261;\320\010\276\274\265\253\315\2759{\236\275\271\001\026\276G\013\356=\224\227\013>P\251\206\2756\375\305\275Usx\274\021\217p\275\237\320\n=\240\0107\275K\004\231\274\006}\333<\206\375\372<\233\243m=\215Y,\276b\254\334\274\312\013\352=\352>H\275;\324\244\275\343\346\325\275)\254\300=l\321\301\275r\367\255<W\307\266=\333?7\275i\204\027\275\216#\'\275\302\004\323\274`?\">P\332\021>\r\257$=\303uF>\030\013\375\274S\212E\2758\035\255;g\t =\362}\260\275I\245\204\274j|?>ll\227\275\201\233\"\276\221}\246<\343\321\222<\204\230\n\276\342\001z<\014a\213\275\226\366M<+\254\211\275/<\027=\'\360\302\274O\343\337\275\365\201\313\274\325\233\360=\337\231\n=Y\350\242\275~b!>\242\347\363=\020\206\217\2755\313\237\275\261\000\031>\177y\205<\001\361\001>\010\223\362\274\210\023\004>)\324\327=\340\315\321\275s\377\\\275^\274\365\2755\251\360\275P\207t\274\362]\022=/(>\275\303\215o=\004\373\250\274\031}\261\275|\004n\275\243\377\231\275K\261*\275\207\005G\275NML<\302\332R<\243\340\010\276\363\032\225\275f\204\232=q\002\211<\344\202\000\275\0064$\276\310\264\006>\346\213\361=\370\030\353\273\330\301\'\276\022P#>=k\005\275\007Hh=O=\206\274\301\006\225=\267\3176<\236\373\004\276\227\224\200;\253\341\217\275\212\302\217\275\232\212\311\275\233\374\025=.a\'=\375\243\264\274\022\346*\276\032\204\302\272\370\333\211=\231\002\206;7+\225:U\370\206\273M\234\204=\346+\025\2767\375\235=\322\n\020>\252\010\210\275aC\307<\221\367\234=\023\016B>sg\311=*\255\356\275\343\331\n=\036\353\357=m\224M\276\035\000\277\275\260\370\235=\022\034\"<\017k\211=\266O\004\276\021r\013\275k\0175\276\004\236)>\024\335q9\344\002H\276\202\326\322\275i\217\235\275E\003o<WZ\260\275O.\207:\354\363\361=\371\3666\2753r\205\274\322@\223\274B\253\365\275M\357`\275lln\271C\\e=*\365\332\274\271\326\233\274f7y=J|\024\276\302\344\365\274#\347\211=^\313\373<=7\217\274\225r\353=\325\004\272<\203\216\024=b\350\032\276\212\021\277\275\311B\252<.\324\232=\364\250P<3s\324=\324\t\233=\352\241\033\274\271\212\360\274\007\302\330<\354-\336\274\323\305\317;\257#\013>\335\307->\326\010\212\275\271#\002\276\200\222m=\210\201\221=h9\033<\265\001\313=\026\227\006=\003\236\254\275\362\325\'\275\357VX=S}\230=\245\304\311<$\035L\275\360}\267=\004f\247\275!#\002\274\332M\207\275\334\315x\274\352v$\276\020L\255\273\235\273\030\275Wr\020\275,\264\230\275\354\326\316\272\316\357D\275N\271\224=\337b$\276\020F\320<\213\217\302\274\t]\020\273\345\"F\275\226P\236=\351#\037=\034[6=Rq\202\275w\032`\275\307\376\215=K\004\312=Yd\342\274\267\311\002\275\340Z\267==@R=On\026\274l\274~\275\257\372\254=\177\030\025>\007@\267\275\364)\032>a\336\221\275R\340\367\275\332\276K\276\023\312\013\273\023={<\030\235\017\276?=Z\274\241L/=\242\270\017>a\355\330=H%\323\274\203\3433=t\023W\275\273\300\353=\242\200\213\275x\360\324\274\217U\'>\325\020\223\274\n[+>\2574\356<\210\256\233<\305\244\227\275yo\214=\332\014\031<\224\020\202\275\'\200@\273\213\200\324<y\263\237\275\302\327\000>O[\331=&\254\267\2757\254\341=MS\277\275\237\263\251\275\272~\340<\376jE\275DJ\227\275\306F\021=\302\030\371=g\t\004>z\226\215\274{\003\263\274ky\346=\341\266\376\274E!\262<\351\276m\2751\261%\276\244 x\275m\202\317\275\203\307\253;\343\347\026>-\315E>\370}\350=\375\034\340\275Ea\r><Pw\274ThB\275\020\323\003;(\230B\276\266\205?\276t\356\231\275\317\'\315\275\234\246D\273\263\177\240=\303\345D=xW\264=\003!\036\275\211M1>\351\317@=\303\335\300\274|\350\201\275\354\317\371=\n66>W\347\303<|@\214=\252\273\027\275y)M=\234\351\335\274\201K->\266\374\356<\341\250\304\275\271\346F\276A\325\331=\254\016\321=\034\021\367\275\301$\255\275h[\336=J\220\005=\306>M=\221\r\275<\212\216\025\276\'\242\243\275\013\364#\275jUX\275[\275\306\275\377\244\233;\232\260\016\276Q\377\217=\372\334}\275e\006\247\274\354\275\213=^^\r\275\247\342\324=eK\273\2758\002\'\276\376#\203\275\213\342\026\276\224\255S\275\"e\327\275\007\035\256=\315\366\274=\275\357\260=`\177\207\274\341\202\314=P\276\350=\014%\237\275Xj\352\275\245\037\350<\373\247\253<\262\265\230\275\232\347\254<\217ee=&\330S\275\205\236\362\275\253[\222\274\342\367m\275I\372)<\000\345)\276\365 \203<\272\027\242\274\271I\312<.Y\264\275\202p\\\275/\313\257\274B0\333\275b=}\275\024\3333\276D\350\371=iG\230\275\200\365\264=\254\303\016\276\340\342\035\274R\357\002<.\304\304\274\276\000\204\274\312\017\034>\035>\220=\366\351\201=\016`!\275d=#>\314Y\205=rL\236\275\025\263\027\275\226\245>\275\026\252\004>\021\223z\275\312qM=F\264S>\370\362\223<\000\373\225=W\372k\274\347\314\321=\242\225\321\274\322\300\261\275\304r\002\276\2624\205\275h\266\272\273t\243\254<o\335\222=\221\r\022\276\255\222\266\2758v\271\275\332N\255<sEI\275\356\335)\274q\217\334=\260m\201;\201\027\361\274\333\310[=\207@\237<NT\353<\020E\234\275N@\235<\227!\265=\203\016\225\2759{H\275\303\233\027\276\332\252\226\274&8F\275\257r\r;\211\033\224\275\342p\375=\245\030&=\374\346\024\276\265\371\330\275.\234\'\276\230\361\320\275\033\272\341\274\034mG\275\360\241\013\275c\343\034=\250\370\363=\252#\343=\3038\247\275\375Z\216<\217\200T=\227+k\275Q6\001>\n\2013;mO1\275\263c\242=z,~\275\210\217\302\275\035Y*>\3461\252<\342W\254<M\200><\0262\262<\\gI=\275ZF=\217\261\n\275\005\251\'=\002`\221=\352}\341\275\2601\354\275U,\254=\305S\204\275(L\212\275\021<\326\275\257(\013=D\025\262\274\304$\236=x\177S=\256\020\t\275\033\327<\276F\300\371\275%$+<\212\207\241=9Es\274z\033\201\275%f\274\273\247\205\025\276\256\240Z<`i\336\274\315VY\274\310\037y=\321\2222\276\373\224W=t\204\270=F\'\014>\005\332\n\2769\177\275\275\006\005\356\274\022\347\274\275E[\243<g\373\262\275\021!e:\3477\021\275o\014\336\274\206n\222\275\325\250\312\275\274\330\220=\232 \007\276d/\375<\031\023~\275\364\253*\272pc\376\275x\220\217=\232\246\343=\033$\227\273\243\305w\275\325\022I=;K\010\275\340\035\234=\305%\234\275\227\235(\276\"\350\303;jOE>V\007\217\275\312\305\360\275\246\265\252\274\265\305\323<jO6;7I\002>\"\321\006\276y\3029\274\242\253\203=)\240\021\275.\271@\275%\362\250\275\276dM<6\270\n>\235\021\006>Uz\336\275c\024\t\274\"\036\325\274G\013\203\275=\246\341<\027\234\207=\022Cg=\216\000_=y\302\004\272\205\320\266;X\252`\275\365\007G\275\002\320\327<\322\025f<\021Pv<\315\333\203;\201\206N\275\317\002t\275\251\031)\274}8\212\275\264q\017<\313\263\267=\332\346\366=\245\256\235=\242\253\215=R\210k\275F\307Y\274\312\257/\273B\202\034<\376\332\325\275\2225\325=\n\300\352\272\353\223\303;v\001\261\274#U?\276\0315\224\275R\226\317\275\371\034\370\275\216\025\341\275\232W\253=\2055\244;\222@\271<i*\\\275\375\246\330\275\201g\203\275`#\302=}>-\275\264\207\237=f\265\177;m\177\327\274\276P\230\275\364\'\226<\320\327\377=\300\215O\275\311\2525\274\340H\316\273\022U\323=z\324\265<q\253\036=\036&$>\337 N=\t8\001>\nh\023>u\237\003>\276\234\020\276\224]\211=IK\316=H\232E>e\370{\275\347\354\025\275|\211O=;t >\343\306\034\275\362\302\347\274\370\330\n\274\004p\246=\3156\346=\3639\212\275\200\204B\275\031p\311=\315}\251\275\266\306\200\275T12>_\013\225=\177D\004\275\222\260\036>\3040\216=\270\377\264="
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "network/weights_1"
      input: "^AssignVariableOp_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "0\274t<\252\223:<\000:\251;\375\370\253<\237L\033<\030\\X<\337J~<L\rm<\244\266.<\260\211\204;I\316\274;\264\316\235;5\263\245;\177\034\270;\0208\177<u=b<\376Qz<\336\005~;\330k:<\333\314\327;\334\344\267;\200\3421<\360\313\230:\'\014X\272m\270s<\256\247\221<\312\256\303;D\t$<=l\237<\252\344\033<\305\007\200;%\320\007<\036\325s<\017\221J<o\355O;.VV<\225\273\235<t|\275;\326y\026<\316n2<\360\300\212<\207\006\220<\263\276z<\304X\210<t\013\206<\361\035!<\033b\367;\033W\235;\216\035b<\243Nj<\2473\235<\230\376\246:H\337:<X\345Y< f\026<o\231w<\266\252\n;\311\305$<\375\265\232;@\210L<3\315\202<\027\377y<\3676\370;\032x\304;\333\001C<\202\233\025<\226\373\200<\251\255\004<\341gr<%\347\375;\317\334\\<H\232\243;M\243\207<i8\362;Ont<<\235<<Q\023x<\223\306n<\306\320\242;\254\310\005<$\312\347;\370\n\016<\244\344\035<FR\032<G\243(<\006W\315;\325\300\223<}U\256;\234\344\225<F\337m<:\301\020<Y\256V<`A\004<\247\220\204;~\312y<\343\273\276;\230l\224; \010\376;\275:\227:d\020\255;"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "network/biases_1"
      input: "^AssignVariableOp_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: "\t:\303<\214\340\002\274k\033\313=v|\014>\004\345\312\275\311\255\250=\370\222\244<\301Z\344\275$6\372<GO\300= \271\005\275\225\024\226\275\232\262\213\275Y\323>\276aUN\276\t\252\215\272\023wM\2751\377\340\274\351^\250=\255n\274\274\276\333\225\274\307\242\327\274\375\244\210\275\256\005G=-\016\237=&\232C=OTb;\010_\360\275\316\224\327<\201\304L>\262@\267\275\270+\341=\214)\221<2T\251=\023\004\235\275\352g5<\004\314\201\275\027\210!>\033\'\214\271N\212)>\360\275\227=d\373\333<\223%{\274S8\215=998=MA\343<\357\221\336\275<\352u<V\230I>A\364\345\275=\334 \276\324|\016\276\344\031\216\275\262\023\350<\332\017\006\275a\313\201=\215\264\'=\325Ib\275\364\342?<\313\347\236=\266\256\257;\254\317\004>\320\007q\275\302\031$>\226!\r\275ZH\351=\017\310\306\275\243\027\341=\350V\003\2750\244\322=X\240\240\275\225\337\364\274O\261\333;\022\016\242:(@\024\275\235\251`=\246]\t\274\364\231\034\274\204g\216\275\353\236\005=\037X\233=\346\265\264\275\324\364N\276\001\034#=\256\303F\274<\257$>\020\376\376\275\243\242\210\275\'\226)>8\025\246<\220\252\013<\342<\016;\302\026\305\275d\200\375\275\353\271\022>\013a\212<eC\254<\323k\226\275\327\306\304=m\372\212\275\204U7\275\345\313\341<\235~\003>QH\036\275x\213}\275?5\231\275g\352\236\275,\242\273\275\036\"\032\274|!\025\2764\217\217=3\336A\276\242E\307\275\350\250\335\274\264\363\007=\201\300\307=\030%\226\275\331\003\262\275\325|\031\275\355\327\255\275\030+:\275\031\203\225=\222\001\027\275 \247\235=\t\322\201<>\366\002>\273pM=\024\345\335=\036n\214\274%\244\007\276\252\020\370<\211q\\\274D{\224=\305\336\315:\246\326\315=\002a\270\275\037\272\373\275\221\235U\275\340\204\324<\007\370\004>\235+\272\275`h\361\274\'\350\260\275\013\to\275\312\027\'>\371\303\252\274\253^\303\275\356\222\304=\247y\303=\210\251J>\014\321I=\335\266=\274\035+\222\274\305Y\342=M{\215\275P\004\'\276Tl\001\276\254\366\344\274\010O\002\276\316P,\275\307\373\207=\022\234<\276\330\300\255\274\005\210\201=4X\314=\272\203\330=\220\270\320\275&\267J=\220\360\240\275\216J\t>\206Z\315;{\253M\275\267\200\332\275\032l\021\276\262!,<6\241$\275a\315(\276\233w\347\275M\343\002>\377\361\322=\272\360\375<\240\0066\276\252\003\033=\033\225\260\275\233\006\375=k\220\257\275\236V\034\2761\316\001>\361\177I\276 \034\225\275\252\376\213\275.VN=X\334\365\274V\310\002\275Z~\020\271#\315\274=\200\263\265\275\316W\265\2745\314~=F\257\210\274\003\324\250\274\246\242\264\274g\305/=Y\205:\275U\207\371<\302\031l\275&|\277=\305\225\216\275\375\0161<\313\373V\274%\005(>\275\030\347\2742\344\364<]\305\304\274\027\252\217\275\027z5\274\254\225\353=;\004\343\275\206-\274=\300\372\031<\213(\032>\177\3422\276\343 \004\276\312\340\231\275O\007\313\275\322\335\013\276=\307\227\275\325L!\276\327B\314;\357\207\204\275\303-\001>`\337F\276\026\252\230<\205\203\034\276\366L(\276\3003\200<NV\033<\315\253\'>\343>\033>\266g!>/+\261=<\246q<\323\020\007=\024u\231=L\327\023>\217\237\210=\202\010\"<\024\353\226\274\320\225\323:\002\277F\275f\207j\275\221).=\324\016-\276\365\364)=8\302H\275\236\010\231\275uz\232\275&/\312\274\236\373\257\275\234j\334=\274\242\251\274\353\200\006>\004[{\275t@O\275\033\005*\276\256\314\360<l!\276\275\202\032\233=\017\304\303=5p\340\274\254.$=\016\207\000\276\tt8\276Y\236n=\214VM=\341^?>\365\246K= \313\001=\022I\031>G\305\r\276pa\250\275VB?\2762W\010\276\222\336\035=E)\327=\237\346\330=@\376\341=\256\313\374=\304~\315\275:\215\277=\r\327.\276[,\247\272\367O\236=\016\006\'=\007:\022\275\000\325\007>\317\033\017\276Zv\036<\265\001\344\275\234\256\270\275\206\322D<\232v\244=\226\372\025\276\240[\353\275o\231\277<\215\223<\2765.\375\274\240\234t\275\301~\210\275|\303\333=zD\342<\375\033\340\275\202\372\334\274\351&\000>\257Fv\275\024-\263<(\374\233\273NF\334\273\332\312z<\254\314\255\274\346G7>\337M\320\2755\223\250\275],\235=\006\272#;\027\031\024\276%0\204\275(\177v\275^\266T=m\325B=\302tN=\031\034\024\275k\375\277=W\307\341<\264(\032=\221\177!>\344\020-=C\254\334=t\213U=\201;\237\275\265\347\334;\033\260\252<\211\007.\275\204c\226<\002C\352\274\335\202:\276\256\232\237\2759\345K=d+\273<\325\224\033\276\375o\020\275\"[\251\274\257&\263\275\225\243\336\275\354\023\363\275\035\344\317\275.$\357\275B6\375\272FI\226\275\224\356u\274\n#\357<\330\006\272\274%N\200=m\205\022>\210\030\230=\253\002\276=I\002\270\275X\300\336\275\031\034\266\275\250\235s;%\211f\275m\n\315\275\225@\262\275\'\376\256\274\354\227\221\275oY\356<\335\341\354<\355\207\232\275\211n\273\275:\344#\274Fw\277=6w\257\274y\\\236=\025\001\016<Rx(=d\276)\275.N\304<\243\031)=\223\333B\275\033\262\022\275\200\333\350\274<\325\346=\363\265\035\275\025\222\242\275\032\255\221=\361|\263<\354\207\313=\010\237#\2741m\226\275\007d&>\246\026\235\275c\260\327<\337\017r<\321\375Z=\337\212@=N.\026>\371\274\253;\262\037\353=\341V\341=C\3677=y\350d=\325s=\276\327\337\214\275>\024\327\275W\365\204;\364a\"=\022<)=\211\\\224=\233\037&\276!\252\215\275C\253\314=\312h\031=\214a \276\273\306\325<b\"\033>\216F\246\273\363I\215<C\3646\276\356o\332</\350\035\275\275O\357;6\350\351=\225\275\254\275\214\261\010=\207\\\251\275M\251o\275\277\027f=\014L\354<\261\230,>\347\034\027=\377\224 =[J\255\275\301*3\276\262g\262\275\303\261\n>E\252\304<\256\231\326\275\205\0175>\354\202(<\247[\257=\346\034\212<\366\\\353<N\214\242\275\030\204\321;\025$\'\275.\334\004<\220\nj\275\r\275\004>Y\0362\274\360p\202\275V\356M\275\217\227t\275Z\343\373<g\346\032\276\207]Y\275\322#+=\03432>\226\253\010\276\213`9\275\346\020\203\275\251-\360\275\236\360\\\274z\312\306=\201\203\257\275\230\344==\211t\002>\005\270\024>\352Q]\274w\233\022=\030\022\332\272~\010\360<\261\303\223=i,\335=\374\237\245<\273.\321\275\336`\203\274\206\240>\275\2039\357<\204u\020>\014\252\321\275\002=\215=c\251\n>\312A\365=\357w\207=\207\210\227=\274\027\020\275,\367\270<\233L2>\227^6=i\243\370\273\352\'\342=\353\375\352\275\232\032a=P\342\312\275\004I\270\275^~\307\272\0077O\275V_k\272\266hp\275I\200:>\202\014H<\373\'\020>\014\262\360\274P\000\006>P\034\253\274\251\271\310;Rv\314\275\261vr\274\204\254\333\275\013\375\247\274$\234\t>\032`x<I5\225=\265/\334=K\003\021>\\j\351\274\211\336=\276\253\355\">\006\222\000\274\274\372\371\274\263\360Z=\342\240~\275\311\345\210=-\353\203=\322\251\220\275\212bs\274\025\253\031\276\255l\322<.\354^\271\\\331\317=\247\252\260=\206nU\2731#\256=\246g~\275\370\265\031=\245]\267=\036\2146\276hr\016=pu\032=\327,\242=\'US=\337\031g\275\007\026\350\274\262\3223\275F\262\375\275+-&\276\243\214\206\275Eq\320\275\367\250\n=\350\366A\275\023V\300=\214A\201=\275\026\006=\303\002?=_\342*\275\234\265\223=C.\027>\211\217q=\352\343M=\025\240\001\276\373K\377=+\327\235=h;K=\323\267\224<wta<8\277\351\275\006\266\353\274\024\034\000\276\"\327\177=\350\227\335<`\306\206\274b;\301=\363\237U\275\301\354@>\330\303\242\275\213\260.\275\025\3637\276\212\202A=he\322=G\313R>\255\244\275=@\320\n>#\036\230<\337\361\234\275b\340\337\274!\334\272\275(\241\204=\303@\037>\2374\r;6\255\000\276\004\3336>\262p\223\274S\326\271=\235\224\246\273gE\250=\365l\026>\203\'\021\274J\323\240=\320:\025>0\335\243\274\226\005\003\274?-\372\275%\373\251\275C\231\252<\262%\361=\367qO\274\257\221g<\375H\032>\247\224\"\2762\367\027>\314\242\001=\203\347\210\271\323y6\276\230\340\t\275\232\366\013\275)u\025\276F\270\240\275\325\332\350\273v\230\263\275\224\343\024=\341j\323\275\235(\270=95\235\274\364d\007>E@J=0\226\265=\243\212\235\274\037?\306<\2115\306\275x\341R=G\257\n=e\357\024\275\036\345\367<x\' >\016N\317=u>\362=\215\353\250\275[\014\275=\'3\303\275D#F=\373=\364\275\006\332\277=\225a\"<\214\254#\274\010\002\212=\343\036\220\275%\262\321=\263v1>(\374\217\2740\343\211=\007S\345=\215Z\364\274[]\322\275\033\354\002\276p\r\274\275\034\325\303;\272\363\357\274e\2326>\350\266\013\274iD\206\275\303/\255=\243r\214\275\261$\222\275u,$>V\271I\276B\250\033\276\027\251\201\275\270P/=\303\306m=\261e\221<M\317\253=g\007\034\275\364>)\274\375\213\322=e\"\212\275\306\3408\275}\217\342=?\377t\273\003c\222=J=7\275\343\014\001\276\020\211\034\276\306\312\317=H{\\\275{\205\361\275\205\206\255\275\"\357\252=\3342\216=\035\270\020\276\240\257\303=\211S\236\274\177\000>\276\211\311P>)\346h\275\300\327\220\274S\361\201\272\201\212\303\2751\262\023>\276@\032=\217_C\275\217\326\004\276~h\217=\245\\\377\274@\241\361\275~\330G\274\031w\001\275O\005\211\275Lz8>\333wq\274R\336\315:9\377E=\177\213\252\275\202\022\247=\034^\230\275\0202@=\323\343\327=\004\364\253\275\375T\244=\360\315\003>\272\306\316=\336\021\254=<\033x<;\344\201\275\037!)>0\212\346\272\213t\330;\207\316\366\275\344\'\031>\016\206q\275fu\367\275\234\265L>^{:=LQ\213=\242\204\010>d\005\323=\021\205\352=\025\034\273\275\234u ;\362\235\r= \261\022>\351\n\316=\354R\373\275\263\222K=\312p\361\274\352\034*\274\205\212\014<\374\231\016>Z\206\021>\240-\002=\356\223\224\273\347e\323\274\3134\353=[7\365\275s\226B=\213\225/=\363\361\032\276\020mP<{\221A\276\361\230E=<\230\017>\315\360L=\277\207\262=%\332]<\001\353\226:6\022\202\2754\244w=ZK\264<P$!=\236\rH\274\205\010\261=\252\304\362\2744\305+=\364\274\274\275\013\227\017>\277o\236\275\227a\266=\371\237\220<\3214\202=\256R!=\343\322 =\222\034\340=[\374\025\276!\324\r>\310P\262=P\376\332\275(\227\035;\022A\316\274\275\337D>\223\\B>5\3421=zg\304\274\251\203*<n\321-\276\325I\210\275\'\300%=\330\253y<q\236\r\276\265\270\177=\357N\020\276\237\260\031=\033\253-\276\202G2<\223Y\177<\352.\010>9:C\275P-9>1\373\221\275E\r9>%\267\224=\227\336Y=74\'\275_s\032\276\366\272\205=Ls4=\302\217\365=\000\203\247\275\376l\262\275u\346\252\275\336\325\220\274RZH\275\230%\270=A@\316\274\321\032\241\274\310\321\306\275q\001\t\274\017\260{\275\240k\204\274\217\327\273<g\033<\276\"\315\226\274\334\311?\274Q\034\022>\004\315\243=\270t,\275\346\376g<\244\177\306\274v\022e=O\027\200=\1779\344:\351\244\226\275\201Po\274\373l\022\273\t\3379\275Lv\337\275\277;\361\272\351\262,>\n\321~<.R\035=\237=\251=\361&J>\317\331\275\273`\037\225<OEw=2/\270\275\355\022\302\275\216\021\205\275\0038\250\275\010{\210=\216\013.\275ST\037>\244\315\370\273\336\243,\2742\2514\275%\r#>C\264&>\000\332\257\275\316\215\256=X\213\316=m\272\217=\241B\257\275\325\\\265=\317D.=|\361\326\275 \264\375=c\013\222<\227\246\276\275&\340\304\275\344\355j\275\242u\357\275\233Z4\275\305\022\001>\324=\364<\225\023\005>o\374\237\275\226\265\312\275\031-)\276f\265\215=k\377\241=\300\026h\275\323H\266\275g\000\273<\037+<=\266\316\254\274\266\303\320\274`\314\005\275\367\200\351\274-\026\212\275>\237a=\025\344\270\275\305\244\014>|\0207=B\000\021\276\315\002\021=n\325\002\275#V\265\275\27246=\2100\242\275\210\260J=\210\251\320<z5\253\275\304W{\275\205\317\351=\332\306D\2750\360\'\276\'\364\247\274\255\014J\275\240Sm=#\346\223\274\346~\177=]\264\000\276\207\253$\274\264\372\005>\336A\276\274\024\235\240=\274\235L\275\361\367\234=\004\007\036>l(\225\2757\032~<\203n\035\275h>\207\275wB\002>\224C\347<}\220\265<\262\336A\275\241\274\014\276\22491>\023q\326=T\t\257;\370\233m\270\224}\024\274\312s\235=\031L\221=\257G\266<YG\302=\201\346\275\274da\261=\314\242->\213\257\210=\262\"\205\275UH\335=f(\250\275K\232\300\275\357\246%\276\317s\346=\177M%\275&\320\t\275\274\271\217<\264\364;>\304\034\237\275\300|\231=UV\363=\367\307Z\275D\225p\275e\333\263=<t\364\275gd\035\276\037\036\373;\255&\364<\335\021\244=b\361-=\345\3610\275+\3402>\364Z\237\275\247\234-\2754\365\030\274\206.\200=\242\276&\276\340\014\005\275\312\227\202=\276\256\005=\300\371z;\257\373\032=,\303\027\276\343M&>\267U%>\031\2541=X\365\026\276+\343\004\275\245\305\313=\217\021\013>\222]\367\275B)\354\274\3201\375\273N\340\022\276\177\330\265\275b\336k\2752\315\236\275C`\031;\016\336\":\207\361\213<i\314\013\276\214\320\035=\310w\347<y\325\225\275\205\243\020>\005W\256\274*\312\240<\275\320r\275\273u\250=\311\367\367=\306\r\020\276\353\240@\275\241\023\223\274\272:\320=\215,\366\275\216\275\223=xE?=@\2112\275/k\315=\367+\362;\355}\237\275]\354&>a\213\177\275 \247F\275\321`\226\2750\226\376\275\000\212\024\276}\036v=\320f\355\275*\033\210\275\352\307\373=n\346h=\267J\274<\246M\215=\317\226\266\275\246\267\357<\222s6=hF\273\275\215\341&>\370\262\255\275m\202\254<<3_=\333E\355\275Z\242\201\273\364\367\t;\000x.=#\356\370;\232\006\037>\203\351\207\275)\020\2769\r\223F\275\0069\303=\271W|<n1\032\276\326J\230\275\222\003|\275\272\202\211=@2j\2757/\335\2759\201b=\357\357$\276\253\235\224\275\276\317\336<<,\252\275|\200\210=\201\n\007=\205>\006\2752\366<\276\310\211<=\326]\356=%\374.\2765W\246=\367\321\270\275\014\010e<\224\225\353\275\205\257\204=O\372j\275I\210\331=O\317\235\274\024\363\271\275Kp\370;,\213\333=M(*=\372_\036=\376\371\327\275\217\273\021\275\313\206X\275\233\270k\275\215\006\033\276\200[7\276\257\270K<M\243\354<\214I\260\274\277\316\355\274\334?\267=3\265\264=\341b\267\273\2162\377=\337\275\362<\262\243\033\275\277k\032;\241\010\222\275/x\271;\333\315&\275\363\235\223\274 \007\022<\374/^=\t\021\313=\345\230\225=7\236\224\274\257\240\374\275^>a=\234\t\005\276\205\255$=\341\322\321=\274\033+>X\033\037>\324Y&>\357\245Y\274\334\207\360;\345&\014=\352\251\013>\000\240\236\275\223,s\275<@\213\275j\233\224\274\216p\330<\277mE>vE>\276\373\003P<\204\3038\275\036\236\330\275\364\374}\2736\361.>\377b\310=\356\301\210\275a\374\306=\372\370\356=\t\324\341\275\364\277\000\276\236\336Y=]v\234<\213\253\230\275\317\334z=7\232w<ED\357\275Mn\236\275\203Ul=\215p\'\276\3150\002>[\351\356=\214\3440=v\321\276\275|\365J\275\316\266\016\275\336\374\201\275\002\243\207\275\313\313\321\275O\232\364<_\022\032\275\345\247@>\245\371\034\276\t<\002>\254\033\271\275N\200B>\256\330M\275\037\277.\276\003w\373=\316F\n=\375\261\214=\037\225\243=\333\323\357\275dj:\274\266\204\326\2758\361\234=\210\006F\273\226\242R\275T;\370<0\037w\275\036Q\377\275\230\000L\275\264)8\276\207\230\016=v\027.=\237\377\003>\235\330\350=\022C\376;\002\245\027>N/\272\275\364i,\276B\'\327\275k\360\233=D$\335=\177\246\264\275\373\365\220=b\177\226\275\354\r\346\275$\341\262=\350\035\247\273D\202#\275\322\215\014=\030\031\005\275\013\303\332\274*\356\354\274,/I<\274\2010>\277\016\201\275\341\033\241\275\256\352z=\336\342\362\271\027G\254=a\254\230\274D \252=\234Y\001>\005\2324\276PX\215\275(\3367\274\001/\226\274N\231r\275\303@\177=\247\003{\275;\224\232\275JX\002>~$\316\274\033\222g\275H\276F>\263%\350\275\214K6>\245X&\276\r\013\312\273\tl\003=B\376\307=\267\222\366\273\317\347\025>3U\272=\311\344\352=\215\"V=W\002\024\275q\315;\275b\n\220={)\323\274\r3\340\272\003i3>&\245\265\275\033\267\"\276\031{E;\303/\204=\237\355)=\311\201\355;\221\345\021\276\327o\324\275gL\375<\227O\331=:\023\t\275%h\002\276\214\t\254\275\250\325b\275%\017\206;\274\317\245\275\034\217t=Tk@=S\377\001=\210\247\267=;\2216>8\376\371\274n\302b\273\372\205+>\002\224{\274g\247\217=$V\211\275\253\340+>VD\366\274&\252\243\2758\203\257\275\346_\301=\321\303\303<\271\331\211\275\233|\221\274;\024\275\274J\3119\276l\3748\2767\004\220<\315t\014\276\006\257\216\275v\032\355\275\t\206\202=\307\215\025\274{h\201:H\223\025>\021\223\016>\032\356\231\274\351J\t\275\177\037L\276w&3=\0005\223\275du\364\275MD\323=&\340A<\212_\224\274f\370\033=hp\341=oxu=$\034x=\311F\216=\374G<\274\326\314\020>\007\215\212\274q~\207=\034=\236<\r\220.\275\227pE>3\311)>\237\335\225=J@o\275l\374\371\275\301\330g=\207\2256=\177v\002>\236Y\357\275=fT=\021^\376\275Pp\033\275K\023\036\276UM\303=We%\276\024i\203\274\0027\232\275s\362\245\275/?\374\275\300\301\016\276K,\025\274\211\374G\275\376\321\373\274\030\014\033\275\340\3651\276\260>c=\373x\275\275\214\341\320<=]5\273692\276\206\217,>z#B\274)\002\002=\303X\256\275\355\204\n\276\025}\304\274\217\275\332=\332\327\252\275&Yu\275\220\177\227=\215\362\271\275\347{\304\275\357\331S=c\352\234=\365\325\022>\210`\013\275\022\251\354\2749\232\032\274~\252\250<\036\n\207\275Q\360\250\275\023\005[=\007\254*\276\234MK>to\366=\000\206\202<\211\3146=r\010\341<w\241\235\274\277m\325\274*\323\274<\302\244\216=\000\342\000\275Yc\356<%\207\202=\320\263\334=\307\263i=\303jt\275\366v\303\274\304]9\275^\002{\275\222\0237\275j\256\261\273! \324=\036\207\010>=>\253\275\222U\244\275*\003\036\276\222\262Z\275*\375\276=\212\276\223=\244\345\204\274\210\240\006\275db\222=\266\037\300<;G\001\276\255\034\032\275\231e\261<\245f\214\274\266p\n\273\243\346\351\275\005%;=Xy{=-$\346< )\035=QA\'\273\345\t\205=r\257\204\275\317\350\330\275q\026\\\275\217Y4\276\360\327\234\275J\360\255\274.\312\330\275\366!\325\274\371J\227\275\262\nJ\275\304\r\246=\353h\247\274\350\3230\276\25157\274\217\273\251\274\347\026\260\2750\353\317\275tJ\206=\025\032\201\275\3756\355=:7\254\275z3M>I\202\236=\203\272\034>\262\242!\2752\240\241=|\222\334=\236\t >\332\202\304=z\214\373\273\230h\322\275\375\321\322:\251\365*\275\222~$:A\361P>=\'\"\275ab\004;\244\016*>W\036I\276\213\007\234\275\2767\231=4A\333\275\010=u\275\251\342\013\276\223\262X\274\371.\034<\343a\302=\014G\007>6cJ>\304O\220;\017|\270\275\252\3140>\253u\277;\2743}\275\017\317!\2768\0233=;3\004\276\323\306\270<\2409-\276\240\177\376\275;/\372\275t\262#\275\016\270\346=v\310\026=1\326\372\274P\245\316\272\243\271\023>d\027\356=a<\212\275\3278\235\274u\327\363\275\240\313\354\273\250\2518>\177\241\225\275@\210\003>\305\274\243\275\352\303\242<\0203Y\274.\023\355\275>\217S\272\037\"\301\275=\321\231\275\325V\246\2755\374\225=\245E%>\360\357\002\273\215\n\346\272\350A!\276\2379\003=\327sA\275\255k\344<\341#j\275\037\006\274\275R\206\224\275\n\316\265<\207\245\212;N\203Z\275\342:\303\275\335\231,\276_\236\204\275\226\274\201;K\346\323=\'Ra\273\301\2156=\035gE\273I\3238\275\3510a=I\302\002\275t\262\004\275\271>\001\275\'+\377=\321\207\236=\241\327\264\274\261W\210\275\010\025&\274\251\222h=\373\266\304<S\n\315<\333\333L>\220\371O=N-\023\275\312\332N\275\001\246\021=\264\274\016\276j\241\242<\207\364\252\275\350\245U=\037U\207\275\376\"\235\275\223\353\244;o\3410\276\212\220\013>\005\223I=\3713\007\276\267G\302\275+\\I\275\354\354\252=/\"\023=Y\364\212=\374[r=\226\372\201=*\315\304<)4B\275\317\215\013\275\034\216\374=\260\231\256=\004\203\265\275\002V,\275.}\245<\354[\327=\325\201\375<HS\345\275\3638\006>M \211\275\013\3543\276\316\322\334\274\325\261\254\275\032i\373\274K\336\304=\203\332\317=\2614\237=\324\370)>#$f\275\016\265\242\275d\\\243\275\037\250\242;@Vz\275\021\"\210\274o9\255\274\212\212\033\274\200f\230\275fq&\275\224\352\316\275\025\336\246\275}e\005\275\262\233\311=\027\226\224=uc\207\274\275\343\315;o\0320\274g\017\327;]6\010\274\344\327\367=\032\362j<\300\031\032;\365i(\276s\240,<pZ\353\275W@\021\276\320\220\005\276\243\327A>\353\212\342<!\270\007\276\327\005\301=\234\253T=\246\210\n>\037\220\002\275P8\250\274\261\261*\276\244\230\316=/|\031=\004o\373=6\200]=\353o\365\272\254\'c\273\033r\317\2746\345\376=\001\311\203;\301z\200\275\261\370\263\275\244\340\227\275\375?\t>\021\361\010>\025\332*>\336\314\265=\226,\234=a\342\244=\277\376\027\275\003\373\215=\245\302\245<\004\207\327\275\354\177\367=}9\264<\367\267\210\275\253\275\371=\237A\311\2751\337\211\275z!\253\275\330\216\233\275\036\005\013=\324\215\212\275o`\035>\n\207\205=u\224\323\275\000;\355\275/\032&=\273;\220=h%\367<8\366==\223\032\376= \242\266\274s\3156\275\243\215\030\275M\347:=\221\223\221=\252\244\251=\001K\305\275\024\320:=I\353\351:\351$\225=\356b >1I\016\276j\227y\275\n\007\246\273\'\252\325=\363h^\274\013C\035>\026\272\262:\342\202\247\275\331H\003\276u\255\233=\023\276\207=\206\027\337=\n\367\254<\265\032\252\274\235\326\017\276YW\310\274\343z&\275\241\342\347\273\266\t\302=T0O=\312\350\020\276W\352\001>\2154\010=\307:\225\275\352K\211\274\374&6\276\361\221K\276\336\246\217=\316\000\315=\217\226\245=\320)\233\274w\242\264=\227\225w\275\342\353\317=q\3768<\265\200\231=\214\025\t<\001\333j\275\366\3232\274\357\'\320\275\0030f<\325\327\036\275S2\224\275\306Ps=\237c\275\275!>\024>\373\223#>\366x\236:\'\336\"\276\017N6>\213\326\236=\276|\037\276\315\236g<j\343\262\275,\321/\2744tu\275XE\221\273\271\2512>\213\231\316=\356\376\360\275\241\203\022>\245|\213\275B~\017=\251\242\n>%\226\037>\331 \010\275\216\260\007<\307\016\215=\033u\037>\367\214\221=EQ\021>r\332%>\004i/=W}\226\273?1\312\274\261\214\316\275O\253\310=\252\"\240\275=\211\024\276\02358>\352\306\361=\276\262C\275\241\365\236\274\255 \350\275\324\242\267=\000Ti\275\350\232\001\276c\244y\2755\363\306=\253\317\032>Q\365\210\274W\034&\273\304\307h=\320t\036<\017\355\360\275W\364\'\276z\033\002\274<\007\221=\263\373\004>\257\242\202\275\361J\231\275PW\346=h\005\260=\014\2376\274\213\265\265=\306\265\351\275?4L>\245\332\211<R|I;,(\230\275g\257\r>\232n\302\274\215\241\204\275\270Z\362=\"\321\242=H\212F<\370w?\275\362\203\300\275\225U\302=\330\233\t>\267`\333=p\001u=\203\347\225=\002\000\254<&d\274\274\325\331\031\275\245\036I=S\264\236\275\346\274\226\275\215\337x\275D\021\001=X\n5=\337\361\026\276\267\022\241=\016V\254\275\022\244\301\275\261\272\026\276\004lu\275\261n\300\275\006\233\232<7I\322=q\255\246\275],E=\304L*\2758\356\274=\254\241n<\322E =\177q\316=3\342\000\275\352\006\320<\266w\270\275F_\257=\210\312m\275\003\341\374=QZ\210\275\re\016>(Z\337<+\375\312\275\200\254\311<\225B\215=b\202\320=\302\230F\274\365)\014\276\245\006o;.q\233\273N\373\311;\255\261\346;\035\rw=\325\312\n=\305\275\376\273N\277(\276\374\r\341\274V\225\337\275\247\222d=:\035\200\2755\361\005=\3264\014\276\215C\013\275Z\005\302=\225\315a<\017\357\376\274\353MT>8t1\274:\277\254\274\277\353\"<\353\307\200=@\002t\274\017\220\222\274\330`5\275`\036\023\275@\266/\275\235I\201<gRV=\375\245\032>r\265\032\276@\253\330=R\356\226\274\304[\354\274\00091\274\212\003+\274Tj\251<U\\\266=\234[?=B\314\350<\031%\326=\355\351\232\275\272\255\227\274z\211*\275\375\273\334\275o\262\246<\016Q\252=)L:=\026\3666\275\361\317\227=R\363q\275\3250\254\275\237n\270\275Q\221\026<>\3408\276#\001\036\2769\270c:\232\000\024>\227\005\237\275\264\021z=\003;\321\274t1\243:\334:\t=\226\343\340\275\301\n\206\275\035\374<>\210[X;}5=\276\311\262?\275\322\244\023\275\335\261n\275\305\326A=O\371\033\276\033I%\276h\337\343;\030\205\n\275R\330\020>)\376\276<Y\007\002\276\256\271\330\275Tk\037=`C\312\275Y\337t\275\373+E\276\253\207?>C\325\001\276o\372\236\274pf;\276\305\331\245=\231\215\004>\304\233\322\274J\326)=\305d\372=\251S\031>\336\017}\275\313\270)>wG@=J\3707\275T\252\356=\373\3043=\243\331\202\275\004\237\206=\312P\303=\226C\217\275.\303h\275%\235\356=\222a\362<\374\230\317\275\245\200\202\273\352\021\034\275k\250\014\274\251\t\203\275\273\257\316<\353KL>\014\'\234\275\241\023i\273\214 \232<\233O\023=\330\245\353\275,b\354\273]\306X=\326`\207=\377\266\350\274\252HK\276o*\205<f\352$=nj\272<\347GA\276\223C\220\274\215u!>\"\024\271\274\356N\010=\262\253\024>\003|\010\275\274\251\014\2761\367^\275\246\016\246\274G\177\377<\350\0034>\337\342\004\276J6\300\275\302\255\262\275s\030\356=\331<)\275\213\257\307=\325|,>\301\330\363\275\275\223\007>\3001\347<\325T\200\275\312LV\275Y\216#\275[\225&>\231_\213\274ky\021>j\226P:\001\362\003<?O%>\322\222\232\275)P8>b\201I=@LE>3\017@\274\255\025\221\275\370\340s\275\017\275E\276\024d\213=\270\346\336=X\266\320<V\326\256\275J\363\242<\326\266\232\275\346\377J\274\253\231\\\275\274\356\034\276b\227\231\275a\227\367=Bw\306\274\357\010R\274d\343\264=\0335\237\275\312\207\305=\314,\361\275K\245_<\311@\253<\202\223\370\274|\233m\2755\332\027\276k\346c\275\263R\250<\371(\370=\256\240\316;1\215\251=3\254\327\275\253G\000<\223\237\244=\355\257\345=\302d\324<\200\372\232\275\315A\001\275L\020\t\276\351+\023\276\204\023\002>tm-=(J\r=\274 \254=\241\375\236\273\000\206\207\275\33740\275\345K6\276\230H\254;b6E\275\253p\367<\3266\312\275\334\037\224=|\2338\276\301f\256=\r?\027=\007\010/\275(%\034>\262\2220\276k\251\305\275\300\320\251\275_\020\005\275\274\304\'\274\305`\214=.\214\231=Y6\t\276\271rp\2741S}=2\014\210\275/\263\n=#^\327<\211F&\274\300\216\300\275\315\017(\276\255@\275=\234\003\020\276\002\257\3739\207\331$=\371=\267\275YC\245<\334\202\243\275\327\234\240\274\233\001\356\275\235:\341\275\304W\t>~z\350\274\305\265\245=\016p\335=\226\343\213=\037\357\317\274\034]\315\273f\340m=\036\0353\275\276\366X=\007\210K<No\302=\004m2\276\365\377\216\274\241\361\363<\316\033!\275<Z]=\007\316f\275\303\227#\276\327\"\005\276\230#\207\272\325\300\026>Q/\r\275\301 d:\322W\002=\337j\026\276}d\225\273\246\373\321\275\230d\311\274\023u%\274\030\372\314<^\222\246\275O\243\215=\267\356\200\273\304Gg=\177\026\007=\227\325!\276\246\261_\274\034\271\240=\233p\365\274\207\307F=c\217\333\275\267\026*>/\325\307=5\177\366=|\263\214<\256X\371=\261d\220=d\326:=\371\2104\275\201%0>nN`\275c\016Q=G\2547\275\004j\021\276\"|I\275X_5\276\r\2315>\302\007R\275o\363\330\2752u\217\275\021\226F=\\\321\022>*z\'=\333JB\276\333o\245\275\305.\035<\230\262\220=<o\005\274\300\324\341\275\275S\346\275\0278t\275v\030M\276c\230W\275\201\017\006=\357)C\274\312\006q=\225v\337\275\177,<>\204\033\000<\013\347\036=S\351(\274\345\273\303<2\306D=V\275\222=b\277\202\275\366\304\241=\245\n+=\371&W\275Wf\026;\255\337F\275 a\016\275\320\274\247\275\253\335\317\274jN(;\271\2510;E\273\274\275k\355?\275\'\357\030\276:E\322=\226&,<[b2>)\362\262=\217X\376\275\242=\331=\030$\213\275\260\033b\274C\225#\276p\234\320\274\007DL\275\304\251\231\275\225\337\242=j\013\323<o\200\353=\"\242&>\010\354\271\275\205\t\016\276\367\020\360=\210Y\213\275\003\306\254\274\021\237\220\275\350\375\333=n\240\206=L\027\277=\251\236\262\273\025+\001\275\247\345F=\302\022\221\275\364\365\361\275\342\005a<Qq\r\276\250\033\024=:]\220\275\317\332\177\275\262\001\200\273\002DI\274*/=\275\213\354\352\275\364\264->2\225\272\274\375<\207=&\307\013>\365U\030=\301\2467>\221\262B\276\364\350\215=\347{B=\030*\376;;\263\311=\325M\021\276;q\002<\240\373@>\320\2473>\265\353\227\275\202{]=\034Y\031\276\356\322\032>]\216\016>\315}\227\275\236\257<=\275C\362\274o\002\306=\325\341\215\274\377FL=\365\234<=ai\344\275t+p\275\237G\242\274F\353\237\275\257\375\031<\026\316\213\274\262\235\002=\360t\310<\361\rN\275\346I\221\275\202\366 \275\327\321\005>T<\342\275F\316e=\364\220\211=7\250\243\274\2758B>\"\037\277=9\021\022;\346\303#>\350\250\257=\270+3<cMa=\340\371\025\276:9\223\275/\261%\276\252\227\325:#\347?\276s\354~\275\307r\264\275\242=\022\274\314qy\272\337\305\214\275o+\217=\r\242\203\2755L\254=\005\231z\275\363\367f\275\343-\307\274\346\"\032\2762\315\277\2739\260\232=8A\224\274\376\262\033>\324\205O\275`\3716<\005\265\000>\350\311\016=\202\221\371=\323R\202<\375/%={\2715\274\261\036\203<\320\026\256\2757\362\237\275\330\251I<\337\022U=W\242\r=s\002D> \3561>%\305\232\275,V\343<\304\022\347=8\344\025>\320U\376\275`\203W\274\376\243\253\275\323j\336=a\260\024\275V\342o\275\032\023\321\274\031AN\275\033-\335;\031<\211=avg\275H\301\260\275j\006F;\212\272\370\275\216\206\r>Z\344\345;\2119U<\215\263\213\274\016AG=\212\200\036\275\344\366w:\217\031\362\273\3163J\275\263\261\003=\223kL\275f\221\026\276\234S\375<\212\355\204\275Tr4=\372z\231=\345\3341>\240\232C\275\033/r\275\272\357\345\2751\364I\276\320h\n=>\314\217\275O\327=>\032\204\202\275e:\222<\240\035\225=\377s\333=\032\217\021\275B\226\024>\376\243\311=\250{{\2742\347F=\020U\346\275\267yJ</\230\r\276{\217\317<D\225\366\275\260\367\224\275\303S\367<\351\033\252=\237C\301=r*i\275oV\236=\262\037\222<o\322\237\275R3\010\274\210\367\344<\035\n\002=\005\345\037\276I\247\235\275;\014\010>\006\242\320\272\242\326b=\345\255V=K\010$=\243\306n\275\344\375N\2754\250\312\275\312R\014\276\204q?>\311,\374\275&\221\t>\377-/=\372\206\311\274rt\374<\364N\245=\270\036\210=\2621\207=<\330\315=|+\204\275\241\234*\275\300\247\340<B$\310\275]8\323=Pm\227\275L\373D\274\360I\n\276\261\032\276\275\257(\263=?\215\365=\256\036;<\272\205\315\275j\006\312\274\211\003\250=\327\342\201=\315\356\305\274s\262\211=\rn+=\337\366\253=\246\344\2729\341\325\376<M\206L\274\304\255\331=\001Y\254\275\322\334\005\275\026\342\244<\r\3609\275u\274\005=i\305\272\275\374\320(<\254:\235<-{\030=\354\307\212\274:{\345<\204\333\360=\005\352\267=_r\232\274\323\266\313\275\013\000\366\273=\2035=\364\210\010\276J\3024\276\027\314\356\275\003A\020>\320!\347<\231B\242=\365.\274\275\336\3529\275Y%\t>\000Z==V)\242:\311\020\216\275\310U\305\274\222kC\274W\031\321\275\215a\243=\323\030\242\275\217\366\324\2759<k=\254\020&>\312\332b=\013\336u\275K\\\243<\033K\373\275\332O\235<d2\242\274\317\005\227=V\365d=T\036\246=A\335\030\273\001\255*>\374\241\247\274\342\t\200\275\244\236\231\275\310x\337\274\342[H\276\310\314\"\274\237=\016\275\225<\'= \3711>\325\212\250\275J\023\367<.\272\366\274u<\266\275)\233\020\276\317\316\231\274\3515\273\273[\233\026\276b\324.=\001\"N\276^#c\275\202p\266\275\230\000\337\274#*\224\2756SX\275PD7\275C_\020\275p\366\215<C\312n\275K\254\035=\250\001\344=]d\201\273\321\r\225=\246\370\257<\214\3621\276]\335\313\275\0343\234\27564\375=\365\316\001\274\364\377[=w\034\035=\340\277\272\274\262\3431>\236<*\275\376\327,<\235\240=\2764\262h\275z\260\007<\260y\300\275\004\016\201\275\217_A\275W\231\234=\236S\345=\336]\342\275]\321\361\275Yu\367<\214DO\275\316\350q\275\002\337\250\275\3273G\274\370\305f\274\251y\260\273\3530#>\234\334\223\274\022P,\275E\024\373=\202\324$>6.\243\275\334v\252\275\n\210\\<Um-\275\2240\343=\373\177\234=\"\014t\275\357Kc\2759\310\322\274\231\206A\2759\022E\276\342\221\014\273_\'z=+K\035=\246\017+\276\262\363\001\275[\025:\275/\030W=;)\334<8\006\201=/\020\336\275\367\255\361=\351\004\370\275T\343}\275\374Z{\274\371\375\000>&\300\001>\2147d\275\026-\024>\\\322\031>-H\322\274Y\256\343<P\324F\275t\276\277\274 .\003\276*\235\304=W\305\334\275Y\016\026>\234\0058>\377\344a\274\014\327\"\276o\266\027\272\2338b\275\371\334\224=[)\205=\224\206\377;\375\017\352\275\031\301\337<f\253\336<\206\026\035\275\234\230\370\275\344\327\003;\343R\274\275\3335\271\274\026\264\260\275\346\'\267=m)q\275x\200\271;0\346\030>\025\235f\275$d\010\275\032\235\203=\312\312\014\276\221\225H\276\003\3454\276\214B\240\275\013\347\266\275$\323\224=\374B\262\275\241$\020\275\024\231\305\275\266.\253\275\257\231\\\275[FA\274o\354.=`\0318==\341X\275\352\016\005>\257\305\251=@\0353\276\321t<>M=}\273\"\021\000\273T[\014=\272\321w=\341\315\301<\250\331\235<2\025{\275\277>\034\276\022\325[\274F\203\326=\272\217\316\275e \t=\3512\356<#NH=\315\224\367\275#\313\004\276O%\035>!\"6>\265Y\256\275o\267\321=\361\261O;\216\255\354=\276\345\376\275\033\242\264\275B\254\267=\302\220\235\275?U\211=\335\006\276\275\226L]=\237\320\344\274/\210\002>\003\377\013\275\341#C\276R\267$=\330\265D;+\022\326=\231b\'\276+x\032=G\246\276<\005EF=\252\243\004\275\264\307\225\275\212RY=\025\353u\275\033-\243\274\305j\216\275\243\0065=\277\177L<\266\213\301=\032\362R\273\317\3115\276\373\367\255<\022=\256\274\342\240\033\273\017\225\366\275j\313=\275\020*\273=\326\332\030>\371C\032\275_/\037\275\376\230\274\275d\200\237\275\264\004\037=\306\313p<b\025\007>\257\346\230<\247\325\201\275\332\034\305\275.t\237=\354%|<;\233\323=\340\233N=\343\375\"\275\267\221o:)\344\324=\236;0=\237\3342>c_+>\220\343\014\275\333\255\272\273\025\035B=\211\217\010>\037\2720>\261\023H=\217\340\346\274K\007\007=ZY\327\275UTl\274twJ=\312\251\344\275\213\r\216\275\034\352\377<>3\216\274 \017[\274:;\353<\364\363\361\275F\'\">\033\222\314:\341X\211\274/#\335\275\263\276\335\275\203T\257<\306\222\252\2748\'\326\273\247i\014\275\007\237a\274\267\036\035<M(P\275,\326\356=0\n\010\275/\2256>\213\215\375\275O\300\326=\366\222[=\315r\373\275@\366\035>\270\030/=f\022\356\275\014\235\261=Nw\267=\365\013Y<\357\223X=\210\035E>\000:\220\275\207\234\016>3\354m\275\226%\272\274\024\326\342=\307\342\254<\303\261\037>.\203\237\275\237%\344\275(+\301<jwA={\241\210\275\371j\033=\222t\302\273B\034\340=|2\334\274\264\030\266=\231\257\250=\021H\314;\207C\005\276\207\020\322=P\"\031>Z<G\276 \256\213<\313\344\331\275\361^\260\274\025\331\316\274#]\306=\006[\355\275\206\375\021<g\177\345\274\223\304\261=\335\200\331\274\213\224\303=\316R\231\274\247\303\276=X\310\256\273V\345i=\322\251\373<)a,\274\214\3354\273\354\304\275\275\245\273\204\274\035\310g\275\033.\366\274\213\227j\275\333@\256=i\007\277\274\305\244\221=(\264\252\275\3304\034>y7\357;\216a7\276]\333\007\276zk\000\276\334|\351\275\272_(\276\316\222\r>h\273\272=\272\244\207\2754E\302\275\262!\303:g\302$\275\025lt={\2617>\017j4\276\017\037f\275G!\t\2756\342\"=\246\027\271\275Q8\227<\237\214\233\2759\002i=8\342\365\275s\335\013=6x\014;$\237\217\275\227\315\361\275)\034\327=\266\375\031>\034\346\346\275\222\215\340<\272f\224=\016`\202\275Q\205\033\276)\032!=2\363\305\275.\230\257;\021t?\275\202E\326<\301\256Q>_\255\216\275\276?\256=y\233\027\275\260\232\327<\372&\t=IL\244\2751\007\227=S\201\022>/\2777=\363\357\005\276\024\0306\275\217Sx\273\376P\276=A\004\210\274`\214\203\2754(\3179|\365\206\275rN\341\274+_\002\275\220\347\002\276\2132\300=\266\223\375<\264t=\276U\022\205=\025\360\004<\3468\232=\363\346\340=\356\346\010\276~\203:\276\331\210\250\275\370\177\367=\247\312\004=\260[\365<3`\000\275\006{N>Jh\021\276V\337\004\2747\237\036\275\243\306^\273\271\375\030<\247\367\313;\360CL\273\224\263/=A,?\274\013Uf<`\366\034>\223\365r=r:L\275>\363\233\275[\224\214=\323CG=D\374\032\276n\330\266=\347\276Y>\275\255\237\275\324\210\365\275\211\215\232=\370\255\375\275\360\005K=3\266\377\275\267\303\221\275^7\315=\263g\242\275c;H=\203\332\254\275X/T\275P-\372=3&\224=\313\265\243<\rMq\275\304\276\020\276X<}=\254\276%\275\367\216\321\275\331#2\274\220\333\037=\0052\004\274\272e\337=6\213\000=\363\226\205=RV\236=|\n\037>x3\263\273\216\265]\2753\202\361\275\321\235\377=\235\007v\275=\033\r\275YTn=\364\tJ\275\251\337\r\275$`4=\222\322A\276V\202\271\274P \263\274>\267o\275\'j\234\27413\216\274\316\237\270\274\352\367d\272!\231\350=\325\223\237\275\311\234\266=\320\330;\273\242\r+\275\2662\002>w\334\372\275u\313\253\272\364u\034\275\35435\275\374\314\004\276\317\345\342\275\321\266\357=\377\343.=\275\332q\275\350G=;!\005w=,\025\207\2722Es=i\220\215\275a\2244\275,\337p\275\336\001\303\275\332\031=>M\177\344<\003P,>\027\"\324=/\200\013>\003\334\217\275\005\307$\275\016\355\232<\021\207V\275\374\233\265\275\256\225\005>$\001\205\275\230\267|\275O^\300=\231.X\274\340\310`\275h\315\210\274R\364\003=\341\275\206<\323N\360=\n\243\252\275\300\234\\=\255\315\343\275\323b\374;\235\2046\276}\353\243\275c-\243\274P\273\034\276\261\260\303;P\353\254=\347\r\351\275\276-k=\304G\314\275\202\221\312\274\323\206%\275\336=\213<\374$C\276\325\225\254=a\237\252=\366\242\241<\245,\367=\263T\244\2754\336I=\256}\226\275\252\331\214=\345\326\376=\246\025+\275\033\372+\272\032\031\322=\344\376\360\271W\270\205=E\345\255:?\274\202\274\217\356\345=1F\357\274\020[$=\034\362{\275\355\275\020\275\363\335t:\004\212\270\275 \251\211\271\376\277\327=\266\256?>y9\006>\265\3672>-\252\221\2755\323\335=\237\373\365<\214\231^<<\313t\275\027`\">\366t\302\275g1\322\274\376\3355>\202_|=\244}O=\236\370/=Y\036\000=\025s\276=\317\225\246=]\370\312=\271\336\240<\2731\270=\224{Y\275\337g\232\274&q\305=-\302^=\364E\t\274\016\0302\275r\323\212\275\035\211x=\244E\373=\353F\2508\377\257\024\276d\004X=\342E\021\274\022<\206\275\360t\002>\023t\206=\017Y\232=\336B\001\274\264\250\321=\022\374\372=\313\033\204=\243\255\032>\236P\312\275\247H7>;\032\230=\334>\232\275\232\355C\275\372\252\225=\305:\336\2757J\346=\036B\275\275\250_l\275\301\264\311\2754\301+\276\033W\230\275\267)\031>\221\257\331\2758\346(>\317\201(=\240\360\004\276\216\010\374\273f\214\017\275\235i\316=`I!\275\317\356\234=r|7\274)\007=;*\374\361=f\256\221<?\305\003>\213rm:\037\023\233\275!\317\032\275\032\343q\275)4\355\275\317\251\301\275{\334\213=\037Jv=c\331\266=;\271\324\274\0003\n;\214\021\376<*s\277\274\203\360^\273\n\371\000\273\360\0105\275\201\243\202\275\033\340\007\275Zl\t>.\360\206\275\"\304\314\274\211]\275<\337\342\020\274\306t\212<v\006R=\342\270\313=\254?\254=s\256\345\275(Y\247\274X\236\221\275\233\212\010\275\007\256\037\275S\244\3037f\351h=\227\375C\276\224\234\340=wH\261\2754\207\021=)=\005\276\234F\274\274q\t\024\276S\255\374\274b\373\021>/@\024\276\306\017\220\275\261mT<\031\t\213=^D\263\274\224kw\275\037\177\243\275\322\275\275\275\025T1\276m\000L\276\217~\370\274\237\025\343=\340\344\312=\371\363\366\274\313\222$\275\347]\020>\001\226x=\271\211\344\275\000O\255=\317\201\345:\244\262\347=8\351\007\274\235\254U=Fx\333\275\220(3<\0354a=^\334\304\275\305>\226=\t\200\020\276\"T\262<\303\225\350\275+\007\305\275-\277\037\274\2163\361\275{\210/\275\200)\373=<\346?\274\367\222$\275\210\265\277=\2729\000\274\362|2\275z\233k=\'\315\323=\224R\377\2754\230\303\274q\306\276\272\022\240T=O\302\033\276{\321\241\274.m\001=*\214N=\027@\r>\351\376\\\275\215*1\276>\305\205=\013\322\304\275\2064\267\274\016\n\262=\273\302;=vD]=\032(\340=Nge=/\343b<\370\221\261\275\273\007\372:\340.\366\274\303\306l\275\242#U=\237\n\027\276m\371%\274p\223E>\014\0304\275\320\232\000>\'\244P\275P_\303\275\355o\363\275/\242\t<\377\3511\276\2502\005=B\230\340<\256\\\254\2755\026\330=\35516=\'\004Z\275\340UD>\225J\242\275\\\\\320\275J\004$=Q\245 >\320\201?\274c\"\000>/FM\275\202\177\311<#\005\356\275qk.\274\360\362\013>$.\341\275N\353\014\276\n\'\271\275?\356.=\375\231\'>\355\246\232\274\256Q\313\2723\311\020\276vV;=\366\006\200\275b\343\333=\275D\002\275W\251_;6\031\211\275p\363\267\275\024\241p\275\2464\276\275\317\214\271\275\277q\350\275\322R\024\274\337v\016\2752\210\213=/\016\367\274~\nc\275t\373\340\275\265\177\324=Z]\037<\2479\002=\244\206\027>\206%\034=b\3170\276\301a\304\275\013B\344\274E!\256=%\014\307=\'\004\222\275\203\374\222=\317q\226<\013\3405=\263\234\036\276\035\340\270=34\006=\371\315H<\016\310\323\274\314\200\314\273dq[<V\275A\276(\223\255\272\252\2142=f2\226\274\324\202\321\275i:\013\275\2526\315<=\361\243\2744\242\023\275T\260\005=2\3445\275\250B]\275\340\221\203=\207\270-\276\344\357\303=\233\225\237\274oUz\275\256\226\252<\263\261\257\275aP\245\275[\324\261\275\3667\252\275p\034\330\274\003\322J\274\320\247\326=\215_[=\010c\027\276RG\'>T\344d\275\017\000\342=\264\341\306=\177-\221=\372\035\264\275$;\262\275\301\362\006>\036):\276\234\247h=e\233\034\276\221\251<\276\357:\020\276\3028\326;2\336O\275QQ\370\275\034\363\256=\375\251\235\273\255\203\352=3\365q\275\255\252?\275\225\204w=h\276\025\274c\3518>\020\255\007\275:dR\274b\325\313\274\0216M\275\277\355\030<\261\257;\2764#N\275G\321\355=\177+\234\274\271\n\005>\276N\233\275\022\267\235=e\326 =\032\354\231\275\312\002\330\275\305R\214\275vF\274\275\324|\005\276f\032\333\275J\306\322=\223\315\202=\026\013\003\275\262s4=\276_\216=\222\033\242\275%\236\335\275\326;w=\220\247\275=\337\2464\275\377\201\356\275\323,\032\276\375\314>\275q\242%\276 \324\010>\n\211!\275a\000-=\212W\217\275\257F*=+] \275j\212\245=\373\021\002=\224\"\372\275\210\\G\272\240\026\343<%Z\366\275q\r\031>\010j\036\2767e\257\275\242\204\203\2754\272\">/.\350:z\027\343<`2\344=\263\235&=\241\331\246\275\303\034A=%y\020>\351\254\'>\351\364\372\275P\030\377=\3374\203\275\253\373#>{h7\276\3773\364\275\357\243\216\275\020\326\344\274\030\263\321\275\034),>\305k\332=\026\002.>p\0278\276{\351\003=\254\314/=\360\342\223\275\004\2148\275$f\233=\311En=\277\\\325\274\375\347\\\274S|\221\274 \356\322\274\0336\023>=P\335=q$>=\31080\276\343\200\231=q\227\245\275\232\265\332\275j\335\250<\3336\221\274\"N\n>\026\213\004\276\005\033\031<J\332\030=(\327q=:\243*\273Z\213\207\275\367\340\316\275jD\334<8\301!>\033\312&;\224\377r\2756\347\364<\246 \342\275\234\\@\276\212\251:\274$}\374=x\340E\275\372\300%\275\353\303\354\275\245\'9\275\022\010-=\334\341[\275\243z5>\266\317U\275c\236[\274O8\226=\277\270\211=\324\213\331=L\313\014\275\034\002\036=&\000\361\274\370\226R=6\331\025\275\nj\211;P\341\246\274/\002\334\275U\313\211=\303\033\022<\344\"1\2757\372\223=\200\"\377\274\362\300\001>x^\022\275|\371e\275\014\350\016\276R\277\037>K\320\357<z3\225\275u\302\227;,\301\000\275\320\314\031\275&\362/\276\351H\304\274N\277\317=\206\271C=\363\257\3178\203U\203\274\313\255c;\233q\251<\007E\246;\355\247\333\275\242\325\023=v\211\021\276\310<\\=\262*\373=\352\026#=\013~\301\275\t>\\\274z\330\r\275\361%\031=l8/<\024*\316=\005\373\237\275\277\206\253=\364\332\251\275WY/;R\203*\276\032^P\274\200\2363\275s\226\237\275\'4\033\276\273\0149=P\344\262=\303\'\231<MP\314;\3563\310=I\300\300\275\314\036\021\276\356\303\t\274>A\216\275\370\341\236\275\241 \331\274\177 \002\2758\310\350=+\030\002>u}\021\275/\t\003>\026\310\274;\004\310[\274\374\260\004\276\260q\263\275\343\256\256=\213\230X\275\371\206\023>^\266\002\276(>\322\275h\350h\275\000~\032=\235O\302\273\216q?\275\243\3447\276\266\360\037=\014\243!>*%\223=\340\013\312=\314\024\240\274\344C\"<7_D>\220\334\'\275\3760\371=\347U\273=SP(<K\302\">\031;5=\211T\227=\367\356\305\275\322\255/\2763\264s\275A[\000=`Qb\275\332\211V\274@\376\374<TJe=\252\256\214=\237\365\004>`\206\030\275\223]\346=)\236\205=(\310\256\274\323\352!\276t\037\200=\233\347a\273I\265N;D\343\200\274\217V\365\274\346\277\346\275\205\207\307<,\204\321=8K\247\275D\326}\275\225\310\200\275L\204\307\275t\345\007>\264\003\003\275\337\035\271=\200G\200\275l_\200\274\250T\234\275\215G\212=+\035\002=[\021d=\332\206\311=u.j\275_\021;\276o\371\020>\322\'\263\275k\221\006>cq\014\276\375\016\240\275o\372\232\275\306\221\004\275\3061\001\276\356Ga\275\357Mi\274h\312\350=4\334\302;#\023A<\321\215\316\275\340\335z=\254\264\002\275\262\"\377\274\2751[\275\253\213\004>\tr\372=\rN\350\275\336\033\224<|As\275\306\363\272=\\\002\002>\316wp;\333\365\261\273\026\246T\276\322gQ=\026S\241\275h\025q\274<\261\354=v\347\004\275\323o/\275\3478\362\272;\005\302\275%\342\264\274%n+>\302\326\345;\026j\"\275\300$\203<\336\034\263\274{\255\233\2755w\345\275\377F}\274\334\356\243<\230H\302=\330\340\360=\302s\211\275E\2432=\037\203\272=,C\000\276\216\213\255\275U\243!>\304\253\334\275\345]\246\275#\n\000\275^\235:\275\014\254\233=\005\324*<\030\377\273=\213\010\t>b\377\010>Fx.\275L\225\302\275\370\242\222=\253\350\022\275\242\342_\275\003DT\275b\250\334<1@\002\276\374\250\312\275\212}\353=\340\346)=R\225N\275\335\302\324\274\254\357\276=\342I\033\2761d\305=34\243\275\323\3459\276\377\236_\275\271H\260\275NN)\276\"\006==d\237\003\275\215-\271\275c\267\273<U\227\326\274\365I\n\276\201\254@\273O\014\303\275S\334%>\330\303 \274f\307\373=\237\314\214\274p\276<\276Jk\371\275d\004\034\275+\3556\275gws\275\224\221\016\275\327s\035=\323\235\341<c\271m=\376\246\017\276f\301\034>\255-\030\275\364\252F<\026&\221=_[\327=\235Tc\275A\345\201\274.\244\245<\334\264H\276\320\\\231\275\256\261\347\275V\255\251\275\263\324d<X]\324=\247S\004\276\332+\207\274\347r \275\324\t\222=lC\370\272\256\032\273=\243\366\201\275mb\006>#_\357;\005\303\022\276E\357\002>\245\201\320\274W\304\306=\207\016\001=s\207\023=\372z\255=uT\221=\203\324b\274\373.\236\274\\\'\213\275\215\345#\274f\267\272\272k\246\316\274\313#\366\274\256\355\026=x\361\024=\276\210\033<\251\002\372\275U\343\t\275(\200,\275\364\\\207=\353\372\353<\n$N>f\277!\274\007\352\263=\2258\242\275W\336X<.g\333<\270|\225=@}}\275\307j&\276\323A\276\275\360c\004=\315\331^=\314w\312=\367z\302\275P\007\004>5\322\303=\344&J\274\tGM<\325\373\237=\201\331Z\275\'\366?\275\2606\226\274\241u\031\275\267\324\353=\323_-\2769\033\242=`\222\021>\024\341K\275w\304\262\275\317|\317=+%%=\264W\037<\257t}<\372L\306\274i\215M<\220\251S\275\200\227\316\275\311\2230>\307\256\037<\356\253r=pV\025=/\202E=\233\357\001\276\335\244q\275b\005\005<v\242\350=\030Y\271\275\207v\010>v\271%=\375\214\177\2754\035\350<E\365n=?Y.>S\336\036\276Lm(\276#\037\320<j+Q<\264\344)\275\0148\037\274\230\334Q<C\265\026>\203\235\331=m\216{<\246|\005\276R\375\246=\315\n\022=\361\'X=\202\306\t\276\036}\327\2758\270\265\273_\037\274<\177Yo\274a\214\246=Ty3\275\272Iz\275SA2\276\321w1\276\373\231\035\276\304\250\204\275\020#\212:\227\302\333:\344\207\277<\376)V=\t=\227=[\033>=Pt|\275\035\263#>\023\003\220\275\307\227\334\275\034\352\243\275\277\323f\274\016\024p\275\333\345\t\276\204\210@\276\275\307)>W\261\247\275\365c\303=\204\362J</\217\206\274\341^\316=\200\036-\275\305.\020>\353\004\273=D\207\225\275%\317\362<\370\r\217<Vr\240\274\253\226\324\275d\224\366\272\3476\315\274A[\231=}z\207\275\221`i=\276\'\003\273z\201\006>\325\223\203=5\273:\276\004\234\262=\347\233\276<\n\027i\274\256\373><\020\342A\275+\353*\276\020S\277\273\2561+\275\343\344\345=\360\302\315\275\317\037\313\275F\"L\275\265\275\023\275\344@\232\274l\257\"<\027\024\233=&W\366\275\350\020=\275$\212x\275npA\276\341\177\254<\265-p=]Dn\275\371\025\026\276U\370\010\275\366\321*=S\213\234=\372\206\263=Q\300$=\006B\032=N+\372\275\303f\300=\246\230\273\275\037\r\226\274oD(>:^\206=\314\257\'\276M\036\037\275Od\257=\340*`=\201\343\214<k\274\343\274i\375\360\274\316o\204=H\221s\275\212\020\000;:T\007\275\332\271?\275\247\367\260\275\262\313u\275Z\212x\275i\301\n\276j\004&\275\2066\255\274\037z\\\275\306\362\221<^z\007\272\314o!=\210-+<\215v\322=\257L\017\276\357?1\2720\302x\274\016x\347<\271\020\300;\357\350\317<(\212\214=\033\226\337\275\313\0260\276\315\357&\275\322Mm\275\334LE=\204\251g=(\374\"\275\276J(=;\357\252\275S\250\010>?\227\327\275\014\371M<?\365m\275\202+\323\275p\276:\276\371~I>Ux\227\2757[?>)\002\021\275xb\210:1\306\016\276J\236\265\275\233\325\264\275\367;\032\276T\301\333\274\224\035\267\274\0365\342\275W\372&=\367\022\250=\014\244\312\2756\266\254\275&\320\026\276\372\207{=v+\017\275\377\307\327\275\222\272\214=\200\345\364\274\260,\223\275\003\030\035=\002\030n=?u\300<\357\262\233\275s+v\275\322\211/\275J|0\275\314;\202=\346\257\341\275\344Y\010\275\034\251\037=\r~\274<m\262`\273\316i\020>\375?\020\275\373\312\240=\204\365\315=\225\030\020=\367\321\243\2756\234><\364H\253<\327.\362\275!\350\354\275R|\020\275\347y8\275_\371\300=w1A\274\2219{=\323\232\212=[i-\274\224Q\211=\274\223\212\275~\221\007>\231I\377\275\023\037\275<\343\367\220\275\341\233\256;8\017\236\274$\n)\275\026\336\r>\223n\300\275$\300\323=\221~\004\275\001\327\330\275\327$b=%\356\200=3s\336\2753Y\n>)Pp=\207(\201<\007^\226;~\335\250\275?\353\005>\363\3160>\221S\001\276\203\277\336;y\315\371\275\000\230\331\275gA(\276\234>\n<J\310\242=\270\362\251=\'\351~\274\367\345\316\275\344\256&\275\2643B\276\336\272X=\243#\034=*\033\017\275f\320B=0>\232=m\025\231\273\245\213\010>\377\315\017\275\301}P\274\375\322\252\273La\327=\340\023\216=\270\032_\275#\364%\275\263\017\302\274\2371\373:\250\320\243=\351\374\326<a\325\207\275\264\034\366=\'\032\212;5\236D<$\266\001>\261\311\016\275\376\262\020=z\310C\275}\364\372<\213\017\307=\371\302!=\346\004\266=\337\204\207\275\307\006\375\275\345\263\367\274\255lB\275~\223\037>\013\n@\275M\324\206\275\207c\207\275\302\275\002\275\356n\277\275\001\340\016<\032\336-=M\346V\275H\211y<\241\206\335\275\360T\333\275\371\351d=\007\246$>\017\000\324\275\221\261\216=ZvG=\333)\022\276[\367\313<6\365\356=\232\023\321\275CO\n\276\001\207e<<Iq\274\205J\263\274\305\244\203\275\343\261\254=\370\307#<\302\245^\273(\364\r\274g\361\010\276{\026V=)\203\312\275-\335\254\275\346\212\327\275\000E\331=\262\371\r=8\007\215=\261\004J<j\033\223<\264\265\302;\323\003\017>8P*;cH!>u\032\247\275;#/=9\262S=\347\353\262=\220\346\020\275\207\356\205\273~\202\270=\036V\375<\317U\357=\354C\341\275p#\327=\333\213\004\2758\263.\276\300Q\330<\022$\232\275z\377\234;d\033\241\275\324\325\242=\304g\027\276\314\034\006\275\203c><\263\212B\276\264C\231\273\205\307\2179\245\232\213;\024\311 \276\353\351Y\273\374\330\276\275\007\033\245<\215\233\342<H\271\234\275\032\365\375\275m(\016=\250\322\351\275=2\270\275Y\205\212<\375$9\274\223\201\212<\373\n\001>\244g\002=\377!\265=F+\270=\307\032\021\275\252\244\033>Gt\303\275\2775\022>\217\316\351<\246\367\207:\2638\256\275\002d^=\324\375\001\276\326q\372=Q\355\232=\"\237\302;o\311\036>\276\t\253=\254\362V;rjD\275r\356*>4\177L\275ON\020<\375\321\013\276\372\020L\275>`\237=B\320\211\275\205\347\361\274{\256\213\275I\023C\275\253[\035>Q\335\340=!\222\256\275\267\310\233=(\000\034\276\245\313\230\275\243[\314\275\022\241\240<\013\004\353\273\004\253\346\274\306\222~=89\037\276L\263\003=4\262\356\275\017#\227<\222\225\002\276u\200\250<\244m\210\275\225eG\276\033#\304\275\306l\337\275\367\213\376\273\247\257?\275\220\017\346=>)\347\274h\344*\276A\330\377<X\246\325\2752\001\255\274\332Rz\275\034_\334=F\247\217\275*\246\315\275\214\226+=\303Z\351\275\251\017\362\273\264\313\352\275\304\361\243\274\365l%>n\020D\275\260}\010\274\026\024\357<-\304\211<\245\213\330< \221H\274\002o\037<\272\215\223<\377\343\260=\0255\336\274\303B\256=\023\326\032\276j\352\230\275I\313c\275She=X\305\016=\2536\222\274\343\220\271=\275m\027>Fd\202=\303\266>\276\027<\r=\315\'\335\274\022\025\030\276$\323\246<\225\335?>\001\331I=X\"p=\352s\244=-\304\207\275\325\360\254<E\316\350\275VN\246\275\275\274Z\275\350\tE\276\304\354@\275\345`k<\300\311\344\275\263\337\222\274\214\305\201\275\261T,=\021\216\365\275s\002\r\276\027\017\326\275g$A\276\036V\213\274(\363\303=n~v<>\357\247\274\255\334K>\002$\344=z\2442=\215\244\007\276\274w\222\275\312\3434>gR==n4\027>\257n\333\274{d\020=K\327\354\275FM\343=\332Y\331=\217\010\026>V}\354\274]\232|=\221\020\n\274,\216\r\276\343\302\221=\257\240\336=!k-=\324\355\255\273\210\244\367\275]sn=\202\310\234\275_#\232\275\007\305\232<a9\313\275\233\226\351<\2569\232\275\226\037Z\275\333\372]\275\252\206\202=\363\267\212\275x7#=\224K\016\276\217\005\347<q\222\217<\006\321\027\275|R\'\275\325\325\262=\003\371\251\274\224\374\023>\254m\210=\341\326\342=\320\307&>\213_\320<\375\253\341\2752\253\211\275\360=O\274\201c\026=+-\373:\213\261\024=\351\237\304\274CN\301=C3\227\275\264K\020\276\032i\232\274M-\251=~\242\037>\222\340\035>\316\215\275=\206\016E\275e\231\276=\351p\004>(\350\372\275\032 E\274|\3511>L|\310\275\326\377\271\274\222b\223=\013k\224\275\324\013\237=\300\253\372=`\222\241=\312\335\243<\234\240\224=\204\020;\274\245\275:\274\354`X=\246\336\245=\270M\302=d0)\276`\265\236\275V\203\273\275 ~\317\274\371E\327=\224\240\t=p\t\247\275\210\301\354=\3465~\275\251r%<\020\326\026\275\311\276h\275*\326o\274\262\254B\273\271F2>\371\363\275;0\341\225=\375?\237=\351j\'=\323=\003=\377w\212=\264c\257\274\010\371\263\274p6\277\275z\237\231<\224\265t<\253R\224=Yd \276\275<\326\275\342%\313<S\375\257=\2078_\275\344\244S\2752g\227=$ \222=A\347$\276\016e\275=\271\252m\274(h\327\274\312vU\275\235\254\312=\037\r4:=\366G\274\243\027&>\350)\354\275j\323V=7\276\305\275;o\211=\275T]\275^m+<\275\376#>0\310\224\275i\204\270=\314\'\004\276\243\r\t\276\266\356\273\275\370\023\t\276\344=\277=\202\037\315\275\023\267\212<\222\365\326\275\221K\213=\242\r\211=\311\277M=\234<W=w?\000:\006wN\274\312F\226=\307\224!\276v\226;\276\247=|=\203\017\307\275f\344,\276\213>$\276\253\014\276\275\004o\227\273\345\216\255=:\373\275\273\017E\200\275`\370<<\267\363\233<\366\n\035\275e\220\306\275\223\353P\275m\304\270=\262\350\227=}=\000>\273u\203\274\325\022R=\253\302\367\274&S\300=\342\270\r=\320\277\340\275\222\'\306\274I\254\035=\363\n\033\273l|\267=z1K\275\375mK\274\304\032\016\276o\273\212\275\2042\222\275=2B\2759\325!\275X\001\316=\331\356\003\276\310\274\370\275o\250\024>\375\023\025=;r@=\261\024\332;L\336-\276\215\260\034\276\252\264\353;lM\307\273u\213\320=\334D\031\276\247$\340=|\317B>\031\005\362\275\351\327t=K\010Y\275\001\3664\274\n\342\324=\201\204\032>\013K\204\275\200\317\234<yE$\276G\264C=\273`\251:j^S\273\322;\362=&\320\316=UH\222<\263wX\275k\234\222=\303u\315=\207\337\002>\240\241i\274\357\314\t=\356u\232\275\263H\346\275\317\232\371\274\247\257y=\365\224\257<ZO\023=\273\257\237\275,\311\376\274\361t\234\2732\001\246=\254\322\247;\307\035\244\275\366\355\010=\3451\370=U\022,\2768\034\212\275QZ\031>Z\214\260=t\345p=~\335\214=&\202\344\275\277\360\201<\241\371\310=~\371\366\275\330\214/\275\213V\254\275b\273j=\317\333\350\274\004\217\263\274/{\r= %\325\275X\317%=\336\315\275=3\262\377<ud\233\275r\371\206\275\272\3355\275\020M\306=)\310W=XF\003=\223Q\336\275jw\363\275\265\001t\275e\371t\275:\236\345;!r\323\275\210s;=c\322\245=cPD\275M\'\223=\276\213\203\275c\367\030\276\211I\366\274\177\r\t=L\331.\276\334\000\036\276\263\026\210\275Iw%=\244m\265=01\263;\237\2414=\223x\000=u\221\360;\262]\340=\275\350\263\275\023\0222>\317\265\'=:(\336\274\206\031\033\2766\332\273\275\326\371\036=\310\357\r\276S\033\332=\374\034\206;\206\360\244<c\337\216=<\312\352=\224\236\365;\023\327\205\274\267J\222<\3715v<\237\342\335=\376\337\345=y\355\224\275\252\024\232\275\004\274\030\275\345\373?=\205l\275\275\0308\326\275\332\301\254\275\334\354\020\276\026\203\316=\006_*<\036\035\265\275\271r+\275\301\222-\275!\352\212\273\236\212\000\276\356\356\004<$=\363\274H]\330\275\006r\276\275\246N&>I;\254\275\335\017\363\274\232\373->\347\353\024\276j\235\257\274\350\230\253=\261\217\220;\230\002\332=M\332\350\274\265\230v\2750\255\330\2757C\336<\214s/\276\r-+\2754D\006>\374\261\333\275w\005\274=v\205\266;\236\346\004\276P)o=\353\273\305\272\241\262\000>*\311\300=\005\346_\275+ec=\254f\222\275\260\277\2209f\214&=%0\200=\\\301\024>\361s+>k\213H\276c\3629\275\366!N<[\264,>\340\234\316<`\006_=9E\200\272*s\r\276\224\002T\275-\323\317\275j=\276\274\326\371)=\233\362d\275\345?Q\275\227{/<8\336\367:\344\034\377<,\016\256\275\362H\215\275\301\321\006>\250\224d=Tw\370<*\326\200=e_\326\275,\353\025=\036\016\324<\207\320\006>\000|\332\275\274\312\026;b\353\370\273\354r\245=\224_\314=\'\237/\273\265\260\215\275\3652\211\275\377\270\226=\265\314*\275\277\226\030=\231M\314\275\247\346C\274\367W/\274\035r\351=\377\335p\274uN\351\274\344\244\025\276\351\314!\275\260\005\241\274\275\367K=0m\251=\276=\365=\353`\260\275-*_=\306\001\217:\313\360\227=-\271\220<\317\005\025\275\242\237\244=\034\027\013\276\036\303\355\275\355\371\242\275\344l\033\276n\320\312=]8\324\274\372\352\272\274\031\036\222\275\225\216D>:N\310\275\317\347b=\004\266Z;WM.=\325\323Z\275\223\035\205\274\310-\251\275\351\260\003<\027v\226=LQ3<\021t\233=2\331\016>\350\275\325\274J\031\225=\335j\224=0\0370=\351;\276\275R\014\367\275\237\247s=\340\245\022>{\216\257\274PI\360\275(E\336=?5*\276\017\207\346=/H\200=\353VH\275\022\037\345\275\3313\237=v\260P=P7\240\274\245nC\275\210\352^=\030\016\330=\344p\277\274\257:K=\314R\336\275\265\272\021\275l\002\307<\240\326\360=\031\237\367=\351\361\\<\274\241\177\275\2773>\273,\372\002\276\245\256\234\275\362r\263\275\307v\245=\000q\275=;5\370\275\245\235\243=H\250\347\275E\371\302=\266(\221\275:TZ\273\343\177F\274\206C\024\275\343k9>^\241\320=sF$=\237(a\275\320\215\r\275\275\360~\275\215b\261=\323p&\275\260]\304\275u\372\236=x\244\317\274\247\244]<;\206\341\275\276\024\016\275u\321\345\274\"}\016>\274J\">\013\326%>\032:7\275{\304`=\023\035\014=1\006>\276*\240\201\275\201+T=<>\330\275\333 y\274\233X\370\275\365\250\254=\224\361q\275\342\231\'\275\373\020]=\037N\374\274\345\025@\275\273 \275\275\344\242\017>\035\'\355=\253as:>=\007>\273\274\344\275{\272\267\275Bp\027\276e\313\';+\366\337\273\346\243+\275\354\213\027>\330\270\023\276\005?6\276\267\306h=\000\372\310\274\216\016\234=\332\'\336=\207\3219\276\254\014\334<\013k\247=4\rQ=g{\213\275\"p\032=qsC=\253\376\356=\366\224\212=]e\363=\346\330l\273\326Y\366\275\371\360\304=\362]J<\335\353\035\276\314\265\252=i\315\326=3\031s\2735x/\276\216r\014>*\003\016>U\"t;\250\004\370<\242\371\'>\031\321\304=\177e2\275\026m\273\275\361H\033\274a\260A=\3228\222=\255\325\004>\333>\r>\327A\254<\207\024\277=\374{\031\275\345\005\310\275\270,\025>\300\241\315\275\370\361\333=\rl\363\274\3038\352\275\2060\023<\220\256\260\274\000\344=>\267\275\'=\225\020@=%\220\314=\006\246\375=\005\203\364\275==\210\275<\037\027=\377\000\337=\306\234M=3\357\027>w$\212=\335\222\"=\350\213n=\3415\237\274\307\346\351=\'\327g=\022\201\234=uH3=\326<\300\275\'\220\345\275\311#\311\274T\262\216\275\241 Y\275\370\240\252<\233D,\275a\203G=\205\031\330\275\250\251\231\275\222h\311<*\335\214=\230\025\024\276\261B\014\275\033I\234=\247\001\347;\365eb;\241\227\200\275\250\365\223=\363\320\035\276\026P\014\276\2462:=P~\r\276l\343\331\275A~\266\2758\370&>o\263w=\000Kf<)VP=\363!\227\275C`.\275\353\315\321\272w@\024\2769\275\272\275\343\024$\276\\nG=\271\364)=L\276;\275S\324i=nG\220;\232\241\t\275\272m\305=\256\353^\274\264\253\312=\207\036+>\275\2154\276\032\n\314\275\324\031\">ww\220=;\362#=\006|\234\275n\025\013>\\\267\277<\301k\247=F^\234\275\352\336\020\276\2404\022=\306\274->-\316\270=\356\034\330=\263:\273=\253@\334\275\r\202\365=ce\207=gi\316<\024\222\002>\272\377\223<\316\366\247=?\221\001>C\3659\276y4\257=$\252\027\276\242\257\214\274\243\006 \276FG\212=\344\340\306=<\344Q=u1\372=\360\332\t\276;\003\005<\212\345\311=\312\316\306=&\276O\274\266(\311=\341\201:\276\317\220\260\275!CD\275f\007\204\275\277\343\323\275\214\330)>qp\375\274i\316U\275a\005\327\275.\264\007\276-\307\037\275`<\355;\024\177\001\276`$\022\273\363\321\277<\312\324#\274\334\024)>t\346Q=]`B\276\354\236L\276^C\001=\350\310\021\276\365\350\254\275\227a\305\275\320\330W<\207e\343<\000-\326\275\200g\232<\363\326\206<\260\214\034\276\356\t\320<\263by\274\311\032\356\274\013\357\036=\375nU\274\022\362\215=\362,\265=c\315\025>\326\341\003\276\274\262i\275\301\231K\276R\025\230\275_}\005>+t\253\275V\r&\273a\263\226=j\230e=\322\256\007>$Y\024\276p\300\277\275)\325\264\274\240\0343=\002\344{\273\371\210\373=}\206\367\274\207\226\271\275\237\033\204\275\324\205\351=\312\275\270\273\312\022\347\275\353\351\021>B\370W\275\327\n\007>\225\252w=\2436\354=\215\372\241\275\310M\236\275\312X\335\275\217.\310<\260\255>\276\0342\243\274j\341\013\276\300\346\352=g4\237\275+8*=\225\240\t=P\323]\275\276\201G<\351\032N>p\200\351\275\230\234\221\275`\270/\275\016\2628>\251\324\210:8a\336=\230\356\033\276\322\016\245\275\310\327\341\275++\231=t\215\'\275\221\205\263=\017\201\366<\025\261\"\276\371\005\207=m\0343=\321(&>\337\347\357\275\207\203\354<\362\2441>\200\276\034=\263\034\n=\316{+=\266\035W\275\026\"B\276\\7W=q\353\301\275A2\211\275_I`;\343\243\366<4\357\217=\035K}=2\036R=\214BY=\177A\021=!AG>Zx\272=\245\351\342=\257\231\364<\345\245)>\353\256T\274+I=\276\300\321\034\275\005\344\302\275\205\271\356=\204\307Q\275\273\007E<\207\370\004>I\224\006=gN\376<\224\332\270\275N\327\305=\331\257\300=\373C\210<\035\202\272\274\354\371\343\2753\302\214\273\226\301^\275\013\347\023>\2365\234=\327\334\034\276\"\024h<bZ\240\275\256\240\243;\\\2112= \242\022<_\030\206=@}$<\364F\027\276t\t$\276\214\rr\274\237\020\013\276 \3534\276\266\2472\274/^\206\274\307\234\035=\217d\254=\375\226\375=\203[\r>\017I\330=LZ\031\276\233\237\375\275\350t\'=\203\325\233\275\231\236\257=\3415\307<\360\215\324<S\000\202\275\274\037M\275\004\025\227=\262{I>h+>=mF\234=\360\337!<6R\006\274\344\240\324\272#\233\373=r3\347\274\310\372\023\276\333wu=\020lj<\201:4\275Sg\031\276\245P\225=\027\323\240\275G\301\256=\270jd=x\315<\276\224,\321\275\310\326\366=\3161\017\276\355\036m\275\006y\004=o\212\014\275\205\375\224=\027\017\325\273)\347\220<\245f\"\276\321\235\r\276\241\200\210=\237\\\020>\260NE>\313\201\010>Fa\241\275\tf\244<%\347:=\224N\t=0\266\216\275\322~\272;\2326\215=\010J\224=\262\022\031>AG\t=\\\245\376=\002Ye<P[]\275\341E\277=\002\216\004=\315\273V\275\223\320a;z3 \275o\335\351\275\247\003%>j\243\017\275\352\213\'<Np\350=\355i\351<\006\217]\274\257L\007>6sU\275\345\315\224=-f\363:`\341\023>\250\016\301\275\324i\306\275\265B\212<w\350\311\275\355\232\026>\347MO\275\365\327;>\267p\364\275\262:\212=\371\324\032\273{\363\022\275\000%\365=j8\314<C\342==\311\275\301<\250\025\222=\032~\334=\251\357A>\023\350K>\226=\356<b,\277<E\315\027=\216\316:\276A\267\324=y1\334<\314\364O\275\273n3</\202\r\276\336\321\023\275S\211 =\242;m=)\220\003\2767&\026=A\235\246\275\256\327\277\275\271\r\021\276<\212\216=\016\234a=\024\243\307=\370\254\001>\232\237\000\275\233/^=\317\237\242\275^\3069\276l=\032\276\036\336\010=T$\027=\023\305\376;N\024\301\275\234\3730\273\357\240\243\274\3754a<\006\245\274\274s\314\004>K\360\010\276Uk\234=@\315C\276n:\273<\265\250\216<\224\304\027>\332\270\275\275\005\264&\275\252w=\274\027C[\274\"-P\275\251\030\014\275\243\314\256<\362\325\277=p\237\027;\276\225\276=mN\370=\353C\373\273H\335\251\273\342\2729\275\004\246\362\274\305LX\274\3746\271=U\031\234\275+2\014\275\'\235\312\2753\004\343=\230\037\362\275\351\327\026\275D\312\016\276\202 *=\247\355\225=x\354\364=\006\2741\273\270\343\213=D\221I\275\214kr=\304\364\212<\302\002\217=\377\371v=\202\274\317\274\360\232\377\275\034\226\331\275T\263\027\276\300\313_<]k\306=2\225_\275i9!\276_\004Y<\325^\352=q\233D>\364\241\013<\210\231\234=\255\347\t>D\352I>\035\206\270\275\217\242\243\275*\017\021>\241\210\316=g+\251\275\202\315\301\274\207\016\334\2757\240\216\275o\\\227\275\237\025\203\275\345\307\300<\270e\303\275Z\316T\2753[\370\275\003\016>>n!\346=z\246\"<\n\217;=\3705\260\275\247\212\034>\371u\200\274\263?\231=-\335\310\275\223\3750\275\201\371$=\233\340.\275-~\317=AH?=i\'\227\273\305\310\034=X\327\236=\302\347\000\275\375\272\023\275:\270;\274\022\202\033<\363F\223\274\302\274f=@7\236=\265\266%\276n\371\006\275B\357\022\274#\374\352\275!7\002\276\374\\\252\275VXL<<\210/=\004\232p\275\206\341.>\253_\257\274h\203\010\276\225wO\275\027O\242=`kS=\354\026\267\275_\022\203\275\353{\330=a\213_<\352\375r\275\211\270%>,\tv<\344\232\245=\306\376\202:E:\207;\306vE\276\227\236\273\275\203\226\272\275L\224p=qy\304\275\270m\034\276YT\264\275\306dG\275~x\003>\232\361\321\275S\347\337<r\204$\275\014t\255\274\364\370\024>\302\306\326= \033\325=8\356!\275\034\261\223=/\256\304\274\325i\r>\375\021\236\274%\201;=\271Y\006>E!\236=\314\201L\275n\312\003=\364@Y<S\215\302=\375\233m=\355*}<\207\266\367:)\214\364=g\024\001\276\241\223\333=\243\222\371<\342i\252\275\301\034\374=\226B\265:@\234.>n\210m=\021\307I=\252\307\275=\376\240\227\275@\247\001>}\362\013\276\321\022\"\275\2479\323\275\360/\026>\366D\346=\264\316\r=\314\355\022<\273%u=^\007\376=K\024\002>^\3764=\311\001\250\275\006\374x=y\227\235=\005\271\024\276\005\266\345\273\244\3048\274\313\034\t\276\027\206\325\275\347\3508>g\231\035\276\264T\"<4\350G<M\236\302<\307{\333\275_\367\204\275kv\357\275\214\343\374<\265C\327\275\370\234\\>&\357\343\275X\006\324<R\031\254\275\302\217\365\2751X\n\275W\361\217\275 \232p\275X\312\344=\246\361\271=\032\2015\274.\2615\276\323$I\275\202{4>]I\233=i\272\221=\335t0\273\235(\004\276T\000z=\234fA\275Q\252\000>\026\307\034\274v}X\273\267\322S=i\316\274=K,\023\275\265dS=\244\021\217\275\363\231\243\275\325\225\222\275_\276\r>;\351\207\274}S\222\275\231\203\007>:0\202=\252\'L\274:\034F\275\345\322\273\275\035\252\035\275qo\354\274[\211\000\275\311F\r<\302\021\320=\"t\013>sdK=\215\2520\274\301\006\023>\325\013\335=\333\357N=\244\203\013\276x\355\215\275u\332\026=\367c/\276\030\316\212\275\211\306\300=\222T\230\275~wj\275\356\361?\276\241.T=^r\005>\037L\032\275\023<X;\362\374\'=B\3672<\224wl\275U\3637\276fT\026<\032\367\336=\006\317,=\340v\031\276\373bC\275t\2077>\200\037\223\2752\336\321\275\016\312\360<\314\362\325=\301\300\345\275\275\373\376\2756\355G=\243?@\275\rT\206\275\303@\302<\303\331\000=\245\014\332\275f\263O\275\323\3128=Zh\316\275\031r\037<}\321\227\274\204g7=\300\200\214=b\246T;0\275n=\343\3227\275\326\245h\273\224\326\313=\364\277h=\013Jq\275>\204,<\310P\342\275\355Y\000>\313\025\347\274{i\023\275<=\302=\024\024\365=\247?\224\275.\303\002\276\214{\000\275\327\210\313\274\244\023\246=G\014?\274\245\2261\275\233W\354\275\231\344\r\276\010\232\020\276i\'?\275\274\030\373\273\372_t\275\"\217\307=\236\301K=\207\014\346<\3350z=C/F\272\231\377\324;\272\315\221\274{i/\276\241K?>\231\373/\273\357\016*\274^\211\222\274\r\263\035\275r(/\276?\365Y\275m\351n=Ju\327=\326\314\327<BX\305\275=\335\232=\033\316x\275\3562\243\2739\254*\275B\244\244\275\034\212S=\r3\362\275#j\372=\321\265\014\276E\n.\276\246k\344<\216\300\006=\336\007\326\275\324n\377<\002\324b\275\366\315\004\275\336\207p=\200\357\010\275\215?f<\266\212\333\273=\273\372\275>\230\346\275\261{\276\275^\324i\274\244\276[\275=I\304\273\215D}\274r\322\203\275\003/7\276U\246\331=\366\364\177;y\233o=3\237\337;\3551\025\276x[\001\275d\333\344=\335,-\274I\356\203\274\035\010 \276\005\'\233\275z\004\344=\205\231j=\247\tw\275\217\250\232=\222~\024>C\350\262=q\026\356=\224(H\276\035\313\256<:U\303=\302\343[\275\365\342(>\005l\315=\214\201#\275NdK\275\311u\377=\272\331\246=\013z\221\274\307\303t=\016\330V<\242\r\037>n\033l\275\307\314\220=B\031\212\275\345\264\365\274\257\255d\275\2262d\275~\234\230\275\366%K:\205\1773<cU\364=\3078\226\275\251\257\316;\215\253\211\275r\031\006\275Z\352S=\321\225\010>\031\354\374\275\352\2135>Y\361\332<\326\016J=l\014\364\273\017\217\370=\335\327U\275\017\326\022\276\232\360\024\276\325\317\024\275{CC>\303\010\313\275pm\024<\225\241\227\275\267\363\023>\3212\364\273\366F\241\275j\304\352=\3568:\276\3242\035\274\217\313\004=k\366\367\275\032\337\357<\347j.\273.\241d=\t\225\241=\204\231\326\275\3713\010=\026O`=]c\206\275,\234\005\276\002\227G<R\362\375\275\0365\353==\252\"\276j\335\006\276V+\010>\276\333\305={\302\221=\236(\251\275>\332\036>\241\021\375=\30772\276\365l\"\276\rf\226<\334S\354\274i\204\256=\327\274\265\273\2270\330;\201\310<\275\232\243]\275\003\272t\275u\005\220=\2255*=\002\362q<\221\310\007\276\340\206\204;@`\204=\033\301\243=v\332\303:]\r\322=e\240\243\275\320#w\275\211t\004>3\277\252<\001)\202=\013e\217\275\022*R\275\332\274g\274\230\347\'>a^\245=\2221\260=/_\227\274\022\377\322=\255\021H=<\353\207=el(=~.+\276\307\376\343=n\303\032;5,\217\274\031F\317\275\336\362\014\275\360\352\261<\252[\221=gL4>\233}\2339_\206R<g\313\222=R\020\224=\264\203\234=L\314g\275n\ri=\304n\225=wx\225\274?\220\353=,\374H>=\253\222=\347\201g\274\231\371\034\276\037\t9\276\261\265\355=.s\256<\"\242\312;>\277\217<\331\351\334\275\360\270\003\274\031\360I=\253l\322<uT\347\274a\250\276<u\\\034:U\275\324\275\374;4\275\251V\027\274\327\372\321=;\035\036=;J\255\274\202\275\003\275\215\333\272\275\032?k\275\245\353\275\275\345\255\022>6\237\023=R:\213\275wr\343\274\022\"\372\275\274\354\326\275\355\000\220=\246\222\270\271\031\234\261\275>\214\'\275u\314P<\002\375\246\274\325\204\326\275\245\036J>\r\005\236=\352\206\025>.:\262=\273h\216=\'^\306\275\270]M=\262\206\273=Q\317\004\276H8`<\n:G\274 o]\274\273\330\315=?\324\007>.\3065=\373\342\006>\037o\220\275\235j\204=Y\3521=\330\340\277\275\244*\217\275;^\244\275\206C\275\275\237N\227;\303\225\205\275t\257\261\275\217\252z\274\335\323==\213\020\304<\237\360\031\275T%\336<B4j=:\032\276=\377D\340\275\013>A=z\261N\275@b\260=\254\332\031>\000k:\276Pd\022\276\223%]\275\304Z\017\275!u/>O\272.\276\366\273\010<\013\333\270\274\n=g\275\375\017\360<\233A\220<\003L8\275\226\205\300\275G\217\200\275~\277\374=\r*e\275o\306Y=\247KK=\305s\032=+|9\276V\0024\276\206\347\331=8\3002>\332\366\343\274;\333\340\274#\377\265\274\362,P=a>-=V\347>=\003E\025<\223o\022>N]\t\275\233Hg=\323\376\216\275\354\365\256=\255\265\237=\200f\025\276Kq\363\274\273\366\254\273w\243\242=AW9>k\243\315\275Q*\010\275f\261r\274.N\316\273\273\341M\274\320h\365<\205\312\356<\335.d\275-\360\010>\300\277\"=\'\2627\276T\370\220\275\373R\"\276O\344\246=7\375a=\315\223r<\362\306|;\343\347\371=\312\344\002\275\2167c\274w5#\276\2651\204<*dm\275j.g=\307\314\223<\211q\342=\200\312\305=4\240h\275\001=>\276\204FN<\261\374\360\274h\000!\274\260\203+\274\234\356,\276aE->WX\356=&\337\n>\222<L\275\347\260\027\275\026Wo=\203\344\361=\021\3469=\363\224\177=r\241\"=\\\242(\275#\220\235<\346\0241\274\250;\340\274_\036\014=\316\266\267\2741\302\206=\332PI=k\275\265;\235Ny=|\363\312<<\r\010\276W\263U=\022\252f\275\201%\205\275\375\302\247=\331\324\317<3\275\240=\033f\035\276\205\267\251\274n\034c\275*\302G\275T\354}=ut\246;\003\211\216;$A\332\275\246\r\375\274d.\032=\327\303\021\276\250\331\377\275D\357\204\275\016\n\261\275\354\373\035\276j\263\254=\351^\t\276\216\212\224\274\320\262\"\275N\251\322\275\016\261\203\275!\275K\274\237\356\223\275\240\365\007<P9\253\275\026\262=<:#S=\3548\262<\331\345\276\275\211\204\211\273\202U\r\275\332\365\t\276\010\233\333=Y\021+\276\201R->#UD>\370\256\250\275\353\031\357<\022\034\253=m\307\240=\303^\033\271\306\030P=Q\372\314=Z\037\331\275\337\224t\275\001\3479\276\225\316\237\275\327\366\370<RGe=Z\341d\275\374FH\275\322\204a\274?A\017\275m\204\006>\317\027\307=|\271\230<<B4>\246f\323=\335\265\\<\271l\217\275\024(\037=cc\032=\306\035\214=\331\177\371<\260\372\212=C\263\273=\272\252p\275N\310\217=\233\031@\276\312\210\341\274\006\302i=n\221\274\275\373\345\260\275\031I\214=\341\373;>r\343\220\275\003\372\221<S}\224<\n\327\243=G\301\373\275\257H\003\275\0274\'\275^\305\320\275\331\010\002\275\030~\303\275\016\3627=dm\003\276\037x\236<I6\214\275Q$\302=\n\024/=@\313\244\274\0054\030=\226\236\351\274QN\265\275\240\017:=]o\005=\337\226K\276\350`\304\275\377e\n\276\306O\360\274MV\207=Z.\226=9W0<L\341\254\275\217S9<\307\177p:\220\304\236<\205\266P<\275\203\345=\264\276\334\274\331`\366\275de\014\276\230\262\224\275\366\264\221\274Q\224\334=%\215\230\275-q\022\275\357\3244\275@\261\320<D\216C\276\"A\263<-\243\002\273N\350\246=bp\204=HY\207\275\237\024\033=)t/\275R-5\274\266?\267=W\3521\2769\177w\275k\241F\276H\310N=\226\275\210\275\"\350\207<\354\210\241\275\365F\354\275\265\365\224=\032\234N\275\375\350(>\204_\222;}2\204=\365Vz=\230\345\201\275\000\320\022\2755\365>>N\357w=E\002\025\274\0330\331<_d\312=\357@C\275\317-2\275\202\'\244\274\224\243\202\274!\355c\2736\276\275=`|\350\275\211\240\234\275\330^\332\275m\024O>\002\315\244\275+x\350\275\322\244\252\275\300Z\236\275IN\300\275\322\036\374\275\233\373Z\274\374J9>\273~\025>\357\251A<\273|\217=RE\005\276\214W\353\271\335\327\037=\232\350\260\275c\377\027>\224\007\246\275\230\323C\275\3445\243;FQr\275\364\315\230=\306o\341\2756\027=\276\373\177\010<\005\016\312\275\002\352\016>8\376V\275BsD=\342`\327=$\037\217<\3658\001>\3433\001\274\0379\353=\331\312\271\274(\025\235<\374\2005>\037\337\363=_U\363\274\330\330y\275\330|\"\276V\317\336=\275\336r\274\334l\273\275\267\370\334\274\241\017\013=\005\315\327<\207u\341=\006\276\277=\036\347D=\212N\"\276Z\243:>\305\001\343\274\323_D=\337\253s\274\221\306m\274\235#\201\275\n\270\032=1\r\036\276\354\004V\275\370\305\002\276\242fU\275\362\331\370=A\270\n\276\310>\010=O\252a=\355\231i=7G\n<|\336\236=\331\241\241\274\007h\262\275\335\2408>\243\036\023\276\274\3149<U\316B>\365\335\027=1\2018=\005\277\245=\3258\213\2753\343\205<\260F*\275d\"\310<\267\330\261<\303\347c=[b\250=#\273\375=\014-J=\242z\210\275\301u\362\274\201\367\231=!i\237\274\006ln=\356\013\n\276\313\307\361<Db2\275p\214\013\275\260\277@\274\252TN=\276]P;[\361+;c\262\030\276\013\304=\275\013\201\033>Ega\274\215\307\312\274\315\244\267\275\r#\354=m\\\347\272\350\226E\275\tp\263<*L\250\275\023\227\343\275\305\234t:d<\324\275\"\214H\276\327\031\030=\243\2326=\310\233\303;u\251H\275\013\211\004>\\G\265\275\036gv\275\264\327\344\274\005\265\274\275\344\352\355\275\264\324\023\276|Y\256<[\202\310<\nZ+\276B\002\027>\016\001b<&O,=\315[\241\275<\345\214\275e\344f=\036\217%>\364\037Q\275K\365K;\0249\276=\027&\376=\345\254\033>\322\2342\275\262\376^\275\376\017\031\275\205\343&=\342\375\034\275\240\316\340\275\004J\371=cF\262\275\260\314\347\275J\257\371\275\375=C\276=\316i=\356\325\244\274\254:\305\274f\230\374\2751\014\325\274&\220q\275\273\301\222=B\334\370\273[\300\243;H\013Q=\371^\214\275\371\026l\275\207A@\275\220\224\263\275\212h\236\275\256>\036\275x\264\331=a\300\302=\340\252\230\275\355\223\010\276\352<^<\333S\377\274S\364\371\275\352\367\352\275\177N\021>k\\\270=Xj$=^\375\025=\257~\023<\364\337);\213CU=_\004\315=\314k\036\275\013\254\234\275\014\341\214\274\352\250\r\273\223\340\345\275\317\225\245\275*?\346<\342\312\007<\201n\010\276\337\234|=\017\267\035<\n\030%>\3326\016\275\317\201j=\340\263\037\276\313\310\'>;\245\272=/\221\335=\001\344/\275\202<*>\270e\327=\352H(\275X\036\216\275\244`\'<[\241\227=\034u\020\275\362O\256=\007\321\375\275p&\335=\227\375\362=\363K\240\274\223\243\336=\326j\333\275\307`\315\273c}\305=f\177\010>2\2616\276Y\027E=\274R,\273\377f\023\276$(\300<b \326\273\277\256\032\276pO\255=G^\017>3%\345=D\346A\275O\302f;\036\233\256\275\037\004J\276}\014\307:;D`\275\016\334\343<Rk\266\275\020\377\326\275\343\360\311\274\013\316-\275\225z\332=\203\261;>>\303\205\275\354Q\004\275\262m9=\276\311\265<w\242~\275\367\213\r>j\222\255\274\205\017\201\275$\t\232\275_/u\275\333\242\027\276\364p$\275\2273R=\350%h\275ah\246=\372\304.\275\031\273\225=\267\217\n\275\033\367\362\272[M\261\275i>\210=Y\364\373\275\307\262\314<\355!\232<\006\266\362=\306\312\243\275\244w\372\2751\366\330\274`\244\217\275\363\264\376\274u\273\277\274FA \275\032\335\307=ov4=\037[\034=\311\240\204\2753|1=:\237\362\274>\000\'=n\275t=\301\026\233\274\231\006\003>\243\037\200=\236\342\014=r\213p<\332\255N;F\030\337\275\266[\303\272\377\343\023>Y\035\227\275\201\314y=\t\317\365=\347 \265=\267\376\223=m\033\030\276\325\326\227\275\023\246^\275\201+)>\207\032\306;\2457M;\207\3612\275\256\303\024\276f8r\275\362\264\314\275l\252\025>\302\356\354=\273\"o=hG\014>C\342\313<\022\033\376\273@L\275\275<0\344=I\227\213\275nt\236\275\325\254\235\274\235\343^\275\025\317\320<\021=H\275\246\335\374\273\330\017\201\275`\032}=\036\252\026\276\014\"\233=j&\211<\327\367\031>\265\036\222\275\336\n\'=Z\366\200=Q\340<>W\264q=Dm}\275/\3472\276\016\000\347<M\027\202<\266\177\313=Q\250\346<p,)>\341H\r>=?\r;\215\241\005\2763\2710\275M\347\026<\353\242I\276\222b\251=\216 <={\352\021=\027\220\300<\3257\211\2751\223K:\327<\036>\000&{\275\245_\021=\330\222A>sP\261\275\021L\376<\364\256\313=\253q\025\276\003\232\371<\262K\331\275\360\263\321\273\226[\371<\260\273P=a/0>\270\215\327\275\356\033\036>\236\231E>\355$\350\274\0006\353\275\222\2702\275\226\263\242=\342E\337;\311\005{\274\203\336\267\275q\217\362=M\014A\275\004Z\324<M\225\007>\2246\314\275V\342\205\275\307w\r\275k~\252=b\016C\276\017g\210\275\250\200\001>8X>=o\245\261\275\357\333\250=\301\361\216\274\242\244\235;\3302Y==\317y\275\274\373\244\275\352\257\000\276\325\373\000\275X\375\234\275\337\206\244\275\334\240\335=\272\267\000=\320\336U\275\374\n\250\275\035\251\237=\243\260B=\037H\010\276\360C\035\276\243\366\003>[2P<\325\206\230=\357M\226\275\320K\255=\255T]=\014Zl=\'k\234<\373MG<\360\006\024\276M\352\212\275\233\332\353\275\013\323+\275>\006\342<T}U\275\350K\256=\002\323\336=\215\373k\275A\305\254\275\303\266|\275\314\271\306\275\211\t\345\274\311\355\274=\337C\333\275]=\312\274L\343,>\347\330\337=\000\345+>\210\276S\274F\022\206\274B\351\333\275LL\213\275k\264\032=\025\230\244=%\350p=?\020\257\275b\214\016>\216B\274\274/\342\016\276\376.\202={d\005>\213 w<w\226\024=\302\274\024\276\265\217\312\274^\303\227=\204\347\201=\235\364\232\275\362<\225=Tja\275\334\037\005\275|\342?<3\243\276\275Kr\370=d,\230=!\364\307\275\322\014K>\\\272\367=\3315m=\014\301\265\271\232Y\013\275|\313\217=\206\031\234\275\243\222\203<\031n\302=\2124\250<$\010|\275\r\203M\276\301\242\253\274\351\304\r\276\350v,=\304A\000\275R\236\342=\313\221\206=\305b^\272\351\177F\274H\"\333\274(\026O=\2261\373=i\334\030\276\333p\007>\320\353+\275\224t\r\276\265\254\213\275&\220\366\274\253;\205\275=\236\350\275\307\350\300\275>\"\206=\2238/\275\246\005\244=\326k\375=\\\275\231\275\367#\322\274\304\320\243\274+;\207\275c\365\267=\342\026\276=\177\211A\276\031[\276=\376u\310=Q\212\312<\224i\356=\013\271\240\273E\237\222=\305\227`\275\003\335=>RR\n>Eoi\275\222Gy\275\252\325\304\275\311Ik=)>Z\275\t\245y=\366\261&\274\247\216=\276\010\177\317\275\004\007_=\360\262\032\275L(\016>^\201\266:6\203w\274\'Q\025\276^&\355\275z\024`\274\231\274\r\275\254jN=l\256\255\2749\354~\2758\324\303<\250Nq\272\236H\263\275\2537\270\275WS\226<\323\347*<\215\200\036\276\304}\301<\036\035I\275\221\220\241\275\332\304\n>wU\342=\272\"\240\275\301\202\242<\365\0078\275f\234&<\333B9\276;\250L=%C\357\275*\022/<\007\020\242\275\273\002\344=\265\235\347\275\275\210\037\276\314!\214\272\365\230\024>\220\214\374\274\214\212}\275x\225[=\355\337/;rt^\274\307J\233\275\"\205\025\275\177\003\016=uQ\022>\230\317\327\275\206\316c\275\313\032\370=W]\222=Sx?\276\034\277r=?\223\275=1\322\266\275\016\243o=B)\240=_\314j=\033\212 >\361\217\310<[\363\254;\335+\016\275\365_\260=U\270\352\275\275\241\013>\034Re\275Q\3639>\311o$\275\245\r\357\275\013\227\003>\304T!>\003\331L>\000Q\366=\\\007\202\2759F\t=\224\r\342;\200\247\340\272\261\254\235<\312#t\275\367\2725\276m\036t\275\255?\215=M\235/\275\217\363\202\274\303\"C=h\340\254\275u\010\006>d\377\203\275\037\270\020\275k\001\357\274\310C\201\274C[\201=\006h\321;\354\235=\276NJ\340=\3713\004>\037{\225\275\257\000\277<\250\373\t\274\002L\355<\0040(>\310k\363=\263\205\251\275(&0>X\361\247=\276\255Q;I\207\226= \242\030\2768\301*\275I\322\357=\237\3739\275M\324\340\2733\3056\275\372V\007\276\"\003\316=\270\247b:\315\206o<e\233\235\275\231\243x\274\3626\316\275\305v\002\275\233@\023\274i\310\205\275\271]\203<\034\036\031>+\2346=\010\r\214=\2702\023\275\303_\307<\204^\373\274u\207j=/\206\355=\334\216\217=F2\201\275\3016\352<\344\021\274=\312g\035=!\005K>\337\021s=\301p\333=\265\256\023\276\301\347\353\275\216\210\032\275z\333\345\271X$\177<\034\376\210\275\232^&\275\031\027G\274*\024\300=\031\222\244=\231\344\023\275\253\"\336\275\230x\334\275\037.\257<\367b#\276\335\304\224\274s\337\275<&\235->\367U1\274c0C=\356\002\332=\255?O\275\255 \360=\240>I=3\256\265\274\006\220\341=\246=>=\346\252\363=\303V\232<\205v\215\275\201h*\273G\277\207\274\211n/\275\335\265\034\276\323\010}=\321\000/>(\004\376\273\214c\357\272m\254\345=\326\316\347\274\314\267\303\275\311\327\207<\312\320}\271\246s\007\276\010Z\277\274\237k\232\275\247\311\000\276X\273\231=\312*\263\275J\007\023\276Bm,\276\307\357\t>\276\203\r=3\244[\275nA!>\244\310\344;!+\262\275\n}\234\275\216\360\334=\365^k:\230\366\316=\025\331)=\212\005\223\273\376.\005\275\004&\002>3\341\031<<\204O<++\023\276\337\341\352\275\031\301\224\275\256\322\221\275\376i\374\274\'5*>\234\335\322=V\335\204\275\300\n\366=`\241`\275w\3524\276\252\244\035\274)\347G=\272`\';\301\034\230=x\212\340=Z\250\023=\216IQ\275\246L\n\276\2700\007\276LI\030:S;\006=\037\314\023\275.\231l=7\366\270=&\265\230\275\2342\354\275\242\343\326\2744\000\245=\210\363Y=]n5\274\337-\r\2763{|\275\026^\225=\257\270\251\275\0064\335\275\014\204N=\244\013\300\275\312X\262\275\001T@=\231qf\275\311\222\240=\225\227\024>\262\243\306\275\317\356\254=d\205;=\320(\344=EW\257=\213E\242=\036\206,>\306TC\275\251\007#\275\024B1>4<\346\275\2538\003>M\026\240=\232\'j=\206eU\274\316\333\361=[=\334<\301<A\275a\225\233\274\\\256y\275\307\327w=1\200\317=\213\215/<{\rb\274\013\235\327\273\345\321\004>I%\005>\026\026\217=\032\353\307\275}t\003<ZyE=\241\000\341=)U\263\275p:8\276\"\311\322\275\262\215\r>A@P=,\300\303\2753\230!<DP\354\275\267\003\243<\304\006\010\276\346\323c=6S\177\274\036\320\333=\351\"\224\275\350\273\227\274W+R>u\035\325=l\352=\276a\017\251\274\241\244B>\352\031]\275\306\006a\275\226\341\327=\263\0039>T\025B\272\316b\223<\335%N\275\225\332\243=.\362\207=\301,\252\275\233\233\226;\267\257\211<1D8\274$m\355=\330~\023\276\300\017\325=\\\003A\275r\264\352\274\321Z\023\274 (\007\276q\322\001\276\356\010O;\273d\235<@j\010\275\356R\230<P\213;>^\257\305\275\361\354p=\275]\252\275\376U\">@\332\010>\325O->\207\272\323\274BU[<\206\270i\274\266e+>\035j\006\276t\324\316\273\324\362C>\326\010\247<\313\262\030\274\234\366\033=\357!\026<\213V\"=\357St=W\363\002\274\302\001\373=\250\216\005>\255\302\010=\212\261a=\274y\033=.\230\311=^w&=GJ\007>\377\225\222<YY\310<\2034\'\276Z2\264\275\322\271>\275@\002\000>A%\'\275|h\261\275\225x\007\276\243E/>\023\276\351\274\257$\370:g)A>\226\364\'>&\370\331\274\010>k\275\224\215\017\276\3439\303=ei&\276U\245v\275=\220\362<(<\340\275\365\225\225\275\004\204\205<\226\035\245\275\243\037\263\2754\304\014>`w\364<\363cY;T\000\007=U\277\220\275\034E*=\024/\255=TEM\275~x\270<8\006F<\335[\322=4\272\364<D\306\021<\357a\315<\233\353\330\275\021\331\277=\262\375\333<\005%\251\275\022\330==J\255\343=ZlJ\275r\336\313=qZ\216\275\333|\307\274*\'\256\274}p\325\274\365p\356=\365~\n\276\036\024\'\275?\352)\2756\337\260\274_U\315\274\245<f\275\017\030(\274\340u\003=\3770H\275\014S\356\275\214\244\037\276\250<\033\276\331\366\004\276\227\003\003=\301Zx=a\2578\276\255RF\276\335\267S=?U\220\275rdx\275jL\201;os\035>Lf\017>\2310\246\274\221\2762\275;\332\005\275\222$\246=v_K\274z\277\325\274;\341\331\275\330\354#\274\262\037\030\276\0225b\275<n\234=\224\376\224\275\365V\251\273l\023\017=\233V\365\274\271\335y=La\303\274\324\350\":\344\244`\275\322\330\277=ra\216\275\014%\250<\216\334J=M\366\245\274\356\205\321=\371o?>\\,\005>\252\337\366=\333\335\271\275\251\366#\275wg\315\275\206\302\002=\374\002\237\275\274\352\313<b\377\007\276\274n\231;\2000X<\372F#\275\311pX\275d\'\031\276:e\360\275\301\357\216\274\335\357\035\275\244B@\276\243\014T=\314\3546\275\006E=\275\314\202\340\275\376\212,<\2044 \275H\245\376=\206\006%\275v+o\2752&\370\275(_\021<\377\261e\275\266*\362\275m\251\273=\327\336/>?\254f\275\177\024J\275J\360\264\274{\320o=\261\355\353=a\017\030<`\031\367<\001$O\275\303\324\342\274d\275\016=\276nk\275\316\254\277=8\230\244=\340+$<\017\334\320=?e\320\275\214\r\331\275\006\270\010>\336-\000\276\301\347\343\274\2353\236=\370?\276<\026\274\375=\344\207\363=\357\246\233\274\002\353\271=\3276\242==\374S=\356Bl<\341\331v=7\204\177=!\361\347\275|\035\320\275\200{^\275(l1\275\336\311,\276\233\305A=\223(\005>\030\005\022<\030\367\352=j\211Q=\211|\327\274z\322\264\274\204\021\265\274\005\274\325\274v\336\222\274Q\t\367<C\224\t\276<\261B>{\314\364\275\257\202\346\275\017\377?>\2003!>\253\005%;\311\016\r>\205\263\260<\367{\324\274\257\266[=R\337I\272\035\r\207=\n\303\002\2766\310C\275bqN>1\370\031\276P\272\256\275\"\241\346\273\376F\'=\'j\225=\272\r\341<\347u\277<\325\374J;\217C\">\201z\231=/Gs=\'B\231\275\0253\344\275\261\272\342\274\276\304\304=:dB\276\242\212\337=J\201\331\2757\\\263\275\357N\336=\211\332\312<\245<\202=\'\203\351\275\341(\"\275\272\220\373=\243h$=wL\214\275\235\204H\275c&:\275D\350@>\230\273\237=\200\354\005>,Q\323=\224E\037\274bY\202\275\237OO\275Y\262\203;\371T\007\276\352\330\214=\306g\325=\373\035)>YB\314\274\273\254)>\350\016\373=\271\377T=\323y\217\273E\'8=\372&=\274\330We:\340\331\310=g\022z\275\032\223\206\275u\207\257==\001\220\275\037\201\206\275\014\006\205=)\020\225=KO\273=\210\027\250\275j\374\364\274\211>9\276\033\322\231\275\372\222\223=S=\206=@b\321<\260P&>T\212b\275\212=\020=>\312\">\236\265V=\3244[\274\274L\032>\336#\300<y\377\020>\304\005\275<o\326\342\275e\300\010>\261\257<\275k\314\376\275\033\ri=\017.\307\274w\267\254\275\252}\241\275\250T\247=G\332\347=\326C\004=MS0\274q`\202=U.\032\275\024i\367=\247`\023\276\230\373\275\275\372\271->\205m\026>\321\246\367<\000\357\004>\355\263\224=:\234\032>\357a\031\275\241\266\307<Kz6\275\227\353\r;\033T\277</\321J=T\344\340\274\241\263\210=\252K\201\275\037\245 \275\246\377\356=\255IN=q\241\177\275wc\"\275\220\024c\275\260\256)\276\"\322)\276\271\000\204\275R/\343=:\216\t>\224K\211=6\243\345\275P>\020\276D\211Q=\267\251\222\275\350\0312=c\242\333=!\205\207\275\316\247\263<\213M\t=O9\252\275\323Z(<\266\351\234\274\n\252\005\276\344k\257=y\035*>O\224\362\275\323\300\271=R\231\224\275Gp)\274:\233\370\273od\247\275\036.\004>\243r\342=wI\371\273\271\364\304=\204\271\002>\312\244\333\274\277\205\251\274\311v\016>\362\216\372\273\030\2703=\022\366v9\361r\210= \237\355;&\235\337<$-\016\276 ~\r\275\204\335\224\275\350\2044\275{_\277\275\276C\014<\035\013\276<\237\036`\275Kgr\274^\027\031>>Lg\273y\014;>1\277\034\276z\274\322=V\331\035\275\025\267\005>6C >Z\255\243=\003\033|\275R\363\304\275Z\273\314<\206!\001\276\001g\202=8\321\327\275@\316\364=\211\261D>\033\372\242\2756)\'\275J\r\004\276Kg\224<\233\360\342\274L\020d=\343\376\332=\331\321S=\202\315:>\260\234\207\275%\322A=j\022\233\274\240\331\311=rW\375\274\325\301\002\276\251\371\250=\273\210\t\276\264\374\005\276\037\321\375<q\340\033=Q\010%=z\347\031=\357\2579\275\2010\007=\235\'O\275R&\326=TyQ=\305F\325\274\254>\253\274\344\243\245;Q\326\323\273\206\320w<Px!=%\'D\276c\026\363\275%\034\202\275h\310\334\275T\200 >ayg\275\\X\031>%\242p=p\232\325;\302\215\320\274>\0275<=\370\264=\024\007:<\357\303\367\275\2460\230\275\337\206\302\274\357\007\n\276\216#\224\274\277\300\275=7\207&>\025\244\034\276pPE=\231m6>Yl\t\274g\2644<\231\266\330<\221H\366\273\247\036\311\274+w\020>\013\336[\275\326\3762<\377\364\301\274\332\002\010\276#\210\001>eC4\275{,\027\276\211\332\212\275R\301_=})\003=\332\327!=\000t\035\275-\\*\276\311\336\352<\211\004\003\274\222\302\020\275\202I\212=\273#\206<\254R\003=\005\272\212\275\317\t8>i\204\356\274\311\376\212\275\364\331\017\273M\\\341\273\323\037\265;\003u\020\276\320\330\243\275S\323\237\274\354\\\303\273TU\232<1\236K\276\234{\"=\257\221\251\275\311\266\202=G\214!<\222=\331=\255M\026>r\227\312\274\027\360\3208\031\300b=\360\256\016\276\002\351\325<\265G\354=i(\037<\035\234\241=\303\327\221\275\362\177\254\275\234C\032\275\266\014\344\275\274aC\2761\272a\275\025\2426\275\014\357G\276\032\234C=\312\222\300;AL<\275\347v\311<\2136\222=\265\317N<\203e\024>\017(\204=L;\257=\004\233\212<\277\003\230=\224} =\007\237\240=\027\364\322\27595\014\276\300*\235=\016\244\307\275f\254\013\2760m\241=W\265\000\275\234\344\233\275!Z\032\275=\034\357=b~5\276\363Y\325\275\325y\221=yv?>H\2472\276\0137\023\276,C\210\275\2026\261=\232\224\314<c\203\335\274\036\021V\275\236\215\224<c\367R;g\222\'=\314G\270\275\306\205/=\245\025\210\274\252#\211=\032=9\276\231\001\267;yS\224\275m\315=;\006\010+\275\234\303Q\271\201yz\275\237\206\221=ZM-\274\302\023K=\310\2745=\025\031k\275`F\260\275\320\225R\275\321\333O\276\353K\035\276\\\370>\275\264\213\031\276\037\333\216=\354\225I\275\231\311\246\2754\221\343\274$B\001\274\364\215\003\273\212\255C=\241\360Y=n\250\302=R}\344=u\244\250\275\206\363 ;U\233\301=!\036\362\275\2723!\275\354\322\332=\377z\r=\377\350\202=>\250\211=\371W+\274\032)\221<\260\032\204=\300\364\375\275dh-\2732\232\022;W{\003=\033N\371\275\017\005\001\276\243\2107\275\023G\223;KIz=\033\323\016=#Z\230\274\024\026\314\274\2624c\274\004Na\274\322\212\000=\245\375\032\276\241\332\200=\0349s\275\302,\006>\201(\r>\010x\302<\265\347(\275\333U\000\276\210\025\316;\270\253\001\274Q\2771\275\307\031\345\275\217oU:\010\363C\276C\315*=\201\356\217=i\365\327<zA\024\276\311R\007\275\t\253\234=V\347 =\222\004z;\212I\304\274\013_\215\274\366\321\210\275@)\203\275\230A\310=\365\027\000\276+\026\001>\327\254\023=\310\001\016\276\211\016\252\275\027\310`=\365\223\331=~\016`=\300\247z\275\000\035\335\275\233\251\221=X\020\303\274\000\327\256\275\360\213\247=-i\344\275_4-=\201\000\253<\212\216f\274\360\347s\275\n2(>\'\2478=1\370\222=\315\202\250\275\210\224\314\275u\276\002\275\016\365\215\275\205I\257\275bb\023\276;\036\236=\371\261\206<\337\230!=\274 \\\275\223\376\314=\025|;<\021}\270\275\372Qx<l\276\033;1\032-\274\315v\300\274.\341\t\276\003\337\032=\356\307\312\2747\035{\275B\251\321<0\315\306\2749h\022\275\346\007\366<\037\020 \276\207\221a\275\360m\022\275\262\226\262\275\231\245q\275\351v\217\274H\373k=\025\257T\274\347O\337:\256\363\346\275\251\020$\276\305%\007\276\014R\035\275\026\234\370<\340\024\001>\335cO\275J\237Z=+}\222\275wK\204\275|&\222\275$c\331\274c\\\037\275,6)\276\367\221\355=)G6\275\016\257\232\275\364\346\003>\265\0135\274\014\026r=\253N\336;m\244\233\275\300)\031\276\205Y\246=>\333k\273[i,\272]\213\222\275<(T=\376\214\252<+\335\010>\241k\\\275\334\231\313\275\313e>>\366\210Q\275\020\212\225\274s\343\n\274\352\004\271\275\322\001F<1I\204\275H\252\025\275\036\r)>\357Y\306\275\352\267\007\275\017I(=\223\017i\274\003\334\230=\365\332\200\275\346\313\001\275H\224\322<7i\245<\246\3377<q\035\227<\366\007\013\276W\303\203<\036\361\032\275\327\211=\276\320\017Z\275\307\032\257\272\372`\227<\247^,\276\233wg\275\371\246\r\276\3624\265\275\351\237\t\275z%f=y\014\177\275\213\215\372=\324\377t=\332+\003\275obT=\257\201\212\274JW\267\275\001\306r=\267\303\021>*}T=\236\303\205=t\201\n=\214\246)\275\330\317?=MGR<Ej\027<\276t\033\276\267\"}\2754|\266\275\214\001\252\275~\332R\275\020/\260<\345\214G\276\031\261\336=tW\033\275\373\311\264\275\305\220`\275C<\007\276\021\245\312\275\277\r\007>\261>\321<X\377\367\275\335\021s\275n\222\310\275A)B>c^,=\373\336\213\274\376\266\305\275_\277\222\275\214\032\366\273\223$\233\275\317\225\031\276\363\313}\275\320\360\322\275\n\324\262\2744\203\346=b\220\014\275\330<\"\275o\230\272\275[\250\223=\370\220\226=N\n\212\275\177\177\005\276\214$\202=\030\1771=\333$\023\276\036n4\276\212H\367\274\254\034\214<\315\337R\2755@\231\275W\302\025=\312`v=\370a`\276~\343+\276\006\304\313=P\232\220=:(\013\276\343v\220=Td\215=\033\326\024>f\017\232=\247\254\033>\2172\360\275\010[+\276K\202\177\275e\000\210=\2322\231\275\306)+>\323\323\342;\311\203\304\275\273\0059=;\257\004>P^/>G\354\334\275\031\247\334<\264\200\232=*\312\200=r7\323=\345\230H=\026\242\374\275\256\204l<\352\033\365\275\353\002\035\276\310Qq\275\177\254\005\276\3137\n>\247\201\014\276\257\336[=L\304\010\275\224\336\301=^gR>\211p\317=\376B\030\273\013\n\343\275\225l?\274\3658L\275%\023*\275<\226z=5\276\207=\2675\344\274U(\010>=\231E=\035\234q\275\232\207\357<V-\356=\312\034\033\275~\027K=U\211.=\276}\017<\016\323\273\274\034@U<\276\"\330=\344ZZ=\237\027\211\274#\232\355=\257Y\233=\257\232v\275f\030P\275\036k\310<v\336\215=\204H)<\350\344\265\275Mq3<o\200\204\275\306\223\270=\\XW<\022%n=?\377\005=!@\335\275\025d(\274~\233:>\000\000\010\276b]\201<\234\337\243\273\306\357\347=t-\233\274i\254Y=\302\363\360=\220\2312=)\364>\276\007B\023\275;\324\201<H\002&<\247\214K\275~\311N\275\244!\\=\332\244w\274\206\2015\275;\205#\275\213\201+\276^f\245=\210\030~;\367\t\331\274\325\332\253\275\331\263\362\274\207\022^=o\005\023>\r\363\201=\343!\177\275\313=I\275\324\024\311=\037\020\341\274wX\362\275\347[5\274\267(\030=\253m\324\275cC\204\275\354\242\222<R\332\300\274\310\274\357\275\021E\331<J\3178>\354<\302\275\275~\351<\272\241\"=\037$\355=\313\007\t\276\332\205\r<6\340]\275po\247\275@\260\313<\025*\005>\360\371\276\275\303\367\026>_\302{\274D\342M\274\230\265\272\275gs\013>\203\2336>U7H\276\245\361\374\275\266\215\3168h\216\007\274:W1\274\235p\342\275\343\306:>\'\200C<\2638\330\274\231\2769>\2414\032\274!\2218=\267[&<I\254\225=\201\360\013\274\334\377\274<\214;\003\276\254FD\275\010\253,\276\336\037\243=\010\367\320\275\001\270\307\274\224]\236\274N\233\342=\016M3>\252w\260\2740S\033>Q\0132>\350)\257\275\374O\261\274+\222\357\275\225\252u=\233T\352\275\0173\314=\205{\026\274\255\363\036>\2408\255\275\275\034J\275o\200n\275\026\235\255<P{\343\274\001\324\330;\220]I\275\026\326\006<\240\223\365\275%\236e\274L\034\321<(]\322\274\027\227\220\275(i1=<2\300\275\010E\261<\376\016\266=T\254\222\274\372\031\226<\211B\375<\246\343\302\274\036x\312\275\364nC>\342\305c=\201M\253\274Rm\207=\202\372I>\002\006\303=@6:\276\200\016\341=\nf\311\275\003\244\025>\377h\203\275\275\242\311\275\353&\233=\255\334#\2761\211\372\275\243E\307=\266>o=[\255\036>\304\2151\276g\223\227\275eu\314=\302\212\016\273w\252O=\231\212\360\275\034\023\206\275\243\221\356\275\230\2606\275\331d>=W\\\317<T##\275Z\034\021\275\236r\306\274e\000q\275\247\212\307\27465\311=\262\340\217=Va`\275\307-\215=ua\201\274M\277\273=\336\3720\275\305\241X\275\264\036\366==\263&>\355\266)\275\263.\332\275Hc\245=jx\362<\363\243\006\276\313\336\260\275\005vM=1*;=!~\306\275TO\010\276\351\363{=I\346\016=k\003\220\275\361\020\016>\0042z\275\332s\031=Yi\377=\257\177A<\337\0237\274\377\201\215\274\016\001\214\275uB\313\275j\247\037\276(Bu<K\365\307\275q\334\023\276,nk\273\223\344\231=\273\347\272=t\234\271=\266\332\035>\342,$\276&\312F=YE\204\274\005{\002\27417\330\275\363\243\235\275\035\353\275\275\221i\252\275\177\017\275\275\305\177\207\275\215\343\300=u\236\371\275\245\210\355\275\220\223\321\275\375\372\323\274\317N\226=l\342\371\275\200K6\275\001\225H:\000{\212\274\205\210\007\276RX\327<\374%W=ib\021\276\tl\034=]\014\223\274\351gG>1\206\321\275\212\024\253<\356^\336\275\306\3408\275\213\354\322\275fd\277;\210*\023\276^\212.\276\020\305\265\275S_\333=\021G\331=\023u\243;|m\206=-\006\276<\t\300];\316\255M<&\373\202=\366T\355=\024=\351=+\242\253\275\257Z\020=\251\306\"\276\013]\206=\363\310\232\274<\310b\275\314\003\004\276\354\255O\275\216\004\217\275Y\351\026\272P\347\027>\014\373\371<E\3365=Ra\026=m\313?=\314\276,=\362e\016\275#\204(<7w\250=\247R\316=\'hH\275\014)\260<:T\235=\360\357\222<{HB\276|pY\275\327\n\227=]\217\237<T\313\374=9\225\232=m=\201=\277:\036\276w\024?\275\200\222\210=zr,\275\207\214%=X|\204\273\335\361}=,\010\341=%$\240\274\021r3=Q\302\331\2740\261\254\275\233\335\322\275\304M\275=\305\005\203\275\362\177^\275U{\244\274r\271!\276\220\374\235\272\22367>G\236\362=\037M\016=eS\334=(\377\006=>\371#<\237\340\306\274\322\347\321\275]\307\334\275\363#\030\275\305o\364;\260{K\276w,a\274\020O\26385y\230\272\365s\245=(D\224\2751\2757=c\307 >EY\241\274W*Q\276\2640\326<f\036!\276\036\332A\275\267\031\004\2761e\212=\205k,=\023]\236\275vw\330\275^\204\303=x\222T\275)\350\300\275o2\335<\310\264\337<D\312\362:\025\240\252\274\303\006\005=\253\213)\2762T\201<\374d\212=\036]\005\273\234SI\275o\340\031=\371\273\232\275yO\240<\222qt\274f\3346\275\237\340p\275\3657j=\233\337;=5\010\202\2751X\210=.\263\237=\242\251\200\275\025\360V\274$\355\302=\177\340\"\275\236\221\241\275\036\022\376\275=\206\030>X\006\304=\365\372E\275P\005Z\275\247\274\207=\276?\312\275\3677\304=\266\201\032;\n\203>=\345\332\"\275\301w\350=\354(/>\000\2474\274\345\301\232\273j)\t\275.\037\315\274V\367\n=\271\353\231=qo\232\2750\310\351\275\247\254B\276l\377z=\031\363\'\276\243\222\252=i\022\262\275_\022\370<\t\261\260=\3451\0067.y\375\274\273{\271\274Qtf\275\274<y=!4\350=\321\317\277\275\311q\232\275{V\216=\302g\213\275\207\210J\276\322\251I\275\335\236\247<\202R}\274\212n\014\276\303Z\337=M\020\361=F\272\244;b)D=o\211\244<gbA\2754\272\360\274Z\363\231\274\031\376\221<q\361\270=of\001=\345z?=\203\276\277\275\216K\244<\3253\226\275R\314\307\275V\223\302<\314\037\305;\266@\202;2?\302\274\026v\225<\017P\346<\226\306\212=\312\217U=\227\276!\275\315=\321<\362{g\275\206Zu=\233K\007\276\247\025\016\275\337W&\276\301\3332=\037\216\346\275i\307\367\275Fk\304\275\303\003\351\273\231\3032\2764\325\276=9wt=\236\351\030=\366\rT<F\325?\276wz\364=\200@:=\355<\323<~A\275=X>5\275\007x\237=\365q*>P1\021>]\371$<\343j\036=\253\236\233\274=\354f=1\331\n>T\010\211<\225&C\276\304t\325=\314\246\332\274\264\237\304\275\215d\014\276Q\337\354=\277\207}\274\037\235\363=\013\273\262=\224\355\332\274(\021\341\275\224#\252\274\373\377\314\275F(\003>\320\276\332\275\252\243\365<4V<>\223\352\233\275l\0023=1t =s\250!>\3275\\=[h\205=Tq\004\276p\307z\275\374`\234\275Er\250=\323\213\031=?\006\307\275x6\017\275<O\332\275!*,\276\205\245\300\275\360\037\252\2758|\244\275&\361+\273\006\365\023=<\334\313\275\326U\272\275\310\203\211\275\034B\236\275\010\217\014>/\372\355:\354\354.\276\247\377.<`\223T=Y\213\022<\213K\271<\330\240\'\276\'n\002\276t3\333\274.w\253=n\231\277\275\307X\200<l~\207=V)\274<\221\322\364;h\257\241=\253\365U\275g\353\001\2769c\200=\274\255\003=a\202\207\275\033a\315\274\020y\245=+Z\345=\351\"\'\275\244\202\222;,8\247=\251\374\313\274\031\250\217\275\352\3115>\002R\271\274g\367\304<\245\3702=XM\221\275\2634\375=\362\376\250<k\365\262\275b\247\301\275\207=\n\276\236\210\206\275\237\253\255\274!/\007\276q^;>\216\221\301\274mp%>\324\234\203\275\303L\257=\303\217\205=\310\274\302;c\364\213\2740\210\025\274\274Q\244\275VW\271\275fa\322=Y6\373\275\006F8>}\226\036>\201\233\320=\333\360\355\275@S\366={\210\305=\340e+=\203\335\276\275@z\232<\353\360\335<\016\035\001=\342/\347=\254\322\032<\033\315\324\272Z3\274<\037\356\361;\355\3339\275z@d\273J\371\250\274.\230L<\347\347\207=\'\317\377=+\373\236=\360\034\177\275\245\260\302\271\203s\322=|^\032>-F[=\263r\016<yv\267=O\303\312<\342\022\377=\2471\027\275\247\344\373\266C\366\331\275g\240U=9\220\021>\301\226M\275\336\302d\275`U\325\275\255\033\221\274p`\244\275\211\203\257=\343\251\216=\036\200k\274\033\260\252\274=|\275=\222)l=g\347O\275\300`\347=\235\337\007\275\2021\235\275\254\031!=\367\017\345<\372\3077=\r\357\215\274\310\223Y\274\3736>\274+<\310\274vi\214=\301\216>=\244\366\273\275\217\233\236\274\364N\257\275;\262\327\274\361\337\341=/t\334\275\205\202\327=\3642%\275#G\022>\010zF\273V\345\257\275\274\023\216\275pm\244<c\331+\275\303\245\023\275\217\250.\275\273+\032\276}\363X\274\347\222\031>\242\250\200\275\366$\032=G!;=\271\362\326\275\027\247\346\272\377\235\275\275\367x\231=0p\276\275\030H\'=\275\036\036\276{\312\327\274\345\256\226=H\260\207=\201\263\207;\202\215&>\'\013\355=\366\003\t\274\031 \013>y\306\021=\223!C\275\006\234\021=\340\260\251=\245\223\027>L\345=\275X\367\367<\323\321\270=7\376\232\2757\007F>\343*q\275o\205\022\276\316v\335=m\033\256\275hIm=\302K_\275\277\3363>3Y\026\276\350N#>\326\017\253\275d\224D\276\224\233\225=\257\355S=\267\237\227=}\002q<\2225\201=$\377\347=\0170\241\275\034W\">\216\364h\275q\233=\275\\\247\003>f\250i;\245\325\365\2742\017\357=\320q$\275\200\332t\275\035\231,\2756R#\2759\355\233\274\335\377B\276n\306\302\274\241-\246\275\376\326(\275\371\213\007\276`a\345=M>7\274\247\032\247\275Cb\373=\235\264\252=\325V\004\276\221\213\365=\367wi\275\325\366\357\275\035?\372\275\322\030K<\244\312\350\275\302\374|\275^W\001\276\363V\370<\217u\'=Q\021\203\275{S\004\275\003\223\033\275Y\035\202\273\331\210\337;\226\316\367=\342\3006\275\313\010\034\275\023\365\310\275Lu\000>\234\320\242\275\377\322\367<\277{\266<\256\375\245\2751\317O=_\272\014\276\216\272\325\274\tr\332=Qz\340\275\216<+\276@\014\004\276^[\'>z^\323<\310\002\346=\327\033\254=\221\377\226\275\'#5=Y\\s\275:\305\033\276N\230\225=\037&\\<\364\020?<l\333W\274\260cM\275\\\374T\273t<\202\275\345\350\213\273\005>\021\275\346W?\275{S\227\275-`%=\013T\253=\341>p\275\376\332\335\275i\205\201<ub\000>\207\242\">\324A8=\252:\261=\322\347t\275j9f\275\'\252\002=\212Lt\275\322.\303=\306Q\254\275\251\360\016\276C\010\023\276Q6\270<\005\262\022\275\332b\222\275\007\227\323\275\354\336\037\276\225\033\026=z\307\336\275:\347\233\273\276\247\256<\'x&\275\'UB\276\001\177H=\217\005\261\274<\3761>\356N\312\275+\331\275\275\205\n\253;<.\234=\267{\261=\030E\327=\344\377\336<D\016\267\275Y\333\327\274\360\376\010\276|!\'\276N9%\275\005<\310=\213\251\014=\022\362\207\275!\252V\275\276H\236\275\237\332\375=Q\341#\276\340\266\262=5\263\327=\267\016\250\275\365\020\236\275\210\r\331\275\221\211\233=r\301\333\274\017\'\021\275\243\343\023\273\375\242\257\274\377\227\323\275\244\376)\276\247\250\245\275{\331s\275\337j\002>\270\244\215\274\207\333\233<\321\204C>\034I\316\275\026 \333<\224\027\'\276<i\255=\202\370\350=\272b\222\274g\2417=I\236\265\274\307\344\230\275_\\\232\275\024\326\243=v\350\257\275Q\330\267\275S\330r\271\217\006k=\323>\214\275; \267=\225z\373\275;my=\304\317+\276\006\035 >\347\353*>\003\204\007=\2501\020\275\207\225\251<\346\340E\275j\340\315\274\225l\004\275\035\027g=\213\224\010\276!4\016>\311\235\207=\250ZL\275\214\002G=\262C\356=\'1\342\275%\312\263\275\006\033\315=\020\317\014\276qGM\276YS\312=T\000\226=\317\373\030\276\032N\005\276\2419@<*\224\273<\312(M=E}Q\275\nm\n>\246Om\275\026+\351\275/\316\204\275\002\017\330<\017\n\223=e\215\210=a=\013=h\233x<\n\252z<\250\023v=\245?\230=KC\020\276Y\372\370\274\022>t=0\264\245\275\022\337\013\276\025\362\362\275y$\324\273\177\265\336=\240\352\356=[\222\356=\320\361\316\275\317s\221\273\037\020\216;y\262\013\275\311\370\267=\365\251p<\222\363\023\274\260\002\030\275\221E\301=\260\273\333=A\302\262\2757{\260\275\314\373\334<[\346\026=Z\272=\276\243\306\362<\300\030\211\275\352\367\363<4\251$>c\345Q\276M\177\021\275\215JW\275\306\352\002>2[\000>^\016%\276\357x\026=\253\007\374\275\323\304?>\220\324 =8\003E\276\331\247\202=\'\253\301=&\376\323<\227\256V=\343H\240\275\371\203\010\273b\262=\276\260\204\200=I\035x\275\316c\365=\035\371\023\275\212\370\342=\376o\237\275\207n\200=L\206\241=;)\201\275B\r\210=\276i\365=jaA<\0039P\274\3251\355;X\3526=\243\331\201\275\317\347\304=\003DQ\275\235\260\370\275\2551\331\275`i\205=G\361\220\2752\021Q=\3005\016\2761\014\216\275\241\321z\275\n!2>\231\000\264\275m8]<\'nx<\274\254\306=\026\354\244\275\306\261\244=\315:\337:{c:\276\315\215\217\274X\214d\275\227\026\"\274\323\324>=\360\333\232\272\203_\355\275\307-J\275K\1772\275\307\313\016>\217\305#\276b\317\201\275D\206x=\007#f\275R\204\357\273D\314\270\275\344\323\016=<t\330\274*\2168<\001\0345;\3544\\=6\305=\274\270\364\255=*y\342=8<\207\275t\240\276=U\037A\273\267k\032>k\372\036\273w \347\275\234P\265;\212\224\316\273E\024\215=\333\256\020;\360\333\307\275\000\240\204\275k\266\033=\014A\200\275\364\3137\276\272\243\301=T\302\003\276\016\204\003>\tt\335=\227\366\326=?Sh\275i\315\034<\311OM=\370\024\031<\377^\300=\037\326\002\275\225P\222\275\016\227o=,\267R\276g\275\240<\":>=7\301\204=h\336\'\275\010e\240=\016\356\005>\003*\274\275\221\256\010\275\002I\004>\337\247D\276?\310\010>\246\317\032=\332\225\377\275\267FN\2756\334\240=\271<!<\350\021\023\276\360-\021=]\004\036\276\277\213\255\274#\322\002>\243\036\263=\210s\216=\260p(\2751\023\217=4\027\251=5\216\232=\322\237#>\257\204\003\272v\027:>\225\031\211=\313P1\276\356\240\306\275\356U\017\274H\307 \276\326\257\302=Y\252b<\301f\305\274\315\221\310=\013\364\331\274yt\035>\214[5=\310\225\032\275b\355\032>4\200\264\274\305\205\206<\026\326\350<\362\343\216=\327\327\214\275\027~\206=A\316\254\275\260\005\007=\201\271\246<\305\364\177\275\304$\301=\373u\271\275wK\307\274\274+\014=\341q\311=W\257)>\0160\250=\257\272\034=\275\361\007\2732\364\301\274\216\224\236=\374\000\304<\252\356\224;\217ZI=\242Wx=\177\306.\275-oz\275\245A\022=Y9\003\275\302kg\275\032\337\300=\352\216C\273\347|~=+Ve\275c\307\237=\340\231c\275 \0216\274c\024\227=;n\262=ZH\n>\"\366\230=\264\212\350=\366\033\360=_|\005>\232O/\275\003U\216=34\354=\020\344\010=LPP\274\220\240\310\275\027\357\252=]\274\006\274\254\361O=\314\304#\275\214\366\256\275\3131\241\275\377\262V=6\331\'\276Iy\304<h\376\017\2768\265\007=\035\'\243;*\306\021\276ol\302\274\324\343\324\275Z\235\264=\212\337z\275]Y\274\275(\310\243\275_P\005\273\376b;=\362\016\037=\200OG\274\312Ls=\356/G\276\037\360\377=\312\321\037\275@Lw=\255\227<\275st\245\274_\332\225\275\234Do\274p$\301\275\326\003\304\275\233\202\335<\350\255\374<\275V#\276\363\304\207\275b\305\t>\027f=\275\024\204&\276\344\325\360\273\2738?>T\213b=iQ&\275\223;\031=.\236G\275\345^(\274\217\354\002\275\364g)>\3002\224<E\303\277\275\226\322/>\336\277\315=\267\013\317=\232\267\254=8 \017>\270\226\220=\231\225\341\275\351\302\233\275\3053\r\275@\330n=Od\332\275\306\356G<\232\331;<\016\334\367\273\365\003*\275\257\253\220\275y:\270\272\362\360\263=\360\320\010\2766\226\231\275\265\252\230\2754\215D\276p7B\2753\016\251\275C^\230<\306L\234\275\341\317\314=\2327\037\2751W\330\275\037\334/\275\216\014\272\273\212\177<=\326\026\313\275[\364\344\275;F\271\274\222\213\341=\324]\215\275\212+\266<\343Q\313\274\025\276\216<Cz\205\275[4F=|\204\007=E\266\223<Bc\373\274h8\030=1\275\335\273K\234\333\275\270J\361\275\023\310\245=\276x\270\275=\251\250\275\304\330\216\274\0225\266=\205w\312\275(\265\013>\0374&>\303\376\336<\364\377+=J4\036\276_\263\034<7*\266\2755\233\177\274\205m\274=\356\016\277=\037$\240=_A?\276G\213u\275e\301S=<E#\2752=\032\275l\232\256;\245\310U=\253P<\275^\031\271<\0228\006>\320\226U<\223\020\326<\"\364\326<\327\303\254\275\024Z\342;x\360`=\030G\031\276Z\330G=m\265\217\275y\t\034=\276-\232=\250\0179=\240U|\275Y\371;\276\207\366\016>\037D\027\276\302\272\200=\376\027\030>\032\266\336\275\234\226\222\274c\303\007\276rr\321=4b4\275\327\001\224<\245\024\010\275\270a\245\275\027^\200=\252\202\'\276!t\262=FOs=\005E\017>\233\270;\274\277R@:\021+\010>U\014\266=\022Q\277:+\311\"=/\231\325=5\266\\\275\233\263\323\275|\342\336=\323\2037\275L\026\036\275\347F\215\275\317\205*>\242\354\311=\330\370\260=`]q\275?mI=\224G@\275\320\363\226=\213\207\252\274\277\321\373;\0346\"\275\326\003)\276\215b#=\363\020\257=?b>\274&\034\301<\235\240\367<\005m\221\275$\004\205=\004\251\240\275)[r=\322\023G\273]tU\275\2517\333\274\014s \276\023l\303\275\323Y\256=6u\276\275\224b\t>\217\005\372<+\355\322:\027\227\304<r\004\275\275\245T\030\276s\3645\276 \2578\274\037\236Q\276_\320I=8>\261\275#3$\276\374B\276=\036\3042>7\177\262=)\370\210=\336\373\332<\361\353\302=\371\231\241=\327\360\263\2757\035s=\363e=\275\241\322\030\276.J<\275\371\362,\274\330{N=\334\356[\275\206D<\275\216S\250=Y\240\245=\222N\255\274\r\033H\275\320c,\274Jj\365=\3620\346\275#\372z<`\320\341=8\006r=\306J\360\274(?\020\274\206\373\204\273u\337\224=\201.\251=\355 \242\274U\205\202=\"\345*=<=\314=D#\000\276-\235\000>\362\225E>0\227\035\276\213g|=\017 g\273w\310\217\275\036\026&>\031\247l\275\251\211\006<d>D\276\321\215\267\275\033W\260\275\250\266Y=N\220\325=\330\266\367<\303\300/<\227\244\031>.\005\t\275\302\237#=\3414\234\275<p3>\020\337\226\275\020\220\034>\321\035;<\352v2=2\352Y\274H\317\214\275\271_\246==\213H\273\356\037\233\275\374P\365=\345Ab=\247\024\266\275\352\365\315<\222\001\375\275T\367\235\275B(\336\274\237C4\273e\323\331<\021%\352<\277\211\357\274\267\313\027\276\334\031\373;f\227\256=\262\314\220<\2732\371\275[t\241:Y\350\255=\264\257L\275j\3573\276\273;a\275\003[\"\276s\354\240=7\020\205<\245\243\267;k\304\016>\355S\201<}\327\322<\362\010\026\275\027\365u=\236\002\010\276/\364\004<m}\367=\200`y\275\262\304\246=\217\373H\274\370\240\035\275\t\031\270=-\352\230<\034*\026\276\\Q\027\276\001\261\242\274<\372g\275\273\274\003\276\220\335S=\265\224h\274*\201\214\275u\300\">tp\021>#{C=\356\223\324=x\214+\276<\3320\276\372=s=6>\"\2755O\244\272\372\005\036>\033~\241=\316\274w\275)D\034<\370\006\204\274\375w\333\275\177\236\004\275\240\376-=E\3444\273\342\354,>\242N\354\275\326\342C=\t\356\310\274\241\260}\274V\302\202\2748\364\334\275\216x5\274\217\342\031\276\242\001.\274dm\251=\252\3351>\230i\223\275\216\374\324\2750\254\242\275kJR\275\217\2559\276\370\360\376\273\372ZZ\275\360\333\215<\031\214w\275L\272\304\275\332\003~=#i\252\275\2172f=f\r\244\275\253\361O>\001\036\342=\036O4\276\n*A>J\017\025>i\036\356\274\0336\002\275u\327\014\276#\313\206\275H\264|\274e^\364\275\2552\036>\'3\310=\357.\226=pk\264=\304\231\020=+o\207=\266\376b\275\023\201\005>U\020\237=\365\001z\274\340\207\302<\027 \233\275\233\275\274=\317\274\020\276\0170\036<\214\335\233\275\004\260\356=\212\032\003\276\025KF\276mx\326\275\224JN\275\247~\216\275\203\307\202=s\300)\276\357\344\240\275\303\351\367=S&\004>\226\'\264=\204\377\224\274\354\253\207:\322n)=\342\376\325\274\272\032\000\273\307T\237=\007q_=^q\264=\'\331Q=Sy\341;:0&>\226n%\276\342)/\276\242\242!=\315q\323\274\007\216\327=\230\231\202\275a\267\013\275\343\3013=\2122\206=\247\360\r=\232Fi\274\3149\256\274\300kA=\252\267f=J\227\013>\2319u\274\350>%\276{3\335=lBH=\224AH=\027\310\014\275\254\335\274<,\302\313\275\317\233\353\274\010\352e<9\330\262\275\251S\357\274\211\2561\2759M)>\356\177\214;~A\335\274(\217\013>\370\036\004\275\017\005\017=0\302\033\276\354<U=D^\t\276\227>\207\275\030\016\316=\032\373\000\276\322o\207=\307\023\263\275eA\211\275)}\347=\231\247\204\275\306\024g\274Z\207*\275\241\231P\2762\310\372<\333X\030\275\323|\001>]\271\343\2755\rz\27537\331=V\225\024>\027\225\001\276\316G\246\274\032\347\333;\003\033\211=EN\365\275\rB\211=\2759\263\275\023\255\367\275\013\331\233\275N\332\227=\207\365\254\274\271\272A\275H\024\267=\277\207\252=\207e2=%\340\327<\023\022x\275:\222\313\275\375\033\226=54Y\275\271:\220\275\373F\025=\027K\t\275u\261Q\274H\260\020\276\323u-\275{\224\347\275\244\360\203\274\2051#\276\354\267\343<\215\344\361\274K\224H\276M@\203=\335\016\330=\361\323\267<O\201\246<\217\215\214\275\364\330\017>\002\204\210\275\225\260\033\275\255\371\\=\365\'*\274\204\037\241:\326D2\275\2602\365=\330\031)\275K\340,\274p\311d;\376c\037\275\274r#\276&\3209\275\374\372+\276\227[\001>\327<\352\275\340E\347=@\305\211\274\352\3133\275\255\271%>\247\347\310=H6.=\365\003`<?\001\202\274\313[@=\177\274\204\275\223a+\276\013\271\366\274\027\260\013\276-\"\245\274:\007};u\374\351\275[M\212\275\306\351\262<\230Jy\275#\245\267\275\235\367 >=\312h<:\205\016\276\243\333\026\276@\034\325\274\371\345\223\274\312\017\203\2753\031\342<6\022\007>\347\344&\275\200\354\301\273\227\330\240\2754^\245\272\320\"]=\341H\226=\026}\315<\341\022L=\321E#=.\007`\275\377d\267\274\227yp=>\273:>K\024\033\276\366\210\343\273\355\020\016=\013B\020=\023QW\275b{$<\216y7\276?\247]\274\222\212\013\276\025\031\340<\212\367\027\275\257\313/\275Z\332\"=\017\0378\275\'\326\300<q\346\332\2758\010#<Q\023\300=UR[\275\251\251=\276\013\214\221\275s\313\221\275\217\367G>#\324\351=A%F\276Dv\324=\345\177\241;\216|\235\274O\300\320=\270\210>>\311,\334=\037W\210<\234\201\017>n\217$\276\275\r\250<\022\255\035>\202\255:=+\207\336=\"z\013<\030V\275=\325\366\233\274\3566H==\367\246=\013\277\316\275\335\254\216\274BB\r>\214\017b\275E\2330\276\323\":\275\374X\352;\0018@\276\356L\236\273\364G\202\275X\225\343:\312l\263=7\007\260=}\240d\274\274\263\205=\341\013\211=\373\n\344\275\215\336\327;\314:\310<]\200\306\274\313\033\'=x,(>\335\233\203\275\037,,>\260\237\275\274\177\000\344\275W\374\024\276\022\305.\275\247\354\345=\n\001^=\266\032\230\275|u\256\275\242\214M\275\3500\275<I\206B\274\246~\351\275A\370\033>|O\220\275/\265\020<^\003\205;h\300\243\275M\372\240=:\"\365\275\236\316\252<C \212=\341\331\247;O3\\\275.>\306=$\335\306=!-\256\275\237%\200\275\305s\334\2757;\232\275\254gN\275K\032k=\235T\312\274q\311B\275\372\031E\275`\025\013\276\031~\370;\223\315\304<\342\326\337;\027\242\352;\350J<=#]\354;i,\353<B\245\241\275\216!\306;<,\274={n\021>\315\350\022>\231\025\336\2750)\020>\356`\317\275\354\002\242=\226\337?>\312\373?=z\242\014>\375V\n>~\364r=I\335\271\275\253\033\250=\346\030\233\275\311\254\022\275\217\021w<\332\267U\275\212\247\013<H7\335\275\335\"A\275\373\231e\275\203\375\027\275\"X\036;q\227X=\263\023\335<7q\207=\252p\021\276\377\372\256\275\007\016|\275\305\024\372<\372\237\034<\020\320\224=\233!\r\276x^\020\274\336\246\313\273\342\275\332=\331]\325\274\313\220\345=s\240\275<\025\334\006=\020\000\304=\034|(\275\035s\211\274\020~\341\275\350\n&\275\2115p=_\340G\275\255I\207\275b\311\325\2743\253\r\2756\321\213\275\032\323\324=\357\370\002=\027O\213\275\237\023 >@l\2179\243x\346=;\005o\275d(\237:\212\224\314=\360\322{=h\333\273=q\224\256=\247^\002\275G\227\260\275{J\275=\014\315\322\275\324UE\275\330U\262\275\025D \2761\276\240\275\t\002\241=*\261\263\275T\370Q>\034\355\333\275I\023|\275\363S\217\275\204\354%\275\320M\334\275\266\005A<3\367\377=\322D\216<*\022\256<\330\000\037>\227\272\376<So\202=\232oY=\377c\366\275\230\'/\276{\016[\272\"\221\223\275\\Q\247\275a\r\272<\224Y\356\275L\227\030\276\000\211\024=\263\251S\275\262H\234\2753\272&\274\233\316\344=RRW=H\366\210\274\211\036\020=\3679\322\275\"\305 \276t\272\037>\343\016`=\241\005Z\273\002\274\364=\177\r%\275\234\237C=\306\271)\273\343M\224\275-S\242\274\013X\262=&\340\002>\353\334\367\274\010\2751\276f\032\241\275u\337\273=\\\252\250\275xf\030\275\227\324\343\275\360R(\276\n\271\274\275\n\3238>/a\017>P\271\232\274-\242\243;\\fG>\355f\202\275\206@\227\275\223\007\301\274\3620\316<\276\037\016\276\231\033\317;/B\254\275\305\034\260=M.\337=\310\031\033=\252\014\230\275\263\026\266\275F[0=\263_\002\276\302\330\021=\311\2376\274|\225\367\274\376\031)\276\200\331/>\223\327\234=]]U\275\2636\244=O\343g=\213DU=\317\270\030\275\")\351<\024\313\230=\300@A\276<0\204=\221\250A\275\204\246\376<c\263\270=,R\300\275\227\355\217<\231p\001<\320L\002\274\370:i\274q3\267\273\272V{\275u\364\320\273%\007\273\275#\205\024\275\265~\210\274\367\315\372\274\270\316\301=\366[1\2762Su\274\346\375\010=\233W\247\275\362H\026\275\254V\022\276NC\237=\303|\301\274\331\376j\275d\321\362\275\254\341W\274\035e\351<\365\200\032=}\275\030\274\245E\234=%R\032\275\332\275\'>\0320N\275\314\301L=3p\005=\303,\224= A\361\274Z\277\343<4\204V\275V+\236\275\345L\220;\233V\033\276\301Vi=\245\024\221=\363S\274<O\032(<\036<\222\275\007\2579=\035\247E\275\377\343\036\275\202\272\217<\342\223\247;\204(\237=\337\277(\2752GC<\027\355\t>y\341\253<V2,=\000}&>F\332\n>\350\025t\275\265R\216\274@(\331=\3068\221\275\211*\317=\363\363\036\276\\\253d<]\226\315<\027\375\026=\346\337\317\275I\374\310\275\242\331\322=\277\337\277;\222u\201\275\244\2547\275\254L\312<_\025\024\275S\275\356=\246\337\377<\273\343\265=\004\032\357\275\266\214\024=x.j\275`\337y=)o\241=\227\272\017\275\257\232\340\275*\333\254<J\343\240\275Gh\267\271\351\241\n=\006/K\2753\213<\2758n\301=\266i>;\232r<=*Q\014\273\361\251\006=\236\324m=\035\017\232\274\245\331\010>\253\250\220\274b\365\t:\223R\247\275 \217\214\274\242\344\007=\037\317\022>\273H\301\275\244C\317\274\026\355%>?\277\370<\206\374\260=\257\026\275\275\311W\373\274\234\317\342=%j$\276-x\233<\331\350\025=\332B7\276\346_\031\276\242tD>\260\364\253\275\026g\245=\243Kf=\342\273\213\275\224r\335:5}\346\273\300r\316=\233\373\274\275\332\241\252\275\205 \232=\354\0261>g\312\317=\323\227\035\275^\231\207\275\021\240\303\274\3558\026>1\013\203\275\354\312\246=R\r\002\275\222\344\310\275\254\377\032>\227\007\"\272\223$\037\276{\036\035\275\361<\260<\024?\313=:4D<\334\206\231=!a\341\275\222\362}\275>\232\221<M?\202=\030\200\374;\334L-\274\367\242\007=K\234\270=r\354\345=\255\250\253==\035j\275\335jN\276\227\004K=H\231\277=nK0=\233\217p\275\2452v;}\030\277\275\272\306\211<\022\364\032>\306:e\275B\\;\273\336j+\276cb\201=@l\"\276\321\341\022>\005\320\222\275\352e\364\274y\211\332\275\300G\251\275\0026\225\275\363\223T\274\330w\030=\242F6\276\361\355(>\004\030\035;\007\357\022=\224\335\032\275\311\223\213\274\276\310\233\275\021\026\311=]\t\017\276s55=5\364\216<\236\3534>\"\316)\276/$\331\274\350\225\016\275k\212`=\375\006R\275\036\031\036\276\272q\273\275/\001\341\275 \212Z\275\340\217\026\274\334I\272\275KI\322<\212\211\222<`/e\274!K\307\273\232\002P\275X\241I\275\232\276\277=\034\207\370\275+\226\t\276ZM\323=[\032:\275\330\264/\274\206\355P=\001N\270\275\201\222\200\274\225\320\036\276D\245\033=:\314\253\274\023\036L\276\007Nn\274\374\326\005\276\013\243\t<A\001\355=\316\t\254\275\214\333\325< \336\205\2750\272\003\274\240R\005\275Y\202\333\274\373B!\274\374\003\240\275\320_u<\021O\234\275\337)\203=\373\032_=l\314\177=e6W=n/\027>\236\225D\275\\\303\022\275\201\345D\276L\364\265\275:\020\207\275\226\204\033>d\346\213<\322L\234\271u\323\220\274\333\326\255=\004\255\204="
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "Const_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "network/weights_2"
      input: "^AssignVariableOp_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "\374\354\210<\n\327#<\255s\211;\005\323\216;\313\tu<\274\232\361;\357\324\372:\016u\332;\0207%<%#7<\361\275\300;\n\327#<f\304N;\305\003\211<\325\316\306;\306\003\363:b\t\025<i+\037<\326\232_<}\266\363;\256\236\201<\036N\204;\017\236\321;\351\037V;r\276\214<\250\263F<\310\311\275;\347x1<\347\301\214<\240\307\027<\266\253\224:\343\017>;.O\211<*\342;<\021W\000<)\346#<\300\r\251<\036\207!<\202N\266;0)r<^\311W;\360\000\360;U\027o;\255T\000<\323\305\330;hg8<Y\020\021<\302\251\010<\035_\003<+\255\206<\005\032\277;\206-%<\232\004y<j\350\335;\306\253\213<\n\245\344;1\321\022<\304\005\363;W\203N<V\021\201<\264\027F<\266^r<\274W\342;\375y\221;\n\327#<9\3071<\001\2310;\264\241\204<\245O#<\354o\022<\212\3343<\\\010h<\n\327#<\177{\371;\177\346\312;\204v\234;W<\321;%\254d<\207@P<N\023\037<9\217\022<\n\327#<\344=*;*\343\331;\210\375};\tE\212<F\334\264;\351\303\322;\324$E;F\213#<?\336_<\263\316}<\326\306\316;bL\263;\333.#<\320gQ<\227h\203<\344\273J<\n\327#<\264\223y<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "Const_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "network/biases_2"
      input: "^AssignVariableOp_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            tensor_content: "H\334j\277\206\n0\277\035\247\363>s\262\236\275\247\001\233\275\222\310\372\276\315\257\310>\210\273\207>\362\261t>\222\255\302>\333\255\n\2770\326\010>t\010\004?pN\334>_\370M<\275\234\234\275\241*2\277\332s\335\276VNl\274\315t]\277\251\017\016\277\237\363\361\274}\001\273>haK?\016\\\343\276\352\267A\277\332x\227\275}\217-\277|[a?t|\244\276\037\366\360\275v\035\035\277\377\"{>H\273\025\276\256\371\000\276\240\3529?3:\205\276XI-?\232}/\2774L\303>\001\213\t?.1\326\273\330\205\276>\266\364D\277\260\2115>\005\321\333\276\373\037R\277\317n\324\276\200\256\342>\236\254.\2745\353\314=\351\235\212={8\010\277\210N&\275\344\260\214\276\0272\306>\006\257\312=\350\207\207\276|\244\005>b\020\026\277-hD?h[\177>*\360Q>B\017\215=\367\000?\275:\354\005\277\203\354\264\276\001\270O?\035\026\342\275F~\032>u\243\275>an\007=G\334=\277se\000>|Q[?h\016 >\234\020\333=\352\204\306\275\315\270\017\277\236\305,?\203^\024\277-\2071?\356\323\251\276\313\021\016\277H<\303=\001\304#>%\354\272\276j\247\"\276\230[J?\014KM>\373\345\370=2\014c>\224\335\r>\355\233R\275\323r\346;\260\005\262\274\013@\t\277a\034S>4V}\275,\000!>P4R>\007\362\371=\351,\232=<\336U?\257H)?\347\020\311\276\216\010\037?\252\264\341\2755>\017\276\313\005u>{\274\222>\322\211\\>\331\372\355\276\254O\245>\337\365Z\276z\215K>\036\307>\277\236i\211>\266\312\013\277\301Ip\276\024\020\225>\304\230\020\277\177\220\022\277[\302\326\275\371\364\277\276\247\360\245\276\243k\210\276J\003\333\2747\377\307\2761\263\016\275\224\317\016?\307z-\276M,\301\276@\205\024\275o\202C\276S\3059\277\235\334G>\214\232\014;\301\201\313\275\032\216\026?\355\267\363=2\326K\276\331c\371>Q\034\267\275%\262Z\276\337\312\317<\2507_>\234\354N>p\211n>K\351\235=\253\361\260\275\001\313\323>X\035z>l\350\213>\242\3162\275\360\366\014\275\346%\260\276\277O\334\276\330\020y\277Gm1?b\007\024?\035\205\n\277\303]\222\276\334i\353>\2263n=ZE\220=\251\223\322\276\3146\177\276\210\327\350>S\251k<\240\255\006\277\212\375\242>\204\242V=f~\204\276\333\261\032>B\204\244\275\323R\265>\310\025\374>O3\025\277\337\177\245>\261\030]>ry\252>:2\030\277\307\334\254>\234\037\'\2772\006\262<l\023\204=\302\2145?\032\227\n?\"\371\357>\333sy?$N\013\277\211tb>\203\0337\275 \366\014\277\000R\324>B\2731\277\273\343\351\276\247\376\221\275\264&F\277\210\003\r?\361\331\326\276\372\364\035>k\325\"?k\237c?\276\357\317>\340\216:\277\334/3>\233\323}<\000\316\310\276\210\332\242\275\023L\024?\300\341H\277\026\0062\277\334\014\367\276\331$\345>7E5>c\017\213\276\332\344\n\276&\347\023?\357r\030\277/\003\300=\275\323 \277\036e\232>\335}1?\264\263\014\275\312\2125?\371\203\371\276K\366\217>C\365\213>-\213\326\2750%W\277y\326\025>\021\306\005?\230\177\222\276.\324\032\276\317\366\325\273\033\267>?\313\375\n\277\336\320\002\275\340\274\243=x\370N>\342q\332>j\212\027\275C\335\260>:\315\030?>Y\204>r\203\235>NG\013?\022\023\026>a\252*\277t\006\244\276\026\255\376\274\317\270\325\276\337Vf\276\322\\7?\250\206\231\274\271\223X\276\3610N\277bJ\377>\024FA>\373W\275\276W/D?n\320\211>o\335\352>/]\004\277\025P\312\276\233RT=l\341\203>\271&\311>\304\271\177?\302\342\344>\374j\302\275\022?\004?Hm\370>?\207\035\277q\322\n\275\252I\021\277\nsg\276Y\253*?\025\233\251\276\246\206\322=j\257(\277\356<\005\277\241t\325\276\311\033G\276`\234\261\276@\332\212=\325\315\265<GZ\327\273\r\3749\277\237z\033>\235\372H?b\334\314>~\304\243\276\201.M>\222\340\021\276\016\361#\277%\227\000\275f\346y\277\330\204\302>\377\364X>avb\276\224G\373\276s\003g<\324\353\031=\231\265\267\2767d\206\2766\250>\276\254\243{\277|\373\332\275\360/\014\276\323\240\275\276\341\250\031\277\'\t\300\276\264\235\202>H\231+>P\242\262\276R\230\352>G\350\014\277\331\3710>.\270Z\277\017\312\321\275\305-e\277\247\301\366\276\031\266v>\361\224J\2779\014\r\277\222\016\001\276\036\246\201\276\'^P?\364\363\324=\017\211\214=4ML\277\356\313z?\251\313!\276\016\203(>\2637\306\276\025\345\215\276\240L\234\276\262$\303\276\226\344\203\276Q\255\211=\312\254b\276\010\277\027?\307\240\363\276\253q\'\277?j_?\327\251\013>/\242\347\276\205\031\256>\242n\236\276\322lE?z\324\245\275\253 \203>\317^\354\276\371\253\334>\273\351\226\276\326\300\357=(\232m?\212hZ\277-\246_\277\035\221)?W\240\032=\212\273\377\2767\005\377\275\325Q\014\277V\247\220\275\032\315V?\301\'\007>\302\335??+\353_\277\277\353\350><R\326>x\213\262\272\262\302\"\276\331\267~=\306\342d\274\363\020e\275\250\004O>\271>=?7\004?\2760\255\007?\337\367\316>\337\nN\277B|*\277\262H\317>&\226\347\276&\217\255\275\206\216\024?\221\363(\276\255n\n>m\362\017?/pl\277\\p\267>\217\204\006\277!^N?t\312_>\353=e\277\231\0169>"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "Const_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "network/output_weights"
      input: "^AssignVariableOp_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\010m\270:\271\010\201<@\321k<\377\rP<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "Const_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "network/output_bias"
      input: "^AssignVariableOp_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/filename/input"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/filename"
      op: "PlaceholderWithDefault"
      input: "save/filename/input"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/Const"
      op: "PlaceholderWithDefault"
      input: "save/filename"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/StaticRegexFullMatch"
      op: "StaticRegexFullMatch"
      input: "save/Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "pattern"
        value {
          s: "^s3://.*"
        }
      }
    }
    node {
      name: "save/Const_1"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ".part"
          }
        }
      }
    }
    node {
      name: "save/Const_2"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_2abe75f64904484d962e34d010383360/part"
          }
        }
      }
    }
    node {
      name: "save/Select"
      op: "Select"
      input: "save/StaticRegexFullMatch"
      input: "save/Const_1"
      input: "save/Const_2"
      device: "/device:CPU:*"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/Select"
      device: "/device:CPU:*"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "beta1_power/Read/ReadVariableOp"
      input: "beta2_power/Read/ReadVariableOp"
      input: "network/biases/Read/ReadVariableOp"
      input: "network/biases/Adam/Read/ReadVariableOp"
      input: "network/biases/Adam_1/Read/ReadVariableOp"
      input: "network/biases_1/Read/ReadVariableOp"
      input: "network/biases_1/Adam/Read/ReadVariableOp"
      input: "network/biases_1/Adam_1/Read/ReadVariableOp"
      input: "network/biases_2/Read/ReadVariableOp"
      input: "network/biases_2/Adam/Read/ReadVariableOp"
      input: "network/biases_2/Adam_1/Read/ReadVariableOp"
      input: "network/output_bias/Read/ReadVariableOp"
      input: "network/output_bias/Adam/Read/ReadVariableOp"
      input: "network/output_bias/Adam_1/Read/ReadVariableOp"
      input: "network/output_weights/Read/ReadVariableOp"
      input: "network/output_weights/Adam/Read/ReadVariableOp"
      input: "network/output_weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights/Read/ReadVariableOp"
      input: "network/weights/Adam/Read/ReadVariableOp"
      input: "network/weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights_1/Read/ReadVariableOp"
      input: "network/weights_1/Adam/Read/ReadVariableOp"
      input: "network/weights_1/Adam_1/Read/ReadVariableOp"
      input: "network/weights_2/Read/ReadVariableOp"
      input: "network/weights_2/Adam/Read/ReadVariableOp"
      input: "network/weights_2/Adam_1/Read/ReadVariableOp"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/MergeV2Checkpoints"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Identity_1"
      op: "Identity"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "save/Identity_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_2"
      op: "Identity"
      input: "save/RestoreV2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "save/Identity_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_3"
      op: "Identity"
      input: "save/RestoreV2:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "save/Identity_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_4"
      op: "Identity"
      input: "save/RestoreV2:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "save/Identity_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_5"
      op: "Identity"
      input: "save/RestoreV2:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "save/Identity_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_6"
      op: "Identity"
      input: "save/RestoreV2:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "save/Identity_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_7"
      op: "Identity"
      input: "save/RestoreV2:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "save/Identity_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_8"
      op: "Identity"
      input: "save/RestoreV2:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "save/Identity_8"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_9"
      op: "Identity"
      input: "save/RestoreV2:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "save/Identity_9"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_10"
      op: "Identity"
      input: "save/RestoreV2:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "save/Identity_10"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_11"
      op: "Identity"
      input: "save/RestoreV2:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "save/Identity_11"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_12"
      op: "Identity"
      input: "save/RestoreV2:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "save/Identity_12"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_13"
      op: "Identity"
      input: "save/RestoreV2:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "save/Identity_13"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_14"
      op: "Identity"
      input: "save/RestoreV2:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "save/Identity_14"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_15"
      op: "Identity"
      input: "save/RestoreV2:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "save/Identity_15"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_16"
      op: "Identity"
      input: "save/RestoreV2:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "save/Identity_16"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_17"
      op: "Identity"
      input: "save/RestoreV2:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "save/Identity_17"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_18"
      op: "Identity"
      input: "save/RestoreV2:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "save/Identity_18"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_19"
      op: "Identity"
      input: "save/RestoreV2:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "save/Identity_19"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_20"
      op: "Identity"
      input: "save/RestoreV2:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_19"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "save/Identity_20"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_21"
      op: "Identity"
      input: "save/RestoreV2:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_20"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "save/Identity_21"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_22"
      op: "Identity"
      input: "save/RestoreV2:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_21"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "save/Identity_22"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_23"
      op: "Identity"
      input: "save/RestoreV2:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_22"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "save/Identity_23"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_24"
      op: "Identity"
      input: "save/RestoreV2:23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_23"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "save/Identity_24"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_25"
      op: "Identity"
      input: "save/RestoreV2:24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_24"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "save/Identity_25"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_26"
      op: "Identity"
      input: "save/RestoreV2:25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_25"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "save/Identity_26"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/AssignVariableOp"
      input: "^save/AssignVariableOp_1"
      input: "^save/AssignVariableOp_10"
      input: "^save/AssignVariableOp_11"
      input: "^save/AssignVariableOp_12"
      input: "^save/AssignVariableOp_13"
      input: "^save/AssignVariableOp_14"
      input: "^save/AssignVariableOp_15"
      input: "^save/AssignVariableOp_16"
      input: "^save/AssignVariableOp_17"
      input: "^save/AssignVariableOp_18"
      input: "^save/AssignVariableOp_19"
      input: "^save/AssignVariableOp_2"
      input: "^save/AssignVariableOp_20"
      input: "^save/AssignVariableOp_21"
      input: "^save/AssignVariableOp_22"
      input: "^save/AssignVariableOp_23"
      input: "^save/AssignVariableOp_24"
      input: "^save/AssignVariableOp_25"
      input: "^save/AssignVariableOp_3"
      input: "^save/AssignVariableOp_4"
      input: "^save/AssignVariableOp_5"
      input: "^save/AssignVariableOp_6"
      input: "^save/AssignVariableOp_7"
      input: "^save/AssignVariableOp_8"
      input: "^save/AssignVariableOp_9"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    versions {
      producer: 175
    }
  }
  saver_def {
    filename_tensor_name: "save/Const:0"
    save_tensor_name: "save/Identity:0"
    restore_op_name: "save/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "train_op"
    value {
      node_list {
        value: "minimize"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
        value: "\n\rbeta1_power:0\022\022beta1_power/Assign\032!beta1_power/Read/ReadVariableOp:0(\0012\'beta1_power/Initializer/initial_value:0"
        value: "\n\rbeta2_power:0\022\022beta2_power/Assign\032!beta2_power/Read/ReadVariableOp:0(\0012\'beta2_power/Initializer/initial_value:0"
        value: "\n\026network/weights/Adam:0\022\033network/weights/Adam/Assign\032*network/weights/Adam/Read/ReadVariableOp:0(\0012(network/weights/Adam/Initializer/zeros:0"
        value: "\n\030network/weights/Adam_1:0\022\035network/weights/Adam_1/Assign\032,network/weights/Adam_1/Read/ReadVariableOp:0(\0012*network/weights/Adam_1/Initializer/zeros:0"
        value: "\n\025network/biases/Adam:0\022\032network/biases/Adam/Assign\032)network/biases/Adam/Read/ReadVariableOp:0(\0012\'network/biases/Adam/Initializer/zeros:0"
        value: "\n\027network/biases/Adam_1:0\022\034network/biases/Adam_1/Assign\032+network/biases/Adam_1/Read/ReadVariableOp:0(\0012)network/biases/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_1/Adam:0\022\035network/weights_1/Adam/Assign\032,network/weights_1/Adam/Read/ReadVariableOp:0(\0012*network/weights_1/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_1/Adam_1:0\022\037network/weights_1/Adam_1/Assign\032.network/weights_1/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_1/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_1/Adam:0\022\034network/biases_1/Adam/Assign\032+network/biases_1/Adam/Read/ReadVariableOp:0(\0012)network/biases_1/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_1/Adam_1:0\022\036network/biases_1/Adam_1/Assign\032-network/biases_1/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_1/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_2/Adam:0\022\035network/weights_2/Adam/Assign\032,network/weights_2/Adam/Read/ReadVariableOp:0(\0012*network/weights_2/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_2/Adam_1:0\022\037network/weights_2/Adam_1/Assign\032.network/weights_2/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_2/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_2/Adam:0\022\034network/biases_2/Adam/Assign\032+network/biases_2/Adam/Read/ReadVariableOp:0(\0012)network/biases_2/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_2/Adam_1:0\022\036network/biases_2/Adam_1/Assign\032-network/biases_2/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_2/Adam_1/Initializer/zeros:0"
        value: "\n\035network/output_weights/Adam:0\022\"network/output_weights/Adam/Assign\0321network/output_weights/Adam/Read/ReadVariableOp:0(\0012/network/output_weights/Adam/Initializer/zeros:0"
        value: "\n\037network/output_weights/Adam_1:0\022$network/output_weights/Adam_1/Assign\0323network/output_weights/Adam_1/Read/ReadVariableOp:0(\00121network/output_weights/Adam_1/Initializer/zeros:0"
        value: "\n\032network/output_bias/Adam:0\022\037network/output_bias/Adam/Assign\032.network/output_bias/Adam/Read/ReadVariableOp:0(\0012,network/output_bias/Adam/Initializer/zeros:0"
        value: "\n\034network/output_bias/Adam_1:0\022!network/output_bias/Adam_1/Assign\0320network/output_bias/Adam_1/Read/ReadVariableOp:0(\0012.network/output_bias/Adam_1/Initializer/zeros:0"
      }
    }
  }
}
