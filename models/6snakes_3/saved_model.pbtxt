saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "AddV2"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_aggregate: true
        is_commutative: true
      }
      op {
        name: "AssignVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        input_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "BroadcastGradientArgs"
        input_arg {
          name: "s0"
          type_attr: "T"
        }
        input_arg {
          name: "s1"
          type_attr: "T"
        }
        output_arg {
          name: "r0"
          type_attr: "T"
        }
        output_arg {
          name: "r1"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "BroadcastTo"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "DynamicStitch"
        input_arg {
          name: "indices"
          type: DT_INT32
          number_attr: "N"
        }
        input_arg {
          name: "data"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "merged"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type_attr: "index_type"
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "index_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Log"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "PlaceholderWithDefault"
        input_arg {
          name: "input"
          type_attr: "dtype"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ReadVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "Reciprocal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_QINT8
            }
          }
        }
      }
      op {
        name: "ReluGrad"
        input_arg {
          name: "gradients"
          type_attr: "T"
        }
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "backprops"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ResourceApplyAdam"
        input_arg {
          name: "var"
          type: DT_RESOURCE
        }
        input_arg {
          name: "m"
          type: DT_RESOURCE
        }
        input_arg {
          name: "v"
          type: DT_RESOURCE
        }
        input_arg {
          name: "beta1_power"
          type_attr: "T"
        }
        input_arg {
          name: "beta2_power"
          type_attr: "T"
        }
        input_arg {
          name: "lr"
          type_attr: "T"
        }
        input_arg {
          name: "beta1"
          type_attr: "T"
        }
        input_arg {
          name: "beta2"
          type_attr: "T"
        }
        input_arg {
          name: "epsilon"
          type_attr: "T"
        }
        input_arg {
          name: "grad"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "use_nesterov"
          type: "bool"
          default_value {
            b: false
          }
        }
        is_stateful: true
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Select"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "t"
          type_attr: "T"
        }
        input_arg {
          name: "e"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Softmax"
        input_arg {
          name: "logits"
          type_attr: "T"
        }
        output_arg {
          name: "softmax"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "StaticRegexFullMatch"
        input_arg {
          name: "input"
          type: DT_STRING
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "pattern"
          type: "string"
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "TruncatedNormal"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "VarHandleOp"
        output_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
        is_stateful: true
      }
      op {
        name: "VarIsInitializedOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "is_initialized"
          type: DT_BOOL
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "2.2.0"
    tensorflow_git_version: "v2.2.0-rc4-8-g2b96f3662b"
  }
  graph_def {
    node {
      name: "reward"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "actual_move"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 4
            }
          }
        }
      }
    }
    node {
      name: "network/input_layer"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 9
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.3333333432674408
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal/mul"
      op: "Mul"
      input: "network/truncated_normal/TruncatedNormal"
      input: "network/truncated_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal"
      op: "Add"
      input: "network/truncated_normal/mul"
      input: "network/truncated_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights"
        }
      }
    }
    node {
      name: "network/weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Assign"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "network/truncated_normal"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases"
        }
      }
    }
    node {
      name: "network/biases/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Assign"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "network/Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul"
      op: "MatMul"
      input: "network/input_layer"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add"
      op: "AddV2"
      input: "network/MatMul"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu"
      op: "Relu"
      input: "network/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_1/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mul"
      op: "Mul"
      input: "network/truncated_normal_1/TruncatedNormal"
      input: "network/truncated_normal_1/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1"
      op: "Add"
      input: "network/truncated_normal_1/mul"
      input: "network/truncated_normal_1/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1"
        }
      }
    }
    node {
      name: "network/weights_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "network/truncated_normal_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1"
        }
      }
    }
    node {
      name: "network/biases_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "network/Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_1"
      op: "AddV2"
      input: "network/MatMul_1"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_1"
      op: "Relu"
      input: "network/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_2/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mul"
      op: "Mul"
      input: "network/truncated_normal_2/TruncatedNormal"
      input: "network/truncated_normal_2/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2"
      op: "Add"
      input: "network/truncated_normal_2/mul"
      input: "network/truncated_normal_2/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2"
        }
      }
    }
    node {
      name: "network/weights_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "network/truncated_normal_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2"
        }
      }
    }
    node {
      name: "network/biases_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "network/Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2"
      op: "MatMul"
      input: "network/Relu_1"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_2"
      op: "AddV2"
      input: "network/MatMul_2"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_2"
      op: "Relu"
      input: "network/add_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_3/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mul"
      op: "Mul"
      input: "network/truncated_normal_3/TruncatedNormal"
      input: "network/truncated_normal_3/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3"
      op: "Add"
      input: "network/truncated_normal_3/mul"
      input: "network/truncated_normal_3/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights"
        }
      }
    }
    node {
      name: "network/output_weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "network/truncated_normal_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/output_bias"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias"
        }
      }
    }
    node {
      name: "network/output_bias/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "network/Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_layer/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_layer"
      op: "MatMul"
      input: "network/Relu_2"
      input: "network/output_layer/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_3"
      op: "AddV2"
      input: "network/output_layer"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/output_layer_1"
      op: "Softmax"
      input: "network/add_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "Mul"
      op: "Mul"
      input: "actual_move"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "reduce_sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "reduce_sum"
      op: "Sum"
      input: "Mul"
      input: "reduce_sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "policy_gradient"
      op: "Log"
      input: "reduce_sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "mul_1"
      op: "Mul"
      input: "policy_gradient"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Neg"
      op: "Neg"
      input: "mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape"
      op: "Shape"
      input: "Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/grad_ys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "gradients/Fill"
      op: "Fill"
      input: "gradients/Shape"
      input: "gradients/grad_ys_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Neg_grad/Neg"
      op: "Neg"
      input: "gradients/Fill"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape"
      op: "Shape"
      input: "policy_gradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape_1"
      op: "Shape"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/mul_1_grad/Shape"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul"
      op: "Mul"
      input: "gradients/Neg_grad/Neg"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul"
      input: "gradients/mul_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum"
      input: "gradients/mul_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul_1"
      op: "Mul"
      input: "policy_gradient"
      input: "gradients/Neg_grad/Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul_1"
      input: "gradients/mul_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum_1"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/Reshape_1"
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape_1"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/policy_gradient_grad/Reciprocal"
      op: "Reciprocal"
      input: "reduce_sum"
      input: "^gradients/mul_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/policy_gradient_grad/mul"
      op: "Mul"
      input: "gradients/mul_1_grad/tuple/control_dependency"
      input: "gradients/policy_gradient_grad/Reciprocal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Shape"
      op: "Shape"
      input: "Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Size"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/add"
      op: "AddV2"
      input: "reduce_sum/reduction_indices"
      input: "gradients/reduce_sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/mod"
      op: "FloorMod"
      input: "gradients/reduce_sum_grad/add"
      input: "gradients/reduce_sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range"
      op: "Range"
      input: "gradients/reduce_sum_grad/range/start"
      input: "gradients/reduce_sum_grad/Size"
      input: "gradients/reduce_sum_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Fill"
      op: "Fill"
      input: "gradients/reduce_sum_grad/Shape_1"
      input: "gradients/reduce_sum_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "gradients/reduce_sum_grad/range"
      input: "gradients/reduce_sum_grad/mod"
      input: "gradients/reduce_sum_grad/Shape"
      input: "gradients/reduce_sum_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Reshape"
      op: "Reshape"
      input: "gradients/policy_gradient_grad/mul"
      input: "gradients/reduce_sum_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/BroadcastTo"
      op: "BroadcastTo"
      input: "gradients/reduce_sum_grad/Reshape"
      input: "gradients/reduce_sum_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape"
      op: "Shape"
      input: "actual_move"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape_1"
      op: "Shape"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/Mul_grad/Shape"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul"
      op: "Mul"
      input: "gradients/reduce_sum_grad/BroadcastTo"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum"
      op: "Sum"
      input: "gradients/Mul_grad/Mul"
      input: "gradients/Mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum"
      input: "gradients/Mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul_1"
      op: "Mul"
      input: "actual_move"
      input: "gradients/reduce_sum_grad/BroadcastTo"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum_1"
      op: "Sum"
      input: "gradients/Mul_grad/Mul_1"
      input: "gradients/Mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum_1"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/Reshape_1"
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape_1"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/mul"
      op: "Mul"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/Sum"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul"
      input: "gradients/network/output_layer_1_grad/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/sub"
      op: "Sub"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "gradients/network/output_layer_1_grad/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/mul_1"
      op: "Mul"
      input: "gradients/network/output_layer_1_grad/sub"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape"
      op: "Shape"
      input: "network/output_layer"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape_1"
      op: "Shape"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_3_grad/Shape"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum"
      input: "gradients/network/add_3_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum_1"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape_1"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      input: "network/output_layer/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_2"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/output_layer_grad/MatMul"
      input: "^gradients/network/output_layer_grad/MatMul_1"
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/output_layer_grad/MatMul"
      input: "^gradients/network/output_layer_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/output_layer_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/output_layer_grad/MatMul_1"
      input: "^gradients/network/output_layer_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/output_layer_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_2_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/output_layer_grad/tuple/control_dependency"
      input: "network/Relu_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape"
      op: "Shape"
      input: "network/MatMul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape_1"
      op: "Shape"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_2_grad/Shape"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum"
      input: "gradients/network/add_2_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum_1"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape_1"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_1"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul_1"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_1_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      input: "network/Relu_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape"
      op: "Shape"
      input: "network/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape_1"
      op: "Shape"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_1_grad/Shape"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum"
      input: "gradients/network/add_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum_1"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape_1"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul_1"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      input: "network/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape"
      op: "Shape"
      input: "network/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape_1"
      op: "Shape"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_grad/Shape"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum"
      input: "gradients/network/add_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum_1"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape_1"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_grad/tuple/control_dependency"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "network/input_layer"
      input: "gradients/network/add_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul_1"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "beta1_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta1_power"
        }
      }
    }
    node {
      name: "beta1_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Assign"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "beta1_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta1_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "beta2_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta2_power"
        }
      }
    }
    node {
      name: "beta2_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta2_power/Assign"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "beta2_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam"
        }
      }
    }
    node {
      name: "network/weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "network/weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam_1"
        }
      }
    }
    node {
      name: "network/weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "network/weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam"
        }
      }
    }
    node {
      name: "network/biases/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "network/biases/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam_1"
        }
      }
    }
    node {
      name: "network/biases/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "network/biases/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam"
        }
      }
    }
    node {
      name: "network/weights_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "network/weights_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam"
        }
      }
    }
    node {
      name: "network/biases_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "network/biases_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam"
        }
      }
    }
    node {
      name: "network/weights_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "network/weights_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam"
        }
      }
    }
    node {
      name: "network/biases_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "network/biases_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam"
        }
      }
    }
    node {
      name: "network/output_weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam_1"
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "network/output_weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam"
        }
      }
    }
    node {
      name: "network/output_bias/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam_1"
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "network/output_bias/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999747378752e-05
          }
        }
      }
    }
    node {
      name: "minimize/beta1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "minimize/beta2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "minimize/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.99999993922529e-09
          }
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights"
      input: "network/weights/Adam"
      input: "network/weights/Adam_1"
      input: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases"
      input: "network/biases/Adam"
      input: "network/biases/Adam_1"
      input: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_1"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam_1"
      input: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_1"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam_1"
      input: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_2"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam_1"
      input: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_2"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam_1"
      input: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_weights"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam_1"
      input: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/output_layer_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_bias"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam_1"
      input: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_3_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/mul"
      op: "Mul"
      input: "minimize/ReadVariableOp"
      input: "minimize/beta1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "minimize/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "minimize/mul"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^minimize/AssignVariableOp"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/mul_1"
      op: "Mul"
      input: "minimize/ReadVariableOp_2"
      input: "minimize/beta2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "minimize/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "minimize/mul_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^minimize/AssignVariableOp_1"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize"
      op: "NoOp"
      input: "^minimize/AssignVariableOp"
      input: "^minimize/AssignVariableOp_1"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^beta1_power/Assign"
      input: "^beta2_power/Assign"
      input: "^network/biases/Adam/Assign"
      input: "^network/biases/Adam_1/Assign"
      input: "^network/biases/Assign"
      input: "^network/biases_1/Adam/Assign"
      input: "^network/biases_1/Adam_1/Assign"
      input: "^network/biases_1/Assign"
      input: "^network/biases_2/Adam/Assign"
      input: "^network/biases_2/Adam_1/Assign"
      input: "^network/biases_2/Assign"
      input: "^network/output_bias/Adam/Assign"
      input: "^network/output_bias/Adam_1/Assign"
      input: "^network/output_bias/Assign"
      input: "^network/output_weights/Adam/Assign"
      input: "^network/output_weights/Adam_1/Assign"
      input: "^network/output_weights/Assign"
      input: "^network/weights/Adam/Assign"
      input: "^network/weights/Adam_1/Assign"
      input: "^network/weights/Assign"
      input: "^network/weights_1/Adam/Assign"
      input: "^network/weights_1/Adam_1/Assign"
      input: "^network/weights_1/Assign"
      input: "^network/weights_2/Adam/Assign"
      input: "^network/weights_2/Adam_1/Assign"
      input: "^network/weights_2/Assign"
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            tensor_content: "\033:0>JY\253\274\035\303\033\277T\316\331\2765\007\256\275\257\373\226>\322\201\316=\210\363h\276\250\022\021\277B\n\265>\300\267\365\276t\332g\276\374Z\354=~\351-\2768V\241\275\2544\227>Zwu>\003\014\213\275$\376\365\276@r\026>\224)\243=\311\207B\275V\207\225>\367\352d\276~\214\326\275/\010\002>\340EI\275\272\210&\277.~\214\276\372\204\244\276\253\222\351>\342&\001\2752\262^=\352\254\255\276\2405z>\316\222\004\275\206\177\006\277\027\002\352=\361SO\276f#\245=%\\\333>\240a\001\277\310\272\013\276\354h!?\007\216\020\276;\204O\275\317\264]\276\014 \365\276\267\236\031\273}\260\036\277\246\027)<\310x\375>~\250/\276\014n\340=\203\251\335>\3758\324=v\373\005\277\010m\027>4\275(\276\336\330\275\275\"b:\275\035\225\031\276\226\005r\276vd\367>\307\360\035\275\315\313\330\276\325\207!\2773\200\213>\364\262\303\274+T\303\275I\000U\276\370\222\000\276P\272\016?^\311\227\275\247\265\334>\246SM\276\231,%?\032O\351\276\262\235\213\275\243\225H>[\321u\276\">\016\277MVF\276\010w.>\347L~>\305\244\247=\237\346\275\275/\206\030>\235Ig\276i}\313>JxY\276\335\tS\276\315a0>\021m\363\276\223\365\257>\356\377\315\276)k\305\276\235\321Y>\2766\027=\230\207W\276\350\341\240\275\230\362b>7\353;>\010(\000>\350eW\276\332\216o\276w\201\021=\313\267\263\276\325H\313>\004:\211>{\2539>\302\337\377=\024\313\247>\345\277\214=\270^\324\275\256\267X\275\206.&\275G\325\326>\216\030\020\2772\311F>\265l\247\276,v\375>\240\213\326<\224\375B\276j\324\317=\224AI>+\310\360>\250\035\352\276p\330\004?/:\037>u\320\210\274\001\227\210<,]\334>\315Y\206\276\331\002\371\275\313\223\353\276\322a\010?<\340\336=\275\364t\276\246\n^>\003\323\351\275\276<\251>\236\2175>*C`=\220RM\276\215\222\003\277\030\200\232\276\307\207\240>\226\357\004>\027p\317\276\315\na>\250E\243\276\004\001\341=d\365\337>\034Xj>2\234\262>i>\216>Y\306\212\2763- \274\326w\n\276T\247\215>\356Ym;\267\337\007\276m\016\016\274\225\230\026\276\\\320\336>\377mD=\037\246=>\021\330\177>(\037x\275R\245U\276;\307\301=\027\347\263\274\005\023T>\231\002\031\277a\374\307\276\323\t\312=\360\200\321>\211\270\037>\027\234{\275\307u\364\276|\247/=\034e0\276\000A\216\276\256\265\257>\300\201\243>S\367\005>\343\227U\274\255\203\333=\r\364\372\276\236u\233=\237\242\027>\232\353\324\276f\020\014\277F\312\364\275i7\304\275\343E\367>\353\301\246\276{\273\010?\202\305\334>\237\035\n>\367D\377=\200\341T\276\204\032\007\276\230\247!<\303)\r>\217\177b>\254\215\345>\354TC\276B\233^>\370\260;>\302r\255>%\344b\276\n\323%\277\273\376\340\275\2644\237\275j\\%\276\034l\315\276[\033W\275\263%\271\276\364M\255>{qU\276\227PU>o\031\262\274\026e\254>\214m\301\276e\013U>ki\341=m\3129=\")c\276a\352(?\024\312\236\276\010\321P>\232(z=;\214\304\276t\352E\274\001\246\274>\222\021\032?\000\370K>\260\035\372=\244\022\200\275\373\273\304\276MX\240>IO\325\276A\207\255<\257\301\272>D\256\235\276~\223\322>3\005\031\276\247\373\203\275[\335q\276@~\010\277\275\325\010\276\032k\003?\255\212U\276\001\244\007\277)\005\314>\260 \323\2740\275\034\276\225#\342\276\302x\252=F$\\>\223 \216>\177\341\204\276\365\256\335\276\003\351\207\276y\317\361\276\352\002\027<q(\264>\317\362\037\276\250\333/\2763yE>!\335\236>\354\343-\276\204\341\346\276J\340\262\276\247X\013?\020ul<y\017w>K\243\311\276\240\323#?Te\342>\345\247\360>\263\354\026\277\275\225\034\276\2043\257>\254\212\260;\301\227\247>\351\205\214>\201\r~>3\003F>\214\2130>\236\3370\276h\177D\276\305\027\224>\260\037\274\275\021\350\355\275\330\273(=\006y\027=\201\231\244>\330@\202\276U\376\014\277u\354\250\276VTt>\353j4\276\210O\277>i0\032>\375$\336=%\014a\276\356\344o\275\'\232\340\275\232\355\021\276JL\324>\200>#<\202\210\260\2749\354\017\277q\\\032\277Y\344\232\276\267\261\037?D\252\177>`V\327\276\370)\262\275w\201\211;\303\350\033\277d\035\300>pvq\276\330X\264>d\343\371\274B\322\244=\202\003\222=L\344k\276\321\351\371\275\205\362\244=\236\326\206\276ov\r?\334\310\t?`\326\260\276\025\237\322\275j~\235=\371*\323\273AN\323\275\221\002P=\364\321\005\276\205Il\276\376P\032;\216w\265>C$i\276\372Yh\275\177x\307>\250u\254\276{\206#=\377\314\244>\340;\237>S\367\234=\260O\255>\263@\344>\307\022b\276\004;\267=\263\315\030?\336\350\371\276\023L\236>\323\371\025\275A\274\256>o\334\231\276\264\016\">O\250\220>|\207#\275\004\365\321\276\362-\344<\034_k\276\277z\030>\034k\357\276x\330O\276v\231\014?\246\222\247\276\321\317\375>\024\275\244>\023\236M\276r\351\213\275\246O\r\277A\275\272\276\344\344*\277C\340\315>\343\251\220\273|/*\276\t}V=\333\302\027>E\226\020>9\306r>\254\367~>\"\346\324\275\372f\322\276w\035\243>*\313\232>\327\024\307\276\235\274\207\276p\314#>\025\034 \277U\t\035\276\256\036\006\277\257\253g>\217nJ\275T4I\276\262}\330\275\033\301O>[6\222\276h\330\217>\006\3202\276G\274?>tp*\275IC\220\274\346\260\374\276\203\001\347>\207\001\024\277$PB>\274\364\342\275\257\024\236\275\304\354!\276eY\020?\010\250\211>_\342?\276T\r\265\276\246\304\316>\006\017.>.\007<>\243\200t\276\026\231\223\275a\233s\274\222\326\031\276?\253f\276R\261y\276T\207\217\275y\376=>\n2\277>\322\315\t?\361:D>:\006><Z{\312\275Z\374X\275\320\177\217\276\022L\010\277\310\304\003\276\375\277\036\274\177\237k\276\255\000N>f\323\014?\246\253\243=<U\r?\325\222\373<+g\304=6\347\002>\246\000\206>S\365\355\276\336\221\014?\366\333\201\276\013\220\001\277VA\335\276\361\276\244:\356\370\321>g\322(>\"qo>,in\276\267\205\350\275\204\247\241>\203\316\375>7\300\304>\234d\341\276\307\214\337<\204\212\346\275\345\374\001>F\370\237=\007h\274\275&\201\030=\\\373\350\276\006\344\r\276\357\327\030>*X&\277\332v\t?\272\303\t?)\024H>\026X\200=65\027?6\362\201\276\0359\016\277\235\305\006<\347\370\034\277\253 N\276\260Hh>K\021\235\276\341]\206>C1->\022\030\200>\237G\353\276\304\333\254>\032F\002?\035\316\002\276\343\333`>i\021\271>\243\256h\2763\373\210\2761\n\336\275\2038\330\276\322\222$>\254\303\355=\036\035\';\321\031\316=\375b\377=1\320\357\276?\201\003>\332\251W>\345\361_=R\351\350\276\0176\316\275\244\326;>?\264\264\276\363\264v>\354\354\250=\251\003\342\276\0314&>\214A\234\276\\\177\372;N\363\034\277\342\033\013?\213\254\205\276<<\035\277W\037\242\275\257\201\331=\355=a>\276#\317>\226\300\231>\221\372\255\276\022\365\020\277\313;\267\275\354\213\025>\335\203\253=s}\240\276\222\237\213=D\260\330\276m\355m>\332F\336\275\010\352H\275\\\252\356>~\306{>7\034\215\276\017B\030?\256\311\323\275\037:\247;\033\277\271>P\227\316\276\240w\273=\211:\243\275\"\020\005>\340&\300<\305\300\212>\025\t\343\273\017vd>\000\025\006\277,7?>B\355}>\014\253\216\276 M\322=\004\230\262>3\270\307\276I\310\307=\315\003\304\275\025\363V>\004\365\262\275D\001\200<{\031M\276H\227~>?_\212\276\r^\204>h\346\365<\235\271\216\276\240A\257\276\204Ps\276\232!\216\274l\204\354\276\366G\375=\235\266\347=\235\304\355\276h=\211>`U-\275\361\020I\276\344\216J\275\003\255\276\276\004\310\037>\220\332\321\274\201A\246\276\342q\260\275\312<\240\276\023u%>\216p\205>\026\317\230\275\250\372?\276%,\370\276\262\274\327>T<n><\035\002>\036J\253=\017\261X>\024\037\302\275%\205B\275E\355\305=\344\0103=\274\360H><\372I>-?\265=\346\245\313\273\013\357\264\276\001\243\007=A%\243=9\211;\276\'?\302>\341DX>\003\320\313\275\353\271{>Br\256\276\254\353\223\276\237\n\304>\310\201\320\275~H\255=9\202#?\373\3121>,\327%\277\313\263>>EQ.\277\335\325\325\274\225\013\323\275\213\274\236>\272r\243=\321\277\353>\033x%> ==>\231\275\355\276R\363[>\275\177 \276(\"\216\275\205>a\276(\r\230=\360\357\337\275\336p\017>,\264\345=\037\3174\276R-{>g.\235>h\002\r>-j\010\276\200\026\342=S\211\n?\006#\307<^\307\261>\024\221\t\277\363\207\265=\314\231\332\276\t\223\262\275\366\004\n?\334_z>\024_\372\276WzM>\200\354\002?\322gI\276D@\000?\243\221{\275o\223S>Wr\352\275\342\353\262\274\221\'M>\222#\212>\373tn>\333\007[=\366\244\003\277\010P\316\2751x\375;\302R\275\276\244\021\342=\243_\217\274gL\263\276`p\004\275\211\021*>\030\344\210>G\366v>o\302\317>B?%?\032\340\323>\345\243\337\275\217\262\316\274\013\207\246\276\261\243#>W\342\210>\213G\227>z8%>t\0356\275\351\277\022?\253`\346\276\236\202\227\276IA\261\276\'\256\020\277\221Th=\221\374j>S;\"\277\371L#\276l\260S>=\023S\276+{\200\276\300I#>\337\221\207\274\226`H>\273K\217=u\351t>\033Q!\276\247\236\r?,\220\014\276j\352\303=\r\345\330=%\375u\275\033+\202>{\213\325<\310\275==\213:\372\276c\020\236;\301\004\005>V\225*\276\311\203\002>\\]\014\277V\356\210<1\245\275\276\000z\006\276<\204x>Nw)\277\320@`\276=\200*\276\200\214\376=\327\353\376>g\327\370>\201q\267=7\230\005\277\276\020\t?\257\335\266\276\240\022\266\276\372\240\264\276\213\025\277\276\367-\305=\220\315U\274rd\217>\242Q\005\276\332\376\325=:\343\031\276Sb\r>\240\361\001\277\336\326\016>\010o\204=\261\320\001\276(\217Q\276kO\037\275\235g?>\217\231<>/k\203=3\301)>\331^\264\275\270t\327<\223\323\300\275\261\024\354\275\275\354k>\265\262\030>\242\345N\276\270\334\261>SaJ<\254\247p\276\267<\310>\316N\377\276|x\347<\302\n\001\277\374\334\007\276To\374>\332 \363>8\335\262\275V\310\271=\331\004\005\277u\211\221\274\177\201q\276\327\202^>;\256i<\205\252\346=\376\257\333>\355\340W\276\322\320\r\277\325\032\373>X\177\212\276*\204\204\276H\037\027=n-j\276\242\252\337>S\300\210>\036\n\272\275\2623=\276\023$\224>\244&\224=\300\n\223<Up\031\276?V\363>\237\304\365\274\247\331\213>=\211\257>\322\331 ?\257\001\303>|;\366>\034\257\312\276\330\256\340\273\"\376\034\275\210A\230>e\255P>0\266Y\276\251X\244\276t\277\352;\"\262\216>4X\333\275w\246\376=i\351\">\244\021\232\276\362\004\377=\355\320r\276l\326\363\276\314\315\000<!\271r>t:]\276\254\344\365\2738\270\267<\250p\376>\274\243%\277\225\306^>$\252\311=\006\303\330\276\242\362\004?I\000\231=\216\255\226\275\013rX\275\333\375\034\277[[n\276\013\333v=\317\334\205=I[\000?\256\r\252>\233S\215=\027\262\025>}u\026\276\355\330(\276\315\240\240\276\327\334\337\274\354\220\337\2740\255\022?\203.\r> >\277=\315\230\216>\361\3752=\311\221)\277\201\372\226\275D8\263\276$a\n\275`\216\204=\311\225\010?M\210\321\275\222=S>R\275\007>7\022\227\276Y\'\035>\324\312\364\275\024\306g=\223\342D\276\266\005O\276\222\254\212>\215\361\206\276;\213\324\272\241\266\321>\232\"\220\276\336j8>J\273t>\343(d>\212M\243\276\204\226\241>3he\274\341\315\376\276\337\307\240>\350\025\324>\226\007\035\277,t)?\233\217\033>\014\266\317\276\266<\347>\202\265\n\277\226\014:>2\373\025\2776\014\037\275\"\243\230>\327\363\251>\333\365\246>RdQ>\0162W>0\247\275\275\254U!?"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      input: "^AssignVariableOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "Z\366\026<\204\034H\273:\'\007<\225+Y<\251\307\262<\025\202\025<0\307\301;\310\021\371;\201\243?<}\3164<\026\\\262\272AGe<\"\305\207;/F\322:\342P;;\207\256\255<qM\205<V\002\265;\013\024\304<\327\200\307<E<\217<%\233\001<OlE<\2269\257<\306\n\372;k\302\255;\211T\264<Ua\207<\025\017\302<.\275~<\273\214\265\273\232\322\264<\204\2348<\0233\361;~6\211<H\212\346;Ex\273:\250\311\244<\244}4<\235\321\236<\016&j\271A\246\006<\022\352\231<\263\033\352:\270mt<\316\316l<s|\3747\022h\243<\377\254\240<\003\316\343;\222c\016\274\303 s\273\337u\301<\027\273Z<\213A\037\273\327\203\253\273+!7<\216\311F<\341;\314<+\377,<\323@\034<\265\317\255<S\207c<\224\366~;7\356\231<N\226\203<\327\277\250;)o\321<TZx<\r\334u<{W\226<\340\364_\270\333\315\3448\206F\234<\305\273A<\322\232:;\000\226\222;H)V<\2135\255<VPp<q\251\211<\371\270\227<cZY<\210\233\232<V\231\'<o\303\255<\265\000A<\201\370\302<\372Tf<\330d\250<\312\261z;\334\247\272<\317\246Q<\332\3479<\277K\257;0\360\240;\301\247\200<_\224@;\313\315G<\211\014\267;"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "network/biases"
      input: "^AssignVariableOp_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: "\372\260c\275<d\261\275v\350\332=(|\274=\'\362T\275\245\367]\2755\004\320<\212l\014\276V\254\333\274\305(\025\276\216\242\010\276:$\035\276\206S\325=\205\025\245\275b3\344=\317\037\331\273\323E\212\274\377\024\317\275~9\377=y\213\017>\375BW;\301|:\273\261{v=V\320\027\275m\024\221=\0310\341<N\022)<\016\373\222<x4\336\275}=M=\000\315\253=#\333\270\275\001\352c=\261\272\337\274\035\346\017<\000v\032=\252\\\325\275\316p\332=5\250L\275Ic\"\274\211Qu\275\rz\302=\355\313@>\352\231~=8\2558>\016z\232\275\366W==\371F?\275\374\323\270<\304\236M\275\374\214\223<\035F\021=he?>]K\306\275\034L\004=NpK\275\211\006\236\275\217\310`=\346\230\240<o\300\026\276\\\243u\275\233\266s\275e\227\316\273/+\023>J1S<v^?=\222V\354\274\337\306\242<\r\332E>\327\243\016\276\321O\200:\001a\235<\003\266\014=j\3524<\320\351\362\275?l\200\275xD\261\274\373B\353=\376\211{=\330\340Y\275\234\244\254=S\r\311\273F\344d\275\321I\263\275\362\317\013>^{\007>\323\233\243\275^\362\265\272\2337\350\275X\234w\274p\013\023=`\315\233\275n\322\021\273cL\270=S\013\373\275\303\257\367\274\313\027\366\2758\232\302\275\206\035B\276dK8\275<\205\232<\255\330\366=\230;\250\275#\221\210=\206l4>6\006\205=\332\326r\275\351q\004\275\321\027\224=\234i\003\276\316\232\344\275\036 \373=x\217\224=\222\267\345\273K\277\222=\261K&\276D\275\212\275\032\361a<[\372\007\2768\177V\275\373/\327\275^(Y<m\332Q\275&\345\003>k/\364<q\212\n\275NyZ\274\263\022\004\274\017\343Z\275\364\024\343\2756\327\231\275\240S\'=}s\254=\231\246\033>@;\265\275\217\347\326\275\313\033\213<\276\206\264<\3510\233=\375|Y=\360\266\003\276(\177\331\273\271\030\214\275\036\240\226<o\362\022>\227\244\346\2754\010\022>)+\022\276c\253<\275\265\035\276\272s\330\353\272%1\216<@\325\013>\320\266\352<{\177\325\274\260\213\264<\002\3070>\2334\364\275M\222\374=M2\302\275bT\324:\025\306\232\275C\277\226<\255\274\274\275\006\332\276\275Q0\357=\rHE;9j\200\275\207QV=\n\251\004>!] \276\243\031\202;\354\327\376<4ob\274\347\226\220\273\304\\\242\274\200\206\027>\0020\005\276\362>\300\275$]\326<\275\263\242\275z\2110=-x\221\275{1\001\276s$\347=\326\215\267=\360G\254\275 /[\275\223\333\262\274\320:\310\274\333\224\376\275\250\217\t=\270\336\354\275\216z0>\013\302\350<\301\356\240<h\006`=X\312\353\274\371\3175=\016\233v\272Y\272\262=\226\264\030\276\320A_\274bd->\342.\202=\356\337\021\273\2316\317=\266Q\245=r\271\265=%/\025>\265\327e=\272]\004\276\200)\265=P\222\014\276+k8=\320\177\354\275\334\343\247;\312\311:\275n\230\n<\033\202\206\274\327d\352\274\354\337V\275\245\213q\275\203\376.>\363\221Y;Q\271Y\275\244\210\262\274\216\374\217=\237\025%<\016j6>\210\031\337=)D\000\275\036\243\3479\356\225\245=A\315*>\374\t >e\204\265\275\244\004\237=\354\032\237;\225\314`=\236X0=\361\363c\274\315\365\210<Hb\013\276I\313\270\274Z\362\312\275\272\332\033>\000\341*\275.U\r\274H\031\037>M\263\005\275c}\n>\231\036R\275\272#\265\275\017\252.\275\n%/\275\363\\\'\276\366\227\334=\t\262\225<\264$\303=\224\022\307\275xG\220\275\233\245\343\275 \234\021>\250\234\321=\037M\356=\353\013\231=\257\230\222=\372\376t\275\303\267\030>\025\340[\275\234\'\005>\212\237\371\274\274\212\306={\010\204\275\243\202?=Q2\375\275\327yT\274TI\023\275$\341\006>\242\221\231\275MH\234=\246\3553\272\213\213\225\275U#E\275\307\275\312<+\235\352\274\252,\246=% \270\275\374\3349>\340\264\002\276\022\305\204=\nz\372\274\334z\036=2\232\304<\201\261J\276\t\2161=9\331s=\261O\306=\007j\356\275c:\215\275\351!\222\274\351V\263<\353$O=(Pd\27529\021=\255\002\010\276\037%J>|\203;\276H\361\007=h\324\263=\2001\026>\216!\016=\277z\264\275\375\361\003\276Z_/>\274\356|\274~\005\267\275\306\324\357=\245\024\010>\313\362\022=r\211\006\273\004m\006\275H\271\037>\250\344\321\275\274\267:\275\325zE\276\n\200\034\276\313\035\320\275QRK;\013\3156>\376:\005\276\205\177\355\275\010\032\035>\314\244\301=\230qs\274\250t\000>\033\202!=\221\203Q>\234\342^\275\205\203\205<]O\332=\227.\237\275%nK;\361\317\t\276\205\007\373\275\036[\026;\335\323\262<\353\3066=\377P|=\0277\241;8\361\374\274\001\213\337=|\235\r>\205\346\014\276\347\213\316<\212\323\221=\300\271@=w\360\314\274[\370P=oiP=n\330\323=\000X\006>\032(}<@\266e=\377\2071\274\355)\202=\250\010\276={~\203<12\313\275\340o&\276L\271\000\275\031n.\275\254L\314=m\225\344<\036\342\276\275\353gm\275\236jH\276\374\357Q<\3240T=l\177;\274\035ZU=\237\\\027=\037,Z>\000}\240\274N\206\223\275h\242\203\275\256\234X=r\261%>{\253\363\274M\266\233=\311.\022=\003\3312\276\021\301\332=\202.\205\275\347\321\024=\235AB\275t\023\222=\340f\320\275\245\0033\276\247E\333=\352%2\275M\222\240\275\304ht\275{&)>c\312\257=\243k\273=`3\263<k\231\002\275%\354T\275\277&\256<\306\365\350\275\334^v=\001\354\257\275\0076\226\274.\006\204=\210\376\213\274,\031k\275\3113a\275\333\331Q\274\n\0135\276Bq,=\024D\033=\340KL\275\374\024\213\273\350\257\210\275t\322\251\275\304\026\367\271\3363\330;\254\324\212=\200q\365\274\000~\245<\310\244\035;\003\210\227\274\372t\">O\343=>Z\265\343=K\025p\275\300\335n=\314u\023\276\257AV=\307\364\024>\355\036o=\231\226\000\276{\303\037\276\362\330\246\275\365\231C\274\370\007\237<\343}\013\275$\335\236\2754\256\224\273\325\344e=\354b\013>\020G\302=1\241\017\276\014H\003\275\\\352\244<\014\312\354<\356J\371=\217\352I=\303\352}<\201\302\231<^\251*\275\034<x=\217\355\260;\r\027\222\275\326=.=?\337\221\275\260\320x<Gr\250\275T1\032=\006\372\211\275\233y\256;|\002\275=\321Q\224=\322\001\340=\246\220z;\311\350\027<\221\220,>\225nv\2754\n_\274q\234\202=n\"\010\275\244\3247>\002\3003>C\014\032<\235}\206<\236\266\242=\236H\n>\240\220\220\275\302<R;X-\265<\367\211\324\275\316i\245\271\253\270S=N\314\n\275t\203N\275S9\334=\236\211\t\2760\3542\275\205\nF=\343\t\347\274{\366\031\276\327R\032>~\236\234\275v7=\276\214\013\243=\314\220P>\013\235\221<\213Me\275R\236;\275\240\325\222=\240?g\275C\300>>\265\035\266;eL\317\275\032\277\202=Q\243D\275\246\030\021\275\370m;;\335\3628<=8E\276E\300\036>\325(\342\275s\016\321\275\324\342Q\275\372\353\016\275\356!0\275\206\016!\273\361\241\236<\327\364\322\275*;=<\016\3525\275\333\313\001>\262W\020\275\252>J=\252\375}\275\247\003B<\0009\344\274\354\377N=\365\331D\275\016\007g\275\353\240?=\206\250\337\274\024\222=>\263\230\227\275\227n\000\276\362\0021\275\211\346\260\275H+\215\275\371\304U<n\253\376\275\2379\303\274\276\001\232\275\2453\305\275\210\230U\275\277\361R=\305\352\221=\203\312\243=\257`\0219\325:\300\274\355\016\363=\373\221\333\275W\343\255=\r0$\275 T\3469\323\230\303<>\243Y<\034H\253=I\021\224\275\356\263z<C\352V\274z\251\312=9U\344\274\013\r\335\275\3109\343<\'\025\002\276\\\355>\274\3574I=p\275\204\274\004\345\250=)0\022>\210\271\366\274\324s\250<\261\3363\275\224\214\221<*eE=\307\213\336=\rj\215\275\031\240G;\357\270\344=&\271\021\274\013\034\245=\327*3\275Nm^\275k\233\001=g\263\316\275\325\310\355\275\203\222\352=!3\013>\300\270\'>\037T\201<O\013E>\354\033\275=\0136\305=\251%\210\275\203\342\373\274\n\t{\275\n\200F=j\325A>\204\220\000>\364\3263>\037\357B=\201D\346\274\334\251\270<\251)\'>\346\030\256=\255\037\243=&\376\\\273^\200X\275\305\313\001=\235{\201\274\220\351\033>G\317\253\273\346F\211\275\323\333\224=y\347\010\276u2s\275\253\t|\274N(\320\275\301\376\357\274\326~\231\272<6\201\275\3232\034==5\246\275z\351,=R|x=\351\206\013<J\351\257=\207U\276=\007;\033\276\366\334J\275\232\325%<\213\374\315\275j\037\237=M\253)=\247!\177=\027\004\241\275\032$3\275\366\321\235<Y\347{\275\224O\214\275\352\310\327\275X!\000<6\275\230=\260\334i\273\350\310\333<\251\231F=\376v\305=\315Y\341\275\014]\361:\347\261$\274\264e=\276\001P\032=\275}\216\275b\351\334=\255\324\227\275h\374\264\272\307\321{\275\374+\337\271\333\350\316\275\363\022\211\275\374OR=\323c1\275#\020\345=\262\014l\275\322&\326=\304{\304=\036\336G>><\030=\'\362\231<\022\232\327\275v\327\301\275H\264\362<\252\330\302=\230)\344<\340\033\341=\0059@=\020D\222;\325\367\224\275\313\301\257\274|\210\260\275\374K\312\270\246\243\301\275e_9=d\310-\274\017\214\232=\341fE=;\r\206\275~6\341\275\242i\023=g\244-\275\235\367\250=\337\200\332<\347f,>\300\312q\275\223\002\n\275#FN\275d\273\241\273,I\341;\360\320\r\276\265\017E\275\303\310\260<B\005\273<\267\353&=8\316\022>\032v\351\275\230Q\360\274x:\317\275\267\235\243\275\026\357\311=\3513_\275\010_B>\313\214\363\275W\344\216\275\262\"\276=\3118\324=\347/2\273jc0\274\215y\007\275V\235^\275w\365\375=\240\t\027=\304\366*>\367\367\034>\301\312\233\275\201\001\006\276\177\354\321<\032\024><\250\363=\276\251\334\227\275\'\037\374\274C\257\006\275#\014\004=\250\317\216=l\0370>e\267\341<;\013\035\275\321\242W<\227H\022\275\312\004\267=\262`p\2752e.<C\004\315;\014I\341\275\206ts\275j\r\020\275\237\235\365<\323\t\272\275O\356\006\275\265L->\223#\013=e\300\006\276\350\333\251=\352\010\337<\274\251J\275\210H\316=&\235\327\273\306I\270=\344\206\211= \325\203=\010\177\323\275\007 \375;\201\031\330\274\023|\031\276>\rK\274i:\215\275?\217\026>E\250\253=\341\336\302=`W\360\275\002oa=\245\204\261\275Y\354s=e\311|\275\317Q.\276\375=B\275\243I\230\275X\302\317=\327y\325\275P\262*>#\276Q=s\373\212\275-\026\261=a\230/=\027#\222=\270\237\204=/\312+\275W\357!>\230\352\343<F\244\374\275Z\367Z\275B&\246\275DS\370=\222\276\213=\314\027\311\275\243B\315;R\273\251\275/f\336<\201\025;\276c\013\267=X`2\275\316\0223=c\342;\275w)\221=\201\017\241<Zf\202\2747\307\035=\257[\000\274\206\303\334<\tA\202\275e(\264</#+>\315)\202\275C.\212=\304\336\006\276=\320E=\314\030\035>]F\375=\224}\254=\023\177\350\275\262\3312=\023I\254\275h\330\260<\300\267\301=\352\215\243\274Bm\324\274\314\203\333=OCy:O}\347\275\2633o\275\353\216\217\275\020\360\010\274\325\343\373<\032V\250<\242\005f\275W\364\247\274\351\360\251\275>\001\314\274\261.l\275\024@\323\275rG\002\276\216\220\217=\306\261\313\2753\304><\032\351\033\275f\177Q=\227\351\306\273\034\233,>h\356[\275\013\314\367=\333.\316=\240\275\274=)^\260\275\347\210\246\275\265\326\373<\2005\"\274\027q\217\274\n\020\337<N\257\017<\2145\273<\325\317\235\275+\3339>\204n\203=u\250\377=\364\261\320<l\266\315=\230\214\224\274\'\311\333\274WJ\305\274\311-\350\275\375\351\334=\t\271\013\276\010\033\262\274\215a[\273\352\310\336=V\2161=\037\016\275<\276\244]\275x\261>\273\260\361\020\275\237\270{=\302PB\275X\317]\274\000?+\276\231z\351\272{Y\2659\032\236\305\275\306\2212\276\322I\220=\265\035#\275[6\210=D\246\177\275\016t\205\275)B\351<\352\321m=\236p\031>\022\352\233\275\276\000!\275M\376-=E\341\017\276\203\364P=k\227u=\300D\222<\032U~\274\016\005\311\275\177\311\201=\374\006\006\275\375\024\333=3\336\303=T7\337=\275j\275\275\240\312n\275+R\266\275&]\312\275\264\2421\275\001\361\251\275\254\347\254=\356\231M\275\276w\002\276\177\350\211\275B,4=\3519\037\276\231\216\212<\3333\275=\371\026g=\201\3017\275\205\331\250;;<\226\275\254\031>>\303c\217=\224\316\320=J\003\023>\000UU\275\361\352\267<\201\234\263=\014\212D=\215S\247\274\025\010H>\216\242\330\275\317`x<\253\323\'>|F\211=l\037\265<\335\301k=\326\304%>\366\222S=\006ER=\313\226\227<\034\234A\275\323\214\223=A\006\351=\215M\222\275\243\275!\275\312\014\270<T\257\212\274\377v!=\210\342\347=\244i\177\275\314&\007\276\266\340h<(\353\360\275\035\200\035\275\321\026\237\274)\307l\275\230`#<\370\375\276=l^\003<v\353\343=\242\273*>\003\000\371<-p\251=\275(^\275\215O\235\275\335\324J\276\261\313\337=\256\237?\275I\006}\275\222`\207=\tYr\275\223\237&>\237p\254<\254^\333<\264\031\2508\003\357U<b\217\231\275\3156j<\202\304\354<\013\271@>\351\013\201\275\236\217U=\225\023\221\274\023\001R<5\310Q\276\274\343\320\274\277\263\013>HI\261=\t\014\025;\233c1\2752?\000\276E\260\255=x\234n=\364]\t\274\027T\265=\243A\022=\025\rW<\353$\366\275\273]y;b\342\276\275\232m\260\274\334\r\325<aI\253\275\370{\224<(s+=\322\362h=1PZ\272\274\365\333=.T\347\275\316\244\r=\214\240h=>/\344\275\231\255%>\321p9=\220\356T=1X\333\275h\332\217=\203*\254\274\310\346\037=u\331\034>\243\216\036=\214\241\013\2766F\305\275\366\205\251<\"\376\354=\262\304\034<\243\234\263\272&\361\234<\242~!\276\353\001\363\275\217\261T\276\210\333\340=\330+u=JQZ=\030\336a<\263\321\370\275\335.\317<h\014\">\022\331G\276\262\035\276\274Gu\326\274h\225\201\275\265\033\007>\260\330L<\372.\355\274\021$`=4\363O\276\257\344\\=\341#\207\275I\300\217\275\363fa=\262\036\037\275]\222\035\275Y\031\234<\353\357N=\316\334\002>\010 \026\276\332\251\362=\314\340\222\275\0131\341<\360a\227\273\264\\\320=j\177\334\274\324h\r\276\237f\311\274\245{\265=\356\232\021\272Q\242\212<\336\371\372\275\r\264\004\274.lD=*\347#=h6\272\275\013\360\252\275\2507\\\275^\331\021=}\033\202\275*\212\313;\231\216\237\274\347\'\261<K\361\265=\215\013\215<\304\023\024=G[\332=\251\210\236\275\263\267\203\275\"\257\343\273\243//\276\241\210\263;\335\347\311=\276\373\r>\177\372\231=\372^\303=\224\243\375\272\202k\027\275\017\235\306<\321\210;=\004l@>\267\226\243\274\363\243I=\227FH=\227\277\363=\377\373\223=\250\334A<\n\364\261=\014T\305\274\001s\017\275\326y\310\272\300\024$\276\233\341\034\276Y]h\274:?):)\237\306\275V3\323\275$\\I\275\256\261*=\314\007\003=b\223F>\337~\236=:\010\313\275W\032\362;\320\265\256=}\332.\276oG\337\275\373\235\214\274\n3l=K+\005\276\033\365\020>4y\370\272T\317t\275\030z\335\274\340\366J\275\351y\330=\216\205\267;]R\234\275\253\334+=b8\026=;\243\313\275\232\004\001\275\270u.\276\2629%;g\347\232\274\230t\007\275\017\0047>Fw:=l5\213\274l\030\216\275x\226\017>V?L\276\005%\331=\021\255\227=cR\221\275\366^\n<\341\255\323=pD\347\274n\272\320=\014\302}=\276\017==8\225\213=C\3305=|-\350<\255\341\215\2756L\374\275\005\376\244\275\346\212%\275\034q\320=Tt\037=\033l\222<\034~\327\275\nb\362\274\206.\242\275\321\227\312=\365\031\317;\3541\275<U\262\341=\350\354\230\274\314A\254<\262\356@>\362\341\255;\245J8=\333l\201\275\371\007r\275\235\2062=\342\300J==\215\302=Y\324\322\2708\001\247\2754\320\000<{\226\013>KpN\276E\244\001\276\362\201\004\275\2144\264<`\0370>)r\272\275\226[\277<\tb\237=?/\221\275@\014\34680\372\177\275\354s\241<w\3557=\333\216\257\275\311\217\321=\214\314\031\276\341\323\323\274\244){<\206\3132=3n\272;[\356\025\274-\370\332=$\263\240\2753\247\223\274$\377\200<;Y\377\274\003\3248\276u$\223=\217\2263\276s\003\r>@\254I\275j\265\007>+\323\031\276,\264\247=\200\r+\274~~4>94H<H?\336\275M\312\312\275\313\302;\275Y\253\220\275\261\345\032>\003\204\362=_G\331\275\367\253\254\275S/#>4\366\002\276\007\264H;\225X\356<\226*(>3\262\263=\204\010\352\275\271\230 =\236\355\220\274{\246\241<\032\315\035=N\331\303\275\346\343\216=\341\027\264\275\324d4>\354\311\r>\220s\250<\355\214\006\276T\304\">X\033\325\275\201\026\251<O\354\276=eoJ\275\021\321\367\275\224\031\326<#\245S=\213\313\016\275i;*\276\257\264\265<\023F\315\2740\270\231\275\314*\225\275\0057h=\233\276\376=8_\212\274Z\036\232=Of\347\275\314\350\013>\377P[\275Y@\026\275\332\335\n>Q\267\252=_\307\200\275\313}\261=E\016\013\275\273\016\260\274\213\023\177\275\222K.\276\360\032\352:.)5>\270>\201\274\025\030\353\275\232\2432\275\331\0336=-@<=\374N\204\275\303*\007\276\335Z\242\275-s\244\275uU\272\275w\366!=+\025\255\275N~\331\274\250\264\327=$r\326=\325\224M\276\022N\322\275X~\253=\252\307\233=o\035\314=\010&\000>\263\262\327=D \252\275\224\n\277=,<\361\274\'\277\020>;$\005>\322\234\272=\267\315\315\275\317LN=\227t\271=\233\342\204\275N\244\222=\252\370\356\275\206\326\262:x\334\302=\262\326\023\275\230.\177\275\002ar=[\364\310\274@\230\344=$Hy\275F\215$>\252\010\001>j\031\351\275\t\004$\276\320\263\262=\022@\010\275w\201\265;k\220-\275W\205\247\274y\225\333\274\007k\336\275C\035\257\274\267\033\013\276\016nH\275%\026\346<\3439)\274\315\222\367=\237T\017\2768w8=\321\205\217\275\303\322\312\275\036\316\331\275\3537\370\274=\370\007>@\266%\276~D\325\275\020\204+\276\373\357\254<\'\217\026=\204J\316\2757[%>\245\3261>\334!\200\275r\347\236\271>CP=\223\342\212=c\266\217\275\0107\270\275\005\265\274=\032\233*\275(&\013>\207\241\032\275\321\273\355\275`w_\274\335=\324\274+1\336=\"^\273\275\326\201\n\275\316L\016\276\214]\312\275\r\351\277\275\365\341\007<\273\274\371<\n\270\237\275\370\261\274\275C\344\327=5\266!\276\265\233C=Hf\331=,+\333<2\007\344=\023Y\372\274\237\247\004>\266Wg=_\237\204=\236!\211\275\332e8=\276\365\013\275Q\342\320=\030\n`=ZV~\274\031\302\014=\256g/=\255\215H=^dN\276\231\265*\273\302}\364\273\226\271/\275\307\316=\274?\320\320=\026\214\034\275\210n\002<\035\247m=\\\231\006>\245h8\276\325.\274=1D\r\270\002.\331=b:\230=\nV\320<B\367K>\014E\354<\337\250\270=\364\n\021<\363\020\350<\177\256O=\353RF\274\260\361\362\275p)\351\274\310\241r=NB\004>\342\000F>\251\236\220=>\035\013>\263G:>Q\0220\276YF\366\275V\200\225\274%#\207=\373n\025\276\334\010\220\275y|\224\274b\200\002\276\312d\013>}X(\274\022\347\213\275\\\351\211\274\177)\317<S{#\276[\371\211\272\003\223\203\274\306\206\336<\215\357\263=;\261\356\275gh\017=\321@#=G\346\300=\006w\350\275\206h\214=N_\327<E\034\253=\351\326\202=\376\314\031\276\373y\270=\024\357;>\373J\356\27489\204\275\022\007y<~\365\202=_\021\205\275v\316y=y\362\007>UX\312=y\263\331=\2562\020>\255\210\270\275[\035\344;J\326s\274Xn*=\254%f\273\265\275\257\275V\0045>\203\371w\275?\036\017>\035G\000\276\326AD>}\377\213\275\322\326\006\276\215\265\245=\371\234Q\274\317\206\210\275f\252\263=\233N\006\275\262N{=\313\323\016\274\211hK\274\330\177\372=\367\315\364=\000)\307=\310\373\t\275\026\367J\275b\342\313\275=\274\256=\271\221\016=\2347\254=\251[\250\275\265W*\276\221\365\210\274|Q\363\275X\311\224=\206u\311\274\036\021\007=,\313\026\275\315|\270=\331\227\013>\370\016\253=\251\207r\275\215\350\253\275Pr~< h\030\275\225\305O=6\270~\275)\270\236=\250\247\"=\316\226:\275s\344\010\276=B\030\275M<t=\372\244\036;\300\266\303=\311\231\030=\346N\241=\226\017y=\346\267Q\275Q\345\203\274W\3264>%\326?<\323t\310<\217\\\241<\351\236\037\273\027\343\306\275\237\244\232<\005\023]\275\2256\322\275\032o\252=\317t\241;\312}(>\214-1=\275iH\276V\034\262=AX?=\315\332\276\275Y\223\344\2751^\306<\037yN\275\376\252\356;\311\215(\275\274k\375\275\2635\232\275\362\204\n\276\267\271\254=D\241\031\275\211\233\373\274\255\324J=k+\230=WW\321=?2\000>V\003\000\276\000\272\351=F\252;>\334C\341\274xO\216\275\266\345\276\274l.T\275\003\037+\276\314pD=\336\274\332=\353N\263=d^O\274\201C >L\367}\272,\325\017>G\336\007\276\240\234\020\274\016W\333=\3351\">I\265|\275\330\331\233\274\231\321\355\275\236A\027>|\237[=\321\235\240\275\324\326\337\275\0170\364;\302\206\002=\370\210|=\253Q\007\275\305`\223=\016\303U\276\222V\324\274U\233\031=\201o\257=\310\225\032\274\035\253\307\274\271\354\206=\202\036\272\274\276;\371=\036\346\303\275\325\306J\274\016\365\327\274\364\023 \272#\026\204=\214>\220\274\001\215\342=\377J\003\276@W\206=\345M\234=m\275m=\345\214\036=\270.`\272\343It\275\0236\030\275\031\255\331\275\334\243\365\275\0309>\275EAR=\314\304\001\276F\264\003>4U/<q\003\236\274\273\267]=\314\270\316\275\351\263\002\275o\274\216\275t\3231=\330\214\025=+\264\351\274\027&\017\276\250x\031>\306\272`=\307\\U=\026\343\201<\260k\007=\364t\364\274d\331}\275#\246\277\274C\0031\276\236\240%\275\305\303\374\275 \003+=\021\206\305=\202@F\276\276>\354\274-\341\211;\250\252\234=\235\310\363\275\3413\020>\010\372\310=T\323X=\r\202\322\274\250\325\327\275\370\365\345\274\347E\256\275L9\312\272\341P\357\275G\232\345=J>\254=\244O8\274P\252\317\275}\0033\2735\353\003\276\3431\t=f\322e=\357\007\200\275$\252P=\337\0167\274\313(\321\275(UB>!\212\315\275\0024\201=\354\225\373\275e6G\2747\226\027=tk\313:\206\"\352=\313\376\256\275&\233\222\275\030\344\207=\275\003s=Q\207\215=\n\224,<\024\363\312\274m\235\261=\337\333\204\2754\340\"\275\347\2722\274y\306W\275Ex\033\276 *\222=Bg\345<\360E\376\274\204U\003\276\004\320\303\275=\345\326=\225\005\365\275\372\374\325\275\013\027\347<3vg\275\374\325(\275\001\034\010\274\243\375P<\030\332.>e\312\253\2756\330\030>\225r\3519\355a8\275u\374\216;M\030<\276\236\334\230\275`~\201\275\370n\034=\242d>=\211\301\377=\202\371\315<\233\371\244=[\023\021>~\260\001>\004\320\357=g8!\275\203h\274</\353\254\275\rj\320\275(\315\016\275\357h\017\275\365\375:>\230\017?\2760\215-\275\220\014=9\007\312\026=}\267#\274\261\221\210=\333l\315=C\362\005>(\242u=`\\\025<5\324\234=\367\236\371\273H\330]\275>\367\037\276xD\255\275\301\310\213<\006\262s=\240\203\204<\200\0072=\330p5=\006\276\274=\002\222V\276\311m\006\276\215\311\257\275\276\367r\275\201\303\370\275\350\271\'>!\275\315\274\215\363\326<d6!>M\267e\273-[t=R\333\324=X[H\276j\352\013\274*\200\024\276\317E\004=Y\256\001\276Ls\347\275n\326C=\237j\022>\352\233\006>_\266\336\270F\356\032\275$\244 \276\330Z\367\2744\232Z\274\373\353\205=\021\r\222=\327\002\222=e\222\364\274\333D?\275\030\037e\2758\216\363=\227U&\276k9Y=\205\367D<\2026\033\276\313B\311\275\351\354\227=\375\361\325;\\~\255\275B\273\272=\264\255\250=\364k\016\275c\225\246\273\3337\"\275|\364\245\275\214\270\221<\002F\"=\255\004\037\2765\2156=\013$\322\275q\r\"\276\034\202\035<\030F\222=\264\037$\275y7<\275Y\207:=a\356\014>\302\270\316\275\261\375\362\274\250\265\207=\256\356\016>jz\002=\3368\246\275\006N\335=32\216\275\177mK\274\363y\332=J_2<I\205\220=\206/\010\276\204\004\276\275\262F\317=hv7\275\310\352\033\274co\350=5\210\300<_\233%>\204\t\t=yI\252\275\004h\366\275\201\225\306\275*\034\317\275;\035(=\001\201\016\273\320\374\232=\024I,>\275\204\276\275\211\355\243=e\310\310\275\342,\037>;\255\365;\250&\227\275>4<\276\271\372\345;\000\273>>\237jO\275\311Gf\275\016\3656\276!\365\357\275\320*j=\004\020\271<\236\250\237\274UH\204\275\"\030\033\276\375}\204\275o\356\325\275\272G\232=\332{\275=\267\315\203\275QWH<\027_\211=\347h\222=\336h\360\274\220\027\326<\030 \316=\014|a\273r\351`\274\231B\323\274R\274\270=\014\253\364\273\322\363M=\256\372\217\273\201F\317=P\351\265=\255\375T\274\037{:\275G\307%>^\337\237<\3631\000>\020\201\n\2761\247\277\275\027\266\346:\241l\031>\302\251E\274sm\177=s\333\245\273\374\020\360\275\245\240\234\274\005c\023>\343\335\252=P\311\321=\234[\301\274\302{\350=\010[*\274!%G\274\373\257\241\275=\235\325\275\356\362\342\275\332\250\205\275l\235R=\331\373\315<\037\342\326\275\231:\255<\320\325\237=E\022\377<\370\206\360\274oJ\206<\242\014\331\275\330\245\006=Z4\341=RO\010\276W\351\316<R:\317\275)3\274\2751\335\364=\226E\256\275\252\240\225\275\326\024k=\202U\036>Hc\036\2745\211\\>\255\033\027\275\272t\004<\320\335B<\"\261L\275A\200\003=\211Z\005>\240\"\324<p\271\033>E\356\312\275\275\320\300=+\331B\275%\301==78\210=\033\'\321=y\202\357;\236X\316\275\342\260\013>\177s\343=\360%(\276\321\"\001>yd\025>j\227,=7\250\323\275C\204\276\275k>{\275\262\202\035>(V(>pf\363=\314a\030\275o>\n=\230\270\257\275\020\'\276\275\256<\364\275\244\361%\275\322\237\367;=\025\205\275\327\267\324\275\277b\t\275\021\352!>d\265s<3\210S\274\200\316\226<\346?\323\274\024\241\255=Z\211C>\254\237\360\273\372\333\246\275(\337\001\276\374\\}\275\210T\327\275\n\306Y>\207Z\274\275\367\\,\275\315X\n<\006;\332\274\267;1>qt\343=\266FJ\275\245\340\032<\300\217\205\275D\311\231\274\322 \202<\006\322\353\274\250;\251=\242\262\330\275B\274\250<\023\260\347\2752E\343\275\377\t4>=G!\276t\377\\=\342\262\304<\366\337{<\2378Z\2758G\020\276E\2766=\214\022C=\r\324\254=D\366\001>\370\264\243\273m\345\217\275!\246\220\275GW\371\274f\314a\275\r\346\277=\2500\204\274\351O\035>V/\013>\3352\343=\3274\034=\342;&\275\027\256k<\236,9>\223\304\014>u\274\301\274u\254\267=\327\352 \276\344v\r\275\006t\315=\315\177\265=\262\306Z\275\020\3651>\346V\221\275M\301 =G\214n\274\314\361\266;\304\320\017\276A%3<\2270\247\273\376\343\227=\300\371 \276\216a\035\276W\034\352=\026\372\330<\353\333\032=\245\247\014>\204\177\266\275\014\036\320\275O\203\234\275\rG\227\275R\300*\276h>\252\275b?\010\272\010\002_<X\346\256<\303\353q=\3337\022\276\344\353\214\275\363\357\221\275p\263\250=\006\340\266\274_R,>\244c\212\275\033H\361=\272\321\032\276\031og\275\317\326\003>`s\202<n\362q=/\356\r>km\225=;\242j\275\n{\307\275\234D\033\275\224>\202\274\331\223o<\334\211\247\274fe\230\275$\033\252=\252\360\353\274Y5\031\276\2743\213=\230FY\275\373;\317\275\330\250\261<3\t_<\030\256\253=FC\207=5\365\303:2WQ;\002\360\213\2757k\270;\256b\357\274\244\020\240\275\303\250\230<+\333]\274\241\322\237=\372$\365<\361\320\247=\325\223\315<#L\206\275\247\316\263=3}\377<\215l\n>\377]\213<:\234\002\276\356<\000>\n\371\313=\217rm=\200\377\303\273v\211/<\307o\242\275\022T\252=\007\225<<.0\021;\276:\252=\355\3033\274\014\343-\275b\0033=\342^/\275\250\343m=J)\317=\335\016\337\275\345\205\016>\367X\322\275s\372<>\005\345\021=\216\305\205\275/\252\347=\237\021\246\275\277w\362<ck\216;\251A;\275\332\313\320\275\362\240\005=\263U\356<\241\225\300=\203\246\311=\251\333e=\366j*\273\363\224\373\274W5\214=\222U\244=0\033\245\275\263\266\253<\247\365 \276\271{\200=\026\037\323\274A\020\026\276\021Yh\275\316X\255=^v\027=o\375E=\364zn\274\264\r\271\275\266\357r\275cM?>\303\371\276\274\206\323\207\275\354\232\215=\254\331\237<\000m\272=\206\337\276=\006v\275=\231\331\252\275\265W?>m\242\314\275\3149L>\336d\007=\"E\002\275\306\025\263<\000\367l=\340\234*=H\377\252\274\232\237\330\275\211U\321=\036I\235\275\n\365l\274Vc\034=\220\021\263\275\271\207\232<\254iP=\263\312\260\274\246D\247=\303w1=hv!>k\212\203\2755SB>\327pp=\254e{=\275.{\275Da\221\275Z\330\213=GA{<\357\033\024\275\005\206\246;\024\372\256=\366b.\276\315W\203\274y\201\256=\274\2203=\364\344&=\276,c=\016\177\010\276\2716?<\354\247\032=\260\205k\275\274U\'\276s*f\275 \306\374\275\310\014\335\275%\347\205\271\027\0203\275\270\027\211\275\314\221\353:\320!\357=\232C\203\275\371\242\304=A\357\002\276)\003\271\275P\001&\276\363u2\2731\007\017=\246\363\253\274\203\234\366=\262@\375\275~[0>\221\367>\272%{\017>\317!\253=\3577$\275\340\315\005\275x\302\336\275\233\337\320;0\227\371=\320\330\020>\236\337G<I.\200=\323\230\"\276Ej\"\270\225\235\332=\316\237\224\275Y=\323\275\257\032\336\275\210\321\214=S\213>\274mN\361<\014\221\n>/\206\220\274e\211\220\273\243\177\211\275\2203\021>\206\262V\274\376\307\275=\354\212\371\275a\261\237=\313\376\022\276\024\361\234\273\251_\366\274&\007\327\274\3409\247\275t\303\215;\305\352\346=\374_\'\2755B\320=\340\250\270\273\266\234\227\275(P\242=\360\220\234<7\350\003\276\036QN=d\367\032>\250\274\324=\203~\272==zy\275{\247\021>\375\213\231=\204\317\033>\321h\270\275hF\022\276 \304\321\275P`#>\332{\313\274\266\3150>\n\201\251=\037I\302\275\366\336\367\275\321\267P\275\372\331\320\275\356\361+>7\2238\275m\272\353\275a\265\341::\035\347\274R\374A<UzG;.\271\026>W\303.\274f\263r=H\227\001\276n\347\000\276?n\273=\215U\024=g\273\314\275\364\004\254\275\274\236\223=\371\027\214\274\334\003\030=\210\'B\275@\300\267=\371D{=\313Y!>\372\212H<j\366I\276~U\375=A\341j\275\004\365j=\013\201\237\275\234\0230\276[^H=g\364R\275\'\251\232=H.\021>\350\201-\276\352\273\367=\006\257\204\275\277\317(=\317\264&\2763Z*>\211\304\332;e\210\327=\326$\333\275\014i|=\223c\351=\326\227\303=\233\362\275< z\241=\352\274L\275\352\326,\275\032\341\224\275\336\3734\275s\367\304\275\317\312\010\276H\331C=o\215\303;\310\n\002\276\3073\376=\242q\221\2752;k=i\333\312\275\247H\212;o!\017\276j\247/\275\203\244\264\274\003\306\327\274\312\325\353=\220T\250\275Q\313\372\275i\030^\275&\245I\275P\244\021=\3570\t>h\306\321<\334\205\373=\240W\354=\252]\003\275\210wn\275\t\320\230=\005\266\206\275\241i5\273z\355\370<I$\014\275Y\220\037\274)gg\275\236J*>\362K\361\275\227\005\333=\225\227:=WK\024\275Kn\254\274W\354\010=\0229\363;\016j8=\227\212\341=\235\344\032>\304\354\374=\221J\373=D\332\"\276\033m\024:\241\274\370=\376\324\004\275-(\301\275x8\375=\277\242\315=m\2455>\261!n\275\262\032\201\275\016H\257\275\232\344$=\3418->\264\t\377\275\3334\017>\331\026g=\250\354\213<\276\312-<\316l\210\275\001\311\267\273\370W\214=|CE\274\261\013^;,u\371=\345\232\177=\206w\317\275\006\273\374<G%^\275\n\0372>\370\316r\274Z\311r\275\226\320Y> y\274=\307U\310=N\204\271=\275rK=\032\014\256;M25\276.\0103\274\207\260$>XU\202\275\240\005\270=\005\3031\275\016\027\273<\025Rn\274\253\236\031\276\r\262\324<I\035G=(f\261=\255\312\276\275I\311V\274\016\220\374\275\r\006\316:\362\202\t=\361TP\275\250\014\317\274n\236-<\377D\312=\365U\t>s\315\262=\374\251\336\275\031$\200\274\274\241\\\275h\310\334\275~O\232\275\276a\315\274m\027\314=MT\\=\376k\t\275\235\216\022>\237\213\374\275\360\214\t>~<\360=~\372\257\274 \352k\275\202\270\347=y\331\210=\2371.>\3665J=R\322\212=|~\274=A\333\276\275\223\020t\275\362q9\276M\2360\276X\251\314:\342\345e=Z\337\372\274u\361\322=\002\023\250\2750r\276=\246\313\320\2751<\005>\363@/\275\022\334\237<\033\016\206\273S\231\213\275\274\2269>\216\036\223\274\325\333\256;\\\217\215\274T\032 <\200\364)\275Z\275\346<\344\321\367<g \007=6\"\273=`\363\257=\343\n\314=\224\005$\274\027\237\363\275dp\333=\301\231\200=\204\313\002>VB\200==\230\321<\306\322!>F\217\004=^\004\246=\017\351\215\275PO\316=\201\325\311;\221\365\270\275\023\245\t\276m\307\261=\344\371\321=\212\2070\275\024o\211\275dn\344\275d\243\335<\373\021K\274ZB\357\275r\224\361=\276E_<\232\353U\275\346Q\273\274\2550\n\275x\026\345=,\2431\275\317\203\030\2760\010A>A-\370\272\271\273\026=eF\013=)\373\n\276*\312\213<\207\254z<U\360:\275\330\370\264\275\025d\023>e\'\237\274\3566\347\273\213?\007\276H|\345=\326\204\226\271\006.\362\273\313\337&\273\226\332\004=TH#=J\236\017\275\203U\'\275\352\210\312\274\363\303\333\275\220i\'>\323\372\t\276\230K\002\2765\"T\275d\177\343=\320\037\351<\004\377\260\275\317\271F=\355\207\306\275\271\353&\276\000\t0\276v|y\275}\257!\276\243\342\264=\276`\262=\336X3\275J7\021\272\355\245D=bh\212=\322\025`\275q\'#\275\232\370==D\244\035>T\362\275\275\321\\\207=R\206\301=\263\356\033=\323\r\272;h\004\221=\324.\016=\304\'\005=\034\317\325=\377\035\236<x\210\365=\017u\353<\245\275\033<s\246\251=\026\373n=$E\264=\241\373\271=\254\334Q\275\200_\025=\310\2531\276J\316\001<\376\237\032\276{\266\035\275\275;A\276\362\246<\276\310\227*>\260\213\355<\273m\301\274\177\246\267\275\325\270t=\017h\336=:g\034\275\245\376]<\210\270\n>:\250\364<\352\215\225<\356=\004\2746^t=\313\004\321=A\256;\276\002Mv\275D\354,=\224<\270\275.\233\226\274\217\341\010\275hd8=\272\3237>R\000\314\272M\003\361;o\311\341<\313\215G>A\377\262\273\000\223\325\275b\222i\275\216J\205\274\034p\336\274\250\207B=;\023B>\327=V\276,/5\276\302\222\333\273\004=\014\276\300\004\021\276M\\b<\225\302d\275(>(\275D-\371\275K\006\340=lf\362=c\231,\2743w\224=-\337\311:\251(7\276\350\357d=D\260\226;\025VL\274-N\207=\373Z\034=\020<\240<\247\235\201\275\177\tS\276\033\252\272\275\234\263v\275\234\323\343<7>\002\275c\224\246<\231X\206\275\031\001\250<=\277\311<\307\3123>\303\351\307;Pj\325\275\354!\237<\226\345_\275\265\245\223<kF\001\276\331\247\331\275\315\256\242\273\251\315\200<\210\2756>\262\355$=\372\243\256<)\007\020\275H\001\303<-\000X=\373\214\030=\343\231\211=<\007\231=y\374\312\275\2152\244\275!A\242\275\352\t\t\276\274t\266\275cc\r\276VlE=\223\327\226\275Yk\027\276y\002\023<#\366,=4\323\307\275\031\006\323\275\\\257\033\275vv\332\274\\\021\364<\252\330S\274\224\317\347=\247.\264\274\316A\375=#\335\254=\206\320m=Qg\260\273\260(\220<z\017\276\275wE\313\274:\'\363=\256\310+\275\031\023\310\275\273b\013\276rr\311\2757\207\034>3\260\002\276`\341\006\275\007\025\230=\244G.>5\315\262\274\226y\300\273\250\275\345=\336\027\341\274m\272\265<,F\211\275\034\265]\275\372\266\023\276\250\341\277=\316B\271=\007z\317\275\366\324\031\275\300\361\027\275yR\001>x\345\266\274y\360Y=D8\373\273\2524\223\275\331\316\020=\020_\357\275f8\222\275\234\037\017=\317m\303\275\027\365\005\275z=\332\274\227\316\276=\324\361\237\274\314K\220=+v\001\274Q\2741\276\341D\243\273\312\215\\=.TM\274=\226\245\274\261\022\275;\255dA=\003k\330=\213\377*=B\351\300=\177\231G=\373\242\277=n\353!\276\241\254\314<\026Ba\275c\250\310\273\372M;\276L\274\213\275\300\'Z\274=s\002\276\254^\227\2755\221t=A\374v\274\323\037E>\253\377\r\276\0321n\275\204\245\230=~;\233\275\003\332\260<\370\201\024\276 4H\276\247\344.\276\351\010\342=zU\340\275\340t\222\275\'\177!\275\321:\367=\362\341\216;\232\206\227=\376\377\272\274z\334\215=\n\027\200=\027\264\002\275\331\035\244<^\245\266\275\266|;\276\360\357\004>\373\307\244\275\357J\245\274Lv\257\272\231\263A\276\025\030\262\275\007\317\226=\226\006\344=\005/\216\275 \220\276\274\203w\251<Y\261N=\355.\354=@\r\322\274\'\007p=#\350v;\245\253x\273,\250\352\275\275S\310\274\177\317\304=\252\016?>B\022\316<@\207\274=\332J[=\332g\310=S\n\325\275e\341\301\275\266S.=\252\262\377\275\321VS=0:\263= H\001\274\211/S<\241\030\343\275+D\007>\0350M\274\324*\r\276o\300.\275\266\352(=O\316\262\274\351\356\024=\3724z\274\254\241\211=Vr\r\276\306\370\205=\350N\350=\007\372\240<\"\257\276\274O\343\337\274\211\215(>\250\311}\274R\322\t>\317Jm=\210f\201<]\301\375\275\307\201L\275\245\024\343\274\\{\203<\211\253\036\275\212\231\360\272\235\216\204\274\no\237=h\314`<\372o\257\275iO0>\265\311\307<\220i\212\275y\223\221;\227\000_;5lW\274\327G\025\276F\252\023\2754\316\030= \363\016\276\001o^=>\371\365\274t\330J>\311>\226\274\373\"\337=\316%\261\275%\333S<\352\231\237\274\376\036y;*\224\365\275\334\261\272\275\367\3066=\037j\036\275~r\272<\377\343\013\276\200\215\r\276\360\000\031\275\201d\341\274\3578\327\275\216\220[=\247G\004=\n\007*\276s\351\242<\210\206\231\275\253h\262\274\212!\314=\3741\030>\215IU\275\256[\244;\365\372\r\276Q2)\275GD\010>Fz\243<\253/\335==\t\260\275\263\350j=)\2127=@J!>\362\344\266\274\276\375\276\275T\2015\274\347\223\n>g\373u\275\ne\342=\364\036\031>\341g\265;\345\306{;\322\035\215\275\206\333\331\275\260B\'\276\315\010y\275\327D\r;r\242\320\274\321\305\334=\3336\304\275\305\031M\275\301K\027\276\263o\025\275\005\317\007<\231P\273\275\023\305i=\007\252\222=\313\300\261;v\221\231\275\256\267\264\275P\262\204=\311a\327\275\\L\222\275=\0366=\270\345l\274\275\3427\276\365\205x\274\271\360\036>\244gB\275\023\323{\274\022\347\025>s\355\001\275\330A\303\275z\206 ><%\245\275\313\214\034>\\.\237=\177Q\\\275\rg\240;R\3205\275\367\000\213\275\203\345@\275\314\217\250=e\035\230=\351\270r;z\0009<\312s}\275\366\245?\274\361\3506\275\370)\025\276\333\270C\275\2333\"\275\243\202o<\314g\206<^|\210\273o\217 \274[7p\275\260qA=\340+\262\275\006\251\275=\363\355\337=o2\370:F\356e=R\3002=3J\361\275\2716\346=t\235J\274V\035\312\275\252\343$\276\357\014\242=Og5>A[\341=J?w=P\333+\276\330\263\037\275{\203\013\275^t\342\275&\277u=\n\363w\273@\2148>\002x\361=\304\271\224\275\'\013\314=\372\342\375\274O\0307\276BL\334=\331\320Q=\330\031}\275p\255\232\275\376X\200=\376w8;\367;\270\275|k\n>\244\022\032\276hc4>\335\277C=Q\342\021>\305\243\353=\rQ{=\361\252\026;b\335[=\000\255\232<+\237\207=\244\207\032\276\311o\367=\223\325\'=\305\004T=\344\213?=\236\370\027\275\265X\360=\306Rb\275\210]<\2758\371}\275\352{\323\2757\275\235\275\251\260\265=\365)\026=\371\036\037=\341g\361\275\367\324\217\272` \373:r\313]\274\177b\217\274\334]?=\237\'R<=\002F;;\000\252<RN,\271\202\031\337=\266\315e\275\327\374\250=.j\021>\020Z\376=C\"\370=pHa\275e7\366\275J\335\347\275\375\270\221=\3214d:\305\331\217=u\004\224\275\355\323\n>WY\277<*\033\177<\373A\363<\250\230:>w\321\010<\353__\275B_\252\274\336(7>t\375a=}s\260\275f3\'\275\021\376\330\274hp\264\275\2609r=\351\214I>\347h\253\275?\225{=+YD\275\354\302\330=\374\267D=\007;A\275\226T\242\275\275\303(>\346\343\337=\r\254J\275)\333d<%\333\006\275H\n4\276&\305\276\275\320eH\276\254\324\024=\346{\000>\300<\032=\020^\200=\230S!>\274\254\252<\227\335\361\275\346{)=4\276\301\275-\275\352=\t\230\013\275v\266\257\275\266\322\016\276\202\302?=\362\r\300=5#\024\2755\026\202<Q\340K\275.&\213\275\024b(=\3435\"<\373x@>6]r=\356\305\304\275\260\236\231=\r\332\006\276\310\222\016\275F\345\247\274x\265}=\001\336#>*\301\r>\351\345*>\034\220\225<<\t\226\275\204\231\275=\257\006.<\313|S\275\334\025\217<\344!\364<\303\204G>-\212#\276.\332\035\276@L\226=iU\313=\206\301\026>-\214\232=`\262\022\276w4\242=T\330\367=c\325\003\276P`,\275\225\221-=U\323n\275w\341\007<X\204\370\274\336\016\222=|Q\002\276\315\007\335\275\276u\301<\336\270\224\274\217Jb=\022\314\350=\273l\267<\\\n4\275\3339\325\275\313\244\315;\3357\375\275\251\236\215\275\331\316\360=\"A\257\274\304/\224\274\276G\021\276!\250Y\275Ah\035>\237+\236=!MH\276_\371\356=\007u\345<M\000\225\275~\375\356\275P8;\274D\265\"\276\234\346\030\274\330\010v\274\213\022\322\275K\272\365\274\350\227\031\2754\220p=\262U$\276\244S\205\275\265r\222\274o\243\211=7\311\036\275\354W<:\225\210\026=\240\332\024\276A\316\004>\244\361\246=\022\264\221<\373I\035=\207\177q\275^\220\335\274y\301+>\217\243\250\275\313\037\200\275qR\314\275\244\2333\276\214\304\262\2745\364\367=\267o\377=\037E\254<\357\240\223=d\267\256\275X\251\025>\211\204#\274\225S\327=\242.\276\274R9I=\315\261\221\275\340\265\255=S\333\036=dB\242\274\206GZ<\267\366\210;@\025\213<hx\314\274\220\322W\275\233\351\246=h\343g<d\375L=\367\330\233=\276wz\275\177\342?<\272\007N\274\216\031\233=\270c\273<6Y\207=\244\223z\275FfJ<\215|*<\036\336\177\275R\246 <\262`\317\275\362bA=*\237\226\275\314\310\023\275Y\304\230\275\005\027\r>\333\320\024\274\365\3503=@lG=lO#\276\2054\326\274\035\003\000>.\230\253=\3552\234\275\235\255\235=\023\272%=<\250\245=\026m\304=G\032\332=$\2112\276e\353\336\275%a\005>r\262\213=\304c\355\274\227vs\275d`T\2733\036\207<\261\213H\276\023\260\014>l@\230<\354a\357=X\260\315\275s\t\345\275n\216i\275\005\210\002>9Y\024>\245\236\031=#\211\004\276\374\013\245=\355t)\276\304R\231\275R\301?\275z\031\331\275\216\304\326\275\014\364\374=\002\'\312\275\274\"G\275\020K\227\275d\313l=1\324\013>\031x\274<D\263\225=9\320\316\2757\014G=D\005\212\275G\3470\276\236\300\223=\360\213\203\275\271\035\035=\360=\204<\346\303\200\275\236#F\274\357\021y=\330R\236=\350\030*;Eo\304\275K<+\274y\221J>)p\242=\251\346\325\274\377\0143>\367k\276\275\006v\226\275P\002\253=\024x\023\275\323U =g/\341=\260\242)<G\231\232=\261E\257=\275\214\257\275\313D\302=\222_C\275u#\240=,\201y=\237\246\204<K\230\254\275\365[w\274\\\002\271<\207\273;=\257\370\323;\236\211\023>\325#*>\036U\327=\204\254\222\275\030}o=\350\302\355\275\310c\365\271\240X\023>T\365Z=\254BY<\300@\257\274\336\377\037>\360Q>\276\203\205\376\274\370E6=\027w\232\274?!\201=\344w\247=e\321N\275\334\3525\2750\334\222\275\025^<=\212\252\327=\001Cm\274H;U=\'o\352=\336\341w\275\20609>#\355V\275\022\313\345\275\214|\276\275\277\311I\275\235\253\363\275D\210\260=\227\343\025\276\216\337\347\274\352S\254\274\346M?\274t\220c\274e\210\223<Z4\224\275\277\346H>\334\276\255\275\013\035\345\275\210D\373=\214\306\242\275\035\220 >L\246$\275\277\330\260\275K\206\300\275\316C\327<\277<\333=\346<^\275\314\007\003<\3548\200=6\331\020=\230\202\351\275\224@\301\275\373\263U=T\237\373<T\341l\275\243J\006\275\312\3114\276\275]\010\275dI\324\2759\225\363=%K\344\274\335\374\241=N\2012=\005\243\344=`B\255\275LF\r=\217X\207\274]\004\347<\322f\022=\341\370O>f\010n\274!\357\006\276`v6=\366\263/\276e\002\222=U\341I\275\213~\254\274 d\010\275\331U\324=\360\006I=\343x\027>\375\032.=\324|\217\274\217\235\335\275\004\021\034==\257\262\273_\264\201=V\342*\275\231\260/\276)u\365\274I\006\303=\006\250\201\275\226\372(\275N\036w\275_J]\275)\350\037>\260\0067>U\235\005\275\036\201\302=I\037\r>z&A\275\253x\250\2757>\322\274\212[\251\2727B\330\275\213\204F=G\233\'>\333\351\034\275\340\337<=\330\205(<\373\213!>\277,\243<\243\320R\275\211\223\272=E0]\275\024a\375\274\275\3507\275\332\213==6W\247=\274A\273\275Z\221(\276\211R@\275\207\201\241\275`\322\033\275\004\235\024>\360\n\034>\001Y\362=\375\307\210;\277&$\27616,\274?\317g\272\213\320\021\274/\324n=z\245\275=\005\217\007>\010\332\t>tb\324=\241\023`\274\257\0175\275\321\234\230\274\261b\227\275+\201\304=\256X\006>\336|==\343\226R=\270h\350\274\267\311\213\274V\354\013=\0225#=\230\335\205\274\245\010\315=\312%\353\275QM@\275wd*>\233 P<\337\330\360\275\341J\n=\246\314x:8\036\310=-\r\r>A\327\344\274\3725\023>\004\\\273\275\254\024\361\2750R6=\357O*>\262\027\031\275\014\215Z>a\001\356\275V\031\307=\367\356\226=\337B\367\274|\355x=\307\240\034\276,k\024=\023A\201=\321e\350<r\204\223\275\354AR\273\230\261u=\037$\312<\267\314?=\346\233\035\275tF\212\274\341H=\276\273\247s<\216-\001>\001 \215<,\335c\275\377\213=\275\035\352\275\274\003\301z\275\235\007==y\235\314\274\234\036\340=\375\252\001\274/\361\346\275\345\364\203\275S\210\325;R\020\313=\245\364\266\273\237I\033>\225[ ;7\350\006=\311\374\035\275\337\020\225=\207d\010=\337\202\372<\242\206\264\275\264\202\317\272\'\304\202\274\313\022\016>\354\315\216\274V\267\375\275\233C\237=\242\211@\276\362&\034>\036\n\352\275\345\nB>`u\227<\346\363\250=R7\210\275}\020\220\275\341\250#\276\272\231\267\274{\026\330\274\001\254\371<<\215\201\2749\326\305=\343\303\013==\275?=\240J8\275\241\301 =\272K.\275\3029\230\275\305\323\002\276\274\022\352\275Z\270\223=\002\001\025;\254\014+=\301@\306=\365\361\034=\204\334\253\275E\345\236=1\357\365<\037K(\275#c\025\275\251j\306;\375\036\037<\254\316E>\n\267\004>\017\350*\275\304\200\365\274\277\223\254\275\365\021#>\265\331:\275?\030.\276p\216Q\275\351\246h\272a\315\356\275B%\262\275\362\035\264\274\344\t\244=\315\310r\274\034I\n\273\024M\037=\260]\321;\236\254==h\tU=\247B\200<\034\243;\276\220,D\276n\227H=n\367\345=\302[\246=\335\273\243;\315\243\033>$\316#>\275\233G\275\251:\251<\005w\272=\277%\201\275\036\027\r=\267\214(=\223\014\237=\357\205\333=\214\207x\275\207^\357\275\206\264k<\242\227\354\275\320y?\276P\222\354\265\326\2250<\tk\347=\003\335\223=\030\234\201=\354\344\010\276\234\341@\275#\000\217=\024\350\270\275\341\0166=\016\005\323\273d!\302=\305\204{\275]\370\316\275\237\355\340<I\364\236=\205rJ\275\003\"\031\276\347\0324=>.\341;\314~\236=0>\356=\213\316;\275\003\034I<-yv=\027.G\275}\226\327<\243\331\271\275PH0>\031)\003\276kS\013=\017o\342=4\021\275\273l\266\231=Z\237\310=\225\010\347\273\020f\366=\2470\214=C2\356=n\200\271\275Uw\251\275o=\313=\356ga\275 \022T= \250\363\275&\246\014;a\357\362=qZ\317\275\250n\327\275\261\001)>8),\276\222\220\277\274\206\372\337\275\374o\025<\276\342>\275E\031L<\026\367\013\276\317B\377\275\236xw<\337e\016\276\263\334\234<\350J\005\276\305S\272\274*K\035>[\214z\275\222\246\004\276\204{\027\275.T\356\275\223\264\241\274K\372\204\275DhG>\230\245\r;\301\372\211=\224\221r\275\264K\310=HI\016>\2311\035>\250h\234\273\206G\317=\246\010u=\235\370\022=\207s\005=~\230\313\274\336kj\275Q\277>\276\343R\010\276:T&=\002\030\231\275q\327\333\275\333F\030=QDP=\3658=\273\331\036\214=y\311\235=\3702\237\275\205\332\213=\307\035\230=\342\225\016=\327h)=v\272\253<\313\230\002\276\036\205)=W\347\037\276\277\020T\276g\205\246=L)\204\275\305\213\024\275`wp\275_l5=\305\000\013>uW\366\273\014\321R\274Po+\275/+\211\275<\274y\275\302\332\231\275\302XP=\266\215\t>\2263|\275\203\201\"\275\331 \205=\330\332\236\275\332\223\367=;j\005>\217\343\037>\200*\003\276\026D\277=\366-\023>\021m\022\276j9\211<\250\000~<\212 \221\274\002\342\\=A\277r<\310\2552>\353\030x<\013W\276\274qjW=\240\313\210=\260\355\334\273\257\n\222\275\033\233\005\275\371\324\373=\366\020\222=E}\225\2759\267c=~\246\240\275L/\264=\266T\330:\177i\247<Rq\243=\264\316\236=\026:\366\274\221\321q\274\267\206\370=\206\244\031\275\340E\026>\332\216\213\2758\353\037>\314\034\'\276\3657\014\276\231V\233\273\264\235\036>\023\273\026\276\341\0001=C\212\300\275\001N\337=\03082>\327\367\251\275\027\315F=$\017\010\275\363 \217=\351]\377=+\315\253\275\224#a<\024c\007\275R\343\023>\306\000\004\276,7@\2757\323\236\274\315M|\2751\264\367<\300\023D\275\327\267\210=p\302\021=\232\350\347\275\221\252\356\275r\301\317=\313\\\263=`g\205\274XX\204\275\253\236\266=\256]\267\275\374\204\227\275_2\005<\301\323\366=\212\273\313\275&\271A=\021\'\225\274\025\301,>9\263l\275W\337\024\275O\013\301\274\250\246\326\275\367jv<\256(\\\275Y\255.=,\3108=j\177\033>\262\360\022\275c$\210=\207\347[\275\306~.>\032\3043=\371\212W;\017f\272=\226\332\r\276<\201\005\276\374\276E\276\322\277B=6H\324=\025\316\253<\320\243,>E\251\036=\371x;=,\023q<\354\354r=\242\020\037=>+(>\310g\225;\262!\007\276\200\204x\274\236\252O>\300X\235\275\333x\344\275\035\217\371\275l#H\275\207\021\023>\251O\206\275\221`\201\275\242\253\355=\024\234\003=7I\021\276\025\0275>\032\252\013\2755\347\323\274\302\341\006\275\2139\222=B\300\315=09\007<\341\202\026\276}*\235\275\034;)\275\257,\"\276\234lk=[\023\213=8x\254\275\202\305\217\275k\r\350\272\272^%>\022\020\306=\252\240\261=\377\245\241=\243c4\274\372\2523>\271g\010>\033]*>\032\206\254<\366\271\007\276p.7>\t\273\301\275\007\306[\2755\314<\276\177$\236=4\214f\275\263k\t\276\232.]\275\003Y\265<\326XL\274\360\225\014=-0\235\274w7z\2752\331H\276\372!8>\346*\300\274\242%\363<\226h\250\274\025\343\250<\327\251e<\007t\007>i\266\372;\206\265\250\275G\'\276\275u\314\035\274\367\375\002>\243\207\314={\251?<F\353b=\205\212\034>\2123\354\273j~\345=\240\375\010\274\030\242>\275\252\2126\276c\233\203<\250\341?=\340N\"<C\n\215\2758\006\235\274\251\344^\274\375\240\324=\220\212\340=\'\037\222\274\245B\207=\010\300+>\361\227\030\275\244\270\250=\324\352\215=\217q\344\274\n\307{\275u\214\001=d\3468>5\'\257\275j\316\006\275}\307\250\275\215?\327\274\376\3716>w-\033\276\201\025\033\276\032\356\002=\267\204\215\273b\317\"\275a\207\022\276\256Y\204\275\373}Y=\037\241\240=\225\203\273=\205E\232\272\216\323\025\275\226&\301\271%R\277=zE\220\275\017\276\247;\362/\031=\364\205\324\274\262\313>>9\372\270\275\260\235g\275\037\234\305=\321=\205\274\326\334\017\275\232r\312\275H;:\274\203\306\367\272=\342\260=\230\201#\2767\263\260<\347\354\034>\346\203\001\276\000\026m=g\322\300<(\371\213\275O\016\372\275\026T\013\276\346\003\215=\240\225-=\000n\245<v5>=U\002\336=\021\237\275=\016\364\373<n\255\026=\034\243\232\275u\202\325\275\366\000\020>\035\320-=O=w\275\331\272\304\274\270P\266\274\\\304\330=dI\373\275\203\335\245=\251\337\301=\306\375\256\275\237A\213==\234?\275\355^\243=g\\2>\230\237\271=\226\345\001>\244^*\276f\273\361\274\234S\017\276es\233<\231`\214\275-\t`=\2614\336\275\000T\031\276K+\216\275G^\202\275\340P\354=\205\3569\274\022\270\023\275R\311}=f\030\023>jEL\275\372\372\333=\235=\223=\215\312 \275?\025\206\275\003F\000>7\242\231<\035r\253\274\3155\306\275\354T\334\275\n]\335\274+\201\236=\251\266\032<\031\335>\276\337-_;\366\004K=\271\324\246<\347j\270<.\300\240;\276|\035=\377A\007=u\316\231=\"\243\276\275\313\360\033>Nx\">e3/<\202n\262;@\262\021\275\205\016\214\275\247\343\013>9\261\223\275\274>H<^\024\305=\315\261\214<\010\275\342=\013o\017>V\007\'\276\014\233\244=`\354\333\274\025\t\016>\370\254\337=r\243\020>\322\316V=<\272G\276Ft0>\316Y\302\275\036\272\327=\265\265E\276D\346\221=\273\203\247=\321:C>Z\027\003>f\005\237=\204\361\345\275K\004\377=\311\353$;\231\372\002>\242\270G\276\356R/=s\336\270\275\033\203\020>\2106Z=\375\034m;Nf\275\2759\363\317\275\310,l=\200}\351<x}P\275\262\300\327\274\377\215~=7N\017=\341 y\275)g\000>\334a0=\241f\333\275\214\343\342=1 )=Z\336.\276Nqp=\014\002t=\375\"\001>\354\343\250\275ZN\317\274\304\006\345\274b\005\266\275\243\332\344=)$\306=}\350\307\275\244Sj\274\374e\222=\227\255\262<\262 \013>\247\215\223\2755\016\341=\323\225\370=\332_\320\275\263{{=\026\312\355\274\255\342\356<\244\342\260\2754\215l\2753\276\031<\244\322\355=\026\232\023>\366t\002=K\372O=T\252\264\274<\272\023=\220\324\351=\200+\227\274\371\264|=f\365\023=\270\\\250\275\252^\372<\334\347\021\275\341\201\333\274l~\273<\302\260O\274\tw\207\274\'D;\275e8?\276M\216\355<\325F\210=\'K\206\275\302\244q\275p\257\212\275y\245\312<\321\217\342\275\005\361\270\2744\244-<\235J >y8\233=\224\250\007=\033\204\024>^s\305\275\032\035\273\275\263\375\245\275\336Z\221<\332\3347\274TP\376<\255P7\274\316\3235\275k/\361=\\\r(\276p\341\023\276\220\213\017;\3329\356\275\002\276\270\275\326u\010\275W\316\340\274\2633\204=\016i\030\275\332BQ>a\371->A\357\026\275z\330\375=\334\215\313\273$\031\017\276\352\261\213\275\026-\367\2740\010\010=\376\261m\275\205\220/>v\2714\275^\322g=j5|\275^^R=\250\303\343\275\003\316\273=\307[\025>J\301\246\274\006@c\274\\\036m=\357C\357\275!0\276=\350\276\256=\022\320\361<\321g\375\275\277\221\n\275\221\334\024;k=_=\254\333\265=\342\276\037>^\253\331\275!\211\230\272@\366\033\276\206\t\027=\200\177h\273\224\313\233\275\355Z\334=\2232\221\275z\017\274=Z@\242=\177\332\275=>\317\263= QF\275\023\033\334=6!]=\331\322\334=\035\001\002>\\g\n=\310\007(\274\013\250\333\275#\341\013\276\246\334\'\275\010\353\204<d\310\000>e\347N\276\327\"^\274YB\232\275\350\314\224\275\314z\037\276\037\035\274;\252\335\227\275\210\225\360\275\262\260\247=\006-\317\275B\352\262\275\2259t=l\321N\275\2512\004>K3\322\274\013\306O=\266\323\240<\364\000\323=j\267\033\275\316.\235=\3310\313=\253\231K;]:\204=\314u\304\275\n\005\2259~\272\n\2764%\237</\036\213=\017A\273=\373\372\261\273\375\005\212=1I\017\276\231\2478\275\265\335O\275\2417\033\275\277\247\031>\320x\356=O;C=\373\307\372<\202\234U\274\354\202\273\275wGP9\247-\t>|\2272<\241#\226=\037\2671=tFn\275\274\205->v\246\004>\217\\\334\274\320\374\220\274^\277\370\275BL\263\274\177\027\024\276\301\267\352\275\0353\345<O#\201\275*-\254\274\272\020\000>\265N\217=:\221\233=\312T\213\2753\211E\275WZ\270<\315\363,;\000\255\231=\010\017\334=\363s+\275\3743\361\272D\361\350\275\247\353\337<C\302\265=\273x;=up\332=\"\330\037>\211\3618>\225V+\276\032\031\212<A\344\213\273P>\341\275 ^\205\275\333\032\033=\233\214\025\275\366N6\273\316C\214=\013\3439>\325\354\257\275\323\352\372=$\344\327\275\253\3319\276m}\205\275\016%\203\275^\305\014>\366\347\005\276K)\332<@\331\003=\371\346-\275\023\365p\275w^8\276=y\013>\277\376\033=\301J\243<%D0\275 2\213:\275\222\020\276\222\3020\276\267(\336=.e\344\275\033[3\276\231\237\342\275Uz]\274\314\376\016\275\240T\r\276\nT\211\274`\337\305\275\312\2356\275\370sA>\225KO\275\215a\263\275\235\333n<\326\376\033=\232\210\256=2\023(>:;2=\3173\367\275\007(\244<q\311\260=\370-\271=}{\307=\201D\372\275\353\370\313=\243\354\210\275-\245\272\2751>z\275\321|\371=\0040\002\273\236\273\231;\311B\210\2745rS\275\206\322\266=\273B\n\274\242\026\235\275-\310\002>2\003\240=\370\302\323\275sA\255=\23772\275\025c\355\275\231\236\352\275J\367\037<n\250\217\275\305\255)\274\373\037-\274.(\222=\264fA=\306\203\006\276\351\221\336=\264\351\002;\272/\257=5\274\017\274Z\204\333<\t\213\325\275^\332\320<\254@\014\274\202\367\016<\353J\361=\327\343\301=\335dz:\253t\302\275\033\325\316=]\001\202=+D!=\006d\325\275\201\t)\276\"\312\222=\0277\003\276E^\241\275\253\241\210\275\305\260\367\275\350\014]=\212\215\016=^\014\221=\317\322\376\275w$\350=\325\337>\275\215\305\345=D\200\322\275\035\325\272\273\362\027\226\274\033,]\275\232\234\310=\276\351\374\267\324\230\330=\343\362\362=\177\014\274<\236\200\002=\365\320\034\276\365u\n>\310jU;\227*&\276\217\316\334\274{\"\355\275\322\001l=\304\250\326;,\311\377<\377\235\275=%g\336\275\262N\n\276\303\021\247=\311\211V\275\206D\000\276b\340\247\275e\037b=\247\023;=\311p\004>u\3126\275~\n\312<\346\345\203\273\361^\216\275\017\020\326<I\t\014=\333\021\345\275\304\211F=bs\024\276\265h\256:&\370V=\\\323\001>\036\357\302\275\365=\343\274!\216$\274\214\3177\274\265\344\261=\322\267\310<\371\235\252=a$[\275s\371\260;9\240-\276B\023Z\274Y\267#\274&\272?=b\240\377;\374\245&>#q\200=\370F\202\275\035\237\203<\326\036@\274&\2126\275\3566\220=\241\264\375=\302\305\256\273=E\031\274I\004\206<\221\240\350\275#\023J\274(4\305=}\347N=\331\361\214\275Y*1\276d\t\307=;V\350\274U\214J\275\217\022\302\272\'\235m\273\022MJ=\341\374G\275\204\206\006<\255\025.>\351GS=\032\260\237\2758\376\260\275\027b\244=\025T:\275:;\r\276\340\201\307\274s\336\271\275\210/\024\274 \327\341\272\225\233\317\275\261\007\262<\035\344\005\276Dw?\275-\352\263\273\316\354*\275\202\305\263=\333\232-\275\322B\014\276P(\316<\224\337Q<\232\343\007\276\314\331W\273\2746\222=K\256\266\273\3734\246=\036\340\006<F\333F=\003(&\275\273^\373\275\352^\273\275r[\203\275M\375\207=\224\016\344;3\371\336\275p<\353<\236\321\304\275H\250\260=\305e\233=-\034\255<:\243\244\274nR\253;z\220/>\305E~=\372\336\326=\217m\025<\234X3\276\326\323\321\275c2\034>k\'\313\275\002\310~=Nx\014>M~\024<k\233\224=\333\327-=\030\345\'\276\256\307\201=\236\256\271=\276\344(\276j4\333:3\250\316=1\243\332\275\010\356\205\275\226\274H=\342\325\317=Z\240T>\006\207_=He%=\241\263\370\274VD\233<e.$\276(\260\016\274\367\251\261<V\316e\275\345B\032=x\206\306\275\232\310h<\364\0311=R\030\362=\010t\261<\334gm=6UX:\276\026\264=dO\306=$\033\027\275$\215\234\274\222\300\353=\3145\204\275\020\210\365=]\'j\274P\371\000>%\212\006>\273\000\314<\311\215\231\275\013\242~\275\371.\037\276L5\313<7i*> =U=\311\032\207=Jn\305=\371\246\256=\270\213\302\275n\216a\275\337-\220=\300z\343;k\032\337=\026\336\t>~+\216<D\335\317=\r\262\226\273a\270\307\275\35258\275\272\030S\272F\324(=\376)\220\274_yK\274\005\333\273<\\`4;~\355,\276\330G\254\275\016\323)\276>\344\033>\246\036\240\275\333,O=\343Ye<\241\336b\275~\235\351=\017\262,=\006\242\225=\325\267\306=\035X\212=\007 \356=\371J\220=\271\236\252\274Y*\225=\244\253\357=<i\335=w\265\357<\226\351N=\241\302U\275D\337\312=$6\221=Aq\032\276\001\351\305=\303\266I\275gG\307\275\014J\036<L\223\270\275\005\035\266\273\033\312s=.\000!>\274\325\377\272\225\033\367\275}\034\275=\207|\002\2763\r\305\275C\365\317=\333\264\360\273X\325\242\273\274\001\322\275\357)\023>h\324\222=\320C\326\274\232\247\276=\303m<\275\374\200r\275\3254\367\275\244GC>\370\270R=\275N\312\275h\222\202=\036\345E\275\2123\262\275U\371\026\274\007\022\235\275\374\021\'>]t\037=\304M\312<\"\024\325=\022Bm=\350\251.\274\006I\373<\260x\205=\213\013\312\275]\005r\275\310\245\371\274\2201\n>D\036\263=[\250\024=hR\301\275\270\027\273=\240\255r\275\251\031\034\276\251\335\255\274\370\001\367<5OJ\275\331;\017\276\261\216I\276z\275\026\275\032\351[=\344\361\353\275\206c\214\274\370~\277\275\304\"=\276\303\317\205;\263\315R<(\\\237=4\227\332=\326\204,=b/\333<\033\347\211<\364\264\010\275\301\2534\274\364\375\214;\216\204\230=\004\322\325\275\300{@=a\277\032=X\335\301=\272\325\237\274\375=\032\275\333\3648\274\307\253\351=\0275\251=\006Nd=\347\317\264=Ip\000>hQ\217=\037\'\005\275\351\312\254\2752\342\301=\303yT\275\352\'\020\275\276\027\325\275\256\255\240=Tt\r=\276\200\025\276}\311\215\274\323a \275\264\002\243<\377\250\221\273\243\301\013>D\273U\275\246J\232=\000\036\223=\367\010\027>\207\002\032\276\037\331;\275>\270\374=\314\356\376<\361>\232<\341\010\330=\025\231(>u\355\007\276\246\030\001\275\251\224\033\276i\254%>A\254E\276$V+\275|\321\253\275\363\364\277=z\362<<\033\374\217\275\307i\334:\276\025$\273\262\302\005>\022\264\234=!E+\275u\242\013\275E\271\010<\256Y\333=\204$\217\274\275\356\300\2751\354\">\371\232i<\374A\364=\336\277\316<V\337\227\274\025\257p=r\334\026\275\004\022\027\276\370F\222\275tV\016\276M\277\317\274\345\224\370\275\327h\"\275MhW=\323\300\372\274\220\242\250\275\206\220`=\023]\274\275P\275\001\276\234q\274\274+\tG=\343mU=\327\335D\275!2\220\2753]\000\274L\032\022>YY%:\230+\r\274\177\006;\273\256\231U\271t\364\255=\320\360\001>dJ\006\276\223\334\276;\036\nW=\370\033\t=\353\0229\27406J>\244\353\277<`\323\307\275\n\336\004\275\017k\336=\215\271_=R`\337\2743\270c\275\245\201\247=cVq\274,\274F=\257w\246<\231\277D=n\230=\275\325{\036\276\340] \275\372) =E5\371<\243\250\236=\027\262\201<\3463\211\274\007\372\352\274x\022\020\276 n\364=?\321\034\275\036\305\037\276\316\'\241=\362\340Y=<\260\242=S\210Q\274\223\213\257\275\317\216\355\275\004\227\233=z\213q\275{\313\361\275\225\002\002\276\234\355F\275\316\2126\276U\241\201=:0\023\275\325T\311\275r\014\365\275(\276k\272U\273\014<y\020\250=\336\022D\275y\246\225=Y\305\302=\347,_\275QF\261;\247\360\r>\3463\000\276\3740\005\275I>/=\363v\371\275b\034\204=:j)\276\317\360+\276 \365\323\275\n\370r<\267j =\334\034\035\276\312\020?>\017\317/\276\230M.=\r\202\367\271\022\374\323\2759^\207\274\274\360\221\275\004$\235\274\020\t\200\274_\354\026=\271\263\'>\002v\230\275\332\227\033\275\032\006\200\274#\365\307\274\302<==\314p\344=\225Mh=mk\370=\345\234\336\275n\263\253\275\310<\244\274\376\\m\274Q\035\330\274#\336}\275\376)\005\274\3247\374\275\312\2353=\016\267\020\276G\033M\275\274\353\350=m\310\363\2757\200*\275\307>S\274W,\271\274c%\217=,]?\2752\363\200=\245\010\035=\342\215.=m\251\235\275z7\002\276\006\250\r=!\032\353=\025\002\025=\215P\202\2751\263$\275\246\002j\275\332\331~\274\313*\224\275\334\'\254\272\241S\347=5\274\242=Q\222\001>\2623\007\274\255\252&>\177oN>\315\346\004\275L\203&\274\261r\177=\373V\031\275F\363\220\275Z\233\336\274B\342Y=n\023\275<{p\320\275\250\322\354<\316Z\221=o\273\373<?\374\033\275Q\0070>O\212\264\275:\000;<<\361\336\274$\327\351<r*\'>\274\231\001\276\tD\222\275e\036b=\351v\320<\371\377\342\275z\220G\275\351^\275\275\245\217\271=\014\307\275\275\206\307\010>\276\325h=\244\254\013=\313\353\216=\010\274\214\2752\243\325\275\306\303\022\275@H\364\275.%\220\275M\334\267=\337\306\001\276q\215\232=\2112\323=\347\320.;.\256\271\275\007\233`:\352%\203\275\351\2123\276`\006\367\274^\021G>\177\3678\275\326\202\342\275,\231\365;\204\3710\2751\242\203=\027@\024\275\205\316\240\275\251\025\336\275_\277\032\276\000hL\276FP.=f\272\200;M\016\331<o\214+=\343\267\276=0\272\037\275\252+\320;\244^\214=AE\345=\351\355\254=C\226o\275\223\272a=\327\007<>\323\030\021\275\277`\230\275\356\332\323;MYQ<\362\214\330\275\025\'l=\354\360\014>\003Rj=\300\362A>\255\341\322\274\322\266\361\273U^\220\275\204\304\000>\310\313\246<l\343\003>\353+\252\274^\222\305=\302\013\345\275z\3453\273\005w\333\273mO\302=\375\353$\276a\'\022\276\277?H;\025x\220=Y\3429\276\356V\t=\370\341\232\275>\215\200;RP\'\276\346J\224=|\217z\275\312E\252=\227\022\027=\003\035C>\267\200\366<R\253e\275\306\004*\2769a\375\275D\346`=r\365\363=\2511&>\222\276\357=5}\273<s\214\201\2752C\231=w#\317\274\214\371#\275\227\325R=\211\310\356<\271\031$=W\337\221\274\023\351%\275x\225\034\275\227\230=\2763o\356\275\207\033\233=Gb\354=\0214,>\245O\017<K\210\304=\035\n$\274\231\2666\275@\202e=\255p\303\275b\315|\275\314\257\007>\265\024X=0\202\355\274\034]\226<\371\3027\276\333F)=\314\241{=\262\240\205\275ksU\275\345G)\275\367\251_\275\201\252\';QX\004\275\007Z\301\275\371h%>s\273\356\275\274\033\332=\272RM=\376j=\2754\343\230=6lj\274\336@J=X\322\033\276}\321\260\275\177\177\351\275G\247\201=\271\210\252;H\251\264=\265\022!>\200n\355=\207\241R<\371\313\274\275y\254z\275\357\025\315=Tn\030>\361F\371=\355m\002=\377\213\340=\001\266\002=^\311\001\274\0358\246=\311<\330\275\317{\267<\3046N\275\232\340\300\275\031A\243\275BT\016\275\246\366T\275.\014\267\273\316\2217=\nG\244< gi=0\361\007<e\025\316\273vd\241\274\312\247\300\275\021\336%\275\341`,\275\322h\014\276R\030\365\275@\320\202=\252\245\001=I\t\327=\211SD\275\221\301D\275\006y\245\275O\271\026<\220\026\206=\013\326\324=n\r\341<h~7\275\377A\370\274\363\346\254=\306\330\210\275H{o\275K#\t\275\362T\206\275eE\233\275\351 \327\275`U\241\275\306\031.\274\277\230\337<\"\211\343=E!\003>\236\010D\275\005\367\367<8Z\026>\336\3026\276,\334\013\276\355C\007>\337\247\237<\211\006\014\272\246i\017=F\276\026\276B\325\r>\"_l\275\275z#\275\373\335\272\274\330@.\275\300\305]\274J\215\010\276h\332\010\275\227S\365<\311\023G\274\027\200v\275I\204\221=@\263B\275\347\2324\275\3715\213<B8\270=\342\235\320=<\027\250=?\223\353=\272dw\275f\376\016=\365o\222\274-\246\240=\004\020\025\275\241\215e=\024\005\010\273r\351\232=k\264\270<\033\300(\275\000d\233<\342&\367\275!\330\217\275\2536K\276@\\\374=| \014\276\256\315@=\375\207\334=\331\375\213\275\313\367\001\276\217\236\021\276\022Y3\275^\225\257=J\215\232<\356\377\207<$\342\304=Ud\034=\266J#\275\330\377\312\275FI\204=G\003@\275\313\346\037\275\232\263\017>\247\242\307\275\216S\302=\316\276!=\273F\236<\300\241\000>[\275\312=(\343\204=\224L\223\275_\214\005>{Q\'=\212\220\214\275\343\016.=\372\3169\273\0019\032>\345R->H\0220\276\306\\9<7T9=\322\304v=\324\t\221\275\010n\315\275\325\007|\275\212\225\001\276\232d\252\274O\034U=\016\254 >\245\243\263=t\022=\273kh}=:\n\022>\342\342J\275\360\016\232\275\345y\325\275:\204\200\271\226\354\242<\317t:\2762K,=W\333\255\275\030\034\341\274\003\031\324<Z\024\354<\007n\203=\315\220\335\275|\016\254\275\023\271\203=\205<Q=\244c\216=y\014\346\275H5\002\276A\030\331\275\327\251-\276\370s\254\275\363g\206\275\250w3\276\025\005\341\274\016\263\262=C0\016>\302\376\027\275\232G\344\274\177\037\313=P(\345\275\342B\010>\r\221;\2768\366P\275>\342\342;\nX\264=\032p@\276\253E\211<pg\244=\250sw=\357\372\343\275\016\311\265\275\370:\334=\301\273+\2767\330s\275h\036\272=;\036\027\275 \247L>vr/< A\322\275X\204\252\274\005\033\016<=\231*>\303T\013\274\327\332\177=\257\357\235=\272\224\202==\353\376=5R$\276\234\240\016<\017F\257=RQ7=I0\371=2\267\350=\033\024\310\273\206\236\243\274\215#\022>\375K\321=)\357\331\274X\214\321;\305\023K=E\300#\2763\307\255<U?\'\275\214~\375=\'\311\323\275\022\251\205\2751\363\265<c\305\374<\250\237\331\275.\013\025>Z\023\335=\034aF\276.\366\275=\262Q\204\275r/\025\276P\322/\276\274d\306=\357\200F\275,\037s\274A\000\335\275\374\237%>`^%\276A\325\340\275\237v!\275\347>\016\274(T\346\275N\273I\275\341\351&<Z\320\335=i\274d=\3463\341<.\231\245<\356\345\304\275\362\3169>>t\005\276D\337\034\276n\212B\276;\257z=\220\311==T\022O=m-N>\227\253>>IIT\275\236\210\310<w\221\345\275\343jJ=F$\017>g\243r=\370;F>CG-<}\355\000>\330\204\033=\300\304\006\276\271=,\274\204\217\306\275\216\312/\273\035\365\311\274*\"\227\273\333\010`\275\317}\225=\024;\005\275f\224\013>\260\234\246\275\220\320\004=\r\361\306\273\317\274\256<r\\\340\274_\255\275=;\351z=`\010\350\275\202U}=\014\324N\276\030FC=\274A\016\275NI\241=\335\2442>\307#\352=i\272E\274_\357\t=Wd\231=\301\264\223\275\177?V\2749r\306<\006\315!=\030_\357=\033(#>\200\336\371\275\333n\232=\n\230\023\276\225\267Z\275\301\357\000>q{O<\311l\"\276b\233\"=\372\374B=\256J\025\276\003E6\275P\310.<\317X\210\274\253\375S=\320\323\356\274u\337\201<\001\025\340=r\260+>*9\026\275S\223\323<\324\277.\276y\252H\275x%i=OU\371=\355\213q\274m\0303>\25508\276k\335\363<\364w\227<\275\2640=R\276\251\275\355E\023>\023W<=\373\344\350<\267\002\214=\370/\362\2743\0364\275\023\210->?\"o\274\361V\334=\211\034\253\2752\202&;\340\366a<\225\345\352\275\016\017l\275h\355[=\355\272\242\274)*\213=\004\177\245=\217J2\276\0225\254;R%\210=\263\274\275=\355\326 \276Wz\233\275?]\233\275{y4\274\265P*>&\000\177\275\366\323\266\275/\2650\276\312M\006\276\367w\334=\200\347t\275\207j\335\275\036\305\322\275\372R\033\274D>,\275f\321\357<\200z\353\275\371\000\355=\222\322_=?0\275=\203\337\276\275\261\037J\276\030F\t\276\\\271\275=\267G\025>l8\246\275\023h\221=Jsv=D\r\363=\326.S\275\205\346\017\276\314x;\275V\275\211<\251\002\251=;m\365=\274\360\r\276$&r\273\340\342\260\275\340\323v\274 \304\344\275\0072\027\276\020\267\317<\nY\244\274\307\251\021>\310\305<\272\357\3348\275\326d\013\276\350\231\016\276\255\3065>\327\300\214\2755\031\367=\357Kd=G\220\353=\024\004\307\274,\347\365=\206\001\331=\342\337\245\275l\031\022<\225\331\325<\277\376\005>\263F\211=\273\204)\275\021~M\275\256\366d\273\032\356\004=v\337s<h[H=\226\034\030=U\3706>\246\230\373\275N\n\317\274d\204\325=\316\220q=\275y\324\273\331\352U=]:8<\'/\313=Y\266\355<\217\225\033=vP&<\005\257\032>\301\277\017\274\334pz\275\35454>\237\366\000\276\250e\000>\276\034 \273&F%\276\276>Z\2750\033\";\326\037E\276\032\375\005=\364k\202\275\246\351\255:Bz\035\275@\213\244<\240\t\220;O\017U=Jy\271=\346\376\211\275\3459\343\2754\320\206=\370\036H>\233\212)\276\260.\324\273M\010&\276x\330\221= \025I\275\037z\222\275\252!\004\276\010%\260\275\271\024\026\274uL\210\275\360xe\275\354A\017>%\242\250=\006\255\"\275\t\024\220\275\276K\202<\273\010}=q\245\270\274\013\373\002=\350,,\275\262 \327\272\320\320\223=2\342\273=\337\032\244\274z\276+\276\2763\246\274\242\360\026=\004\305\363=\315\326\275=0s}<\377\247\360\274\177Me=\271\350#\276T\254\373=\340\305\301=\007\037\344=1\265,<v\247\210;\035\226\367\275x\025\r\276\331TG=W\230\">\361M\301<\221\316v\275V\312\312\275\312#`\275\230\214\214=\227\276\225\275\022Q\220\275\340\326\370\274\030fZ=\022s\256<N\361\333=}\253C=+\346\007\275\3141j\275\031%\037\276\342\365\027>\322 \227;\221\3264\276\255w\362\274\320H\270<K\004\304\275wx\267=\343\305\316\275\242\307\362=\202H\022>x\373F=\362(\240=\371\0071\275Zfs\275\3473\265<\315\317\310<\364</<\033>M=\013\316\343=\240\344\335\2752\250K=\332*F<}\003\335:\366\336\353=8(\'\275\\\347\370\274\024h\214\275\340\253T\275J\204X\274\241\325\020\276\300\022\324=\234\356\215\275\276i\370=\270\301v\275`\364\326\275\244\003.=4\354\327=Dx\213\274\245\225\310=)\227t\273h\257\257<o\336/\274\034\265*\275\025\300\202=v\037\027\275\271\317\000\275M0\225\275\360\266\336;@Gs\274>\034G\274-\346\037=NJ\214\274QZ\361=r;\002\275\311\014\263\275\022%B\274d\366\035\276\262\"\346<\227\305\270\275Y\267{=f\037\324;\334\2537\276,\233\247\273pL\322\273\247\243\371<\021y\316<\377\326w<\261\033r\275\310\233\325\273\254T\210\274]LU\275y\340)\275\210OI>\307\375\322\275\363mm=}LL\275n\324\004\276%Y\365=\001\276b=:\266#\275X\227\253\275\311Tq\274\336>n\275\2702\017\275\265N\205\275\017\321$>D\203v=\270z\317=\220\246\304\275\317\025\331=\022\002\214\275\027\333?>\347X\205;\007Y\014=Pg\024=\235 \222=|\341\321\272Fv&>/\2552=\376O\237\274\262\376\023\275\365+-\276\332u+>\356\361\354=\202C\366\275u\344\317\275\030\204x\275\233\276a<\323\352\273<\207\211\017\2757v\t>:}\332\274e\324!\276l\303\240=Q\360\257\275\025q\242\275\t\nx=3>\277=\272\223\204=\037\350\233\274\346\347\034\274\226\351\026>\334\273\347\275EMG>\301\230\307<\306=7\274+\366\027=\r\025?<1\222P=\224v\226\275\364\347\225=m\024\261<s\360\365\273\240\352\332=\300\022\026\276\337\001\326\274\200e\300<\317\362\316\274\244\220\023>\241\302&\276\005\232\224=FE,=Y4\026=\204,\247\275I\354\202\274\346\261\306\275\334\316\220=\300\3616=,/.>\276\004\357=\256\257M=\224\343.;\266\013\206\274\361\207\376<\225Q\351\274\243\177\226=f\274\255=\224\037\313=4\205\207=Afd\274e%\274\273O\367\002>\227\021[=,\324\\=\272\375\003\275\247O>=\247\353\206\275\374\013[=<\300\374=\314\277\247\275^:6>\341\034\272\275\366}\021=q\354}=1\264\250<\037\271\022\275U\006\t\275\225\332\263<\241|\206\275\346\377h<E\0101=\271y7=[\367\031\2746\031\207=\264\347\234=\013\310f=O\222\217\273\273Ex=~18>\271\231\010\2760u\352=\320(\316\275\367\377\251<\2479\362\274\341\370z\274\036\031\254<A\234\356=\276\310\225\274\367sb\275\224r:>\254+\316\275!\0217\273\3312N\274xx\014\275\324F:<\203\246-\276\251\004b\275o\336j\275\321\343\373\275,\025\361=v\210\003>h|\211=\331\nq\275b\207\216=b\010\307<s\376\024\276h]\215;\204\367\346\275T8u\275\376\205\237=\254p(\275\247\207)\276\2743:>s\022\272\275\340~7=\324i\r>\343\257I=\264\234\207\275h\227g=\341\001\254=\326\323\002>\370\036`=\177\273\232=\2430\024=\203c\374\274\353\211V\276P\010S\275=C\004>\300+T\274\227P\326=\330Ud=\316\322g\275}\360\203=\037\354\354=\030M\260\2744d\033=\342\256}\273\356C\206=\350g[=\351\021\342=\371G\257<\256\235;\275\247\023Q\275\313\351:>\375\021\222\275\243\232C\276\"\222\260\274Y3N>\337V\326=\227Z\212\275>\026\355\274=\335j=\373\254\263\274\324\307\001\275\010o\246=E/\344\275\030\274\027>\374Z\336\275U\276\'\275\232\222\001>\026\305\010\2765i\313=\272xU\275--\347\274\313\225)\276Y\313\r\276,~.=G\t\344\274U!\010\276\360\227\262<\246\220m\275e\027\332<\227\307\222\275E\306\236\2755\270\354=i\t\300=\247\3123\276lQ\235\274\257`\033\273\013/\234=\315!\034=\017/`=\362ss=\271f\317\275\245\016\231=z\270\336=N]\217\274\021\343\326\2746\202&\276\265\014\240=:[\363\275\300\335\005\275\001\271d\275\030\225M\275\251\372\344\275E\037\366=\311\373W\275\241\306\034\276\004\216\374\274\254\023\240\275Q\013\214=\277I\027>_\022\025\276Rt\261=3\264*=v\311\242=\202\324\t\276\023\341\310\273\033\024e\274*\340\244:/\334\010=V\261?\275\325y\024\2758\312Y=\374e\262\275j\205,>\252\261;\276\214\351B\275\2353m;\337)\227=\214\235\271\274\\\224\333\275\002\372u\275}<x=\237\377\343\275&\255\243=l\3172<<!\n>\257\253i\275\220\271A=\246\305M\274\374\200\370\2731Z\255\275\334\360\231\275D\263\347=\263\326\251\275\240\003\006>\007\003\256=\261\005\233\275V\247\375<ze$=e\001\360=k\014\036>;\202\354\275\036\255\277;\265,\263\275\2640\n=\"\246*\275\314\241\034\276\235\327\233\275\021\211,>\256b)>\205\241*>\270R\243=b\332\243\275\207 ,\276\201f\034\275\354\026j\274K\351J\274\246{\243=\r\002\225=\370JH=\316\371}=\243\374\253\274\247\241!<\022\373\316=9\0230>\035\356\207=\217l\016>,\253\200\275\nk\337\273\230\257\275\275\320u\033\275Rp#\275\276\373\267<\024\237Q=|\347 \276\324\354\235\274\rh\026>@\315\r>\271\017\010>\270\213<>\326\207Z\275\230\202\313\275T2\306\275+g\224\275\033\0143<\267\323\177\274.\260 \275\013/\004>\307\266\373=\362O\206=\331[\322\275\235\211\346=\347l\271;\355XT>\204s >\024\235\366=\307\325\251\274\'6\371=\353\201\312=\365M;\276\262\223\367\275\237\231\271\273\357@\363\275\262\264\021\276\255j\235=\024u\032\275f\267\022\276\027\031\326\273\350\"\326\275\305\364\n\276\224e\005<\265*\251\274\321\205\341:\365\201\220;\037\344\\>&a\301\275\370a\367\275k\233t;\364y\352\275\311\005\237\275\254\333\013=\365ys\275\031~1=\244\017)\275\327\274\316\275\232\r\016>\0306\254=b\243\254\275!\002\264=n\020E\275\224\317\336<\256\316\017\276^;(\275\004\3477<\031Q+=jr\205=\234~}=/{m=\233\351\325:hy8=\313\354\003\276e\373\016\275\016\240\n=a\227\017>\24275\276g\227_<\210A\025=A<\222=o\317\221<\232\373\226\274\302\341\221\271\000F\204=\0249\017>2\277\215=l\013\232=#\303\275=9+)>\204\0263\274\316\322\001\274\255\256\023= \024\250=\377u\235=\346\203\261<\327^\210\275w`\\=\037\363l<\301B\351\275\3378\001\275\271;\220\275HtK\275\261\364\227\275\007\000\343\271\t\352\233=\234`\214=\260zL\276\222\214\300\275\000T\361<\256\372\276=\014\014=>\326\360[\275\226\377\303<v\010\347=C2\367\274\326\225e\275\264\2355<\304\027\036\274\022\342*>h`d\274\205\225\342\275\003\316\234<\373c\323<#s\267=eW\220=a-G\275\033\010\310=>\246\361\275z\223\265\275\245\341\343\273\242\373c=\205o@<\2025\271=~\224\374=\370\005F>4\177\210\275\255\216\326\275T\032\027>\005\372\255\273\255F\306=\017A\255=%9\215=\t<\317<\302\014\251<\220kN=\027\'j\275\245\213\204\275\351\332\355<\245\037\000\276;y\234=\036)&\276\253\355\225=\211\303?\275\2334\360<6\321\372\275]\010p\274\027\210\271\275z\334\272=\340\036&\275i\271B=\247\271\204=i\320\n>\342\227\022\275\207F\244=\3165\270=P\3279\275\223\033&\276\266\177\246\275\0262H\2762\010!\274N\366\022=S\303\232=\360\313==\232\313\021>\022\373\216\275\2109F\276\377o\355\275;k\007\275\363\314Q=H6\313=._(>\345\242:=5\266M=\324\003\030=c\375\340\275^G\242\274n\304\217\274\277m\310=\216\263\216\274(\332\203=D;\214\275@D\304= \227\344\274\314\230\354\274\232\246C\275\037\250\000\275\334G\255;\310Bc=g\334\333:{\367R\275G\244\246={\274\232\275\177\004\304\275\313\177\303<!\333)\275\367\260\343=\'#\345\275\352\235\341\274\351z#>\357\033\212\2758\355\250=3\247\345=\342$\234\275\330\303\232=\025>\344<\r\2316>e\004W=\027\233\\\275\t\206\024=l]X\275jo%=\254\267&\275`\016\247\274Qh\014\274\326\301\002=\217\006(>e\213\336\275*/\r>\207 H=\245\2153=u!\221\274\262K\205\275\365\017\004<*\000\244<\327n=\275\270\205&>\244\336o\275J\'\n>\370\003w<\215\256\364\275\3437\271\275K\002\377\275\247A\276=\227O\273;\323\231\034=n)\314=\361_0\2755 \236\275\324\027\200\275]f\004\276Y.S=\221\211\251\275\361\260\351\275\027\2025<\\\231\347\274\367\361\275\273Xmn=6\263$\276\256\n=\275\346S$\275*\362n=+0\250\274\240C\357=w\017\001\275\371\224\030=Lg2>\225\377\n\274\222\366\321=V\214R=\261\023\226=B\2214\274\014t~=~,\033\275\300w\004\276S\305L=D\226\007>\212\330\210\275\t2\035\276I|?\275cx\326=\242n0>\332m\346\275\343q\007\276Q\347\320\275b\332\025=\330\200\"\276\367\237\222\275\376\246\003\276\372\221\034=h\250Q=\266\360\035\275\0347&\275\356\356\304<\003\326\340\2754\207\326\273\3220\204=\206\371\"=Q\022M\274\220\304\212\275,\205}=\033\254\027\276a\035\364<\323\036\355=m1\245\275\322,i\275n\346@>\3555\225=OG\250\273\254K?=G\003=\274]\270\263\275\210\027\270\273\335\261Y\274\316\300N\272;\274.\276r\262\262\275\030{[=\014\223\305\275EJ\035>\005D`\275\033\363W\275\014\022\037\276iG\204=\222.r=wy^=*\270\274=\355\031#>\250\023\336\274\211\332\312\275\262\030\t>Y\025\311=Y\257\224\273\212\323\213=\302)\363\275\370\\\374\275\330\323R=\333\001p\275T.A;Y\346\024<\213\347\274=5\271\213\275`\374\216<i1\n\276\312\nY\272\306Y\244<2\006\244\275\270r\212\275\310\316\202=.\177F=\306\006\233=\345 \014>\024\342\262\275\273\306\215=\002\266\350\273\022\221O\275\025@(\276\256\271%>\004u\202;\365H\344\275\270`\242\275H\'w=Y\331\257\275\254\301\273\274Di\335\275@\231\345\273\252\343e<\332\372\r>m\314\"\275U!_=A\226\316=*\224\210\274\365\036\205\275X\340\305\275J0\004\2760)\211=\376\3354>\274\264\213\274g\314\366\273\321\234\217=(<\256=\203\2154\275\365\177\201=9_\023>\251\006G>KV\252=M\253d\273#\257\223<8n\201=\001\304\364\272\356\235\202\274%h\333\275w\037\201\275aP\272<\236\272\204\274<\326J\275\220m\357<\256\207\352;<\244\001\275\332\276\317\275\276\353\323\272\244d\027=\267\314\205\275w\222 >\300\366\177\275\306\223\254=\354Jm\275\234\276&=\213\251\212=\351@\345\275\261RR\275(_\r\276\203\177\325\275b\337M<o\371\225<XK\006>r|\235=-\351\274\274B*\005\276\rJ\317\2756\330\353\274v\231\213<\000\271h=\351l\037\276h4\225=\031K\r=\014?\035\275c\007\221\274\342\234\037\275\030\277\356\275h\306\231=\016\306\337\275\254\022\343\275:\326\006\276\n\324\342\274\360{\031\275\014\346%>\022C\223\275\207]\216<\345\3737\275\217\344\277=\242\302n\275\343\212Z\275\t+\320=h\322\335\272\025\306\022<G\330\237\275\267\n\324\274\245\232\013<;0\354=3?\366\275\262\024\r=\n3\335\274\304h\003<yv\222\275H_\213=\024\347,<\261\207S>.W[\273@q\213=\377\266\352\274\254n9=\235;I>~\214=<0N\"=\324\025\221=x\230\346\2757F5=\205\357\236\275\302\020g=\3617%=\372`\276=\327\023\245=!\317]\274p\344\315=H\017(>>*?\273&\031|\275\247\017\252=pI\005>la\033\276V\372\335\275\321\377\350\275\373\321D\276\316\267\032\275\036\234F=\326\316\237\274(F0=`\357\001=\363S\225\274\305&4\276:f\003\275\330s\021\275;q\255<\217`\224<\032\334\261=\331\326\003>Z\311\276=\000r\322:t\316\244\275\2772,>F(\334\274\367y\301\274\203\245\201<\202\241\331;2\375w=\203\316\026=\013~\212\275}\220\034\273*\360\273\272\250\375\010\276\3428\365<\250\307.=\313\252O\275y\035\035\275X\364\006\275jnK\273\310\351A\276N\260\310=\331\"\313\274I\362\001=\257\016+=]\302\272\275\216\2072\2764\024\016>(\275\027\276\021\222\303\275\230\324\032\276\'\267i\274\r\347\263<\307\230\274\275\340\016\031=\357y\213\275k\2336\275\220,*=\235 \005\276/\'H\2753\321V\274\361=\355;I9\013\274\262\346\343\274\212\203T<c\231\307\272\214\327\214\275\363\3149=\315\303\n\276\246\217\230\275q_\n\275z\263\331=\242\313I=\206U\236=\300\267\240\275Sz\357\273\352\356\014=\003q7>\246\274(\276J0\270\274(\036I\2752\274B\2733\275\274;oH1>$\363D>^p\023>\371\343\024<;\365\202\275T\323->\r\373\213=\313\352\323\275\255q\266\275\330NA=\037\024U=/\201\001\275\277\301\332<\243\010\352<~\035B\273F_-\276\226\005\263\275\373\250\215=\274\243Q\274\031o\225=Y\201C\275\235\361\361\274\335\226\245\275\034\335\">\030\336\240:v\321G>\023+\200=\002Z\217=OeI=z[\376\275\242P@=7\026\200=\021\nJ=\031\262\027\275\337Nj\275\242\025\257<t\263\232\275L+\212\274y\277\013>\302\377\033\274\005\357<<L\226w\275s(\215\274tB0>\351G\270=4\362O\274\205\2756\274\240\213\270\275\230\362\263\274\233\215\277=\'\256h=\223\342\250<\345:k\273Sa\272=3U\223=|\275\264=\377\364\016\276\230:\366\275a\031\'>\225\367\t>\202\275\205=\304\367\000\275\376\347%>H\216\255;\205\313/\276\025\203\033;9\214\340\275G\276\037\276{y\277\275x\030<>\356]\032\276\312\377\t\276x\217\275<\245|2\275FT\037\2749\217\212\275\356:L\275\355\036\243=$8C\275\205~\365<\332Wx;\262\362=>3\202\202\275\026\274\201<\362\252?\276.\227K=\264\212\033\275O*^\274\013\343\235\274eU\277=\254\3363\276\370\250\212\275\016;h\274\354&\351\275\032\252\246=\331\235|<_-2=OL\225<\213\265\020\274\016\204\203\274&\342\236\275\355My=\246d#=70%>\353\260\343<G\330L\275\274\325\220\275\262\271\323\273\360ip\275G\314\237=\002\315\235\274\177\374i=\237<\214\275\360\246\277<\244\311K=\353p\302\271l\005\023>\350@G=\217\t\244\274+R;>\016\352\233\275\367\341\315=\300\374G\274\215Z\352\274[`\303\275\331\231\326=\300Q\035\276\361\351\320\275\013I\300<\004%5\274\213L\331\275_\257\033\275\313\263\262\275\004L\217\274V\n \275s?0<d\255\001>\273.\201\275\247\"\035\276\264m\255\275k\177\005\275\226\251\027\276 \243\355<\272\275\340\275AI\010=SQy\274\326\005\205\275;\211\275=\016\2063>D\331\225<\300m\321=x\243\212\275\'yC<\373#n=\323\027K<O\315\010\276\311\332\266=\036\3261=\377\243#>\335i\\=\240\225Z=i\021i=\017\tg<\224\256\r\275z\336T=\370?\017>!\341\314<\005\337)>\250@\022\276\240e\251\275\352\373\023>. \241=\264\317\350<\340\366\323<S\251\313<K\0145=c\020L=\303\371\211=\351z\340<W\366\251=x\357\"=\213\367F=\204\323$\275Bk^=V\246m<|XH>\300\346\020<\255\230=\275\331\322\303=\321\007\360\274,\017\207=\221\244\014>\'j\007>\361\316H\275 \265\007\275\213\261\023\275\231\3123>x[\t>/5\246\275y\371\r\276v\222B\274g\322[=\241\317\253=N\007\013>[\201\222=\335;\261\275A\247\377\274\263!O>\376u\274=\306:D>\376\276\034>S\363\306<B\2155>\361\276q<ue\211=\336^,\275\354/\021\275\334\255\\\275_VA=n\263\222\274\351B\277\275\336\216%\2754\355\200\274\242:\336< \243\270=\233\330H\2755e.\273\376\355\343<rN\254=s\003|=V\204\336\274O\303\245\274u\177\335=3\301o\275\217%\241=]>,\276\316e\306\275>\335b\275\003\312\266=5x\226=\030\313\202\275{\272\001=\224$\'\275\237\016\321\275\345|\210<\337J0=\250RV\274R\216\310=u<\307<8v\325=@#\352\275\t-\323\274\265\3375\276\266\310\267<\215\264\026\273\262\362\344<<\265#<\"\214q=\301X\347=\344\350\252\275>\005p\275\r\007\215\275\220\2210=6\332\244\275\320#\374<Q\300\213\275\373\257q=p\275z=\023K?\275\325\335\024\274r\277:\276L\213\031=\327\207$\276.s%>f\323\245<\026q\322\274\231L\316\275=\000\000\275N^\225=\360{\212\274NW\007\275IO\032=\250\024!<Po\031<\341+ <Hs$>\212\273j=(\220\331=\306\036}=\210\261\005\276)\230\016\2762\207&\273!U\035\274\361\276\010=o\003\310\274$\220E\275\265\224\325=\000\325\335<\215\033\216=\335m\346=\222\372\346\274\241\036\203<n7\221\275\266\313\202\274\246PC\276\201\322\270=n[[<\20611>\232q =g\267\227\275.v\236=9t\225=O\317.\276Z-\230=\010I\223;/\321N=\231\310s=\316\354\255\275\277V\326;\234_\366\275I\265Q=F9[\275c\233\004\276\023W@\275\226\020\270\274rT-=\377\313\263\274\2425\364\275\307NV\275\204\037\023>\377\254\321;\\\031h=j\256x<\224p\300=\270\377\345\273\345;\026>\300\021\203\275\020\022I>\222\010m<0\3262\275\264+\244=\277\034\335\274\317\202>\276\355~S\2759\267\237\275\314QX\274\331\234\357\272\214\237\301<\240\215\027\275\022\276\032>s\204\314\2752\252\316\2741\202\320\275\243|\014\275\220u\277=x\2535=C\220\002\276FC\261\275\2272\014\275yc\371<\334:\025\276|SW\274\355\330E\2759\353\001\275\314\021X\275\362\334\202\274\234\307\027\275\356\236\037\276g\343J\276\263\365\212=\376\252\354\275\223\327\360=\017\270\310=\260w:\276\010\017\347<\200\007}\275\010\321\266\275\305\326,>\177\221\006\275|L\261<p\3373>\346t\026>\331\021\340=\341\217\002>\310\352\365=\323_\305=\0100\202\275\312\227\266=\"\355\244<\311\242\232==:\212\275\200\205\240=\326y0<\353\335E=\021\314P=E\222\006>S\316O=\250\256\230\275\256\000{=\321j\362\275R\004\342=\305v0>\213\241\254;7\232\370\275#\331\207\275\326]{=\322&K\275\321\246\010\275\224O\327=><\261\275I.\257<\255\234\276\274\006\355\236\275+D\016\273b-\266=5\205\212\274\206\251\035>k\2218\276!%\256=\0259\205=\034\235\275<\325\0137=PK\206\274\331? \275\335\325\212=iO\226\275\330h\004>#\237\027>\325\027\003\275>\305\345\273\306\272\220=w\232\332=)[\306\275\"0\214=\233f\356=\264\335\250=\274J\321=\275o\213=\346\000\367;\241I\021\276\025u\351\275\352\235\333=\371\212n<v\3621<\3323\305=\344\347P>7m\242</5\236<\'\250\266\275\275\021\307<\344\347\244\275\231\377\347\275<\342A=\271K\030>t\313\346\275\303Q<\276\270\216\305\274J\325\024\276S\274\346;?lM\274\240\321\247\275$\240\212=@\230)\2764\376\332<\r\200L=\244\366\">\334T`=\307\341\201=\265CP<\221\354%\276b\372`=\260\223\325<|\232\250\275;p\021\274&X\202;aK\035\275\361[\222\275\266\202\004=\344\304!>\320\211_=?&\221=\316\277\307\275\233t)>\017h\215\274\022\216\200=\276r\327=[B\375;\306k\240\275\220\227\200=\227\220\207=\207zc=[\352\273<\315\t\021>\036x\002=\212\307\257\274\236\202\010\276\267\374\332\274B?!<)l\034>R\375\031\276\377\330\276\275\030n\001>\276\207:\275j\221\331=\005\262\337=E\217\276=T\353\001>\243\310\275\275]0\237=\311G\003>i&\006>\020\204q=f\217Z\275\263_\232\275\243-\263\275\362\264\232\274\254\004g\2750\221\010\276h^\024>q\342\356=\376\244C\276\303\241=;\\\302\275\275?\366\023=#\030&>\003\360&<\375\005\364=\277\344\333<}\3020>\365\005\343\275PS\223\275)\303\017>\354\215)\275<}\314=\353u-<\340\206\034>\216\"\235=\213\236\233<^\220D=N9\273\275\031\"\313=\177.\326;\373\235\364\273V\362A=%\016\n>\343\246\002\276J\302&\276<\365\243=z\\\017>MR\231=l\021\315\275lz\225=\202\264\276=\356#\211=\235\214\006\275\231\3717\276\344s\372=h\341\217=\336\331m\274\371\216\'>\\\\\301=o\324\246\275\027\024)\276IhD\274\263\254Q=?\210&>\276Y\357\275\306K\007>\361\016f\275x\263R=\240F\035\2740\n\001\275$\031?>1l\222<\355\013\030\276\211\256\310<Zw=>\n\257.\275N\327\212=\276\267C>J|\236=\351\215\000>J\021E<\334z\331\275\314~\327\275\2357\316\274\013\271\236=V\027\207=\256]%=+L\\=\033\322|\275\266\221\356\275\204Q\221=g\345\243\275j\357\244\274d\266\372<\312\3474>Z\321s=\177\270\270\272\255\262\300<5\361\310\274\303\257\366\274\036\247\242=\014(\361=\373\026%\275\036p\235\275\211\006b\275PE \276\201l\336=.m\366=\t\215G=\364~C=\336)\351\274:\022v=e\250k<\247\342A<\375\263*\275hH\346<8:\233=R10\274W\321O\275\325R\003\275U\331\344\274J\263\034\276\236k\204\275\0337_=\313A\216\275\n\362\030\276\025\346j=\274\033\306=\261\347\253=\360\370\306=\327\343\352\274\2065!>\346s\242\275\016#:\273\025\275\277<\357\016\351=\266s\262=\022\362\265\275\270\257N\276j6\200\275\3401\220\274\354\305[\275e\200\r\276\324_\344\275\232D\034\275\033\322\312\274\267\220\005\275~\267%\275\035\217D=\003:\250=\'\257\312:\304\255>\272\253\213\000>\223\345\237\275X\013\036\276\343zG>\"\276\265:\337\231-\275\243\250\034\276\003\302\002=\334C\307\274\360\320\027\276w(\320\274\201\264*\275\227\233\264=\353\247{=\356\227\033\276\234]\303\274\321\006s\274p\301)=\263\n\n=\236\200\327\275\312l\014>\343?(\275\035t\010\275\356\'\241\275\331\351:\274\361/\225=\'\030d\275\304^\241<\332\330\353\274V\\\230<\214\320*=\224\253\031>\177=+=\367\203\317;\327;\237=\361iP<\363z\372\275\334\237\004\276dx/\276M\222\321\274\320\032\200=.\005!\276\\\212V<\344\266H\275\325\246\025>\317\2273=\2503\021\275p\231\254\275N\344(>\337N\312<\243\276\"\275`\201\035\276\r\335\245<\320\314I\275W\334\232\275\361\"\320=\256V\367;?\243\241\275\372>$\276mA\027=B\335\274\272\017\365\314=+?\352\274\246\333\236\275\n\321\326\275\363\212\001\275\3603\340\274[\022I=\020\331\244\275Q\266\223=\t\3200\276\230\213d=k\313N\275\021\337\232\274\316\315\316\275\346\367\315=2\224J=\264i\274\275H\320\006>\270\013P<\230\212\332\274\0053P=7p\013\276\223\013\312=i\237w=\007\300\265=\352^\306\275\237\343\314\274\205\211\035>\235:\315\274\254h*\274c\345\256=\306\002=>\005J0=\006:\036>\300o[\275U\3731>\347v\n\276\271aG>\014M\336\274G\356J<\317\227\177<\023x\204=(\023\322=\303\205\332=tz\207=\032\n\363=\242P\222\275\310\363\233\274\010\316\342<\213T\233=qo\n>+0<\275\233I\360=\364\246\003>\241z\317=w\262$=\222\227\260\275O\037,\275\325H-\276\363\345\220\274$\007T<\035\232\035\275\031\226>>]\307o\275\340\365\363\274\030D&>\272\323\020\276l\265\331<\235r:=<xR\275\020X.=+\342\203=&\027e=\016\264\013>\t\325\244\275y\231\204\275\273i1>g\007\252=P\251\314\275.\220z\274\351\352\216<=\261\242\275+\"1>=\220\300\275\313\265\246\275\025\343~\275&P\274\275\217\014\001\276\321(,=f\301\271\275\361v-\274\203\002\345=\210\232*>\376\233/\275\251N\026\276D\2622\276\303\304\253=\340\231\010>\240\026\361<\033\374:\276\367\331.=\221\2102>K@\217<\2067\210=\341\032\364\275b\316\000\274{r\030\274u\375\010\275I\365P\275\263!\024>\034\2311=\347\212\006\275\027\367,\276\301~\032\276\374\377%\276\002@\213=\333\260\005>-\337\t=}H/:\342\323\2648#\336\216=\326\252\034\275\315\351\263\275\016\236m\275\212\300.\276\242\231o=@\024\231=a\t\264\275\014\233\204\274fxX;\201\221\035>W\304\213=sf\016>\220\301!\274 \201\022\276\"\260~=\271/\252=\231F1=Qp\225=\335\261\002\275\024\004\240\274\213|\374\275<\316\272=\301\245\250=\234\032&>l\375.\276!S\026\276C\014\257<\223}]\273\351\205\030\275)k\375\274n\265Z=\210\205&\275\362\304\231=\256Y\374\275\\\344\333\275\002\307\362\275\n\336\213<\014c)\272\366ob\275\025J\250\272\031\024\252=\225,:;i\246\227\275\240\336\3755\374\306z\274)NK>\204H\003=\271iv\274\207R\235\274\232a\277=&\005?=\037\003b\275\352\327\314=*\275\221\274\"\370.=1\331\003=\270\262A<\3304\220\275\222\026\237<P?\245\273>v\2039\014O\254=d\304\221<\363\317\004>\235\017m\275S\226a\275\353\013\302\275Z\361\222=ac\231=M\342\033>\311\327V<K\211O\274H\343\250=\331\306\345\274\021\210\322\275\247\214\203\275\302\247%\274\245\300\177\275<t\300=\031\222t\275g\024R\275L\016\236\275\272\271\374\275\"/V\275\213\0313\274+\244\345\275S\327\224;\213\347\305\275\374I4=\372\374\030\275\263\242\365\274\257>\373\275>C\274\274\272\275\005\276\010\214:\275[q\\\275E\242\200\275\361P8>^y\003>\253jd=\005=\351<&\224\003\276\270}\225\275\023Y-\276!\005D\276~\370(\276\021\252P=\332*\210=.\247\r>\365y\221\274\361\201\203\275v9@\274\301\376\333;*9\232=}\263D\276{\336\242=-\261=\274\3126\n>\2043\302=\354\334\005\276\341/\211\275\223,\334\272q\250\214\275\255\362\266\275\315\337\377\275^\nn\275\231v><$\200,\276\3008\240\275\2364\314=\336E\272\273`1\336\274e<}=\312\226\004\274.\203o<E\036\360<=\352\226=\364R\375<L\206\200\275qz\351=\314\214\316=~\010\267\275\003\227\234\275\017\311\315<\310\004\002\276[\241\013\276x\341Q\275aC\006>mW\021\276\323\360\205\275\207Y\232<\017\225\017>\322\266q<\305\323^\275\245\305\362=\331\013\345\275\361\035\247\275v\215\017=\244\200K=1=\n=\247*\315\275_\263f\275\325+\007\276\372:S=\215\2143=\263HC\275\275\022\202=\010`\300\275\272\227\357\275\323\257\266\2757F\335\275#\372\301\274\243\255&\275\332\255\221\274\257\274_\273<5==\'\350\022\276\304p\302<\263\244\010\274c\013\377=\244\357\177\275\212\020\213=\336\324\261\275\202\234\016\275\177\372\033\276\312E\354=s\n\326=\264\021\202<\332:\027\275\023xV\274+\346\211\274\225\300\312\275\375G\374<Qt\260\275\311;\332<\315\003\213\274l\001\202=\327\017\034>\203\227\353;Uq\372\274(\r%=-\207\006=\366?>=\304J\342\274\233\307\030\276\266\007\245\275<\204E\275\017\236\242<Pz\231=\233+\203\275n\304\361=H\241\337<\357\346\270=|\365R\275?\376\257=wb\312=\212\3539\276\3143v\275E\276==\271\367\004>\306Hd\275\303\306\026\275}hg\275\354\017\032\276\234\232\200=\007\376L=\215f\264=\335\300\203\275\030IW\272\004\3350>\036-\265=<\305\032\275\013\353!>{\200\211<\360\327\353=7\314\307\275\325\257\304=\007\346\242\275\320\"\204<g\221\200=\276L\374:\023\310\005>z\351\006<Z#/\273\211\205\250\275\254\036\271\275\007\'\357\275\004\314\001\275\336\230\006\275Z\365A\276\354\215*\276\232<\025<lQ(=\316A`\275\263\324J>\223\324\202\275\207o\230\275\356[\025>X\357\360<\2100\274\2744\202\261\275\006{9\275\243\377\355=\234O\022\273\021\314m=,\257\016\275\312>#\274K}\247\274\305`\'\276\006E.\275\272\331\005\274\375\222\224<I\021\273=\305\333\221\275\335\345\271:a0\230=\300\201\037=@\325@=dV\301\275\277\204\232\274.v\255\275so\000>\rC\224\275\221\223\325\274\367\300K\275\021\217Q=\2275U\275\036\350[<dS\256\275$c}<\014\032#\275\263^\234=\254\313\212\275\301\027\243\2749\317\234\275\271]\315\275\374\321\315=6\022\246<\".\237\275\200\351\242\275\262\317\027\276\256U\224=\222X\333\273\354\025\254\275\341\244F=\317\352\315\275\210\373\315\2759\013,=\\\352\346\274|\271\231\275\373@\"\276\371\r&\275\314\217C\274\020\007\t=\243\225\224\274q\233\304\274\360\223\222=\t\260\002>SM7\276Y\342/>d4F><\202\212\273\014\tk=\006\n\267=s\213h\274B\356~\275\333Z\024>\233h\342\275\307n4\275;\273=>\260\205;\275\252%\007\275O\245\022\275\226\243\003\276\237B\205\275<?\211=\351\370\001\275f\233:\275\254RP=\021\032g\274\246\000/=a\243\361;\r\353>>y\312\006\276\020\"\352<\373z\033<\333b\'\276\010\315P=4\341\373<ZJ\340<\307\373\027>\'\231\024\275T?I>g#8>\032\351S\275\344\016\242\275R(:\276 \213\222=\213\207\205=\324\303\230=\025\331\227\275\360\247\344<\356\274\246=\326\216\347\274\364\034;\272lPE>\300f7\276\303\031\210<\3434\265\275j\342\265\275i;F=wN4>/\0133=k|\025=i$\016>-\356\374=3\321,=\26362\275\360$D>\342\207$<k\335?\276:\037+\273[\\\255=\270D6\276\021\357.\273j\013\324<tgb\275\212\241\330\2737\227\024\276\215\250\321\275\332R\224;\030.<=\342Y\346;K\352\236\274\262\227R>\371\036\361<\342e\000>\207\330\206=\3649\351\275\300\260\027\2750ir=+\222u=\031\331%=\300\304\350\275\027\262s\275ta\375=\270\323\265=\255R\230=\326\254\262\275\220\312\323=D%\311\275\344\366\332\275%|\031=cc\000=1\274\016>r\010\303\275\036\2329>s\035W\273C`\211\275\340\003\356=\360\302\236=6\345\305\275\366\216\351=W\353\372\275@\177\242\275\314\027\353=D.\242=\033N!\274\216\251\334\274\373[\n>r/{=\207X\374\275\020\314\210=\3043{\275\n\301\244=\244\375\334\2753V:<\314br=\347$5>\340\034c\275\336{1\2769-\367\275\271r\311\275\326$.>%\260\006\275]\325:\275\247\323\370\275\337=\207\275\225\020\251\273\027\203\352=\210pk<m\205\360\274\001=i<kb\030>eT\237=\224\222C\275\251{\002>qW\350\274\003\332\211=\340\372\244\274S<\004>\2463\270=\227\357\005=\003\376\317\275\3073\233\275\367\315\235\275{\306F\275\026\003\251=DOq=\000$*\276\265\243\224=\367q\346\273\204j\001\273:\352\276<-\221\276\274?\335=>\325m6\276\275\246+\275\235\357K=\325\261\237=4|\001\275\211\360\215=y\336\n\275R\265\032\275%\3431=\t\205\330=h\345\335\275(\000Q\275f\017\206<\265\362\310\275Yc><i&y=\362\014\023\274B\240\277=\227\277I\275\261\3159=\333\325N=6\313\354<]\262\277\275\335r\327\275ux\275=\367L\324\274\232\343\356=\261\237\027>[*;>\370u.>N\210\310\275\337\003\221\275^r.>i\217#<\212\210\025\275{\365\234=\265\3362>\204\233\374;\351\317Y\274\016\313\277=\333\021\207\275[\342\027=\031\237(=E;\366<\374\334\312=~\3432;\240r\242\275\306\241\016\275\250\271\262\275\271\004\374<\302\326\334=\215\014==\311\026\226\275\006\376:\275cN{\275%1\200=n8\n>\026\3745\275Q\022\200\275W\341\353\275\347\tD\276\r7+\275\306T\354\275\233\021\240\275\320\0347\276\362c\235\275\026\033R\274\267\265e\275\031\232;\276\361\310\364<\026\253\245=\037D\376=r\2506=\323\265?=\034\315\204=\021u\337=\2357\223\274?\"=\275\324\322->\262a\255=\257\364\025=\267\262\200\275\336,?;F\227y=\217\263 \275\200\t\343<\354i\233\275\237[\005\276\004\375\315\272\330\214\261<7\230Y<\343f\363=2@\332\274\365\033\005\276\275\330h=\241%\351\275\303\330\217\275\363\257\244\275<\332\021\276\275c\023=\000\024\006>#\001\274\275\306\264\020\275\3071\271<\007T\372\274\334\002z=\216<h\275W8\004>\251\234\315\273\212\206\202=>9^<\223\336\253=\010\236\362<>KH=\3301\265<k\311\236\275GF\316\275A\004\352\274\307\217\276=\031\230\336\274kr\362=E\017S\275\254\235\224\275\311E\377\274\231\364\246=\014\210\235\275[\313\031\275\332\217*=\205\3406\276\217\032\021\276\0057\205=\t\2431>\203\371<=Q\272\370\275]?\375\275P\023\310\274>p\245<\201*\222<Tg3\275\370y?\274\370\210\330\273\346\267A\275\314\313\254=\3603\310\275\311\364.\275\000y\n\274\211ho<3\321\333\274\031\023\264\273\266\353\335\275\031?\r>\025\302\235\275\025D\362:\353\374q\275\221\006\207\275\357\231\202=\337\335g=\227\352\332\275\t\237\373\274:\262\035\275kSu=\036\345\275<{\200Q\276(\000V>\364w\n\276\253z\202=.\022\247\275\254\024V\275\232\357\025>pc8>\033\021\252=H\347-=\257~b=p\275\357=\001\233\364\274\017\365\320\275d\325\223\275\267\277h\275\312\237y\273p\223\017\276\226Y\212\275r{\265\275\262d4\275\311\357[=\242\335z\275\236\025\271=7\220\024;\254s\356<\212\212\322==\202a<\304\234\\\275\206\230\027>B~\207\274\203\212\205\275,+\022\275\322y\361\275{n\014>\'\020\307;\240\2006<\002\211\312\274NA\000>\267k\351\275\362\354\370\274 \340l\273\263\316\360\274-\200l\275y\023\301\275\235\220x\273!\267E\275\036\244\034\276W\367\246\274\3639\242\274#\316f\275\352\242\254\274:\234\207=\013\217\006\276\305\207\007<\331R\032\272S\230U=\227\266\027\276\356\024\350=Q\2435=\224#\017\273\303\335\310=i\352\371=\204\022\312;\037kZ\275\354Z\250\275/\211G\275p\2647>*\310\322=hj\340=\300\3212=\314\316#\273\024\373\220\275\004%i\275\317r\022>\3328\244<\267\262o\275w\360\024\276\373\311\316=\365Z\027=M\034\341\271w\036.>\300Dg\274{\372==8 \025\275\021\343$>/\"\214\275wU\315=\324\206\006<\023\316\233\273K\002\034=\377\010#\276\211\000\352=F\025\272\274\345\342(\276\302\303F\275\240\205`<\302\3400;\306\3677=\311\345\206\275(y\000\275\243X\r=_\343\222=\003D\227<\322\325\251\274\244\000\255=`\332\320<\354y\330=!\233\204\275\347\343\033\276\0003.\275\221%\230\275\327F|=\346\226i=\342o\003>=k\036>}\021\266=\"\245\003>\027\212\220=\227\265(\276\223\370\025\276\270\032 \274\264\221\305=\263\224\267=\257\326\225=\343?\321=\220\254\013=\0049\002\276>\273\244=X\300\004>R|h=r\027G\276\217Bt\275\305p\206\275\276\204z=l\344\035>\366\034\273\274U\003B==\326\202\275X\310\035=\254o#\275Q\332\022\274\303\001\033\273\210\324\004\276\354\0060>\373\216\321;\370`\323\275\204D\n<\206\351\352\274\3765\036>\n\002\310=\255\266<>\304\2747\274Sv\356<\027\231o=\236\177\027>\376\240|;\372\343f<\004\3548= \237\246\274\313\\\201=z\304\230\275Q\036\234=\252\022=\276\035\324z=\037R\234=\315\266\t\274Cf\277\275\022+\234\274\267\332\250\275\273\032o=\304\273&=_\270\321\275\333\330\013>\3346\022>\363\366\300\2758\274\302\275\212p\000>\ty\003>\307|=\275v\206\330=9\247%>\337k\312\274D\335\257\274N\330\200\274\374\320\340=\372m\304\274+*\266=fQ\n\275S\325\245=\206/\033=\235\217i\275\252\226\005\275\256N`\272\304vH;\000Q:=\276\304:\273|\223\024\275\016\000\360\275\332\005<\276\367\365\217=A4G>\276\353\342\274\3436\211=\376)\t\276\221$b\276\260\341q\275Nb\030>\212^\226=7\354\307=ZX\026\274c\021\313=0EB\275\2579\301=iR\223\274n\345\254\274C^\347\275\026\371B>\306\260\346\275\236\004\311\273\304\312\251\275\202\306!>\234\340\255=N\313\215\2758=\005>\320\302E\275s\313O\275wn\302=\025\220\320=\213\333\241<2<\017>\237V\304=ngH=\323O\362;\211\307\014=\354\n\214\275\316\216\031=C(1\276\'~\372\275$\333I=.\326\006=Q\213\352=\036$\\\275C~\002\2760\262\341=\346\225\241\275{\014\321\275|o\272\275P\265\304=?\221\254\275\371\311\207=B\354\374=\327\237\253\275?\227\230<}\031\244=\243\254\026\275\231\332\311;\214\276\340:C\207P\273\265\003t\273\346\026\252=j\317\024\275\231\341\006\275\355\005\212<-\303/>;)\247\275\220\251.>\3142\014>F\'\202=\255\016m=\346\022u\275\227\227\227\274d\232\215=\242#\214\271\303\265\227\275\226\334e=+\032\330=\336\341\300=v\361\242=&\356\247\274\207R\326<\336\212o=\363p\210\275C\340\334=\251\367\016\2762\334\267\275{m\257;F\354\326=\216\273\016\272\267\340\372\275z\362\253\2730\345t\274\354\374\001>\201\260h\274q\027\236\275\257\022\"\274/\210G=\216M)=\352\"\316\272\000\2435=3\005\376=\341\235=>7\363\250\274A\005\342\275\230\210\003>\321\275\010>\351\035\025\275\270\253(\2760fK>\306zG>\363\222\215=\027\331/>\317t#\275&\331\322\275T\317O>\305w_=[\036\036\2757K\023\276w%+>\262C`=\327\273\014<\274\014\206\275\337\270*=\230\363\364\275\033\312\302\275\255\010\306=%\333u\2737\204\334\275\225\301[=\354hx=\222X\205\275\241q\024\276*\310@=\263\263\214;k\270\n>\033\217@\276I\017\000\275(\252z=\206\002\213=\266\261\375\273K\034\332\275\301\3657>\337\322\370=\2145\202=a\235<\275\305\3104\276D1H<\335\332g\274\341d\201=,\207\202\275m\275\035\276\026\355\343\275\353\336\323=\365 \203=\004tA\275\375\210\204\275\366\317):\204\332\232\275\376\254/\276ws(=-\300_=\334h\"=\021\032\177\275\255ks\275H\323\274=M\270\313=\271x\r\276C?,\275\322\250\013>+\314&\276\023\244\032\275i\323\357;\261l!=\\\300\036>\203\327\300\275|)\336<J\264\316=F\036\277=9;\037\274r%\006\275\336\211\272\274\200\324\256=Q\216\323=\225\340\235<2\366\024\275\276V\326;\373\027\360=\201BQ=\355d\315=\333\026\211\2739\266\213=,%\301=\332G\375=\312\206\031<\320\250\337\274\342p\212\275\355\325\237\275\337A\240\274\226\252\237<\312\3543>%\352\017>?H\303\274\270\262\252\275\003\0038\275\301v\372\274\206\004\221\275\215\222)<-\356\345\275)\320\316=\004\332\351\275%}\016>\325\026\225=\345\020\320=\371\243>\274T\270L=\te\206<\230\243\024>\024\010p=jr\257=\036?\216\274\245w\000\276\232\221\247\274\331V\356\274l\365\026=SA+>\031\035\004\274\2013\256=\026?\034>\336\360\004\276\312g\205=\342\257\257\275\255k+>apK<\342\'%\275,\020P\275\'\201\037\275\235\321\272=\373\010L>\204\022\313\274v\373\204<\262\023\030>%\230\252=\007gR=en\027>6\341\351=k\246\327=B\037\021\276Q^P\275\355=\275\275L\\)=\316}\027>\020\267\270\275\251\032\207=U3E=\272^\032\275*p#>V\343\311\274=\227\t>\363\243\301\274\014dU=\342.\373<e\226\014\275\324|*\276\267\032\243=\364fL=((\232=\336\331\005\275\014\303E=\303 />\301\355\177\275\313-\204\273SP\226=!+)>\343\264\027\275\t\345\031>\210?\224<\246\024\267=\017\244\024>\342\312W\274W\254\340\273c\252b\275=K\003\276*!\222\275A\177\217\275\337\001\202\273\364U\277=\377\tS=\252\326\230=_\242R\275\204Z\223=w\263\355=>\263\310=/\211\210=H\250\231=\024\337\260<%\360\315=\257\324\226<\244vY\275\232\271\0149\320a\334\274nQ\320<\321\224\313<\371N\303\275\022\213G<\036\235=\275E\346R=\203(\347=c\264\206\275\272\035\r>\2065\207\275\343^\206\275\366\203D<\374\371\031>\206\233i\275\017\017\010\276\234\376\213=>+\311<\r\236\271\275\271\212\212=\235E\274\275\375\341\362=5G!\275Dg\247;\307k<>O\366[<\264\245#>\331\355\210\275\300|7<\346x\323=\375w\220=\3258\246\274Yu\n=\373x\322=L\177\"=qz\021\276\375\306z\275)\314\324=\225\265D\275~\262\273\274,4B\276P\260\007\273\303!\010\276@\352\314=\303R\210\275\363\273\222<\251\230<=\254.U<\037f&>\362\033\036=\325!\270=\223&4\276\303\232a=\263\326\233\273\340E =\006,\257=4\226\352\275$\026\213=:\335\376=\355\225w\274\236\210\201\274\366\274\023\275ha%\2758H4\275\327\322\224<\323&L=\311D\233\275\371\310\021=\357s\346\274\345N\315=\354w\034>\336\247\377;\370\266>\275?\320\273=k.\222\275\350z\254=\006b\235=\343\241\235\275\020\034\271\275d\010D\274\354\034\257=U\367k=\251\313\002\273\007\206\322\275\217\263\367\274\375$8\276\362\370\025=\275\357\323\275E\262A>\006\367N\276\351\\$=\351\n\332<@p\374=\000\343\035=\335%\270\274AZ\334<<\337\203=\261@\334\275\263\3776\276A[Z=-\036\354\275\r\311\272=#^:\275\025\366\216=P\303\354<\252\363\261=o8\030\275\213x\321=\272\303T<\245Y\210\274`{\252=\217\223\271\275\321a\226<\253\364\235=J\024\373\274\021\350\323=o\001\007=\030\260P=\233\320\260=XR\010<\032\002\016=\025\226N\272\232\242\326=\200,\365\275r\022\016=\301a_\275\2243\002\276\314\306\210\275\232\274\030>\035\242\350=I\t<>\226\204\236=2\023\202=\256\206\263=7\254\201= V\355=2Z\236\274# :\275\310\226\206\275*t\210;a,\242=\310\323\204\275t\253]\275\271\221\210\275\375\356H\274\203\002\371\274\215\220g=\\\223\365<?h-\274\214E:\276\333.)=\266\241\302=%&\344=0\260\376\274\305\016\022>S-\216=\363\232M=\324\200]=`\333:\275\226v\210\274\252\377\372\275\010A\n=\177\215L\275?)\025\275&\214\354\2759\326\234\274\010\320\233<m\027e=<\210\005=\200\225\276\274\017\204\r\275\317(\272\275bB\316<\346\305:\276N\252\246<\3547\331=\277\\.\276\263y8\275\237 \007=\336e\306\275\233J\006>\033\254B\276\251\227\302=\363O\224\274\010\357)>\321\032\376=\034\010\376\275.\203\352=\2764\020;O\033\'>\226\346\013>\316\360\303\274\304}<=\250\025\214=\272\201\\<\227^\250\275k\260\303\275\306{\307=\274Y\017>\332|\272;\023\277\001\276\n\241\016>\346\240\256<S\214\336\275\363\022\350\275\275\356\364\275+\265\013\275:7\017>H\005\322=B6\313\275\352@\237\274\361q\002>\300\253\204<a\2247>\235\337H\275{\001\343\274\251D\257\272\247\222\033=\2566C=#\312\"\274X\003\245\275h\027\367=j\265d\275\346\315\372\274\201Y\304<\211\307\245\275\031\254a=\n\362<\275\224\311\225=F=\247\275#\276\222;O\270\344\274\245\251\021=\376bB\275u\023\035>\225\2438\273\256\330\346=\267*\242\275^E\367;]a;=\300)>8\243_`=\244\213\364\273\251\352\366<\376\212\227=ae\220=\233a\233\275,\260#\275\234\023\035\275\0015\023\274\014f#\276&\241\254\275\t\211\337<$\370\277\275\343;`\275u\200\036\275\215\017\312=U}m\275qR\210\273\313\210\356=\262\212$\276z\347\374=q\3525=\301%+<\252\"\014=\236\\\031\276\226\251\355=\372\024\261\274k\203\033\275\004\231\202<\032\334\217=F\250\230=_\177\316=\223\277\220<wp1\276\360U\327\274MV\207\275?\311\360\274:b\362\274\032__\275\215\300\037\276\353\226\010>%\n\352\275\351\217\335=\361\013?\274\333=\260=\3560\000\274\275\277\311=l\345\001\276[G\274\274\3076\336\275\022\354\253\275i\377\360=*A\244\275\301T6\276!\313\003\276\000\253|=XN3\275\001\326\010=\205N\265\275\371h\371=\262tr=\026\322\303\274\000\325\240<\303.\025=t\355\357\275p0\034\275\014R\235\2739f\010\276\\V\225=\305\031\263\2753\356&>\236\214\310=>\322\026=F\230=>Y\245\360\274F\364\017\276\272,\300\275\217\350>\275\316\033.\276\334\225\315<\276f\271\274D\003\307\2750\344\323<\261\320\357\275e[L=h\001\236\275\321\341#\276\241,\201<\300\007-\276\370M\211\275\332\323\313=\224\025\323\275hH\374=\3112B=\366<\340\275`!\000\276\001Ke=X:0\274\234]\013>c\177\311\274\273\354\'\275 c\324\275-\350]\274\3119&<Ih\003\276,\370\036\275T\252h\275l\275\027>Yy\201\275\000;\020\276\372\301\262=\207\265\261\275\n-\255;\366\022\030=6\323\377=?>\344\275J\2103=\226\311\233=$\332\003\276NI(<\346.\374\275\371\376\016\275\0240\216\275\215\310\220=ke\010\2749\002\024=U\312\241\275C\223\023<\201\265\363<5\304\366=%\312\212\275\313d\373\274!\227\027\276\2624\237\272\353\003\">\336\0062\276$\3320>\253Q.\275\021W\334\275\313_\270=\002\203\256\275\3729\371;\013,\347=\316\225\305=\217\245\'<\241\262%=\020\273\273=\021\014G\275/\200\242\275\211\0049\275\350T\237\273\266\304\r\276\360\211\034\276\210;\003\276\222\217\244\275\244\263(>\246\262\207\275]\227(\275\037\271\275\274\223\303\202=2]\245\275\347\232\332\275\025?k\275u#;\276G,1\275N\001\360\273\315\352S>pQr<2M\210\275\031\266T\274\372\352\342\274\276\212\005>\364&\274=\001\2233>.\344\373<\343}\177\275\271\321\020=\207yK=\215\215\302\275\211T\216\275\t =\275\367\2606<\217\276=>z\341\022=\317\232&\275\025\353\023>\217\027\004>,;\240\274~\020\025=\324\202\203=)\022[\273\221\334\322<7\215\210\275\'X/=\230\371\315\275PE\342=\022\311\020>\273\300\363=\353\310\234\273\004W\277<\177\201.\276#\332\231\275\031w\355=\354\022K=\334\301\320=\377$\212\274;Y\002=\371\376\252\275EC/\275\350\227v\275\027\225\261\275\234\315\326\274\344\342\337\275\366l\007>12g\275\375\223\002>\250\2238>~\244\322\274\2236D=r}$<\226\313\277=\362\r`\275\353E\001>\212\216\331<\211\324\253\275\206VA>s\262\361\273`\341<\276\303Xy\274`\025\310\275P\236\n> \335\010\276;l\n>?\345\263=P\025C>\006uU<\217~b\275\340\243\267\275\207w\266<2\316/=1Y\343=\220[%>\214<\024>s\251e=\276\\\301\275\376|\252=\246fz;\030\242\361<\020u:\276\205:t\275\257\240\017\276\350\2310\275W2\003\276\314\206\371\275\253\350\317\274\326\376\255\275\017\350\261\275*\010\005\276\312\273\311\274\370\275\232;\216\204t=\006\237\215<\335jF;I\344\232\273\247B\315\272}\223\354\273\320\330\032=O\232\245==\372&\275\017|\257=%d\315=`\313 =\340&\037\275I\013\024\276\303\245\222=o\212\230\274\232*3\276$M)>|mQ=\311\266\323\275l\365\234=\031f\034=\3363\233\273\177\245\260=,\316\020<zv-\275\336/\205\275l\307)\274Sk\000\276\3326\r\275\310\376\206\275\263\321\206\275\360\215Q\275\346~\341=j\231\317<\\L\006\276\371-\037=\213\366\004<\2722\361\2757\326\007\276\374\367\222\273\315|\233<\235)9\276U1U\274\347\026\360=4\n\255\274B?R>;\360T\275\215*\316\275\234\037\254<\365\214\035=\026d!\274\326\\\257=\204\312\016=[\267j;\216\341\205=\236\027\226\275,\271\006\276\016\217\035>\t\273\305\275o\366\367=\265.\225=%C\200\274 0v<\2244\360\273\217\320\310\274\324\335\247=\020\313$\275\221@\024=T[\340<S\354\252<@)\250\275g\326\001=\224\263\003>2X\334\275JP\230\275\315\026\220\275\330\264\004=\"\361F=+\214\231\275\333\227\'\276nK =\276\341\t<E\254\210\274\025\276\002>\252\334\210\275.\211\227=\n\014\236=\330/\025\275\255X\351=9\003\337=\212\352\373<\270\250\007\276\032\'\372<A\3508>\371\000\013\274\307#\017\276I~\003<{\nt\275\235\305|=A\3430=\330;\205=\217\255\206\275\254\342\014>\210X\367\275\222N\334\275[\347\210\275K\226\270=\324v\336\275\364U\251\275\311\007\224\275\351\202\223<\n\277\223=\232\306h\275?+A=\003N\324\274\320\\\027\27680l\275\373X\037;\216=\025<\001=\220\273\220\242c=\0018@\274\022\277\377<\377*\201=\355p\026\275-\t\273\275\221\325o=\n\323;>\332\250\273\2747a\225=~7\246=\374z\257\274\037\364\364<\222\350s\275\246\213\362\275\006\375\373=~@\000\275,\\p=\010\004\254\275\022Q\003>\240W\321\274\212R\202\274\0130\356\275B\274S>\336\n \276\351T]\275d\307\037\276D\346\305\275\206pm=\205\332b<K\335#\275\000\251\272\274\371\205\004\275o\007\033>>)\2219#\026.>\362\276\227\275A(\347=\001\333\365=\254\253@\275\213l\"\276\036;\001\276tRR=(_\272<k\003\252\274 c\226\275X\013\205<\024\221\357=u\260\332=[?\250=Q\017O>\345dP\275\330Qa\275\335\334K\274d\023\311=3\233\007\276\333\314D<\006`\255\275|Y\363\275\313\364\250=,\205\306\274m\334\321\274A2\340<\333\250 =<\t\214=\276A\233<w7V\275\304\020\204=\033,\215\273\343\035\t\275uZ\001>\240;c= \023\324\274\2406!\276e\234&\276\324\267u\275\327v\374\274nF\005\275\004\376(=x\334\206=1\320\351\275\357\231\027>*\326\352\275\211\315\314=\320j%=\342\226\334<\234.q\275M\344\374\273\376\244\203\275\334\320j=U\346\241\274\370\021\277\275\213\213$>\325TE\274\021\213\353<\356\302\235=\245\326d\274ou\262=\244\214\262=f3\225=\353\334\331\275VZ\261\2755JD>\'3G\275\007U\033\274zL\024\273s\010%\276N\261\225\273\372\225\371\275EFK\276\204o =\020\270\376<\363\017}\275b\355\256<\205\214\376=\210\302K<\340\000;=\374J\'\276\246&\013>2\256\301=\3678\311\273\371P\246<\276\311\233;\202\317\254<\263\214\361=\035-\007>f\230\001=\344\021Z>\375W\366;\256\370\002\274\004L\210<?8\321\275\316\177\367\274\025\021\347=\25689<\316]\t=J\362+\274\357RV\275\334\221b=\270\366\276\274\204\200U\275\236\177&\275\316\341x\275\231\032\310<\370\303\026\275\010\253\t>\361\260\257=\363kq=d9:\276\344\203\272\275\272\332%\275\361\004\341\275\212\334\231=\216\377\341\275)\037\372\2750\315\247=\367{\210\274\301\254s\275\272\214\004\276>\204\357=\3206/\276\367\315\031\2748W\206\274\247,\225=\203\242\342\275\t\037q<\321\361\031\273\251\001\360\275\203\333Y\274\347\323\207=|D\247<\322\201\024>\335L\310\275\001\341\001>\n\0263\276f\310\202\273wN&\274\322q\206\275&%\r<\344bg=\265\264==\201\253\003\275 \274\216<bl\007\275\275q\323\2753S\022\275&\224\241\27561f=\177\234\351=\353\007\220\274\177}o=o\347&\276\370\2526\273m\215\205\275#\370\020=s\315\177=a<\323=}\037\"<!%\025>-R\241<>\254\010>HNG\275\034k\210\275\007\267q<\342\265\363:\3242\026>\305p\214:\264\023/\274~\314\316\274\372\326\353\275\373\313\032\275\324J\275\274\035\3620<|a\333\275\353\206\025\276}\365/>\213p\013\275X\276q=\3270\212<\322\212~\275\037^\007>\305\242X\275\357\352B\276\363^#=\006R\237\275@\036T=\227\236\005<E\345\266=p\003\027=j\202\023>\373\'V\275\270\204\025>\264\314\313\275\234\3034\276<Rq=\335\340\330\275\346U\327\275\001\305/\2758\246\002=\240u|\275\333\363\220\273L\336\217\274U\013=\276\006_\311;\302-\241\274.S\271\275\341\327\226\275\227\220\024\276\324\036\351=*\266\003>\233p\211\275\355\340\307\275\314$\313\274)\345w\275g\243!=N\327\026\275\235\321u\274\356ie<QE\n=S_t=\251\220+\276J\377\360\274^w\361=\325,,\275\304\352\304\275qY\317\275\312\222\312=,\376\311\275lr\302<\021\250\271=C&\014\2751\232\270\274=\002\332\274\350$\366\274\226t\016>\352P\024>\002\346A=\315`G>\017\326\363\274\374\274A\275\356\316\212<\2441\037=v@\242\275\t\010\035\274~?@>v\336\235\275\326E(\276\366\246\311<\250\0314<\233$\t\276\026&\026<V\221\201\275\220\224M<x\354L\275a\235\"=\017\347\271\274,\321\350\275\227\301\316\274\363\014\355=\342K%=\331\220\230\275\352s$>\273\001\363=\365\034\226\275\025$\230\275F\325#>\0245s<\202\240\003>\300\000\366\274\210\023\004>\305Y\317=\222\022\302\275\376\341w\275\231=\355\275D;\370\275g|8\274\\\230\022=\301\337I\275\t\252}=\013\234|\274\314\347\270\275RC[\275{}\215\275C\002\014\2753\2715\275\363R\220<K\317\254<\347\200\003\276\3655\210\275\2124\232=\204\330\326<\ne\347\274~\030$\276\220\277\014>Z\020\376=\321\342\233\271\333\257.\276\342\327%>3~\t\275\362x}=\365\203t\274\324q\234=\002\216;<\274\013\010\276\325\203\007<\246F\206\275CK\215\275\251\346\302\275\260a\003=H\240(=Yo\252\274\237\217\'\276\267\351\351\273\204s\211=\n\326\022<\311\255\327;\n\027^\273u\365\206=\222\226\025\276\033\005\235=\234\314\016>,\273\220\275\302\364\340<\231\242\233=\254\276?>\034\234\306=L\351\347\275Sx\006=\017\205\360=\033\311P\276\243V\300\275\022\301\243=\273\020\343<k\230\207=}\331\010\276F\005\021\275\304i7\276\311\201&>\304%\244\273c~I\276\336\016\322\275\302_\240\275\274\256\222<6j\260\275\362%\002;_\306\364=\201o<\275\006\023M\274\2105\224\274\031\372\005\276\233\207Z\275e\332\r\273\014\\_=O\235&\274\301\303\200\274\233\367\200=)\"\022\276\261\342\275\274\273\334\210=g\273\025=4\300\224\274\342\003\357=\312\317\303<\317\212\273<\177\030\034\276\302\360\301\275/\226\217<\n\371\242=zm <3s\324=:\314\230=\031\245\225\273\034C\326\274\302~\240<\'|\250\274\177\266#<\271u\022>X1.>S\241\236\275,n\376\275~D`=\017\234\233=\315o[<b\253\354=\007k&=Dd\255\275\026\210!\275#\241p=m=\223=\275u\316<a\242R\275\360\203\274=\237\377\260\275\371\324\226\274Axy\275\002\373\234\2747~&\276\257\253@\273J\020#\275@\236.\275\000\374\225\275=\207\337\272\024u0\275\366>\212=A\341\037\276\017~\301<*\032\005\275\300\226\006\272\364DF\275b\226\230=\036  =4R0=/\216\226\275\257\267x\275\265\256\211=n\'\320=\234~\366\274\253{\'\275\320H\272=\313\230[=\355\263\376\273\207_\177\275\r\032\245=\250S\032>|c\257\275\356\221\030>\316~\210\275x3\362\275YwM\276\266\345 7\3049\360<\036\336\n\276)\302\222\273\034\210-=\3742\r>]A\335=C{\232\274\256wB=NgF\275\201\375\356=\r\010\204\275X\377\326\274y\361+>\0059\254\274Z\023,>c}\350<R\233\315<\243P\252\275\207\224z=\356qZ<:\026\210\275Td\0019\270#\303<\342>\207\275~\027\006>M_\337=9\344\274\27577\344=\3470\275\275\004\030\226\275Y+\350<s\231:\2750\213\222\275\232`\r=-l\374=\275\205\020>\3564V\274{|\227\274\351\000\346=\341\266\376\274\336X\323<59o\275&\005/\276pbm\275*!\317\275\367Y\n<\317\225\030>\343\222F>5\263\352=\2135\341\275\3239\013>\374\006\205\274\361\306?\275z\024\035<\241\300A\276W\330=\276kEv\275\216\344\303\275\330n\267:oz\257=\333\372i=L\243\272=Z\214\021\275\254\2032>\307\257_=\253)\260\274\022\264\201\275\355\326\373=/\303/>\005\356\300<\364R\214=#\\\027\275\301\205T=\244y\333\274[x:>T\225\302<\032\032\276\275\275\355F\276\330\345\336=\307\357\307=\"\372\372\275L4\255\275@\215\305=]\271\342<\355\\I=\375\371\337<a\344\020\276\200\245\264\275=P\026\275\310gP\275\035\304\302\275\022B\220;\022\250\022\276\252\274\220=\037\330\237\275\001\350\250\274\214\367\220=(\2172\275`@\327=\320\345\253\275\347\316\035\276\211Vy\275\230I\004\276\236\006\\\275\311\234\000\276$@\251=Y\373\326=\016\272\300=\323\010A\274![\310=\353\321\377=p\272\232\275l@\335\275MJ\375<\034Z\227<\316\214\230\275\037\217\273<\026\235N=\372Wy\275\272\227\332\275\2521\336\274\261\235p\275\005\333\374;\355\252\026\276(\221\262<ZJ\266\274[w\211<?v\265\275\356FU\275\260\200\241\274#\206\315\275A3~\275\266\0252\276\230d\376=L\201\220\275\362\214\314=^\036\016\276\220\240\002\274\272\214\030<.\304\304\274rDS\274\230\356\037>\250#k=\207*\216=\3607\t\275N\251 >\316\245\177=\334\346\247\275 )\005\275[\3669\275\214\205\005>{,\203\275p\3008=\025\024U>\251\343\231<WK\243=Y\227z\274\000\313\341=\023\222\213\274\312 \246\275i(\361\275\220>m\275\222\212\225\2728^\335<\373\217\247=\241\231\020\276\317\003\261\275/\303\274\275\350\374\214<\371\352\032\275r\222%\274*\243\336=I\340\237:\233=\363\274>\003s=\315[\253<\031\213\002=\270\325{\275\034\316q<\277\234\245=3$\221\275M\007g\275\314\023\021\276\005\313\262\274\271vR\275Y\227\374;\231/\272\275\034;\350=Q<6=\232\312\025\276\037\211\337\275\036\262*\276+m\274\275\336\353P\274sb\033\275\035\374\035\275\001X#=(\231\371=\2364\345=)\256\305\275\343)\354<\014{\217=\3646>\275\337\263\000>\303s\223\273QK\033\275\265\261y=\342)\242\275\212\337\331\275\312_5>5*\213<\344\261\024=\016rB<\036\031\334<\030\\\210=\006QW=\235\r\346\274\352\240==\224\202\233=\347\335\350\275\237\247\326\275\246b\271=\214\240f\275\261\251\211\275\365\221\350\275\320\305==\004\272k\274#\321\241=\001\n-=\363o\223\274Y\344K\276\335\377\343\275\305A\324;\250\373\213=_L\217\274\363\340~\275c!\250:zJ\021\276\250\234\213<`i\336\274\213\320\232\274\010\236h=\203A,\276d\3160=\007\352\243=\250\344\030>\357\n\007\276=I\245\275l\252;\275\212\332\267\275\376\341\366;\221H\233\275\247\010\342;v\224\304\274i\257\263\274\222\345\252\275\240R\224\275\350\353|=z\221\003\276\2709\375<\014\242\201\275\333R\000\274Z\360\n\276\211u\221=\205\273\333=\345v\014\273\204\352i\275M\te=\0325\025\275/7\213=0&\237\275\340M%\276\274\324\304;\342\021D>\336Oz\275A\262\373\275\222\302\221\274\335\351\322<z\240]:\302\262\001>M%\017\276/\2704\2746\034p=\3354\021\275\034\326)\275\352\327\233\275\273\342I<%\033\003>Z\247\022>\255.\315\275\312})\274(\024\001\275Cl~\275\312\007\002=d$\201=g\rw=\364Hu=M\314\021\273\207\253\334;6\232m\275\311k\026\275/8\025=\000\334\273<\277F{<\037\205\321\273t\235I\275\223\275u\275\365\317E\274\014e\210\275\221\t\034<\177\207\275=\013\010\353=\246\376\244=j\022\227=\364}l\275\316Nz\274i\021\037\272\263=\203<3\226\341\275\334!\324=\265\375/<}\010\272;\352s\311\274p\2443\276/\231\222\275xU\320\275\326(\366\275\231n\352\275\252\330\254=\277*\217<%F\314<+\377(\275\330\032\346\275\231\361\204\275p\014\275=\001\002\t\275\345\226\233=\312\317o:kD\375\274\276P\230\275o\323\253<zX\004>)\261P\275\332\234\256\273\2331\205\274\232*\331=\367k\305<\336\201 =\364?$>-\214;=\010<\000>\307B\031>\260\243\013>\232\236\005\276\302\233d=Q\254\327=\003\363Q>-\245n\275&@\376\274\260\344\177=z\361#>\211\r\020\275HD\345\2742\3275\274\331\360\260=\313\321\335=\177\322\221\275\350\013I\275H\034\305=p=\305\275\311{\203\275\006\224->\255,\230=Ub\356\274\233*&>%\251\234=\246R\271="
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "network/weights_1"
      input: "^AssignVariableOp_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "%\377\223<\274\214O<\323\312\372\272Qj\327</g\013<\031\326$<\033\374\237<\303\366G<\024YE<\016\221(<\262zi\273\241\2270\273\336^\026;\037\225\305;>#\252<o\351?<\244\374\257<\3754\232\273)\003-<\321\266\021<\354@\335;\"\251\201<\256\336\002<\371y\247\267\254L\266<\037\337\t=\252Iq;\366\333P:\253\355\264<\323\265\235<\n\020 <\007\305\357;\231Gf<\317\232\177<\242+J\272\340\312M<\302\033\242<\n\265\376;3\017 <\333G\031<\217w\211<\351\207[<\013\314y<\2000\302<\310\037\264<!\370\203<\351\213\252<\037\003\007<uz\206<\337N\202<\301\002\246<T\230\311\271\265)9<1m\226<e\317\036<\034\002\246<\324)\231\271$\217\177<q\313/<p\360\254<\246\342\273<\2710\233<\3676\370;a\272\232;\3429\251<Y\333\245:\207D\215<\341\300#<\224\360\215<\245\233S<\332_G<\272E)<2\305\273<T\021W:ZwA<\231\334\223<\300\336\237<c\302\265<\227\356t;f7$<\0315h<s\361\350;B\255\353;9\210\215<\264\260k<\037%%<n\272\271<\262\365Q<\027\342\315<\231md<\317\2552<+\252q<\324yt<-eb;\016\337\213<r\347\340;\300\333-;\340T\025<\177\256\024;*U\265;"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "network/biases_1"
      input: "^AssignVariableOp_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: "\371\372\307<\214\340\002\274\354r\334=\223\227\026>I\241\273\275C\347\264=\373(\274<g\033\344\275RT\001=\n\360\331=]\'\013\275\225\024\226\275\273\304\217\275\241\3102\276\333\217Q\276\320\001\t\274\242\234\016\275\177V\223\274\024%\270=(\036\354\274\3143\341\273\000\322\335\274^\214\221\275b;/=\302m\260=\226\373X=\335\322T\273Th\343\275\245\225\020=%\301V>\364\241\313\275GL\354=??\312<\365\332\271=*\367\224\275\230\001\021;\204\t\202\275\305\017!><\257M;\215\325 >\251\232\225=\234\365\003= \237\251\274$s\224=\360\237E=\213\370\'=\246\275\332\275\2604)<`<D>}\255\324\275\031\233)\276*\246\014\276\036t\242\275\204\346\342<\303a\361\274>q\205=\215\264\'=\266\273Z\275\311_\272<?\310\264=\261e\362;\347a\016>\000\267|\275\325\363 >\226!\r\275v\006\333=G\320\327\275t\270\345=\373\321\026\275\"w\326=\332\247\214\275\220S\333\274O\261\333;\231YO:\3400\037\275\250\rO=\355\304T\273yHQ\274\314\005\220\275\r\213\336<\2560\217=A\212\274\275\001\200]\276\001\034#=\005\037n\274\274=)>.\277\t\276\255\321\222\275\374\323%>\247\216\200<\206d\361;)A\025<\033@\313\275I\000\362\275\032\037\020>\221\034M<\234L\263<\257\002\211\275\327\306\304=k\240\225\275 T\"\275\345\313\341<\022\004\002>]\'\363\274\351\024k\275\016&\226\275:n\233\275\016\337\271\275g\330\020\2747\263\021\276\037\374\223=3\336A\276Rm\322\275\336\240\307\274FV\024=\357\370\306=\213\004\217\275\342\313\247\275i\364\022\275$\266\270\275\320m>\275!\"\220=1\0130\2756\303\254=\253\267\212<\3400\t>\007\376b=\241)\347=/f\231\274\216\034\r\276\"\025\340<3V=\273uS\237=\022\223\r<5\324\317=7\350\252\275\222\360\377\275\030\034@\275Q\037\256<|\357\013>\031e\272\275\362t\367\274\273\375\257\275\241\354o\275\010\215 >i\244\236\274\311\205\302\275\277\251\303=\372\200\302=;\341O>;\317M=\266\276\020\274te\217\274\230)\356=\334\367\202\275\316\360\'\276\307!\003\276o\263\310\274\271V\010\276\322\327G\275J\277\233=\370-A\276F~\301\274U\266|=4X\314=oB\345=\243j\275\275]\251b=\177\372\244\275Ob\n>s7\032:\273\3575\275\267\200\332\275\020\\\023\276\226\216\203<\302j<\275\371y$\276\003\312\331\275\3559\003>\302\346\337=\006\222\n=\365\2519\276=T\367<\033\225\260\275\247\"\365=P\177\244\275\356\260\037\276\024@\377=\036\370M\276\232x\221\275~\010\177\275\350Z9=v\216\344\2743\017\345\274B\3139\270\321\355\263=\017r\251\275\030\277\346\2745\314~=Z\353B\274\317\200\261\274\246\242\264\274{#K=z\177\031\275lU\316<T\324V\275\276W\311=\2156\216\275\344K\213<<\313W\273\203\262&>\275\030\347\274\307\021\325<\3676z\274\226\217\223\275C?_\274Z\001\360=\207\022\343\275N\254\277=p\213/<RK\034>El3\276\033\365\t\276>\324\222\275\2234\307\275V\332\377\275\264\327\227\275\200\344\034\276\n\267\t<+>\200\275\311\204\001>r\221;\276\203g\203<\216\333\030\276\030)\032\276\261\234@<\364\334\306;.6)>\310x\033>\376(\037>\300+\302=**\240<\364c#=\277)\247=\2735\027>\035D\236=%lY<\374\312\270\274A\341q;uLS\2752\354a\2753\340E=\202\216+\276>\277O=~\346\'\275\256\242\225\275\'\332\235\275\022\002\270\274\312\262\251\275\302\354\345=5O\224\274E(\007>7\313v\275\274;F\275\033\005*\276\tU\347<\211\263\256\275?\371\223=\214\376\300=\027\374\361\274Gt-=\354\337\360\275\tt8\276CYr=}\277X=n\363:>\374\354c=\345\001\025=w\314\035>.\205\r\276r\307\253\275\354\024A\276\242\345\022\276\222\336\035=\246\315\327=\017\203\324=VG\347=JV\366=>\254\330\275]\212\303=\202\235,\276\203\247\273\273H\304\230=\237\363;=\026\271\r\275\307\300\002>\266p\022\276Z\226\216;\265\001\344\275\000}\256\275g\002\205<\232v\244=\037\371\027\276\315\246\327\275n\002\372<\003\2369\276\235%\320\274\363\202f\275\035*\201\275]\322\353=\377\001\367<\375\033\340\275\2618\003\275>\321\004>9qr\275F\250\260<\312\266<<\341\030\312\272}\017\332<\212\353\252\274Mi8>\016\r\341\275x\005\263\275%\216\270=n:\240;(K\036\276\n\274z\275N\361e\275\016\247[=u\rE=\020\304@=C7\021\275\325\234\311=\007\254\343<\335N\356<p4$>~\266-=\365J\353=*xH=\244\300\251\275\254$\023<\272\243\262<\333\251-\275Q\026\230<n\350\005\275\00758\276_y\237\275\211\214M=\3609\300<>\230\026\276\334\316\020\275\357\223\255\274\367h\273\275Ij\355\275\027t\342\275]\230\315\275\352d\362\275^\344\276\273\001\307\225\275\214\342\177\274\336\225\370<\343@\301\274\030aw=f%\025>\210\030\230=\'(\305=\333\330\257\275\203\000\325\275\220\t\267\275\352\377\241;,\376g\275\002q\366\275\225@\262\275CK\252\274\2539\214\275\177\270\002=wv\004=\274\335\216\275\310\232\266\275\322\343\004\274\\0\302==0\314\274\372\334\212=\025\001\016<\256x\004=\231\372\025\275Q\226\261<v\303%=]nA\275D\312\036\2756F\372\274p\000\362=\217+#\275\030\371\226\275\250\230\220=\350\226\207<\314\354\324=\354\343R\2741m\226\275XN+>/\233\236\275c\260\327<\215\251\326<Ue\206=\213\370$=N\362\022>GWs;\204\246\352=s\374\350=9\004\217=P\0238=\325s=\276\247\347\201\275\313\341\264\275\324\374\005\274z5\376<\255\216\"=\375)\233=\246\026\032\276JK\230\275\370\232\361=_\332\014=6\376#\276W\224\235<\0228->\344n\035<\257\331\376:\303\2416\276\267\2751=\346,\223\274\300e7\273\310\220\007>\203E\255\275\365\3261=\005\032\210\275\341\t\235\275\216\200^=\356\261\345<\345\270.>\"\377)=\361\302%=\007\235\232\275\331u;\276\030\r\246\275\240F\020>\243\242\027=d\210\302\275\251\3033>i\310\345;A\363\250=\t\371\315;\320\323\366<\300\256\252\275\260\346\232<{\342\014\275\300P5<\220\nj\275\377{\014>7-\001<\254\310,\275\353\366k\275/\033B\275A\277\345<\\,\032\276\207]Y\275\007\370\332<\237A1>H\312\014\276D6F\275\2577s\275N4\317\275\2248\262;z\312\306=bf\262\275a\r<=\234\001\t>\025\013\033>p5\321\274\270\317\032=\342\005\022\274\'\335j<\023\006\214=\226)\271=\374\237\245<\0229\322\275\334\365\210\274\374@J\275\357\257\302<\364}\t>\201\257\306\275C\363\214=?\263\005>aP\334=\370&\230=\006\244\217=K\274\036\275n`\224<\327\311<>\227^6=L:\211\274\237{\346=\353\375\352\275pbj=\na\305\275\250M\271\275\314\211\321\273^\010H\275{\237\250\272\233\361`\275\312AF>\010\3113<\373\'\020>0d\003\275\327\230\006>\004\035\262\274:9\356;\212q\275\275\027\036\214\274@<\310\275\t\n\311\274\332\341\t>$\302\363;\320w\220=0B\326=\013\255\026>y!\210\274\200~=\276\376\"\'>\214\007\366\273Y)\016\275\270?V=oYQ\275\217\005\214=\306\237\214=x\265\216\275|\217Z\274z$\027\276jS\345<\024\355\027\273}\026\323=\254v\261=\023\377g\273%{\250=\351\033`\275|\262\013=\321\310\277=Z\2514\276!\367\023=]Z\021=\315\275\244=s}T=O\033H\275\257\272\275\274\212&%\275\235m\341\275\307\377+\276\250\203\211\275\342\035\314\275\222n\014=x6D\275\356\022\314=\215\376|=\226\021\005=V\035E=_\342*\275\341p\226=\017\022!>2\340x=|\222P=\212,\374\275\264y\376=\234\r\266=h;K=P>\246<\226}\255<\306\002\350\275\025Q\252\274v7\370\275\305B\202=6\340\370<iw\203\274vh\273=%\361g\275\301\354@>w@\263\275\242f\'\275\'U7\276m&@=\307!\320=s\276V>\021\225\270=\205\226\006>\223\335\253<\336\336\230\275\371\301\300\274\325\252\301\275\225y\210=\037\006\032>\2374\r;\221@\373\275l\2148>\262p\223\274\366\323\277=\n\341\205;\016y\251=U\231\030>\340)\005\274\366)\243=\022\267\030>\327*6\274\t\302\350\273?-\372\2755\241\264\275\260z\331<\302Y\362=\362BY\274\324\217\240<r\266\035>\347a\037\276)\237\025>\367\335\004=F\213\225\272wG=\276\311\330\330\274i\177\007\275\350\246\013\276y\356\232\275H\377J\273\233\376\262\275\312\303\022=\337\247\324\275\256`\315=f\257\221\274{\233\r>j6c=S\200\270=\241t\266\274\376\216\336<9\331\311\275\233u\\=\216\217\032=\200M\006\275\314\021\r=)-&>m\255\312=\017\225\376=f\213\241\275\312\322\271=\005L\300\275\2065J=\200x\357\275\035\321\312=\321\357-<\031@;\273\352|\226=\274\250\217\275\305E\316=\333)5>\351\350\222\274\362\266\207=\332-\354=n\251\001\275Jz\322\275\211\227\002\276p\r\274\2751\342\014<\030|\234\274]\3527> E?\274\377\333\204\275P\356\253=\r\031{\275\261$\222\275\017r$>\275\313E\276\300\205\"\276\255>k\275\257\360J=\324Fx=\267\371\255<wu\255=\303\343*\275\347\316\256\274\375\213\322=\355\024\221\275\016M2\275u]\342=\224#\370\273+Z\202=?//\275\230\221\373\275\240k!\276\365\352\314=\235BI\275c\177\362\275,q\265\275\303\365\255=]k\177=\035\270\020\276\343\005\320=\257\255\200\274\177\000>\276\303gQ>y\267F\275\'M\373\273\306k\227;\2662\266\275[!\026>\"\246\020=\214\262\031\275\037\334\001\276~h\217=q\213\n\275\276;\352\2755Q&\274\3014\027\275\004\301\203\275\331\334@>\216\035\203\274\347\245\007\2746\013e=\243\362\244\275\352\\\240=\370B\212\275\316\207Y=\242\227\265=\233d\261\275\223\305\257=@\262\t>\031~\332=\226\353\232=Mw\240<upe\275\254G3>\023\263M\273\374\000\321;\r\023\366\275u\226\025>\227\306o\275UZ\374\275J<H>\255\203@=\343\037\203=\266\347\t>\032L\313=\254\374\366=\252\023\263\275\263\330B;\030\375\351<\251g\034>6\203\300=^\325\003\276\001G<=\304\253\004\275YO.\274\233A\004<\374\231\016>\364\240\023>\020P\021=\232$\226\271\311\226\216\274\330\232\361=\353\315\375\275n&1=\213\225/=\3526\034\276\264\257O;\023\311;\276\014\265<=!?\014>2\223[=\342L\245=%\332]<$\300\250\272\273\002\210\275\342\037\201=q\225\352<\270\034\033=C\336\202\274\326\030\262= \024\000\2755\251 =\372|\322\275\013\227\017>\243\260\254\275G\276\302=8s\376;:qu=\323W\037=A\371\007=\241v\336=\256\364\022\276.\t\r>\3362\275=4\270\341\2754I\275\272\220\222\246\274 6C>\223\\B>\375\332&=\236\341\244\274\251\203*<VS+\276a\260x\275\266\2561=9\014\226<N\365\001\276\034\274\200=\n\\\021\276\2251h=\201\375/\276\202G2<F\371\210<\000\000\014>U\342I\275\220\3562>\304\240\247\275\323\031>>Y\345\210=\251\0305=\310\327\010\275\365\232\030\276\354\204\203=\350\3608==\014\004>\023\356\215\275\207\324\274\275\177\264\240\275\003\267+\274\007\034\035\275\223@\251=\021rZ\274$\016h\274\025M\261\275$G\350\273r\225|\275\022\237R\2742,\244<!\237=\276lyk\274k\266d\274A\224\022>t\346\227=B\266\032\275&\2560<Hb\023\2741=}=\271\363\210=\336\311\241\273Td\212\275\033\213\244\274\310#\2419P\003D\275\243<\327\275\3273\357:zF)>\265NR<\\\341#=pe\255=\311<M>\215\0223;\022\010\243<\303\013c=\374\035\277\275\355\022\302\275\323,\204\275\'4\253\275\250a\221=&\320\033\275V\266\027>\212\017\263\273\2547:<2\2514\275T\333 >\376\223\037>_\350\256\275\253\337\315=\233\360\317=\222\346\220=5L\252\275!\361\256=9I\037=\227\002\362\275 \264\375=\277qs<\353\234\264\275\275\030\323\275\025lq\275\262\230\361\275Z\r)\275\217%\000>\243j\303<Mk\003>\322\206\232\275\026\004\320\275\220\003(\2761\351\225=\006u\234=\300\026h\275S\n\301\275\233r\223<\037+<=\312\232Y\274\007\007\226\274\256\306\377\274\013\263\347\274\364\344d\275e\361n=\257\305\264\275K\201\023>\254\316A=B\000\021\276P\t\023=\325\216\356\274\n\\\257\275\212\0103=\032\300\215\275O\214U=8&\302<\032\325\262\275}\251i\275\346b\357=\213\026a\275\316o\032\276yL\247\274U\201 \275\257\272n=\315&\244\274\033\034\201=\356h\374\275eP;\274\373p\007>)V\304\274\203d\254=\304\376.\275+\203\227=k\r\032>\364\\\235\275\362\326\246<\"4I\275\347\366j\275\246b\n>z\005\377<\246#\343<\365\267 \275\034\371\003\276\201\3330>\230\311\305=\223^\214;\370\023);O\202/\274\035<\250=\212\217\207=z:\227<\000\251\304=_?\320\274m\002\256=\240\3372>y\032\227=\373\255v\275;\207\342=\236\216\244\275`x\272\275\345%\'\276\317s\346=\372k/\275\177\205\377\274Uz^<\275n;>\326\206\216\275U\213\244=O\250\371=\367\307Z\275\325Cf\275\250\301\265=\302\372\003\276\005T\030\276\240\303\330;\000}\360<\314\r\247=Y\2264=\345\3610\275\021\003)>\364Z\237\275\333\200A\275\211\356G\274|\227s=\277\307&\276\016_\'\275\352<v=\363~\023=(\302\257;C\344$=\'m\021\276\264P#>\325\003%>\377.\035=m\353!\276+\343\004\275V\263\323=\\y\016>\222]\367\275\374\205\362\2744^z:5\211\013\276_\216\250\275\343Ol\275\201\216\235\275\316^\2619_\215\t<\025\365\257<i\314\013\276\201\235\020=\277\205\356<\032>\214\275\370\024\r>\317\323\276\274\271q\320<\205\013\206\275\214\364\232=\r\245\377=\241\035\022\276Y\365K\275PVU\274\251\024\325=\351\276\365\275o,\227=liP=\033\221-\275\301\014\320=n\027\032;;\332\233\275\014d,>\226\240Y\275\227\315H\275\232\032\217\275Gd\004\276$\001\030\276\262\007s=\3558\337\275\275\331\217\275\264\361\377=\014\355b=\\6\345<e{\203=\212j\256\275\267\245\010=p)1=\256x\307\275\331\341->R~\263\275C\357\253<\360\220\\=\300\342\343\275m\221G\273\323\371\007;\000x.=\351`\032<\326d\037>Id\206\2757\014\002</oD\275\247C\275=\230\017\035<n1\032\276\270Z\222\275.Uz\275VH\223=h!u\275\036M\334\275\352ve=4\226!\276\253\235\224\275O\200\317<\002\263\253\275\212\304\216=\217<3=\251\321\355\274T\342>\2768LU=\222\227\363=\227\0341\276\320\032\216=\367\321\270\275&<\206<\363\352\341\275\2651n=\016\207\202\275\001\203\331=\206X\264\274g%\276\275\245\014\355;\016\334\336=.\032>=\035\017\022=0\351\340\275\322z\376\274\362\350Z\275\233\270k\275\211\230\032\276&\3470\276\257\270K<_>\321<L\234Q\274\370\334\327\274\035C\254=\210=\247=1R\000\274\364N\001>f:\'=\243\321,\275\277k\032;\275\025\226\275b\333T<\345(0\275\3639\272\274\t\320\206\272plQ=?2\324=\250\230\214=\017\350\204\274\022\t\010\276\266\027_=\205p\022\276\322\311S=\3458\333= \326(>3\034#>\211\256*>\001\221;\274\2468\366:\305cS=n\273\020>_\323\212\275\201\364a\275\335\245\207\275:\007\237\274\022l\014=*g>>\220\376:\276\267 \370;\315u[\27590\341\275E\341\320\273\352l(>:\363\320=\214!\212\275r\275\303=9\235\354=\247\375\332\275\335\013\003\276\013\210J=\240\302\307<\036\326}\275?<\213=\246O\253<ED\357\275S9\260\275\025\263m=&\036 \2760\305\017>t\255\362=<<\030=\262V\272\275|\365J\275)\224\375\274\330\370\177\275o\227{\275\340\324\321\275\316\206\330<\211\004+\275\214aJ>\245\371\034\276\000\032\001>\215\031\314\275\037\273E>\347\036P\275xb+\276U\232\000>i\025\024=\357\231\205=\304\357\237=>W\367\275dj:\274\323\030\320\275\376\342\247=\003\272\267\273\022\322V\275\346\224\016=\337\034l\275w\240\363\275\001>d\275\226\2478\276\324r\376<\222\0271=\202[\001>a)\363=\034_;<\002\245\027>\336\347\337\275\257\231.\276B\'\327\275\334z\237=\260\332\355=\342Z\262\275\030\034\231=\0165\224\275x\006\344\275\333\252\270=\203\214\312\272f \023\275\322\215\014=\241\350\022\275\217\200\271\274`O\320\274\230\027o<\353e8>\026\207v\275_\000\245\275\230\261x=\346\323j\272\335a\255=\346\350\305\274\216\366\256=Q\246\375=\372_/\276\310\244\202\275\033\212\007\274\254#\255\274V\275|\275p\322\204=@\027d\275\342y\236\275\211\007\006>\331@\223\274\263\306]\275\r\211@>\220\307\347\275\023\3717>\253\273(\276\364\347\264:\025\036\035=!\305\326=cO\t\273\241\205\026>7p\304=Z\007\355=\313\257H=\273\331\005\275\264a:\2756\035\226=.\273\247\274&\253\232\273\212\3268>f\261\257\275\n\337\"\27626\255:,p\214=\205\332/=^O\001<\r\354\022\276\232\034\327\275\365\021\010=\225\377\327=:\023\t\275nm\377\275R\352\231\275HMj\275\343\202\032\271\347\r\250\275\346\022x=C\321K=S\377\001=\202\356\275=\347\231:>\273\301\006\275\305\240\022;A\0013>\254\263m\274b\273\231=Jn\200\275\341\376\'>\014\351&\275&\252\243\275=\224\254\275\334\034\275=f\013\306<7\265\221\275\205\365\240\274\254e\254\274\310\3615\276\353\267>\2766[\217<\244\017\006\276\027\215\217\275q\031\367\275g\372}=\370\237y\274{h\201:wK\035>\365\336\022>\032\356\231\274\320N\020\275\363\247D\276\356\324G=\257G\210\275\237\252\356\275\234\037\325=\037\332\037<OQ(\274nD&=hp\341=8:a=\033[\200=\006\213\223=\264\264U\274\340\230\024>\333\354d\274<\361\200=T\022\207<\231\037&\275\302\233D>\026\231%>\336}\242=\247\013i\275\002+\353\275\364\210s=C9M=\213\337\002>\r\227\363\275U\211D={\357\367\275\277\222\010\2759\364\021\2766+\277=\r\207 \276\016\241\221\274\366+\212\275\345\370\254\275t\033\362\275G\025\024\276\34058\274\312\341G\275<\266\321\274\254/3\275&\270,\2764\321k=\221\022\275\275\252\364\245<I\345\023;(~3\276\252L+>\003\246Q\274\023\231\021=\352\343\245\275^\357\016\276\245O\322\274\324\355\333=\331\005\260\275/\273z\275+\246\243=G<\273\275\365`\313\275:\201C=c\352\234=\0054\026>+\261\346\274\203\\\306\274Y\375\243\273\'\342\226<ik\214\275e\251\247\275\023\005[=\024\211*\276\275>N>\332\235\361=wu\275<S\270H=\211\304\326<Y\013Z\274\323\341\314\2741\020\242<\226\'\201=\000\342\000\275^}\334<\213\313\213=Ax\324=i\353Y=\034\204}\275\3136\337\274e\026?\275kXz\275%z/\275]\306N\273\246V\322=YA\004>\001\253\241\275\204+\251\275*\003\036\276:\036P\275\262\353\310=\212\276\223=@X\203\2747Y\350\2748\367\230=\376]\314<R\376\007\276\177U\035\275\031\201\265<\330m?\274.Q\017\273\243\346\351\275\313\253\034=\363\033\201=)\222\347<\003\214\375<d\3519\274\365\307\204=\321\260w\275\3670\331\275\313\033X\275\351T9\2769Q\237\275\273T\243\274\365\312\320\275\312f\312\274\342{\223\275\357\007:\275\257\310\247=m\301\315\274/\2104\276\324\272\022\274\3779\210\274\223\023\237\275\323\333\320\275V\362\214=\330\331o\275\225\275\373=SB\266\275\326\250P>\271\345\231=r,\023>\253G!\275\231\016\262=\366C\322=W\251\037>\243\267\313={\0351\274\304\357\340\275f\000\246;\365\017-\275@*_;\305\200U>+j\021\275\223\376\331;\240l*>W\036I\276\367\276\233\275e\225\216=\004\270\337\275\334\212_\275\032\265\r\276>;h\274]\032\340;\343a\302=\233D\014>\340ER>_\"\020<\245\027\301\275\211\0364>*k\202;\353\245\203\275\017\317!\276\024\2470=D\341\005\276\271\230\252<Lk\"\276Rh\362\275\003g\366\275W\252\026\275R\244\343=R\216\010=\177\225\022\275P\245\316\272HD\026>\n.\367=\340\'\217\275((\264\274E\231\362\275\215H\333\273\246c8>\330\335\235\275 x\004>j\"\247\275e\377\300<\277?n\274\255\275\343\275\033\343\033\273\037\"\301\275\241\274\222\275\224\326\236\2755\374\225=<\225%>\232\377\317;!m\005;\313\210\036\276\212\367\006=k\033B\275\242\240\367<\232\323M\275\266\254\265\275R\206\224\275J\010\215<\220n\330;\303)O\275\254\272\306\275\306}!\276\253\204x\275\220\335\032<)U\315=\t\t4\273\237\212*=\320\177\362\273\320\'!\275\352rf=\360\227\331\274\033\005\351\274\215\267\342\274\340\355\375=\223\355\232=A\330\307\274\354\013\201\275\275\324\305\273\201h\200=\311\034\322<\306\224\356<\026\346K>\311\245Y=wb\036\275\223\263E\275\021?\031=@Y\016\276\343\315\243<\177\024\241\275\335\312B=X\371\201\275\365\201\226\275\260\264\363:\245\0132\276\n/\020>\274lM=\250\211\001\276ed\300\275\031\032F\275\371g\266=\232R\n=\232\226\207=\366x\200=/_|=\205\365\260<\306\355*\275\013\313\023\275?\200\372=\362\033\253=\004\203\265\275a3\026\275s\372\355<\362\266\337=\215W\345<\013]\336\275V\317\004>_,\204\275\013\3543\276\215p\342\274\227v\246\275>\332\032\275\213\375\325=-\221\337=\204\263\243=2\325.>l\324Y\275<\243\251\275oV\267\275\037\250\242;m\340\206\275,xL\274k\256\302\274\362r<\274\340C\242\275 \355%\275\nu\311\275\272%\261\275\372%\373\2743v\325=-\030\226=\257c\251\274\002\263*<8\022\220\274g\017\327;3\354A\273\207`\001>\032\362j<M\364\024;\204\341%\276,\344\031<\316\363\351\275H\306\n\276\204)\004\276SlF>\303U =P\257\014\276\327\005\301=\210\3758=\266<\024>\317s\021\275\224\177\275\274\216\316)\276\365\332\312=\245\0010=\265\247\000>\350NY=\331\002\235\273\353Y,\274\t\336\244\274E\226\004>{\203*<\244,\177\275\277\355\253\275\203\017\220\275\353\355\n>m\007\007>p\3577>\023\026\272=\366-\237=\267\241\254=\"\026\026\275\243\224\223=6K\352<\217V\347\275\3516\001>\351\306\320<#[\216\275\375\000\003>\360y\277\275\336\336\215\275\020\005\244\275C\034\227\275[\275\014=\235]\207\275r\037\035>F\376\214=?\307\321\275\332\375\344\275I\315V=\3505\240=\000R\347<\026N7=\240\326\364=\241\304\356\274\306\2209\275\256\245 \275\336\236#=\363\214\210=!\020\264=\001K\305\275\002sJ=\357zS<}\\\232=\247\n#>\377\375\016\276\266\367\207\275\000\016*;\'\252\325=\347\211\203\274\345\'!>tn\020\272\210\032\242\275rx\364\275\335\312\250=\367\333\213=\340F\327=\270\231\217<\372P\315\274\235\326\017\276\272j\310\274sE\031\275\203\262\200\273_\317\276=\2504:=\236C\020\276\346\272\006>\314f\376<G\333\245\275\\\303}\274\306\2275\276u=O\276\0214\226=\263Z\301=\217\226\245=5\026\217\274\237\n\256=\227\225w\275]/\325=\300\272A<\347@\233=\003\220\371;\273\216^\275\366\3232\274\222s\336\275\226\000\212<\206l\032\275S2\224\275\004\276k=\327Q\304\275\371\200\031>vl\'>\247 ~\2742/#\276f\273>>J\n\256=N\033\027\276\025\360\240<\177\317\240\275\226!q\274\007\346{\275U\224n\274\036\0143>\207\013\320=U)\364\275\250\275\024>\234c\221\275\344\347\010=\234\002\014>TC\037>\377-\026\275,+\020<V\322\204=\022\360\034>\032,\237=|\013\022>+\331+>u\277)=\321\010\300\273k\320\304\274\250\001\321\275\350\021\321=\366p\236\275N\316\021\276\342\023/>\262\261\371=\026\235b\275;D\217\274\375\324\354\275\351;\271=xys\275\274\001\376\275c\244y\275V\030\275=\357\275\037>k\324\303\273O\276\363:\263Q|=\t\231Q<\350p\000\276W\364\'\276\307_J\274q\177\211=n\333\004>\211\313d\2752_\234\275X\t\365=\377\363\236=\014\2376\274\350\211\250=\317E\345\275Y\324X>\202\266\271<\366\247X\271\316\303\251\275\246Q\024>\323\221\252\274\326F\210\275\240\354\356=\"\321\242=\326T\253<q+A\275\304[\306\275\216%\301=\365\323\035>+\317\333=m\r_=\307\366\245=.=\205<;\346\257\274\342\367\007\275\245\036I=,r\240\275\265\370\206\275\215\337x\275\256\375\224<\342\010)=\337\361\026\276\350s\252=\234_\234\275\347\232\312\275\336\236\021\2767\247`\275\025r\304\275\302\310\271<\375\230\341=\366\342\246\275],E=\201J9\275\224Z\321=\246A`<$Z,=\274\256\330=8G\354\274\271G\336<\340\306\245\275~\212\261=L\273n\275\205r\001>d\363d\275\344\362\r>\004\375\306<1X\307\275\320\300\300<\231\236\217=(n\323=\254f\032\274\'C\002\276\277W\252\272\271e\037\274\364X4<\200\\&;\322&f=;\266\024=;\301\317\273\350D.\276\304\026j\274x\216\332\275\316\266\215=%Q\230\275\314: =\357\232\002\276\365\361\005\275\n\\\300=\035\265\242<\325\260\023\275\315\010V>\346\274\357\273\366n\305\274\360\302\213<\364\341\211=+\222X\274\235\372\237\274l\333E\275n%\367\274JX\025\275t\265\243;\217\351P=\305\310\033>\006Z\027\276@\253\330=Oe\300\274H[\275\274r]\203\274\324\213L\274\224\\\202<R:\271=\344\264A=B\314\350<\354\\\316=\343\255\227\275%U\203\274S\303\037\275\345\002\346\275\307\372\263<u\333\246=X\377:=\004\360E\275\223\001\210=R\363q\275A\346\241\275\373Q\301\275\027\302\\<\257\270;\276\022\205\023\276\300S\327\273\270\177\025>F`\225\275M\207f=\267u\303\274\264 \031\274\032\276\362<\372\020\353\275\323\002\215\275\035\374<>\320@\277;\245{=\276\311\262?\275\243\033\374\274>\231L\275\274\211-=\355C\026\276\373\371#\276\241\361\007<s\266\352\274\232_\034>\221O\234<Y\007\002\276\277:\334\275\345\351P=\372\303\323\275\210\362\202\275\340@Q\276&\277?>\330\260\n\276^F\241\274\352\3045\276\013l\250=\036\235\364=]\004\343\274\211V==\267\246\t>\265\241\024>\207T\177\275\030\325.>YCW=w\353;\275\006\243\006>O\243*=(V`\275\003\244\241=\264\276\265=\365\317\226\275\267\230V\275\337\211\354=U\203\002=8\270\314\275V\354\000<\022\360\327\274Q\340>:\214\007u\275r|\025=\016iR>`\350\241\275\326\243\2529\370\361s<\"\263\033=\201\370\344\275\356\206\321\273\301\037\206=Q\357\223=$\014\346\274u$M\276\356\301\276<d\3728=\344\333\001=\303$G\276K\377_\274\034\335 >\210\236\247\274\356N\010=\235\"\021>\342\037\336\274\t\200\017\276\263rL\275t\221\222\274\205o\025=\016b@>\337\342\004\276N\207\272\275m\305\253\275\225h\340=`\270\022\275ra\314=N\3111>N\010\363\275\360\325\002>\335w\305<\"\010\227\275\312LV\275\360\227%\275\203\367$>\324Kc\274\236(\r>L\370E\274\"\372$<`\322(>I6\247\275C\3011>h\245d=U\345C>6\232\025\274\344;\226\275<\266l\275\017\275E\276gT\225=~q\335=X\266\320<\243i\226\275\241\227\232<\272X\272\275a\207\204\274\247U4\275G\366\032\276\227\021\207\275Uz\014>\244\r,\275\357\010R\274\255\203\263=\010\362\210\275\037V\260=}\242\370\275?\357\004\273\020\323[<\345\317\371\274f]d\275\226\007\021\276QtU\275F\210W<\337\260\370=\357\252\214<<\305\307=\314j\366\275]3\372<Ah\274=\262\250\374=\325S\334<\263Va\275\245\217\023\275\326\177\t\276BJ\t\276L\326\362=\3628W=\312\315\024==\364\242=\301\364\342\273\212\243{\275eb)\275\250&<\276>\036h<\201\2303\275B\256\034=Q\306\301\275;p\221=\240\351>\276\214\025\241=\236t\'=Vf\031\275!m#>&\213!\276\214\351\246\275\363\r\260\275\324\032\013\275k\210\267\273\310@\225=-G\255=\211?\010\276\036_\261\273\351\373z=\335\261W\275/\263\n=\211\376\240<\320\322\006\272\230#\312\275\2219\031\276\255@\275=\255U\007\276_\311\225<\207\331$=\230R\247\275\331t\013=\000t\245\275\272\026\250\274y\337\376\275\021N\317\275\304j\010>\375\330!\275\305\265\245=\004\241\342=\226\343\213=\001\301\352\274\345\357!\274\366\r\217=v[4\275\243_\031=\304\014 <;\375\300=-\2600\276\226\364\353\274+\230\360<\244\037\014\275D\235U=\002\004y\275\320b$\276\327\"\005\276\207D\007\274c\215\034>Q/\r\275\352\204);\021J\376<\003\271\022\276}d\225\273\227{\322\275\230d\311\274\234\032M\274\2673\366<=\326\247\275O\243\215=\344=h\273\251Z\205=\272+\355<!\322.\276]]\204\274\330\205\263=\202^\227\274\206\256@=\005\002\313\2757\237)>\002@\256=\352\377\353=~\357\361<\305\332\375=\221\375\204=d\326:=/\t\010\275,\223:>\020Va\275Upm=\2231\035\275\252\347\016\276\033[D\275;\3058\276px?>\203\017_\275I+\340\275\375\314\214\275i\323L=S]\r>\303\253\"=q >\276\204/\251\275\224@\026<U\264\224=Q\261\324\273+2\353\275\232\276\335\275\353\330\210\275\275bG\276\027\022\\\275#\244%=\337\025w\274\312\006q=\225v\337\275E\2638><J\020<\030\037.=\374\003\242\273\rc\301<0\313%=\210\252\234=b\277\202\275\274v\234=ev\002=a\360C\275^\223\321;\2704@\275\243\036\002\275|g\222\275\253\335\317\274\232/q\273\323\034\004:\260\010\311\2758\216J\275\371\244\027\276\221\324\322=\225f\251;\355Q(>b\207\253=+\375\377\275\242=\331=\267^\216\275S[\370\273\021\036\'\276\346\342\004\275\004\212G\275\304\251\231\275\313+\254=\212\337\007=\261\"\355=T\304(>\336\250\270\275\205\t\016\276\226\267\370=\217<v\275\003\306\254\274\314}\242\275\311\237\337=n\240\206=v\237\277=j\311\247;I \331\274k\273T=\346`\213\275\202\200\361\275\377Zm<\254\330\005\276\342\330&=:]\220\275\312\342\205\275\276\376%\273s\244\014\274#\253?\275a\023\324\275N\2421>\014\310\305\274\r\"x=\246\215\r>8\225\030=\tp3>\261A:\276\273\254\217=\275\374c=\275<?< C\323=\304\342\021\276\266\332\337;\377\263>>N\305:>Qy\221\275\220%|=\311\357\030\276\372\216\036>\3679\t>fR\220\275R\025:=@\231\004\275\256\032\304=\236\361l\274\317mM=h\377U=u\235\355\275\220UQ\275f\341\232\274\243$\243\275\370<\005<\017:O\274q\300\000=J\323\351<\245\335T\275\316\006\214\275\350l\014\275\345\347\005>\371\225\345\275\031\207x=Vi\211=\242T\251\274\275\364G>CO\276=<\332\234:\347\212!>\350\250\257=5\222U<\337r\177=\370\335\022\276\n\372\226\275?5%\276\213~v:D\231;\276s\354~\2750^\262\275c\t\216\273\3551<\273j\371y\275\003W\230=O\014\206\275\341\"\271=\262\355p\275\351\230v\275\306(\022\275\346\"\032\276\320\3473\274\352K\240=\216\370\262\274BP\030>x\261g\275\251\364C<h\210\376=\216\344\367<xp\374=\255\247\271<\\\016&=\256\230\204\274z|\233<|6\265\2757\362\237\275Eu\223<\007xq=W\242\r=18T>\013)<>DC\257\275\205\234\024=\233K\367=\002z\025>\256\257\355\275\366Y8<\017\372\325\275\323j\336=\327\036(\2755x\376\274\005BF\275rz\222\275\334\371\003<\024)\230=F\3269\2750\021\265\275\303\360\236<M\243\004\276\264\376\004>wa\017\272\0004\026=\247\277\252\271\226I\353<\373E\020\275f\204\310<\343-n<9i\206\275|\205W=\216\3201\275\303\212\n\276\206<J=U\323\256\275\246tg=\306=\231=Y\202.>\372=^\275\315\357\203\275\t\305\342\275\257\240T\276U\325\032=9\024z\275\177\205Q>\351\021i\275\211X\206<\273\233\213=\371>\336=\243\000>\275\n\244\021>\220`\313=\321\331W\273\"\352w=\221\001\333\275\267yJ<`\314\022\276Wc\034=\347\033\320\275\205\324\232\275\014\345*=\331z\216=\235\232\314=r*i\275\372\231\202=\367\342\014<\"\316\237\275\332\356\250\273F\226\343<\310\3167=G\204\007\276I\247\235\275LP\372=>\310f\274\035\017\206=\352\tT=\3739\001=\214\307H\275+,\200\275C\351\376\275\250\223\020\276\276X1>\311,\374\275\230\266\n>f\317H=\367y\364\274\211a\300<\272\246\213=\314\214\200=:\325\205=\313\231\330=\003\334\242\275\310\001.\275\230?\261<K\034\323\2750K\320=\017d\205\275L\373D\274\225,\"\2767\\\301\275\257(\263=\255*\t>\374\234\244<\3700\347\275\342\245\213\274nR\253=\204y\204=\271!W\274g\020\253=\303\232\342<\337\366\253=\346\003\275\273\353\3259=8Y\334\274\021F\302=\267C\272\275$5\005\275\203\301\246<\227\3530\2752b#=\324S\260\275\257\003\022\272#\226\325;\210>M=\255 \324\272\202\321o<\001d\370=w\004\324=f\177\001\274\035\247\324\275\304A\213;:\014%=\221\024\000\276\225\001\'\276\363m\007\276\236\220\025>6\217\344<\331P\241=\305\206\264\275\262gn\275\334Q\017>>sS=tC*<A\214W\275\233Vx\273\'l\'\273\335l\317\275t\030\255=\2659\255\275\217\274\324\275\317\r{=\217 *>d\371\207=\374\213@\275\020\337\230<\033K\373\275\256\223\237<\330\305[\274\231=\256=f\267Z=\024\306\263=_Q\266\273\025q/>\374\241\247\2749G\225\2752\301\221\275X\214\021\275\300\207D\276\246K\021\274\203>\340\274Gs\212= \3711>p\271\253\275\027\245\266<\231\347\014\275\211\307\245\275\345\001\021\276\351\t\334\273\035\037Q\274\361\272%\276\360>\037=\303\026[\276^#c\275-@\316\275\222/\376\274$A\217\275t\323m\275\346>\202\275\361\320\024\275\333\177a<\334#W\275R\214\310<\034>\351=9\367\027\274\321\r\225=\316\200L<\336E5\276]\335\313\275\350\227\233\275\027k\t>\365\316\001\274n\222u=\021\037a=\321\266\013\275u\215;>\276\211*\275\314\330\370;/\361*\276\364\260\006\275E\340\217\274\260y\300\275\212\027\201\275\020@\243\274\363]R=\211p\276=\nf\354\275x6\356\275\374\0230=\243\021-\275#H?\275\350\372\266\275\304\211\367\274\302\275\310\274\356\207\251<\373\340/>0\2002\275\000\204&\275\230\205\031>\352\314A>\260\332\261\275b~d\275w\016B<\327y\025\275v+\005>\355\027r=\305\034:\275\335\370\377\274\r\004>\275H\3666\275\326\264L\276\230<\347\273\003\275\211=m\336 =_\265%\276\275I\254\274\"\037\022\275h\236w=OK#=\260\312Z=\301\323\320\275\323\330\351=\250\337\335\275\323\3727\275j|X;\331^\006>&\300\001>\240\030l\275\272\332\021>~|%>\022\242I\275\006\371\346<\267^\203\275\300\022j\273 .\003\276\020\321\264=9\324\336\275\021Y\024>\037-;>rBC\274\242\010!\276R_\345<\2338b\275\312\030\206=`\211\206=\261Z\206<\243\367\004\276TW\275<)zK=\247^T\275\205\355\027\276\355\331\367\272\355a\322\275\3335\271\274\245c\254\275\330P\273=Z\304G\275\256a\003\273\031x\006>s\240q\275vZ\347\274\242}\226=\203\216)\2767\344D\276\253D9\276\347\330\242\275\303\215\270\275.\350\270=\374B\262\275\322\0037\275&C\305\275\266.\253\275Y\003P\275\ni\373\272\314\261G=\306\234W=\321/X\275\324t\002>\302p\245=H\370)\276\034\177@>M=}\273GE\207\273\214>\031=*9\206=\177\220\252<m\254\246<\322\025N\275\202\007\035\276\267\013\240\274\\\363\344=\264\357\323\275R\033\001=7\331\354<\032\340S=\336t\020\276\036^\004\276\277\257!>V\3348>\352\371\246\275\373\263\304=\341\265\307;\311R\370=\224\033\353\275\032W\260\275\211\275\267=\235\340\251\275A!y=\233\317\265\275\336\361<=\237|\344\274\035{\004>\271\222\017\275\210\313?\276\304Z\035=\330\363\245;\206\330\330=Z\032-\276~\363\001=o\315\002=\243\370.=\340\030\372\274\0024\233\275\3001e=\225a\203\275\363(\200\274\305j\216\275\225\020G=\260r\224<R\250\313=\372)\200;\217`3\276\312]\241<8\353\333\274\342\240\033\273\222\232\373\275V8<\275\307O\302=$\316\024>\032\240\025\275\013:\010\27582\304\275d\200\237\275\241B\014=\326\300j<\314\273\026>\330K\353<\000A\206\275!:\321\275\353y\250=I\026\204<\007\345\313=>\367\036=\343\375\"\275\024\014\n<\022\225\334=\370\265\013=X\021,>\230+5>~R \275{\310\010\274\227\267U=\253\377\013>\337@9>e\2572=2\232\023\275\000\220\021=\271I\340\275UTl\274\261\211B=\216t\342\275\213\r\216\275\014\262\005=e]\001\274p\226o\274\344[\377<\267\265\360\275F\'\">\004n|;\347\331\311\273B\"\351\275\263\276\335\275\014U\234<\240&@\274\235V6\274\367b\022\275z\361\277\274\277CG<M(P\275\267 \365=\350J\327\274aJ2>i\352\376\275\364$\341=\013\334k=\004+\004\276JT\031>\365\2721=\036C\343\2753\025\277=%\214\261=\312\257\262<\302@[=\205\263C>\306\365\212\275nW\t>MN\201\275B\224\221\274~\350\340=\307\342\254<\210f\035>\n\200\233\275\272\370\347\275\346\361\253<\210\003A==]\201\275p\206\014=\204\263K;\265\227\336=|\212\343\274\352n\257=\037t\246=%\340\250;\247_\374\275\304\234\331=\207\364\034>Z<G\276\212\253\212<QH\321\275f\334\202\274f\320\026\275[\271\314=\217\275\360\275\346RH<g\177\345\274`\371\252=\324\337\343\274\021\345\303=\340\367\305\274\244$\272=\362\027\021\273\233?\205=\322\251\373<r\006\213\274\353\3022<\037\032\234\275BF\211\274qo~\275\001[\347\274\314|u\275\347\343\243=i\007\277\2748\346\210=(\264\252\275\356!$>\t\356\004<\216<7\276\205\235\014\276mj\377\275\201-\357\275\312\036*\276Gb\016>r\307\233=\333hc\275\316\330\300\275Pg\232\271\3337$\275WB\220={\2617>\016\2638\276\210je\275G!\t\275\327\0219=\250\324\260\275\335\007$<\023\021\235\275\370\260^=>\025\351\2757M-=sE\022<\300F\222\275\227\315\361\275\206d\304=$\327\">\350C\353\275\"\313\341<&\277\242=\325`\200\275\261a\010\276\276\2104=j\210\321\275\254S\030;\204\371Q\275\020\342\n=\254kQ>\302\314~\275\334\270\260=-= \275\374\307\332<\303\016\001=.\365\231\275\n\346\254=\233{\r>\r\253.=d8\366\2758\315>\275\002\322\277\273\177\374\303=j\237\235\274\313\242\202\275\035\264d<\342\373\203\275\210\203\242\274\373\267\006\275K0\377\275\177\346\312=\365\031\026=l\357@\2767z\225=\234\271\210:\301\264\254=~E\356=\3500\007\276\232\3322\276\266\322\226\275\311\336\364=T\032\374<9x\362<\241\027\006\275\202\037J>\316\257\025\276}\310\202\274\224\360\025\275\332\356\310:\271\375\030<\206)#<\202}\005<\235\016\"=Z\236\215\274z$\204<\360W\031>\374\004\206=r:L\275\363\026\250\275\321\342\217=\2703#=\361&\033\276\220\020\307=\230\231`>W\202\244\275\310M\365\275X\034\223=\264\021\007\276\360\005K=\\\244\001\276\350b\227\275|&\335=IA\250\275Qj3=&\235\272\275q\242<\275\3232\003>\321\n\211=\321`\263<\316,l\275\356(\020\276\0030s=f\347a\275\367\216\321\275v@\235\273\343X =\0052\004\274H\347\336=\376\261\021=\222\275\207=\222K\245=c\231\033>_\241-\273\333\007R\275\271\215\363\275\246l\003>\235\007v\275\031v0\275.\231w=\252\341<\275:\332\364\274\316\031>=\330&B\276N\316\271\274\004\323\256\274\373\250\217\275K\225\237\274\250\300\277\274p\206r\274Nk\333\273\370?\362=(\255\214\275h\303\275=\314*\021\274\025\021Y\275\370\222\010>\260\200\353\275p\346/\273\215v&\275\032\365+\275W\260\376\275\001\355\355\275\036f\376=a\277\'=\031KR\275s=\007<\272C\203=\325\007\014<fv}=\214c\223\275\334X(\275\251gv\275\213F\300\275$iB>\241\036\331<^\0367>1\027\340=\211=\014>\263Tt\275\004r\017\275\250\003\204<\335f]\275\326\234\257\275\232\341\365=\236#\232\275\367s~\275\235\340\250=\372W.\274\325ZZ\275h\315\210\274&\307\031=\017\226\006=\237\304\360=P\344\270\275\363\312Z=\033\337\365\275\326\0131<\235\2046\276s\010\241\275\240\307J\274\343]!\276-a;<p;\306=\226\214\345\275\350\366\201=\207w\301\275\375\r\352\274\353\2638\275\336=\213<X\352B\276\010\025\253=\325\033\263=\242\177n<Tr\356=\013\347\245\275F\201W=z\264\243\275\305^\212=\227b\004>\237\313/\275\202&\200\273\362\222\323=\231\205\000\274W\270\205=\332Ie<\261\350\222\274\217\356\345=\010l\306\274\324\033\037=\252\332\221\275\337wQ\275\2513x;\004\212\270\275O\334N;6q\330=\340A?>y9\006>\033\2220>\315\t\203\275\200d\334=!\320\371<\271\373\202\272\337\213U\2757\022%>\312$\272\275\200\351\t\275\254V8>\025@\\=eBs=\326\300+=\177>\030=\023b\300=jC\250=\300\024\312=\233\371\223<7\302\301=\251&\035\275\233\331\307\274\227*\302=G\354\212=\250e/\274(\214?\275\022f\207\275\340\003z=\002]\003>`vn<7m\016\276\264$\210=\367\265\n:B\354a\275\315\014\010>A\220\204=\350\337\225=[EO;\300\363\300=\360\330\007>l\365\214=u\374\030>\325\344\276\275\016\322:>\202a\231=\274\335\235\275\032\356;\275;\365\220=\305\247\353\2751\030\353=<\033\311\275\241fg\275\334\205\307\2754\301+\276\t\201\234\275\343\303 >JT\343\275C\247(>\215\243\021=\377B\010\276\273\'M\273f\214\017\275\206\211\313=v\215\027\275\272\016\211=\323f\'\274D\334\000<U{\365=\327\n\212<\373\021\004>\320\334\300\272#\377\222\275!\317\032\275\n\367w\275\361N\365\275g\331\260\275\267H\215=\\\001h=\371^\303=t\203w\274\323g\035\274\232\371\341<Z\366\256\274\306\335k:\235\200F;\261\266E\275\247\016\212\275\033\340\007\275\272z\r>}\362\230\275\"\304\314\274S \004=\030\302\'\274\305\256\364;\220B!=\367\245\340=7\010\261=P\310\337\275i|\365\274.\334\207\275\233\212\010\275\321]\000\275\0206 \274\250\257\202=\032\3028\276\031%\277=\202\307\311\275f\323Q=\323\344\001\276Y\367\t\275\370?\013\276\217\205\301\274Z`\025>\234\006\030\276Wo\202\275:\245\273<o\352\204=\030\347\014\275+\303\221\275\200\220\214\275d\033\262\275\'\3469\276.\240P\276$=\354\2742\362\342=\354A\306=\307\272\021\275\177Z\002\275\003N\024>*Z\223=\230\312\323\275\222\344\254=\337\333z<D\233\367=_\260\351\2738qT=\300\270\332\275\323\243\225:_\035F=\325\177\264\275\305\321\254=\335\235\022\276\010)w<\260\355\322\275Y\207\315\275\266]\031\274Ov\345\275K9!\2757(\374=B\263\003\2735\261/\275.3\322=\014\005\037\274\362|2\275\372\270b=7\252\357=K$\007\276jH\013\274\335\257\200;\034r]=\311B\"\276{\321\241\274du,=\272\277\205=\330\362\r>r*2\275#\345*\276\230\336}=S\245\272\275\317E1\274}\341\253=\311\265+=vD]=\265\236\340=\235KB=\361\337\277<\224\300\260\275\363t\036<N\324\300\274A\tn\275\203VB=T8\020\276\'v\252\273\257\013K>\266\2219\275g\026\362=\2644W\275P_\303\275\221\322\373\275$\364\371;\377\3511\276\263\303\014=\301O\005=\246\271\254\275\254\242\334=\325\226==\361\034T\275\236\014H>\204\225\237\275\263{\316\275J\004$=\344\321\026>\353\310\333\273\331/\000>\276\330=\275;\343\r=a)\370\275D\020\274\273\226Q\017>\026\227\355\275\260E\016\276\007\306\306\275\2324H=\2139$>\272\025P\274\256\3056;\007\310\023\276qK1=\031\344\215\275\'\333\346=\344\236\333\274\374\343c:\272\013\224\275\377\271\265\275\363\316l\275~\026\301\275\200\004\252\275\1779\353\275\246q\256\273\2421\355\274\231\313\222=\346\356\263\274\256`O\275b0\340\275\306@\331=\236\240P<d\262\371<\356\373\032>\225h\022=6\220(\276\345\244\270\275p\300\344\274\210\205\275=M\325\320=_\022\232\275\354\242\217=\254\311\252<\333\200$=Z\023#\276\323\236\236=\334\375\332<)\033\205<\005\317\306\274\314\200\314\2730\300}<i\350.\276\252r7\273\347\2173=\210S\213\274\037\022\325\275\300\203\000\275\2526\315<\217Sm\274\220\326\360\274c>\313<\036D \2755/:\275$o\212=l\t+\276\376\244\310=\242\317\275\274\265*\204\275\256\226\252<aI\266\275\374A\251\275^\207\247\275\253*\254\275^e\r\275,\226\244\274\304\026\333=d\rw=\007k\033\276\261B,>\300\000e\275\\\373\336=~\253\304=\005}\206=\372\035\264\275\223U\230\275\302\360\000>\036):\276{\336\213=\220\035\024\276\327nD\276U\314\007\276s\217\020<\367QT\275\244\315\353\275m\360\272=\013H\201\273\255\203\352=\325\037\202\275\3351\033\275\301\260q=\331\327\021\274\302\206E>T\360\t\275\3773\367\273\273I\217\274\215\022?\275,\340^<\303\300C\276\334OG\275t\373\355=\330>\016\274\304\307\004>\010\n\221\275\300\016\241=A()=\356\221\224\275\230\225\315\2755X\234\275\370\024\267\275\377\272\361\275\257\n\353\275D\225\315=\200\376\215=F4\346\274\240V5=\303\326\243=u%\230\275\360w\310\275\352k\205=\2447\330=M\013\370\274\005h\355\275\270\037\035\276\301\210%\275(\023,\276\\O\n>o\213\001\275\245\241\034=\203\342\212\275%\231B=ai\016\275\202\366\241=\270\001\017=\201-\354\275\252l\333;\273r\224<\316\360\355\275HY\035>[\356\035\2767e\257\275nr\223\275\354%*>jo\003\274ag\275<\204o\335=\304\237==-\313\242\275\303\034A=4u\027>\021\025)>\340O\003\276\275\256\005>\003L\200\275k\320&>tO9\276\220u\365\275\360C\226\275\252\253\034\275\030\263\321\275c\007,>n\276\312=7J1>\'\332:\276\033\242\341<\013\331-=o\034\232\275\324\351&\275dP\226=|\034\204=U\035\272\274a\354\223\274by\340\274f\375\343\274\0336\023>\363U\352=\224\rY=\31080\276\231\201\244=\205\353\243\2753Q\331\275\026\351\274<\362\035\362\273\"N\n>\2372\017\2760v\000<$H\013=(\327q=i\225\231\273\264\244\237\275\0314\267\275\263\373\310<\254\277\024>\361\321\323;,gv\275\303\264\221<\036\340\331\275\275bB\276\341\351\301\274\204\335\r>\276\235A\275\207\374\210\275\273\352\362\275uU\037\275\2778+=3\366W\275\234\302.>MLP\275\267\000@\273\226\301\236=\377\240i=\024\356\344=\345\207\000\275\372A\360<V\243\351\274\326\227L=\276\234\023\275I\361\260;;p\001\275\335\211\266\275\006?\205=hQo\273q),\275\313\005\217=Q\2412\275\275\226\r>\235W)\275\323g\213\2755>\026\276\"\265\035>G\n\363<z3\225\275u\302\227;\t\274\364\274C\317\025\275\264\3510\276q>>\274\r\022\327=2\0241=\340\316\340\273\203U\203\274\255\213;<\0073p<\273h\200<k\007\302\275\242\325\023=\365h\r\276=\311\335<\262*\373=\272\202\037=>g\263\275K\360\034\274\322\2775\275\322P\n=\351\017\275\270\371\305\333=\242\024\212\275\277\206\253=)~\251\275WY/;w~(\276]aD\273\272\344G\275Rw\213\275\311\264\024\276\351m@=\375\366\304=\341%\222<\214\323#<\200W\314=\203p\261\275\326\327\022\276\264\256\264:a\227\215\275\370\341\236\275Lb\013\275e/\336\2748\310\350=\344#\003>\336C\317\274\317\270\n>\301\342r<\306\213\031\274G\316\t\276`\240\267\275\021A\321=o!g\275\371\206\023>\230\264\006\276!e\270\275\213\332\200\275Cj\373<\2010\271\272\202\t\036\275\312A7\276L\2630=0\230->+\201\205=\255\237\312=\347\246\201\274E\344\264<\317\202+>\003\345A\275M\353\377=OB\325=\236\200\277<\234S\026><\271O=\\\000\251=u\214\275\275&\2614\276\242\377\211\275\266c\033=C\366S\275\213qT\274\345\217\274<V`d=\306\346\204=\272\317\001> \3038\275\355\023\340=\300\300\233=\257\231\213\274f\337!\276\340\304k=p\270\245;,\257\340\273\004\034\270\274.\235\007\275\235P\335\275\312\031\317<\342\324\331=8K\247\275p\033\223\275\315\345a\275\324w\256\275\276\354\006>\246\270\326\274L3\255=c\352\205\275l_\200\274^\365\247\2756\265n=\206\272\027=\274\234U=\246|\275=\305xM\275\364_P\276o\371\020>\337\354\277\275 \200\371=\221E\373\275X\377\227\275\r\251\245\275\247>\t\2758\210\007\276\242~\203\275\377\275\223\274|\n\321=4\334\302;\202\002~<\216f\277\275\324\217U=\t\335\022\275\264\254\207\274\260\023s\275xT\376=\204\303\002>\327\226\373\275\307\020\241<\231p\206\275\3441\262=`q\006>\016\2030<\333\365\261\273\\\367`\276\373\2551=\026S\241\275C\317\024\273T\215\371=\234)7\275^M\t\275M\330\346;>\341\266\2754\210\216\274w\371/>y\214 <\026j\"\275\370\332.<F0\211\274\367\375\226\275T\364\341\275\224\254\016\275\304\355\207<\001\324\317=\250\031\364=V/\207\275b\366G=\331\r\274=\346\024\370\275\344\377\263\275Z\234.>\001\301\327\275-\371\241\275\353\342\006\275\014W?\275J\214\246=\270\024p<\r\305\246=\311Y\016>\276\017\031>\016\206=\275\203\342\320\275\003B\214=>O\373\274 \301}\275\017\300\010\275$\253\020=\311\010\365\275\364{\271\275\004\256\003>\340\005]={\2617\275%\312\330\274=c\305=<\207\"\276Mx\311=\205\010\216\275\371\215;\276\327JM\275\336O\247\275\252\240/\276\321\0356=v\351\361\274\0062\261\275\013\246\346<\216\305\313\274j\375\n\276\337\325A;\264\n\301\275S\334%>?{d\274y\212\005>_\237\361\274?\217:\276\223\324\377\275\356K\r\275\204\272(\275gws\275\001\250\n\275\373\236+=\313\260\304<\250\227\204=\220\221\r\276Q_\036>\330\350\021\275\342[\202<\365\234\211=\210\211\305=\235Tc\275\016QR\274\363i$<\3749E\276\nd\225\275\271T\335\275\265o\251\275Pnh<\010\001\342=\tK\004\276\333@;\274\260\243\037\275\306\257\213=\377\204c\274\3643\247=\243\366\201\275Oz\013>\316[3<\005\303\022\276R\317\002>\030\312\250\274\\%\305=p\361\315<\333\303,=\372z\255=\3236\227=\243;\010\274l\225\271\274\\\'\213\275%R\203\274\255\241\332;\245>\341\274:\260\000\275p\351\262<\356E\025=\241Jr<9\252\366\275\203\255\014\275\371l9\275\254\225{=y\010\375<\245/Q>\177F\267\273\356\334\263=\255\234\221\275\231%\200<\017\252\335<\272\214\222=\303\n@\275>t$\276R\235\300\275\021 \031=\n\010a=\2662\310=Ji\266\275\344\240\376=\360\000\323=,b\000\274\001\\T<\014F\252=4\021W\275\307\222E\275\243\300\200\274\026\037\'\275\302g\351=Z\245*\276\234\220\241=\031d\024>\177XI\275\352g\260\275\354\270\350=\274\014?=\244\342^<\212\320a<\372\252\311\274I\360\305;\202\231R\275.U\326\275\336\302,>\276\231\355;<\337~=pV\025=\226\221S=\025\200\372\275\253\317g\275\000i\036<X\251\347=\344]\302\275\306\252\r>v\271%=\006\r\221\275\245+\367<\247zl=,\207.>\235\"\031\276\307\250$\276\017\261\333<\203\275*<o{8\275\342\n8\274\230\334Q<\351\353\031>\304\354\336=\325\217\212<\226b\t\276\206p\243=Hu\034=c\360s=\002\312\r\276\263q\350\275e\347\216\273,\260\301<Ul\216\274\267\033\254=zB=\275\272Iz\275;\2340\276\235\3451\276\373\231\035\276\304\363\202\275\2129\332;\3775\277;\241\237D<\215\375L=@j\236=?\3500=\365\002\205\275\207s&>\023\003\220\275\216+\355\275-\032\235\275q\363.\274\035\017c\275\302%\016\276\273>C\276\026\2720>_\304\242\275\211\002\305=NoG<\372\333\214\274r5\335=S\2209\275\254\201\021>}\355\304=\212|\236\275\023\226\337<\353\201h<z\354\232\274\347\333\314\275\005\3727\272w\"\253\274\2651\227=k\023\201\275B{]=\375\215\024\273\247\234\007>\177`\227=\321\2227\276\320\240\264=\202S\001=\360\031q\274\352\213V<a\262=\275Kf5\276G\033\242\273\372\272\'\275A4\352=^\344\317\275\277\347\305\275_\276Z\275.]\372\274\256.\210\274\230\2073<\367\241\227=|\221\375\275\201x7\275\353E\207\275\325\234>\276Av\251<\350\354z=\2040\205\275\371\025\026\276\035\300\001\275\332\362C=J\001\237=\031|\257=\245\346\033=\001\340\031=\0206\377\275\303f\300=\311U\302\2752b{\274\016b*>\262`\215=I\033!\276\002\211*\275\000\263\266=1\324l=\371\365\\<>E\373\274i\375\360\274P\314\221=\222(q\275P\300\322\267\300~\027\275\021\035#\275\211R\271\275\271\205~\275\000PU\275y\375\007\276|?&\275\010o\254\274j\364j\275\271\272\232<J[\355\272\314o!=\003\270\377;\361\236\326=\257L\017\276F\r\024;0\302x\274_\307\305<\0141B;\347\355\026=(\212\214=\266z\344\275\227\030A\276,\314-\275\322Mm\275H\270F=3D_=\222\346\025\275\013:\"=\224f\270\275?\004\021>\370\232\300\275\262\370\025<6\210n\275J\331\315\275g\360A\276\206{O>\217\263\230\275K\227D>\326\260\023\275\372\0000<\327\337\020\276m\273\311\275\373)\266\275\177\365\036\276\313\333\313\274\207p\233\274\352\217\345\275\003K2=\364\317\262=\377@\311\2750\254\260\275q\346\027\276/\240\205=gP1\275\301\214\341\275r\023\311=\314U\332\274\307\320\220\275\272\023\034=\010c{=\203\227\246<\021\264\227\275\343\231z\275L\265/\275\032\343:\275\323\330l=\020$\336\275\344Y\010\275\034\251\037=\331}\235<S<r\274\177\\\005>\225y\304\274\2347\221=\342o\276=:\315\210<\367\321\243\275\277\346o<\370Q\254<<\337\355\275\222\227\322\275\363&\035\275\\{#\275c\363\274=w1A\274\267\235`=\201C\231=\366\363 \274\225x\214=\356\r\212\275\350*\005>5T\371\275\374\234\321<>\235\224\275^\351Y<8\017\236\274g1,\275O\303\017>Oq\273\275\002P\334=Fs\t\275(\263\327\275+\036\201=\231\004\211=\353\001\315\275\365\243\r>\261\250\210=\260\254\235<\254$\335;\005v\255\275?\353\005>\033\321+>\234\t\376\275\203\277\336;\303\364\352\275[:\310\275\334\346$\276l^\203<\336{\240=\370\254\252=K\357\233\274\213\r\244\275\367\333G\275\2643B\276a\335U=\220\363I=\314\3404\275\005\231\026=\2705\213=6\261\234;n\236\004>\262\372/\275%Un\271\265\245\343\273W8\320=\025w\213=\326\235 \275l\311\321\274C\314\024\275\256\312\322;\344\263\302=\206\354,=\372\322\240\275`\276\005>\303\021*<\207\303\240<3\027\007>\221\2239\275\317\204\"=(<f\275d\251\005=\332\332\320=\377\375\020=\345\230\275=\242q\221\275\300\240\006\276\270\340\335\274\036\300\r\275\334\244+>z\332\037\275\241\270\230\275J\265v\275g\337&\275\031\"\306\275\355\204\256;X\216Q=3^G\275\350\036\205<\241\206\335\275x\377\327\275\250\001\204=\274y0>p\350\313\275\230J\237=\250a+=\305V\026\276[\367\313<\241\241\333=\002\277\340\275\317$\010\276t\004\201<g\241\262\274.\346H\274\350\374\014\275\343\261\254=\332K\224;\237\347\033\274\210\367\331\273\334h\371\275\350\354D=\036>\306\275\365\'\270\275\243\261\355\275$\340\321=\002\320\232<8\007\215=@\347,<^\344\271<\220\312H\273~\330\006>\216\235\366\273\346\366\">8\234\253\275vL0=l\013\036=\357\277\272=\274J.\275\t\355\036\274\031W\272=\036 \r=\317U\357=(\254\356\275\320R\332=\333\213\004\275\307\257-\276!\305\014=\250\233\221\275y\216\'<\274\236\243\2757\271\242=\376\023\022\276\335\251\330\274g\'x<\263\212B\276&\375\027\274C\275\013;\223\203\336;\001~ \276\n\235+<\261\r\261\275\255\312\310<\361\371\322<+\014\233\275\251S\006\276\354\n\000=\372\201\333\275\031;\267\275\3016a<w\301\021\274\306\263\252<\3423\001>)I\377<\370o\262=\324\252\264=\014\022\010\275\357E\036>;\'\302\275\327\263\023>:\234\320<\224\274o\271\031\337\256\275fjE=\243\354\373\275\234\315\377=\304\034\234=x \202;`\376\034>\211\344\263=\350h\356;SZM\275\342++>\035\377>\275\235\235\035<b+\004\276q\350H\275Z\242\242=\341jy\275#f\362\274{\256\213\275?a?\275K\000\036>\342*\340=\371\310\250\275~\322\231=\361{\034\276a\177\230\275\243[\314\275\367\204\265<\003\372\034\273P\361\324\274\355\036k=U9\033\276\2245\006=$\223\374\275\017#\227<_M\004\276e\330\253<\213w\212\275+h?\276\336s\270\275\001~\331\275\'\374\304\273\303>-\275\275\001\337=\307\274\027\275h\344*\276\025\025\256<sh\321\275\306\255\276\274\004@\200\275\226w\324=E\256\233\275\020v\313\275\256z8=\364\003\351\275#\263\360\272\276Q\356\275\261\354\312\274^\211\'>8\re\275\260}\010\2747\033\017=\221\243\267<\245\213\330<l\372\203\274\260\317\200<\217,\323<\023\265\270=\367T\310\274\024\233\257=X6#\276hb\216\275\314SK\275She=\274j\n=\3033\262\274C\301\307=\310\177\026>\265C\\=_Y=\2765\376\361<^\275\006\275\215\250\031\276\212\227\275<\026f?>\240a]=G\265{=b\037\231=\361\257v\275{\226\336<\270j\357\275\366\361\262\275\237\342f\275\236\224<\276!\255\'\275\2614\242<\034\246\361\275(\352\013\274\364\351\177\275\341\032\367<\216\250\376\275)\316\010\276~b\335\2753\243H\276k\001\253\274A`\330=}\310\325;\265\371\223\274\331\344R>kA\357=\026\270\005=\313\200\377\275\323\266\222\275b\0216>\314\332G=gg\034>\323.\350\274\277\206\004=\262\310\353\275\347\220\331=g\270\315=\257\350\020>d\314\222\274 Au=\342\363]\274\372\357\031\276\343\302\221=\2560\353=\\\376<=\005\272\311: \337\341\275\310\257M=:U\252\275\017\243\252\275\007\305\232<e^\314\275=x\370<\341\034\226\275s+*\275\370\336C\275\3459}=Q\375g\275\026\007;=\232\377\021\2761\243\254<q\222\217<i\257(\275\220\031\016\275\360\317\250=\247\021\260\274;\211\033>\212\006\222=o\244\332=\204\000\">\t\215\351<\022\016\366\275}\344\205\275\032f\213\274\250\2662=2l\027\273\213\261\024=\244\327\334\274*\334\316=C3\227\2752>\024\276#\371\206\274\'C\273=\351\231$>I\024\034>\334\200\276=\213\366]\275T\021\271=\263\257\n>(\350\372\275\177\247j\274u\2300>\266`\275\275X\223\317\274m\310\247=\241\200\212\275FX\227=\223\331\354=\317\334\236=\037\236\231<R\215\217=\306\301(\274d\014\025\2749\253B=\217?\260=\312N\316=7K+\276\305C\254\275EG\304\275\276\377\237\274\036d\345=\232\002%=V\312\270\275PJ\376=R\035\203\275\300}Y<\026\010.\275\261\367]\275\232\226\232\274uK$\274\362\216->#\274\214<\277\300\204=\027\246\240=\252\3027=\037?\021=p\377\201=\334w\\\274]P\272\274\356*\306\275%\352\255<\225\264\244<\n\025\210=\357\245%\276\275<\326\275\031\323\262<\255\310\243=N\334x\275$\3501\275Sa\222=\316~\205=9e,\276\016e\275=\022\227\013\274\013q\323\274\004\3726\275\357\033\312=\206\340e:$\373\223\274Ga >\350)\354\275fGN=\337=\325\275\364\367\207=\255SC\275k\217\212<\207\370\">\236u\203\275^\006\301=\010\365\007\276\362<\010\276\266\356\273\275\362\362\017\276\354w\315=/\377\331\275\036\240s<}\214\306\275\352\211\214=\350\017\213=\010\010@=\273:p=\254\re\274.\'N\274\022\022\220=^\353\031\276{\3357\276\247=|=S\375\307\275\205r&\276\213>$\276\223Y\276\2755}\034;\261\031\256=\213\3322\273\274\304p\275a\227J<\272e\303<\204\230\305\274\201l\323\275\223\353P\275\213}\246=\224\231\257=A\215\364=:\314\262\274O\243k=\367\346\347\274\233g\334=\351Q\026=\364\346\330\275u\033\351\274\201\\\356< \177\253:X+\307=(\334*\275\377r{\274\022\267\t\276\230+w\275\372)\210\275%\354V\275\2123\317\274\353\037\325=\010\266\376\275\252\237\363\275\235\236\023>SZ\'=\237.p=\334\223\234\272\322\323,\276\322\342\034\276\344R\210;\210k-\273b\023\336=K\037\035\276\035\250\354=g\334E>R\260\361\275\321\343u=\247LU\275e\362/\274\375\034\323=\246\255\034>m\"V\275\220\273\344<\217s\'\276\350\022==\317\314\206\271\322\221\277\273\305]\366=\240\377\310=v\352\204<x\026l\275\020E\234=\303u\315=\245\311\005>\026\035\331\273\364\213\030=0N\226\275\206m\343\275\014I\000\275\013\347\213=\365\224\257<\241\340\013=\260.\225\275l\223\006\275\236\017\\\273\365I\261=\213\0068<\220%\242\275\310\206\327<\200\305\360=\206a/\2768\034\212\275\t!\027>\272\267\271=\236\022u=\247v\206=w/\366\275/Z <\014\325\314=\002\317\346\275\032\013Z\275\340\341\245\275u\317k=\0106\002\275\t\202\223\274\035\342\n= %\325\275\270<0=\003\246\306=3\262\377<\322\344\235\2753\347o\275y\354\025\275\013\306\314=\376\211Y=\321\002\000=\201\364\341\275I\343\340\275\036\025V\275e\371t\275\340t\265;\217\375\327\275\014PO=(\237\241=*\353\017\275\205[\236=R[\220\275\235S!\276\351e\340\274\320F\360<<\r1\276\246\372 \276\213\355\200\2755\246\016=\314\031\271=\036\t<<\324}7=\244\013\373<\031U\r;\226\311\364=\351\331\247\275\177\002:>\225\311\010=$\215\270\274H0\"\276\013\300\261\275@s\025=4\342\014\276\215\363\321=\\\247\022:;\227{<\320\347\215=x\270\337=\346\246X<\376\210\207\274\232q\223<\234\2524<\266\215\354=\241\321\334=\\\341\233\275\222\261\243\275\312\357\033\275,\272J=\344\326\306\275\0308\326\275\013I\254\275\034Q\022\276\346\377\313=\226_\231<\347Y\265\275 \177=\275\322^@\275!\352\212\273\020\227\374\275Yn\201;\260\207\305\274\240\006\334\275\206!\306\275\267\237$>\024\262\273\275\335\017\363\274\236\277->\"\271\030\276\370\324\251\274\311\252\270=\301\033\335;\016v\314=I\330\276\2747\244r\275\312t\340\275\'\372\266<\214s/\276+\226P\275(\302\013>\324\010\353\275\305\315\274=^\344\227<\311\316\376\275\300\335^=\006W\366\273\321\265\007>\303\034\271=\244\223Q\275\200uP=P\211\207\275\007*%<f\214&={t~=\031&#>\361s+>wLM\276\246\026?\2757\001\333;-\366$>\324%\340<\306\270`=\017\324d\272\330/\016\276\363O`\275-\323\317\275\337\372\351\274\314\005/=\203S\\\275\255xh\275e\020\022\273\256\2740<)0O=\226W\266\275&6\233\275\264*\377=]nY=\025\177\343<7\006\205=3Z\315\275\316\177\035=\3467\024=\362V\004>\357&\340\275UoK\273\374\3640\274\013\354\271=\223\331\313=\262\256\364\272\n\037t\275\346\310b\275\353\003\203=\3762f\275\226\030\010=\263\223\304\275\337#\330\274\366\025\231\274\360~\000>\337\365\314\274\313\334$\275\022q\020\276k33\275;o\341\274\313mi=\0348\261=c\226\364=\3063\244\275N!o=\276b\017;\266\257\221=-\271\220<\270f&\275\373\'\214=N\342\030\276-7\337\275\252\010\256\275\034\342#\276\034\257\303=]8\324\274t\375*\274d\210\226\275_cP>\373\030\303\275\225\242c=\351D\t\274\036\271&=\325\323Z\275#\355\331\274\002\235\234\275\330\276&<\335\214u=\352\214\346<\325\365\241=B:\024>\305\304\265\274v\037\215=\226\304\253=0\0370=QZ\267\275dF\337\275Y\322}=\005\203\037>\370\'\353\274%_\375\275O\234\355=R\320\037\276\020\356\355=\306^a=\344\2100\275\022\037\345\275\225\026\270=6j\021=P7\240\274Rvy\275\340\265j=\030\016\330=\230p\264\274\352L]=\354I\337\275\230\3364\275\024\250\320<\2576\370=$\273\375=\370\177D<\233z\177\275\2773>\273\346\227\014\276\355\315\233\275\356I\260\275\"\276\253=\374#\267=\321\332\004\276Z\322\300=\241@\346\275\340\000\256=\307\033\234\275\340\250\006\274\004!c\270\326$)\275\346h=>\256\332\335=v\244\340<\302;w\275\274I@\275\307rj\275\234\322\270=\000t%\275O\300\327\275\250M\241=\000)\245\274\364\201{<6\247\335\275\353\373$\275p\376\307\274\353\260\025>\200!!>P8)>W\314#\2756\213V=\307\233\004=\351\330:\276\335S\200\275\245XX=@B\331\275_\245\300\2731\323\351\275\354\245\266=ELn\275w&\010\275\307\207P=\016\313\004\275\237\303I\275\021.\324\275\272\214\002>B#\354=\345j)\274-4\014>\257\017\340\275{\272\267\275\024\\\020\276\327\276\222<&\302\235\273+\000/\275\2040\031>\223\372\033\276-\2534\276\267\306h=\323\210\361\274n\271\252=\300\345\321=\305Q8\276h\310\032=\r\233\260=8*^=\275`\202\275d\377\n=\211\325U=\253\376\356=V\352\204=t\000\366=\340V\215:\000r\346\275\277(\271=J\377\326;\250\217\031\2769\364\270=\236Z\311=\301e:\273\200\334(\276\314\374\013>\306\254\020>3\300\366\273\250\004\370<_\2510>\302 \320=\177e2\275\253i\276\275\336^\006\2735\271N=\032\276\205=\233\354\003>\367\304\017>\026&\274<\312\\\307=\325\010\031\275\345\005\310\275\342\261\016>\312X\304\275:\212\335=\264I\353\274\212\371\330\275Y\220Y<\332R\202\274\203\247<>d\262\016=\016N(=\211\250\275=H\207\006>\275\221\361\275\263\013\200\275\"/,=i\351\340=L(H=\037c\022>\372\202\210=\337>K=\024\265}=G\030\270\274\200h\352=\240F|=\264\237\233=\204\247P=6\310\315\275h\371\321\275+\362\243\274\365\206\216\275\346\253F\275\367uX<\203\310;\275\322\244E=7\316\322\2751\373\224\275\036\304\340<\004%\221=\316\364\016\276\003t\001\275\005\211\232=\001\035U<\305q\014<X6\201\275\202\212\220=\353\325\034\276O\334\026\276\204\375\021=\311\232\r\2760\204\357\275\350\000\273\275\037R)>o\263w=Xj\263<\226\227\201=\211\265\215\275L\246<\275\317D\222\272\256\350\034\2760\205\252\275\343\024$\276`\305;=)\326F=\211\370F\275\335\224s=\210\332o<f\255\367\274OP\317=JtG\274;k\303=\224M$>\275\2154\276\326\324\315\275B\275&>\265\"\221=\340\323\032=ql\246\275\225D\017>C\027\000=\203\207\235=\034\367\250\275\377\351\r\2762\237\016=\177$)>\232q\303={\323\307=\263:\273=z\337\315\275G\221\376=ce\207=\313\276\275<u\331\002>\347\340\306<?\266\252=\350\341\000>\210\3028\2769\231\256=\354\232\027\276\356\306{\274\243\006 \276i9t=\2323\312=m\204O=\252\317\366=\332\005\374\275\013\022\034<\262\350\323=\263z\305=s\017d\274<\314\273=\273\242=\276\020\226\243\275\373\027;\275\211\226\203\275mh\317\275\365\252->\231\004\371\274\007\353k\275\377\364\332\275\031\303\007\276\021{\022\275Dg\363;\356\350\006\276\277\220\217:i\374\323<G3\033\273\0203%>h:[=\3157E\276\251gN\276\345\234\002=_\272\014\276 D\263\275o\235\304\275$y\211<\221,\363<\r\266\327\275\250\237\260<\342#\222<(\t\032\276:\346\341<\314\002%\274\303\360\274\274sY\002=\0220o\274S\016\210=+\377\257=\233?\021>\224\335\002\276\222\254x\275\3717L\276N|\233\275_}\005>d\354\246\275G\006\032;\317\245\236=\203\202`=\241\215\013>\377G\026\2761I\303\275)\325\264\274831=7\017\211\273\213\216\371=\203\350\307\274~[\257\275\375\276\200\275\271\027\355=\003@\254\273\2150\356\275\305\316\025>B\370W\275yb\004>S\271\203=\376\024\353=\235>\252\275\323?\241\275B\"\343\275\024\t\232<\227<=\276\031p\252\274\356\362\024\276\314>\355=\222\213\244\275\266\":=1\025\004=P\323]\275\223V\217<\330\330N>p\200\351\275\222H\224\275\365\206?\275\327\007:>V5,;a.\354=\006\370\026\276\001\326\245\275\025\276\331\275\034\257\226=t\215\'\275\272\273\245=\326\325\002=\217\357\"\276\326>\213=/1\030=\344\274&>\036\022\343\275{k\371<\343q4>\002\232\034=\364\337\345<\324\253<=\"\326V\275\005]>\276\301(W=\226\372\275\275\\\372\206\275#\235\306\271X\273\354<\311\336\225=\010\245\200=\177\243W=\211aT=\314\327\024=\344\030H>\364\241\304=nN\342=\212y%=\307])>y\320\016\274\360\0217\276\333q\035\275\312P\301\275a\255\363=\246\210N\275s\206\210<\010\"\005>O\001\t=H\303\371<U\210\267\275\\\036\306=\375n\321=\327j\233<\266\270\330\274&_\347\275\300\227\301\273Hsd\275\263,\026>\357\374\227=\233m\035\276\034\255U<\252L\240\275\256\240\243;j\1773=\037\351\215<R\003\210=\356\337\225<\350=\030\276\3604\"\276\344\250o\274\237\020\013\276\320&8\276\224\026\022\273\276\223v\274S\343==\227\020\256=\177\275\375=\350,\020>\362O\330=\251\347\034\276/\322\373\275\350t\'=\312\303\226\2750n\261=\300\002\307<\354\204\250<\'\271\211\275n`^\275\363t\231=CbP>k#!=\367j\252=\320\nI<#\212\010\274\n\207<\272r\005\375=r3\347\274\354,\014\276\224\262y=\020lj<\177_\036\2758\351\027\276x\017\202=E;\224\2757V\303=\214\244\200=\30083\276\"_\271\275;+\350=\3161\017\276\302(x\275\377\253I=\261i(\275L\320\215=\331\353\324\274\270+\200<O\321)\276\352\r\014\276\224\334\212=\355\344\017>\336T;>\261\354\004>\300\376\227\275 \223\023=K\356\'=\211\275\014=-w\203\275\270^%<\370\201\216=\324X\270=\352.\025>\013}\024=[L\020>\212\327\333;P}k\275\257\030\304=\221\207\344<\223ld\275\324\362\325;\214\277\004\275\n\216\323\275\225\340->4d\376\274\034|\262<\255\256\360=\321m\307<\005\261\020\274\250\276\377=\224\275<\275n\273\231=\022\312\365;\201\213#>\030\325\256\275\002\024\314\275`\027z</\033\302\275~\027\030>/=,\275\033\2439>\262\206\366\275\263\353\205=\240\017\301;{\363\022\275\"\356\355=f:\356<+\313/=\354\263\351<\363\314\216=\335=\336=\322\352P>\023\350K>\206\030\354<\224\231\344<\014\373\013=#[9\276\022\366\326=mj\017=\237\312P\275\202r\236;/\202\r\276\201\260%\275S\211 =Q\036p=\207\277\005\276o\2318=\344\330\257\275)\337\332\275\350\357\020\276\352\035\230=\000Sh=@\232\267=nF\006>\250\214\010\275K\373c=+\222\250\275\222\365@\276l=\032\276h\005\022=\233\254C=\023\305\376;;\365\304\275/\257\201;\255\240\311\274\327R\"<\225N\254\274s\314\004>\345\241\003\276\214i\267=m\215M\276n:\273<\334\304\220<\224%&>\"q\327\275\307~Q\275Gs\266\274\t\362\271\273>\226\'\275\252<\362\274\205S\271<\367,\263=\272{\034\274\032\267\257=\353\207\006>\365a\250;\252!\007\274\342\2729\275\021\242\244\274M\033\341\273\2157\256=\241\234x\275d\212\344\27453\317\275-\263\004>e\261\000\276K\324\342\274\207\256\016\276 \362\004=f\246\221=\217`\005>\024\375\037\274\250L\213=3\224}\275tvr=\274X\273<\332\351\214=\373\371?=\206+\261\274\342@\001\276(\375\331\275i\342(\276\333b\243<\207\240\321=\000\357A\275.}\032\276_\004Y<J8\333=\271eB>\325M\035<|/\232=\364\217\n>B\323=>\321]\254\275\217\242\243\275\312`\021>\0204\303=K\204\231\275\006\004\361\274\230\230\330\275\252\255\222\275S\022\203\275\237\025\203\2750\322o<\002\031\325\275\256\020\204\275q\246\375\275\362\031D>\327\223\364=S_\344\2729\014\013=\3374\270\275\324X\030>\371u\200\274\204\260w=\332\257\264\275\355\001,\275E\254\013=\2431#\275[\210\327=p9\203=\232\n\005;\307$\032=:\274\224=R\374\355\274\365\032\032\275\310{#\273]\252\023<\363F\223\274\364SK=\034\355\220=\265\266%\276\032\372\005\275E\256&\273f\353\351\275\346\336\000\276t\025\254\275\210Es<|\025:=\247\026j\275\212n7>\253_\257\274\034\213\013\276\237yW\275\266\235\264=&\014m=\316,\264\275\207)\205\275\267\256\343=j\2607<\220\023\177\275\002\t+>U\003\017<\237\325\262=\306A\332\273O\265a<\343\010=\276!A\273\275P)\311\275\033RW=\226\217\270\275\257\004\037\276\360\364\275\275\324\241.\275<\020\005>=\004\311\275\345\026\204<S\3746\275eG\200\274\214\334\017>M\275\324=i.\350=(\240\362\274v\223\246=j*\316\274\313\224\025>W\223\216\274\377J)=\235\323\010>g\245\233=\252\2776\275\300\366 =!\334m<_\242\305=\342\261p=\250\017M<\"\266\3179\331\326\003>\231\334\376\275\261\207\327=8\266\352<z-\263\275\363\264\003>\335\252\001\272@\234.>\\\034r=\236?x=\214\271\264=U\301\231\2757\353\004>vt\014\276 \263\013\275\2479\323\275:\337\032>Z\303\371=\016\373\022=\247[\223<\362\202\206=\200\240\374=vQ\014>\221A\\=\340\250\256\275\224CY=y\227\235=\033\324\027\276\033\327K\274Yh\013\274\272?\014\276\232}\366\2759\317/>\234\361 \276_ds<X:\203<5\337\004=\306\036\337\275ft\205\275\340j\370\275\373N\263<\265C\327\275\023\210g>\211=\337\275X\006\324<\273\207\251\275\'b\356\275\355\217\016\2754\255\206\275\305BW\275 .\350=2\014\277=\365\007\201\273\217i8\276\323$I\275\340F2>\370\021\242=\347\017\213=\377\242\220\2734\t\002\276V\227y=\376L_\275\030=\003>3\264C\274\366_\221;\023pH=\313q\312=\231&\014\275\236\203j=\007\206\217\275\270=\231\275\r\244\221\275\033\312\t>6\354\177\274\004\020\221\275b\232\007>\215/\205=P^/\274\003\\A\2752\222\264\275U)\007\275\304\374\004\275\245\203\277\274\335\313\032<\255\333\310=o\225\r>\022+Y=\215\005<\274;<\035>\006\\\344=J\201R=\375\037\t\276\235\365\216\275PM&=\241\232*\276,\236w\275\376\004\314=\ni\216\275w\357\200\275\341\340B\276\276DI=<\231\377={2)\275\351\025\030<\033\265\032=w\361\t<@\346q\275U\3637\276\311\3538<p\361\364=\324\2520=\347p\020\276\303\2059\275\242\0013>\344\032\200\2752\336\321\275\365\357\357<.\202\317=\344=\347\275\262\374\342\275\354\246_=\320\262*\275\362\345\202\275|\247\274<e.\363<\353\231\341\275f\263O\275\354\371?=\266z\314\275\234\305F<\324\247\261\274G\036&=Z\030\216=\343m\363\272j4b=p0;\275\005.\"\274`\325\317=s\227j=\334\272k\275\222\220\031<\310P\342\275\270\226\002>T\364\341\274{i\023\275\n\346\313=A\221\376=\025\312\233\275`\272\014\276\307\326\347\274A\303\263\274\361\024\255=\253\2171<\001\016P\275\233W\354\275\330[\017\276\205f\t\276\275MV\275\272\"8\274\3529\227\275T`\271=L\226\204=%\302\357<\364\374\217=i\016\212\273\2020\367;\274\276\252\274\371\270!\276\210,G>N\327/\274\005\323\233\273\364\235\021\274\031:\331\274\366+3\276{\035\037\275$\211n=&5\345=)9\004=\363\354\316\2755w\246=J\220o\275\275\335\321\273K@\027\275\317\034\237\275\rsS=\275^\366\275\207\215\365=\366\352\013\276(\252\'\276n\260\023=\2279\013=w\272\337\275\025\207\363<!\242m\275\n1\344\274C\315\201=\221\027\325\274\360\234\271<\324\335_\273\246\331\375\275\233\345\360\275\244\210\260\275\017\013i9\316c<\275+d\370:K\021\206\274\367F\177\275\003/7\276\322\264\322=](\'<\345Yl=\312\201\025<\301\321\025\276V\371\271\274\244\266\366=\335,-\274}\307\213\274\357\205%\276-\'\227\275A\321\364=C]f=\034Af\275\316\355\227=\350\245\r>~\326\253=GR\336=\224(H\276\337\'\317<\246n\303=3\321U\275k\\&>ng\315=<#\016\275-\225G\275\020r\370=b\337\227=\227\360\223\274\\\241~=r\372$<S&\036>\031\275u\275\307\314\220=\322w\244\275\322\216\347\274\257\255d\275\305\360b\275&A\213\275\35573;\307\357W<)\362\353=\013\246\222\275u\336\331;\245{u\275|\264\000\275Z\352S=\005d\006>u\365\365\275q\3476>\250\343\337<\327tH=\027\227\276\273X,\366=aXh\275\002\271\020\276\301\345\023\276\021\035%\275\303\353C>\212C\310\275\246\365\247<T\236\221\275\005I\030>\346\201\003\274\014W\242\275\026\307\347=(\214-\276\367i\356\273\263\3352=@\\\360\275y\271\003=\246.\265\273\271O~=\031\004\237=w\307\323\275\352M\373<\370\376Z=\374T\210\275\212l\374\275@\243\326;\370<\354\275\371]\352=\247\006$\276T\237\t\276\361\355\n>\337\210\304=1|\225=\276\270\255\2752\242&>\264_\002>\371\2232\276a7$\276\203\014\310<\350\000\362\274\347q\257=\201\341\033\273\003\305\323;4pA\275\3361`\275\003\272t\275+\n\225=$pH=\016G\214<\225U\013\276\375\210\031;6\352\201=\201\337\254=v\332\303:\216\333\326=.\200\232\2754\313\177\275\255n\n>M5\313<?\347\200=\375o\201\275\276\341N\275\307\232\222\274W| >a^\245=1\235\254=\301\320\205\274=\264\316=\366\2707=\337;y=\366\0341=\033\365+\276\314\366\330=\023\245\006;\177\364C\274\266\014\317\275j\036\033\275\240\221\305<\0134\226=gL4>g\375F;6I\203<g\313\222=f\251\224=\036(\256=\245Ye\275C\272|=\361\227\235=*\036\217\274)\257\364=\327\222O>w\275\220=\347\201g\274[\014#\276\346\333.\276jR\354=\325\026\233<o\316\013<\276b\246<\205C\320\275\277I\371\273\350!N=2g\305<\317H\021\275\300J\306<\220\265\027;\342#\302\275\307D+\275\001~\250\273A?\324=V_\032=G6\275\274aU\256\274-2\266\275~\242J\275cy\261\275\r\360\023>\212)\006=l\273}\275\330\225\377\274\223\200\374\275\3233\326\275\347\026\224=\275o8;q\313\242\275)\2316\275(P\255<f\345\245\274\3709\341\275Y\032K>\325+\241=\240B\027>\2001\264=\030\365\220=\250\321\257\275}Ug=\336\303\300=\364\200\006\276\363\213\203<\204%Z\274+\'V\274\312\374\317=N!\006>\353/-=\2101\010>\037o\220\275\3339\214=\366\216L=R\220\272\275\3648\221\275\350I\237\275L\027\277\275\270l/<\303\225\205\275`\277\260\275k\260;\274\272?==2\353\334<\004\362\372\274\260a\374<[ z=]K\274=\254\020\350\275\260\006!=z\261N\275u7\261=\206\246\034>\257O:\276\001\316\026\276\206\210w\275\305g%\275E\2431>U\017,\2763#\262;\004\323\222\274+\027e\275P\263\322< |\247<=\232I\275\226\205\300\275jNs\275\320\336\373=\r*e\275\236\224[=\226\275j=0\251\036=589\276\003\3266\276\337\035\337=\342u5>\371\231\375\274U\356\273\274#\377\265\274\351\3632=s\0061=\310=P=N\345x<\260\301\030>\225\345\021\275\003Jh=h\026\214\275\357:\225=\302O\234=.|\031\276\253i\270\274\355`>\274\017\325\251=5\336C>LW\310\275\363\361%\275_\304\334\274\251\310\322:Q\355\373\273O\320\343<\220\320\305<\253\317Z\275\035U\017>\255\254\016=yj2\2763\223\223\2756\271\033\276\337K\271=^Lh=P\247\274<\006dU\270\210\213\364=\022\313\373\274\313!^\274\343\306#\276\235\\\247<D\223s\275aw\213=R,\320<\323c\343=\036\\\324=\262\346V\275\023\177?\276\243p2<\023\350\327\274f\024\233\274 l\255\274\251\324-\276\346\240\">\"\373\366=\227Z\013>\222<L\275\244\312\372\274\245\342\233=K\202\361=\006\362\034=\350\247\200=SU\004=\020\266$\275#\220\235<\210\207\006\274\376\024\244\274\345\301\361<\215\273\203\274\252\203\240=\3607O=hgD<\343\237\212=6\033\253<\263`\017\276W\263U=\034\240f\275t\367\207\275#!\261=C\351\301<U\243\235=\001\205\031\276~&\207\274\204\371\177\2752)I\275\326b\211=7u\216;c\310\016\272mo\331\275\"5(\275d.\032=#\030\005\276\2361\010\276D\357\204\275\221\377\245\275\373[\031\276r\205\240=\201\206\n\276\307\217\004\275\225\214\017\275@\257\313\275n\277j\275P\002\035\274\237\356\223\275c6\277;G\221\236\275\325yM<O!_=*\\\226<\3152\310\275\244U\177\272Z\347\363\274*\010\t\276a\031\346=\024\300,\276&\0233>\237\326?>\0020\226\275\014\014\004=\031\317\230=c\247\234=\213\320\350\272/\026o=F\'\324=\243\226\352\2757\311b\275\354/0\276\016\230\247\275\323\033\305<Z.h=\265\"M\275\265\274E\275UB\203\273p\372\323\274\265,\032>\321\234\324=D\237\315<D\271@>H\210\335=S\245/<\344\207\203\275\310K\005=;\034+=`4\235==+\375<\002\210\213=\362\303\301=K\362\206\275\3155\214=\033\001<\2766\247\257\274\333,\210=\314}\306\275\377[\266\275A\304\230=Fu<>r\343\220\275\321\263K<\3778\353<\307\004\222=\277~\002\276\206\241\021\275\346m\020\275\224\320\311\275\331\010\002\275BN\277\275\361\371I=4\022\n\276\320\311\355<\261\352\210\275B\212\302=\225\3070=fd\217\274\031S\010=\014\346\017\275QN\265\275z\224E=I\351\301<\367pF\276>\301\312\275\377@\r\276\203\247\010\275\326\014\210=i\275\241=\302\212j<\326\207\241\275Ll@<\230\225\254:e=.<kT\334;\275\203\345=;,\205\274*{\335\275de\014\276\024\220\234\275Z\316J\274z\345\346=|@\225\275\325\257\016\275,\2044\275Es\342<J\3513\276\236+\205<-\243\002\273\241\311\220=\354\314\231=\031\343\222\275\270<\333< \004\355\274(\036\265\273\230k\304=\035\3102\276\255\032k\275\270\212M\2761\026\"=s\221\213\275\350\202\372<m\375\227\275\255\261\361\275\271\245\236=w{&\275\345n.>\354{\263\273\251\266\232=\233\302\215=7\264y\275\206\353\033\275\206\026A>\021\314\222=\030\215*<\223\033G<g?\334=\310\316R\275\344\327W\275\372\037\250\274\232\275\235\274\204T!\274\250\266\274=\034\310\351\275\t\217\237\275\247\211\331\275\263\371S>\324%\251\275\0377\362\275\350c\247\275\375\351\214\275!\264\261\275\363\260\002\276\001\"w\274\302\2566>;\226\n>Ug\337;\0000\211=\240\264\014\276\322\002-\274\212\025-=\232\350\260\275\345\325\036>\372\230\252\275\205\222!\275\317\374Z9E\272c\275`\246\212=\n\226\310\2756\027=\276*\030z;]\371\325\275\021\300\n>\252\001x\275\342~[=\217\267\344=\221\352\222<O\335\357=hN:\274s\347\351=\331\312\271\274~c_<\306=?>\300\226\354=\204\343\016\2756H\217\275b\313&\276\202\374\351=e_P\274\305.\317\275\250k\357\2744Y\006=\036<\267< [\363=m\205\311=\036\347D=\316\217\035\276\037\216=>\305\001\343\274\t\270B=bL\345\273\205\034a\274\036\371v\275\037\006&=\201G\035\276A@N\275\264\347\372\275\214\301T\275\362\331\370=,,\017\276\261b\037=\216[d=\311Ij=\363\252\270;\003Q\243=$\315\232\274\321\271\264\275\212\2566>\377\357\023\276\242\340\250;\027\231G>\224\237\033=\021\355U=R\225\255=|\226\200\275\264\200~<6\3754\275\370;\304<y\347\017=\332\376k=Z\245\271=\265\210\002>\006\367W=+\315\217\275%W\272\274z\337\222=p9h\274\344\250q=\215\252\010\276\245\222\r=q\310\022\275\306\026\033\275\234$\357\273y\311T=\006\017O;\304\324\205;\244G\027\276\261\2411\275wW\035>\263X\\\274\373&\\\274\013\374\254\275:\026\351=V\230`\273\342\374;\275y\006\215<P\326\256\275\3532\333\275\214\010V\273G\241\330\275#\252G\276\327\031\030=\311\240F=\274\"\205<N\327=\275\022\235\007>\222\017\270\275\r4\205\275{\324\256\274\005\265\274\275\3638\355\275!\236\016\276K \227<13\353<\215\020$\276\234\301\030>g\007\234<Z//=7\233\250\275\245\245\230\275e\344f=\005\243%>\236jG\275\334\344v;\254Y\267=E>\365=xa\035>&\n\"\275\362\rq\2754\202!\275\302\0004=\024.\030\275\2277\351\275\\A\377=\3272\270\275\260\314\347\275}Y\362\275\375=C\276=\316i=\356\325\244\274\254:\305\274f\230\374\2751\014\325\274&\220q\275\273\301\222=B\334\370\273[\300\243;H\013Q=\371^\214\275\371\026l\275\207A@\275\220\224\263\275\212h\236\275\256>\036\275x\264\331=a\300\302=\340\252\230\275\355\223\010\276\352<^<\333S\377\274S\364\371\275\352\367\352\275\177N\021>k\\\270=Xj$=^\375\025=\257~\023<\364\337);\213CU=_\004\315=\314k\036\275\013\254\234\275\014\341\214\274\352\250\r\273\223\340\345\275\317\225\245\275*?\346<\342\312\007<\201n\010\276\337\234|=\017\267\035<\n\030%>\3326\016\275\317\201j=\340\263\037\276\313\310\'>;\245\272=/\221\335=\001\344/\275\202<*>\270e\327=\352H(\275X\036\216\275\244`\'<[\241\227=\034u\020\275\362O\256=\007\321\375\275p&\335=\227\375\362=\363K\240\274\223\243\336=\326j\333\275\307`\315\273c}\305=f\177\010>2\2616\276Y\027E=\274R,\273\377f\023\276$(\300<b \326\273\277\256\032\276pO\255=G^\017>3%\345=D\346A\275O\302f;\036\233\256\275\037\004J\276}\014\307:;D`\275\016\334\343<Rk\266\275\020\377\326\275\343\360\311\274\013\316-\275\225z\332=\203\261;>>\303\205\275\354Q\004\275\262m9=\276\311\265<w\242~\275\367\213\r>j\222\255\274\205\017\201\275U\360\223\275_/u\275\2302\033\276\3635\006\275>\177r=]RX\275\016\352\274={\0162\275\307\336\221=\260\304\014\275*\302q;[M\261\275@\\}=f\231\364\275\263h\371<*\270\257<\367\036\004>4t\226\275\215\005\001\276J\266\372\274\366\245\222\275\005\000\010\275\224\360\346\274:d\334\274!\215\302=1_0=\352\035A= \014x\275$\302 =:S\023\275\215]!=\320\254\204=\271\263l\274\215c\007>\343xp=If/=Hh\010<\217\366\351;\270\325\342\275[J\037\274\037j\024>\320\316\223\275\277\245z=\321\226\367=\232\273\247=\235\216\223=\337k\034\276P\261\241\275\027\306Z\275\320\367/>\335\220\277;\245O9;W\263J\275\272\327\017\2768-p\275\\\377\317\275\260\371\023>\203\314\356=\037\021c=\r5\007>\200\007\364<\237\330+\274gr\301\275 T\340=I\227\213\275\241\242\223\275Y\363Y\274P\224J\275J\034\326<R{J\275\256VA\274\333>~\275`\032}=\177\261\026\276\216\350\247=p\217\216<\027U\035>z\311\206\275\004\371\032=\347)\221=\n\241A>\237\366g=\350\000\222\275/\3472\276\016\372\342<\304)\243<\354\254\302==\352\325<\377\254,>\330\312\006>\265\346\257;\206\322\002\276\271\014%\275N\375d<\006?N\276\031\365\236=\016aP=\340\316\r=\027\220\300<\226W\201\275\016\000\254\273\327<\036>\266\270D\275J\3627=\307*O>\254\344\257\2759\345\374<\364\256\313=\331\221!\276\350<-==\202\324\275\360\263\321\273\233\244\014=\256\370P=\205\0340>Ez\336\275\236\303\031>\005hP>\364=\215\2746\213\000\276\245\230\374\274\273\336\256=t\250\006;\277\300\246\2741\307\245\275\236\271\346=T\210^\275\367V\316<\252\233\021>\213\t\263\275\272o\234\275\331h\"\275\365Z\276=\373\nA\276\326\032\215\275\350\325\353=\024\026>=\240Z\304\275\325\t\275=\017\206\204\274j]\214;;\241}=\376p\215\275\304Q\243\275R\016\353\275\216\210\313\274L;\230\275\233k\237\275\216\360\310=7\2561=\330\324\204\275()\262\275<\\\215=\257\310-=\242\241\022\276\323\310\025\276\243\366\003>Z\006\242<5\365\262=\376\315w\275\307\232\245=*_\211=\256\305t=\237~\364;\373MG<\036(\"\276$0\245\275w^\350\275/N\036\275X1\360<\323E \275\211E\310=\002\323\336=\255\310q\275+r\243\275/\342u\275E\355\260\275\371\351\033\275\032\314\246=\3155\341\275\244\n\005\275?\024)>B\331\316=\000\345+>\326\014n\2741BL\274i\014\365\275\271\360\232\275`\336\033=`|\250=\211\255S=\370\362\237\275c\203\017>u\221e\274\376\336\021\276\376.\202=\204\371\001>7\351\345<w\226\024=\302\342\031\276~\221\234\274^\303\227=\020[~=\301\031\210\275|u\240=\212\331R\275\261\350\010\275\033[I<\215\351\276\275\265u\n>\215\237\232=!\364\307\275\017+H>\022\177\376=9\tw=\260\301p\273/\254\021\2759\224\231=\211\311\232\275\251r\005<\243\355\310=\364\ns<\234\n\206\275^\273N\276L\317\200\274Fe\006\276\020\3333=\205\020\333\274\270\004\347=r\001\214=\226\332\335\273\311,\343\272\'\323\246\274\264\335z=aY\376=\216F\024\276\305I\005>\207|3\275\242\267\021\276C\334\201\275\356\234\t\275\367\271\205\275\370z\357\275\362W\270\275\026\260m=\010H\032\275\207\206\255=3\002\375=\352\312\245\275\311/\233\274%7\265\274\312r\206\275\204\213\272=\027\206\315=\363\277<\276\314\033\274=L*\305=\324\327\342<H!\354=\321\005\260\273\177&\241=r{c\275\364\0109>\021\227\007>Eoi\275\231\347f\275B\026\274\275\363Z\202=O\177d\275;(|=\324\264=\274l\3461\276\010\177\317\275[\347V=\322\273\025\275\254\324\016>\257g;<\2557&\274\027\244\024\276\302~\336\275\016\027O\274R\220\031\275D^\032=l\256\255\274{8\207\275\245\372\366<\277%\336\273\204\322\272\275\334\007\301\275%\222\243<\257MH<\366\t#\276\177\266\301<\240l;\275;r\246\275\202\234\006>)\347\356=\013\344\253\275\301\202\242<4g5\275\220\375\267\273\333B9\276\245tv=\322\016\353\275\000Q\274;\321\357\241\275\372\213\361==l\345\275\366\250\035\276\225Q\365\273\204\364\035>\220\214\374\274,\010j\275\343\3257=\304\230;<\344\243H\274\240V\256\275\216iA\275\023\0360=\306>\024>\300\225\337\275\301\276+\275a\225\377=\202\007\246=\350\322J\276\374\037t=a\206\315=$O\302\275}1H=7F\220=\3173\214=\253\345\027>\252*4<\023.\373;\206\364\360\274\324e\265=\321\020\000\276\341\001\017>\034\3055\275K\3545>\263a\363\274A\240\336\275\237\022\022>\207\025->\324\000W>\323\214\000>\016\021\217\275\265F\345<\323\277\023<j\261+\274\341\352\316<\246n0\2752P3\276[\241\213\2751h\222=\256L;\275\257:\221\274\307Ks=\250\212\253\275\264\371\004>\035\253}\275z\213\030\275\275\205k\274|e\222\274C[\201=\260\031\264;\002\2000\276a\032\303=s\037\022>s\t\217\275\264R\312<\207\317\276\273\002L\355<\265%7>O\017\006>\304l\255\275\374\016>>\\\250\257=p\366Y9&\250\254=\027\225\022\276n\0369\275\334\222\354=\237\3739\275+{\237:a2u\275\226\007\000\276<\360\313=\324\322/\274U\033T<\346\345\262\275\321\251\017\274F6\275\275\367,\243\274\017$\212\273\353Ml\275_\250\302:\220H\033>+\2346=\366\357\247=X\020\000\275\303_\307<R\022\n\275;\037w=\027/\367=\367\237\210=\356B\206\275o\030\001=\030\016\274=\262\030;=a>M>\337\021s=\003\201\316=\374%\024\276V\022\346\275\274\321\024\275\352\377\007;\362C\232<\320G\203\275\213\3027\275\'\331h\274E\234\270=\264\231\230=\324A\350\274\235\231\332\2754\221\321\275\331\253\335<\257\233 \276rk\246\274U8\200<\"\357*>\354\214Z\273]XU=)\304\346=\232\344Y\275\342\365\373=\265\304I=\307\021\\\274\316,\330=\263\001h=\355\255\360=\217\037\264<.\002\210\275\236\361\376\272C\\\265\274b\"-\275\0268\034\276\306\311\206=\243\201.>BI|\273?\005\311\272\332%\350=\354l\341\274\375V\277\275_\023\260<\0221e\2736,\t\276(\237\224\274\022g\247\275\314D\007\2762\002\247=\312\311\300\275<\010\026\276}0-\276\307\357\t>V\363\'=\220Z.\275sa&>}\253\234;\371\317\261\275\222\237\250\275X\000\357=\365^k:\312\027\316=4)[=\320j\340\273\nP\322\274{\234\t>\211>\036<1O\242<\\\264\017\276s\363\361\275m\007\234\275\256\322\221\275^\024\022\275\200\363.>\024\302\315=u\313\211\275\001\"\355=\234\355V\275bM1\276\310\240w\274p\247M=\032\331\322;A\223\230=\342\352\327=3\302(=1\337Y\275\246L\n\276\025\215\374\275=\326O;S;\006=\\]\017\275\t\275\205=\200\237\272=J\325\216\275\266\377\353\275\265v\320\274\306y\254=\330\230|=vd7\274\337-\r\276\243\333\213\2759\300\243=\027\301\251\275\036\263\340\275:)J=\272x\274\275\350\034\253\275\377\375;=\305\177h\275\201\275\232=\257\354\r>\261!\304\275\306g\256=\360\033V=\027=\352=\301\226\266=\237c\242=\2713+>\005\355D\275\270P\356\274\261\3162>\256!\335\275\276h\t>\342\241\243=\023\366[=&\002\027\274\026/\353=\373q\341<\rv4\275\241V~\274\353Ze\275\020\212\212=l\r\311=\234.\204<\365\3600\2742t&\274\212a\005>\243\346\005>\3266\226=\330\213\300\275\235\007\037<\030\232t=r\367\354=\242\036\262\275\360\3429\276iB\314\275\317K\013>.\277M=A\361\301\275\222\207\336;\357z\355\2750\251\255<\304\006\010\276\244\321t=\005\254\330\273\311w\337=\247n\232\275\004=\211\274\026\345P>\0376\343=l\352=\276&\311\257\274kGG>NOj\275\256\\K\275\247Z\351=\242\323<>=+i;\261\023\225<\231\274\\\275\263\243\217=.\362\207=\n\035\247\275\266\334\327;\357\"\217<]\245\202\274\342\243\340=\223u\023\276\206?\334=\261\"O\275l\255\000\275\247\270{\273<\261\007\2762X\006\276CC\254;\326\340S<@j\010\275\006*\315<!\370A>^\257\305\275Uko=\035\320\236\275\343S%>=<\t>\306Q/>\246\001\314\274\336\207b<\270.2;D\277)>\035j\006\276\013\031I\274\000\006F>9\220\251<\320\037`\274\373*\304<U\0276<\204\nC=d\022d=f\276\334\273\026\224\360=\007\262\001>\236\\\032=\357jw=\337)5=\331O\312=\227\210;=\007!\t>4\366s<\'\337\235<>\307\035\276\215\205\250\275\353\'\025\275\306\367\377=\301d\023\275!E\246\275x\372\003\276vP)>\225\250\321\274\352\025\343\2721<<>5g$>\007\361\221\274\324u\202\275\355/\016\276\261&\314=\351\341$\276\247\362\207\275-C\r=\226\243\342\275l\313\217\275{\364\254<W\306\231\275\213\374\244\275o]\005>\271_\347<#R8;I;\354<9\331\227\275\337\tK=\253\215\250=G\360\\\275\311\277\255<8\006F<\226\350\334=\261]\"=\307\200s<\254$\330<\325\023\325\275\316\271\271=\227\014\001=\005%\251\275\315\1770=\374\340\352=\202HP\275\346\375\337=z\254\202\275\t\266\273\274X\014\202\274\331@\333\274\300)\347=F\360\n\276\036\024\'\275Dt-\275\363\204\177\27419\344\274\343\337n\275\217\027l\274\365\263\005=UqC\275u\035\364\275\367\242\036\276P\010\037\276\346\002\002\276\343\363\000=g\217\210=\350\320@\276\255RF\276\317qU=\246\177\216\275rdx\275=v\375;@\006&>;(\014>\014\227\211\274\023Mm\275_\001\376\274\345\354\254=T\252Q;g\340\000\275;\341\331\275\247\250-\274%\027\t\276\267\ny\275>\275\221=O>\241\275\323\357\354:\336X)=!l\270\274\262\t\212=\212&\344\274r\256\027;\246\353m\275>\236\314=\357\204\227\275g\031\212<ci@=\242\227V\274\214\321\342=\013.;>\314\265\021>\'\227\367=\205_\263\275~\300\353\274%\332\335\275\363\212\360<\342\033\233\275H\315\301<\t\304\n\276\376KD<ADK<%G\n\275r\312S\275\316a\027\276\345\353\321\275\314o5\274\023E3\275\240%?\2767DO=J\t@\275\005\336=\275$\244\334\275\353\036\300<:\370\013\275uM\003>\206\006%\275\240\327{\275\253\207\351\2759-\246<\230\333\221\275G\323\355\275\207\177\266=;-1>?\254f\275\257]Z\275\035!\271\274\264@k=\242\357\341=\375~I<\030E\r=&\2468\275\303\324\342\274Te\322<\353\306r\275B\352\307=,\307\251=\330\257/<\207P\330=2\273\333\275\341d\345\275\241\"\005>Yf\013\276\301\347\343\274\264\320\254=-*\302<V\274\374=\327\365\343=\246WN\274\t\260\256=l\037\247=V~n=\037&\331;\2772|=mXr=\233\224\356\275IW\322\275\341aO\275(l1\275\243~1\276@b\034=\223(\005>\325w\231<\225F\365=\023\377[=\362W\265\274a\206|\274#\314z\274\231\221\366\274s\317\362\274\332\2700=C\224\t\276\352\3179>\354f\n\276\314\204\305\275\354\216N>\035x\023>\223\326/;\254+\023>x C<\3365\006\275\203\327\203=n\264\210\273\321\027\247=\257\225\022\276!((\275\363j^>\242\375\022\276\004!\316\2756M\251\274A\357W==\224p=\300+\262<\245+\312<t\256>\273\004%1>\334\241\200=\255\300Q=B\357\210\275\216\020\331\275\273\036\205\274\272D\341=O\223?\276\354\301\374=\330\013\337\275\351\350\266\275\275s\332=\225\247\034=+)~=\"=\344\275,\317\006\275X\202\021>\377F\013=\025\331\241\275\026\332H\275\253\320L\275\216??>\360\352\263=\226\276\000>\013\273\270=>/\240:\3607\220\275Q\005!\275\317\260/\273\371T\007\276\204\306\237=\3354\364=k$%>\2021\241\274\251\366)>\373\016\364=\222\356<=\323y\217\273\320CM=U\375>;#\372\304\272L\303\337=g\241I\275\323\r\225\275\214M\317=\325\305V\275\037\201\206\275G\022v=)\020\225=\004\225\275=\350X\267\275\3610\350\274\313o\032\276\271)\234\275\234\276\216=\214\035i=P\207\364<\016\372*>t32\275\372\256\021=\336\306*>\014\223F=\345\361\321\274\274L\032>m\275\025=<\206\030>\304\005\275<\234!\345\275\321\302\005>\221\0330\275\343&\t\276s\315x=\354\206\225\274\245\250\261\275p\036\250\27529\243=G\332\347=G\250\316<\241SC\2749_\211=\340\255#\275\224T\360=\215,\025\276\035\314\236\275u\243(>\247A\023>\372\357\313<JC\000>\241\375\242=\374\177\032>=\261\013\275xE\330<\216\225^\275\220\010\2656\341\027\225<\352\3606=\226@\333\274^\311\226=?\363\215\275\002\346.\275r\031\375=She=X4\211\2759\260?\275\341 j\275\005],\276[;.\276-\t\221\27562\374=\343\266\003>`\357t=\3029\336\275\360\215\014\276o\251/=\365c\206\275{\342.=\310~\332=\332~\206\275\310\347\302<\017U\027=\240s\260\275\251\270\016<\373\213\300\274)d\r\276jG\232=\022i/>\016\016\367\275\030\357\263=n\205\232\275Gp)\274\033`\004:\037\311\233\275\376\256\013>\240\356\353=\3606\340\273?\332\273=\021\256\002>\312\244\333\274\230|\314\274\020\263\030>\270\252+\274O\1774=\336\357\022<O\360\206=\257\366L<\332\335\377<\022\236\021\276S\031\327\274\204\335\224\275\367\374@\275C\302\260\275\344\340\327;\225\"\365<\232yy\275\350\314\207\274\337\340\034>%w\352:\277\034?>\2246 \276\225\334\341=\035\004#\275\236^\r>\327\372\034>Z\255\243=\243M\203\275N\205\275\275Z\273\314<\205\203\000\276g\252\221=e\341\320\275\244e\000>\325\025D>\375\003\242\275\013\276\031\275O\014\370\275\351\252\233<\233\360\342\274U\315N=*\177\344=:%X=\306c7>N\301\210\275\261\272[=\362r\202\274\345\334\302=\360\305\341\274n\\\010\276\005\325\240=/\327\n\276#\240\002\276\266\271\r=|\302\033=\240[9=\007k#=\250\2455\275\250I\352<|n<\275\207\277\337=T\006k=\254\253\271\274.\357\237\274J\262@;\212\356\014\274\321`[<N\034\'=5\276D\276\201\362\357\275\301I\205\275\007_\325\275aa\035>B>T\275Or\036>,o]=\372\264H;\277\260\245\274\342_\031<sm\271=\254\000=<u\234\353\275??\215\275\014\031\307\274\361\375\007\276;E\207\274#\366\277=h8(>m\233\027\276/\230G=(\2033>\243\353+\274g\2644<\210\300\355<\212#\232\273\220\210\247\274t\025\r>X\241O\275\337UN<\222\357\256\274\332\002\010\276\335\224\375=\324\0075\275S\302\027\276q\323x\275\214\234p=\274\344\014=\253\217,=\001\023\031\275<\217-\276S\277\236<\211\004\003\274\317\341\006\275\323J\223=k\311E<j(\351<EX\213\275K\0216>S\231\326\274g\"\217\275\223\311\247\273\241\341*\273\032dj;n\260\022\276\210Y\234\275\262\326\324\274\354\\\303\273\001\205\252<y\353R\276\234{\"=\314E\215\275~:\223=\302t0;\310\366\342=L\t\036>`\370\272\274hy`;\'\300\206=\323\372\017\276\002\351\325<M9\350=q\021\222<;\235\236=\016F\232\275I\314\313\275\250D\022\275[\330\326\275\312\204G\276\207\217D\275\255\256\025\275k\357K\276r\264M=v\361\033<(\006\364\274\230\351\243<\nN\237=\021c\217<\271\206\031>\362u{=\213\236\272=\333\332r<L\026\251=\252\021T=\014\010\217=\264\354\334\275\342E\022\276*\027\254=\221\314\315\275\327Y\n\276\247P\266=\026\253\370\274\372\226\212\275!\324\344\274\177\346\t>\254\2541\276\212\210\335\275\375\265\214=\356`?>\001r6\276{\"\t\276\227\207\212\27595\271=So\360<\2107\323\274e\235U\275\177!\305<\326\036I<d\207M=\303\370\256\275\370\374F=\312^S\274\376Y\206=\032=9\276\310Hc\273PI\220\2750b}\273\355\002\037\275\243\023@;\361MY\275)\307\254=ZM-\274\243\257P=\245\360@=\354zW\275j\236\232\275b:_\275<cO\276L\253\035\276\t\364I\275q\370\034\276\016\357q=\354\225I\275<-\242\275\002\246\004\275\221\240)\274\t\266\350\273\326 \022=T\367E=;i\270=\262\265\356=\365\304\256\275\317\3166<#\033\276=\353\242\352\275U\325A\275\034@\327=\377z\r=\n\324\205=K\202\202=\371W+\274\256\036\265<\266\010\207=\262\323\003\276\370 \266\273\3773*<W{\003=\207D\362\275\233\315\360\275\360\261>\275\023G\223;&\340\204=\033\242\033=\016\325\237\274\241\330\246\274\275\240\005\274\203\355\222\274\254\031\356<S\212 \276{\337o=\005_h\275+\332\010>^l\364=S~\333<J\327\014\2758%\003\276 \020\302;A+\223\273i\016#\275\303z\335\275\r\306\001</SH\276^IC=5\274\226=l\356\262<7.\001\276\336\032\316\274b\270\240=br5=\266Z\016;P\263\305\274j4z\274\002\345e\275\310\317\210\275\311?\324=_\\\376\275\321\262\010>A\374==\007\327\022\276f^\240\275\363\031\200=\017\333\346=c\310z=\3532]\275\000\035\335\275\233\251\221=j\t\202\274\346\360\243\275]\203\264=\377\217\344\275\206eH=\275<\303<\\\035\362\273\360\347s\275\313\274#>\255\'H=\250U\212=\243\304\264\275c\336\304\275\205\216\376\274\237\023\207\275\205I\257\275\211\007\021\276\366\311\302=\324Q\212<|\241G=(yi\275\243\261\316=\237_><r\317\276\275_[Q<\000\234\207;1\032-\274\201\371\332\274G\376\r\276\241-.=\010\212\244\274\2358\223\275\035\207\275<C\272\361\274\364\276\003\275s\322\037=uA\030\276\202on\275\360m\022\275~\016\273\275\335\335\211\275\351v\217\274\017\340v=\376\345\037\274\347O\337:{2\351\275\001h)\276H\367\006\276\214+\"\275?K\375<\307@\003>l\323H\275\n\263}=\270\230\227\275wK\204\275\220\034\243\275ib\304\274\213;&\275\326c)\276\220k\317=qg\\\275kh\220\275\254S\006>4q\211\274x\001g=\332e(;\217\350\216\275\262\240\031\276\235v\260=\347\321\006\273\252\362\035;\260}\222\275\'\214==P\325\273<\261\363\016>AnZ\275\315L\317\275&\003A>\023\206H\275\225a\204\274m\022E\273RE\304\275\371\217\255<2\033\201\275S1\031\275\373\261/>\007\345\267\275;\314\016\275/O3=\274N\025\274\200;\233=;\004\200\275\026\360\004\275\016\r\005=\010g\265<\252\317\202<\030{\323<\245\322\003\276W\327T<\233\266!\275\235\tB\276M\260w\275w:\374\273\272\224\221<^\224;\276\371>g\275\236u\014\276\3624\265\275\212&\363\274\373\242\214=)\217x\275Pv\374=\373\260s=\3507!\275,\374_=\257\201\212\274\357\226\303\275\317cz=Y\325\014>\370\020S=\367\253\227=\027@\037=\275\204$\275\251\375;=\005\235\030<o\221}<\276t\033\276D\334\202\275\227z\263\275\311\201\242\275\233\233J\275\tU\226<\212\222I\276\357N\344=\300\271\020\275\227\221\303\275oy\213\275\210\324\003\276\037e\311\275\344\037\t>\367k\215<X\377\367\275\"\237V\275\031\377\264\275A)B>&(\365<\276_\241\274\344\031\251\275\226\313\245\275.\362\370:\356\371\233\275\0143-\276\311\202\222\275\201\256\274\275\n\324\262\274\302X\321=5?H\275\026 \266\274\201\301\273\275\262q\214=\334#\252=j\363L\275\262;\025\276\3505\231=\230\216\'=\'3\"\276\236\242*\2767&\n\275|qX;\016n*\275A\005\230\275\364\267\345<\033\013[=\224\335o\276\331T/\276I\255\354=)$\264=`\247 \276\336\206\257=0\205\222=\\D\004>t\333\226=d\206\026>\017\035\003\276F\377!\276j_\220\275%\363\246=1\360\254\275\304\322\037>\304x\232;\010\027\260\275(\337\001=\245\255\027>%\340\034>\243\234\364\275\321HA<}Gr=P\274H=g\000\315=\313\030B=\364b\363\275\344\"j<e\262\002\2767\263\017\276\003\347x\275c\031\020\276;#\363=\247\201\014\276\367t\200=\266%)\2759\361\337=3\343^>n\'\322=D\373\274\273\240O\003\276\225l?\274\024OX\275\223%\270\274\316\230\204=<\222v=\244_\006\275m\227\350=\255\231\205=~\2329\275T&\323<\342\327\366=\312\034\033\275\331)\033=r\371g=\n\211\t\274;\322\214\274^\220\"<B\347\317=X\376s=.c/\274_Y\003>k\337\247=!m{\275uQV\275\241.\035=\265j\217=\204H)<\367V\276\275G\025K<o\200\204\275\034\223\270=\230\340\257<\024\314\202=e\313\001=I\366\335\275\271\3603\274&\3617>\373\003\000\276\033=\304<\234\337\243\273\n\260\353=\022f\277\274\312$\200=\222\222\357=r\2004=a\'<\276<\0003\275x\024\247;\212\020U<\331q>\275\n\\Q\275\306\213_=\346\013Z\274{\030$\275\270\221\n\275\324\"\'\276\267\275\240=\014]\251;\205\031\362\274ua\244\275?Q\310\274\037I\201=\317,\030>+q\216=\336\335\211\275q\216a\275\210\355\313=\027\212\350\274G\014\356\275\373Q\345\273\311\257\014=Y\037\307\275\347\215\222\275\227)\265<\302\010\260\274\231\363\360\275\024{\241<\335\360@>\000\215\306\275\351q\016=\301\220\030=\225f\343=\205\235\010\276\232\375&<\240\344c\275\373\325\223\275\321{\326<\275\347\005>\256\307\244\275\332=\027>\204bt\274;y\240\274\230\265\272\275\247\370\020>7\006:>O2C\276\245\320\001\276\026\"\222;nm\000\274\364\013\014\274\235p\342\275\217\312;>N:\207<\302\237\366\274\235\277G>#\214j\273A\330(=\360\211\241<(\335\241=\201\360\013\274lK*<\214;\003\276\312\321`\275\222\212(\276\316$\225=uC\321\275\250c\235\274\376\247b\274\002\035\347=\270\206,>STm\274\217\320&>\236\3721>\314\367\267\275\344\357\213\274\252\317\371\275\225\252u=\001\310\346\275\237\217\316=\205{\026\274RK1>M\314\227\275XSe\275\301dr\275\021&\234<\206-\n\275\237g\201<\tX\362\274\320\2415\273\240\223\365\275K\304^\274Y\n)=\313\2738\275$\201\262\275\023<X=G\020\252\275\273\266\322<g\270\265=\353\026\271\273\215oL\271\213\233\230<\016\031\031\275\201\024\253\275(\315Z>\356t.=\336\300\237\274\021\317\250=\355\337Y>\020\317\252=\234\213,\276Q\206\354=\214\330\266\275\006r\'>8\364\253\275\316\024\273\275\342\201\235=j\321 \276\202\033\002\276\214\016\312=\273\322\200=\334\267\032>\316Y.\276|\005r\275B+\371=\r1\013\273Ti+=\371\361\362\275&\251\201\275j\342\000\276A\377c\275\031\0065=\253[\346<z\353\374\274r\262\356\274\236r\306\274\313\266p\275iIE\274*\363\347=8\rt=\350^;\275=\177x=[CG\274M\277\273=\272\r_\275\271s\204\275\300\262\361=\321\211!>\267\316%\275Q\220\301\275\201\346\343=jx\362<h\342\013\276\327Q\311\2758\231@=r\273A=s}\316\275\265j\002\276\344\3309=o\no<\375\341\224\275\256\344\000>\0042z\275\247\250\332<j\030\004>}@\227;C)\257\274#\350\333\274ns~\275\022\270\301\275\237(\034\276\370\206\032<\371\262\304\275K\362\023\276f\346L\274?\317\217=\352\214\315=t\234\271=S~\026>`D/\276&\312F=\361\200\025\274\361\223\255\272\370\302\331\2750a\251\275\027^\261\275\222\323\237\275\324\026\300\275\177>\215\275`\246\321=u\236\371\275\337Z\363\275\252\306\347\275\351/\207\274\364\030\260=\261\005\347\275\212\220H\275\371\332\r\273\206\245\224\274C\211\013\276\275\265\n=\321\342D=O\336\003\276\200\204\344<\n\'`\274R\rQ>\320\352\314\2751;B<\227\372\354\275\266\223\016\275\234\351\346\275\r\331\277\2733\320\025\276r\0356\276\221\037\251\275\214\301\312=\235|\320=\365\263R<5\324{=\020\364$=\372\343N<x\242\306<\371\300o=\302\327\372=n\"\352=\2473\254\275\314PE=\'\207 \276\010\236|=\033\361O\274\332\2471\275\367y\t\276\330Au\275\207\371\220\275\327#\207\272\354<\026>\2422\022=Q\220?=/M\013=s\026>=\226M\"=[\246\321\274\322]\001<7w\250=R\265\311=\274\031\014\275\301I <\370(\235=\315\213I<\034\026B\276?\362\200\275\327\n\227=\237\364\355<2\235\006>\210\207\227=sT\217=\205\242\033\276\355\256R\275\031v\231=\274\201\376\274\361\316\033=A\211:\274\335\361}=\256\323\326=rc\001\275\340\265C=@$\306\274\3248\257\275*\177\322\275d$\255=6\371\201\2754\271X\2750bL\274\226\271\'\276\273\361\021\273J\236+>\034~\325=\037M\016=\360M\367=8K\345<>\371#<F\030\234\274z\345\303\275\n8\351\275o\017A\275\020B\326;\372\233E\276(\262 \274~\332\326;\026Y.:\365s\245=$\230\221\275\350uC=s\216\">p\023l\274\276\270]\276\311\340\233<%\222\037\276\367\202A\275\337;\t\276\363\270\216=\255\024#=\303\315\223\275\335\\\337\275\231\303\326=m\300?\275-p\277\275\010\254\275<B\020\300<r\212#<,H\016\274Ag\316<\275\'*\276\316\360\324<\021q\211=\277\355\017\274Y\324E\275&?$=\3613\220\275w\221\000=.`\270\273\240\205\366\274{\366O\275\310\275y=\001aV=6\202s\275\263C\211=k\312\251=\\m\216\275aH\205\2732\000\324=\3572\"\275\344?\224\275\301\320\363\275\274w\030>B\234\300=\027\211,\275>\366R\275\255\010\215=\232\254\320\275\026\333\273=\265a\357;\274\364G=\345\332\"\275S\313\344=\237\207=>\310\215\216\274\236>\333\273\334\003\026\275\026\255\314\274T\227%=\271\353\231=B\352\214\275\201+\333\275\353\353H\276\224\371\214=\367\005\"\276\222.\255=\372\205\250\275\344\036\n=\271\013\251=\340w\026\274.y\375\274S\027\270\274\001t\200\275Og\213=\030\346\342=5F\311\275\000\021\217\275\2044\227=r\242\227\275V\326L\276\337\0141\275g\205\252<\017\323\214\2744\200\022\276\'c\314=M\020\361=\336\010\210<\212Y\032=o\211\244<v\2538\275\303I\262\274\264:|\274\207\257\234<K\227\263=^\025\013=\326\026*=\366\207\307\275u\302\r=\3253\226\2754\313\314\275\324\234O<3 \227<\204\366\233<\355\035\317\274n\255\206<1\030\323<u\r\207=@\342H=\353\276\016\275Lq\344<|<>\275\377\305C=\310\222\022\276\277U\274\274 q\"\276\214\004\t=\326\027\372\275\021j\345\275~\206\322\275)\300c\274?\220/\276\354\327\261=_]\205=\013\312\303<\372\026\024<\345D5\276\\j\362=[_D=\345z\013=:\205\320=\226_;\275\n\232\243=\332^,>\232]\022>\325\244\245<\320-#=\274R\252\274b\270v=K\345\027>`eX<\367QB\276e\010\327=\216\215\366\274F\214\300\275$+\010\276\2262\360=\277\025\211\274\224\366\362=\361f\252=\353x\221\274[\021\352\275\224#\252\274e\\\325\275gI\023>\340\324\347\275h\372\337<\364;7>\236\010\233\275\037&\311<1t =tO$>\251\307\203=\003b\226=)\254\333\275\225mp\275\331`\254\275\326\030\276=\266\365V=p\r\317\275\313\3070\275<O\332\2755\341\"\276\351\217\321\2752\306\247\275\007\200\255\275#\267\365;B\335\021=^\313\344\275\333\262\275\275W+\204\275\270\256\214\275i8\n>\034 \324\272\211\2565\276\332&\026;`\223T=\361\205\303<\235\314\235<\330\240\'\276\0245\367\275\204\245\216\274\007\304\244=\221|\267\275V$\234<\202w\212=C\311\344<.f?<\336)\247=\253\365U\275\324S\007\276\037\263\213=N\304\t=\024D\202\275[\207X\274\236\321\245=\275A\353=\276i\"\275\303\030+;h\301\252=5\262\006\275\352R~\275\221\3122>\255\022)\274\010\250\353<P\320B=bg\226\275\235\266\365=s\031\323<\255\373\243\275(\177\314\275\016a\010\276&\025i\275#Z\257\274\332`\r\276\331\362?>:\301\263\274\363\307#>s\002e\275\004\236\275=\230\035\233=\213\357I<\261\366i\274\352|\250\267\350\240\242\275\240\320\277\275>\364\336=\236\251\001\276\264\316=>6\037\'>\213\311\316=\243\211\337\275\353~\001>\326Y\311=\275\247$=I?\266\275\300\027\247<V\376\333<\320\370\004=\223\353\343=6]a<-~\036\272Z3\274<\315\353\324;\004\014\003\275\241\223\007\274\202\'\273\274\"%d<\321\301\210=\004\022\006>+\373\236=\264\265h\275\307\027\270;\027\031\307=\227\235 >?\360q=\250z+<\210\030\276=\325\016\337<<\t\367=A\246A\275\247\344\373\266\"P\340\275\034=B=\365Y\026>!/W\275//\212\275\351\311\326\2753,\226\274\332\003\260\275\307\343\256=Ij\234=\255\000[\274\'\300\321\274\253\240\264=\272\312S=g\347O\275\373\204\374=s\365\'\275\2021\235\275\024\017;=d\332\023=\225_,=-\210?\274\245\367\203\274\311\032-\274dc\266\274\275\357\224=\3057Z=\244\366\273\275\221t\276\274\272J\261\275\205\322\241\274\207\276\355=\374H\343\275\032\361\333=\252\327+\275+^\021>N\261\202\273%\367\253\275\260\350\216\275\233Q\377<\330\246C\275)\341,\275B\352\023\275D~\026\276\203\360\221\274\321\006\026>\342#l\275:W\030=\274\000\037=\351\274\321\275q\201\250;\242\276\271\275\214q\205=\005c\313\275\350a@=\223\226\'\276\355\340T\274D\327\250=ka\231=\336\264\013<\2573+>m\361\372=<\017\214\273\307\037\n>\311\237\032=\326\211L\275X;\037=\007\000\303=\010\326\026>\305\360-\275\221\364\006=\2379\272=7\376\232\275T6J>04g\275\307:\022\276I\246\334=\362m\261\275)\t\205=\345Be\275\277\3363>E\323\026\276\375\362->h\014\273\275\373\016I\276CQ\221=\026EZ=\232~\231=}\002q<\301m\201=H\022\364=/\355\236\275\024\335,>\304:P\275\377\247>\2754\025\t>R\374@<\270\316\n\275X$\332=\320q$\275\026uc\275\005\021M\275\202\300\035\275\330<\305\274mx:\276X\017\330\274\001\177\245\275\022\004!\275\000x\007\276\0267\364=n?b\274\335\274\257\275\246r\353=7\024\230=\325V\004\276(\260\005>\356\340R\275\325\366\357\275\013\"\000\276\000N\266<\013 \331\275\333\325m\275\355\240\004\276f\272\377<=(\032=\006\031e\275\035\351\336\274\003\223\033\2758\n\010\274Fd\000<\3015\001>\216\2547\275\033N\374\274\352\323\300\275zS\370=\211N\262\275\342\036\364<\344\251\233<i\334\257\275\0204p=\322\342\013\276>\235\232\274\247\244\345=B%\327\275\312\010-\2763\267\t\276\024\310#>V\350\022=\271N\362=\332r\277=\2324\235\2753\306T=\234Y\203\275\307\363\024\276\031\003\214=\002/\255<9\376\360;o\336d\274c\263S\275~,J;\014J\223\275\270\242\233\272WQ\010\275\371\3426\275\005\374\234\275\205\256@=\230\204\252=8sn\275\317\213\336\275\304\225\311<\025\344\003>4\256\035>\204t1=\367\334\267=\363K\204\275\\f{\275\"\206\037=6\002\200\275n\221\273=]\313\264\275\251\360\016\276\210[\r\276(K\366<x\257\360\274\242\241\227\275\221\256\323\275\020+%\276h\003:=z\307\336\275\322S\277\273<\323\361<\026\3210\275\013\2528\276\353\304^=\025}\301\274f\217<>\334\303\302\275+\331\275\275r\234S\273<.\234=4\016\244=\013|\343=\211x\265<7\325\276\275\235\221\010\275\202\363\010\2768+%\276\327\035:\275\351}\320=\316\010 =\305\261\217\275u\\k\275\352\376\220\275\236\241\367=Q\341#\276\265\027\274=XM\335=\267\016\250\275\372\320\241\275\'u\315\275R-\241=\262\013\261\274}l\035\275\230\033\335:\025\361\234\274\"o\314\275Sl)\276\247\250\245\275\246\355\215\275\204\206\n>\347&\215\274C\247\240<\227^J>\270\200\305\275\006\002\360<)\366$\276\014:\241=\020\240\345=A\235\316\274\222GX=\343\016\274\274\270%\222\2752\263\220\275?q\242=x.\261\275m\216\277\275\2278\235:~k\213=\027\265\211\275Z\007\256=\340m\365\275J\022\203=\321u.\276\000&\'>\024\r\'>%?\036=\007\303\000\275\354\261\246<\251X\"\275\302\253\337\274\336H\016\275\377\037m=\261%\014\276\2003\r>\214\331\222=<\023L\275:Db=\235\275\362=\026\013\344\275\231\020\237\275e\200\326=\262R\n\276&\006O\2760\337\311=o\032\205=\024\010\"\276\240\222\t\276\221\2210;\260\272\265<\253wT=E}Q\275{\364\017>\240\237H\275\255m\344\275\\\270\222\275\275r\324<\363V\204=\2304\220=a=\013=zG\027<t\255\232<\257\376d=\374\334\232=\305>\005\276gS\342\274\330\016}=f\313\244\275m\217\017\276\265]\000\276y$\324\273\213\310\341=\316\355\362=5\274\362=\320&\337\275I\317\372\273\364\375.;\373\360\340\274\376 \300=\362\243B<m\220\315\273\246\321A\275\255\302\267=nY\341=\005\241\275\2757{\260\275\035\336\t=\362\330\035=Z\272=\276\273\216\354<\250Vo\275\3372\005=f\266)>I\317U\276g!\014\275kNP\275|q\010>O\207\003>^\016%\276p\244\002=G\007\364\275\267\365B>\272\322&=\301;C\276\372\t\212=\347<\271=\336\005\265<\033\'O=j\255\237\275M\251\r\274\307e7\276\277\311z=g\312Y\275\377S\000>\311\335\001\275\273\247\335=jj\251\275\303\211\201=\372H\265=\225\000|\275\352\333\227=\340m\375=\351z\207<\313\233\240\274~J(<\341\350/=:\307`\275\266~\306=\346\177@\275\376\276\356\275Z2\314\275\334>{=\257U\205\275\364\357a= h\r\276\360\304\211\275\205\317q\275\307\3515>N\253\254\275\260\326W<eF\315<I\322\317=\342\026\252\275\374=\241=\340\236\310;\224\343=\276\002\214\257\274\035=O\275YIu\274\303c;=9V\002\273\203_\355\275\326\3368\275\000\305\004\275\024\027\021>\234\301(\276 b\204\275\3678i=\355nI\275R\204\357\273\301j\271\275\021Z&=O<\366\274|\265\214<\354\216#<\301\001b=\026\364\215\273*\257\265=x\262\332=1\311\236\275t\240\276=\003\353\215\273\276#\034>\002\374=\273|A\361\275\247j\243\272[\353\271\273\026O\224=\242\002U\273\264z\312\275\263\022t\275\245\240\016=*O\210\2758L5\276`\374\261=T\302\003\2763I\013>\242\344\360=\227\366\326=\214\225r\275JC\200<\351\001a=]=\207<\\\341\276=\002\265\003\275!\210\216\275\227\311{=6\244R\276g\275\240<7\226\017=R\366\224=p\302,\275\310\211\224=\014.\021>H$\267\275\231\204\002\275\365\342\006>\232\214H\276\364\217\001>\003\256\013=\302\227\363\275\026\357>\275\332\346\243=\027\211|<&h\017\276|a\027=\2239!\276BO\316\274\007X\007>\341\240\277=v\257\220= \3663\275f\037\231=y\025\265=)\236\270=h\323\030>\027t\313;\245D:>\335\014P==&0\276&\231\305\275\254\341\207\274\234M$\276k\016\307=\245\267\'<Ey\333\274!\244\321=\231\353\302\274\352\336\033>\362#@=.\347\004\275ZC!>Hp\316\274\'\203l<\312\252\245<\365;r=\313\t\235\275\220\214\204=\331\252\265\275b)\354<\"v\257<\305\364\177\275\225\255\322=\273\247\256\275\031\322\215\274,1\376<\"5\317=\027\211!>B\221\235=\257\272\034=\361\356\232\273\245\307\310\274\314%\236=Y\357\330<dmj<\334\242^=t\246\177=\223\3137\275\004\252\204\275\374E\373<Y9\003\275\320\035a\275CC\320=\210\323\216\273r]k=\354\037b\275\034<\221=\327|d\275\311\326e\273\030#\222=\212\201\254=\311\370\014>\302\242\220=\264\003\370=\335D\365=_|\005>o\214-\275\361\260\222=34\354=s\363\006=\235.0\273\200\t\276\275\273c\260=\211nN\273O\201]=/]I\275&;\245\275\024W\230\275\377\262V=m\205*\276\2467\264<\277\354\013\276\001\360\370<\346\364\321\273f\267\013\276\036`\253\274\341\017\347\275\023\035\302=YAe\275L\257\304\275\373\313\234\275\210B\321:P\340 =g\200\016=\275>\314\273/\277\177=5xH\276\300\377\362=\326\017\352\274r\005\206=\335\203\021\275\262\270\346\274v\n\221\275\303\364\260\274\330\022\340\275P\"\302\275\177u\270<\313\245\321<3\021 \276\323+\220\2753G\030>\\\203G\275\271\245\035\276\024{\234\2732\377@>*RP=\260\322\t\275\244t\364<\3149W\275\253_m\274A\023\377\274\356\361!>\213X\205<_\260\273\275&\2223>\313\272\321=\371\010\322=Y\004\275=\367\312\020>\325R\210=-\021\371\275\351\302\233\275\366\201\023\275\025\210d=SS\322\275\347B\253<f\024z<,\025\276\273\036\342g\275\257\253\220\275\022Ae\273\274a\274=\304\t\005\276\216\354\250\275\021\365\234\275\207cN\2769\0204\275\350\r\252\275\200\313\211<X\215\215\275\341\317\314=}\334%\275w@\320\275K\375N\275\277a\265\273\017\3719=&V\323\275\377\n\344\2757\203\272\274r{\350=\340\325\221\275\243\305\311<\200T\264\274\200\305\252<\223\220\202\275[4F=\3011\014=y\341\334<Bc\373\274#\377\013=o\007e\273We\326\275\225\323\363\275g[\242=\247\261\275\2752&\240\275\024\263\326\273\201\204\255=\205w\312\275\361\007\006>\351\177/>\227n\301<F\035\022=I\317\030\276\036\341,</\374\244\275?\005\207\274yw\267=E\022\262=\360\213\221=c^?\276\245\325S\275V\342n=\303\343\035\275\337\022\r\275\271\205\030<;\267Y=\026\305P\2754\245\025=\356\343\013>\332\204\224<\0021\360<\346\210\360<\244 \244\275\263\355\253<#\2164=\2608\025\276\037\017C=#\275\242\275\236L =\214\366\240=\nk\034=\322\205u\275\267\224;\276\362\223\014>V\250\026\276\267z\206=\366\373\032>\320d\342\275v\331b\274So\000\276w\r\342=Lb0\275\240E\206<6\333\002\275\004\213\270\275\020\254p=!\026&\276\356#\243=\251\254Z=ds\023>\233\270;\274k\001\020<?\017\016>%\021\303=I\371<\273\327\376,=;2\304=\245G4\275\233\263\323\275\230\276\333=\226\206,\275\270\325-\275K&\212\275\014\2226>\204\345\327=K1\267=@\013\202\275\010\232<=(0]\275\320\363\226=w@\270\274\232Pn<\320\336$\275v\022,\276\"\210\013=\221\001\264=\340,\305\273<[\217<O\017\307<\234\213\215\275\'\003\207=\334\252\252\275\372@\207=\262\332\321\273]tU\275]\342\317\2742,!\276\023l\303\275-K\267=\003\204\260\275\323|\016>W\217\035=U\362\030<5A\325<<\272\275\275\2479\020\276\354\0164\276 \2578\274S\017X\276[\300S=\237\302\256\275\355\315\'\276=\347\256=\032\2746>\tt\275==\201\206==\034\003=V^\313=9\232\241=4V\242\2750\013\201=\3107\220\275\250T\033\276l\220\014\275\342l\325\273\035\277_=\033\027o\275\220\3323\275!P\260=\230b\257=\024z\266\274\327VR\2757x2\274\361\345\347=\365Y\337\275S?u<(\365\336=\361\360\177=j_\004\275\034\354\035\273XBz:\272\252\241=L!\263=\320)\217\274A\203o=\357i?=F\\\303=\277\332\001\276\270W\372=\226\"E>Lm\031\276(\217p=\017 g\273\302y\225\275\340\302*>W1U\275\337\353<<\2665A\276\201\336\272\275\024\'\262\275\250\266Y=IA\321=\216\277\323<\263\345H<\346\324\033>\210\022\032\275\252\3176=%\360\310\275<p3>I%\236\275\032\010\031>\014\215\235<\331\275B=\242\256[\274\375\224\212\275+7\246=D\220\020\273o]\242\275Z\217\350=\345Ab=G8\250\275\257\333\341<\017M\003\276L\336\214\275\315\347\037\274=\t\016;\037\007\354<\275Q\016=\004E\t\275\023d\024\276np\"<\202\341\245=J\223\223<U\320\372\275[t\241:2\345\253=T\260h\275j\3573\276C\253R\275\213\271\020\276\247h\232=\323\014<;\210\373\377;/m\021>\033%c<\030_a<\356\304\333\274\027\365u=\266~\372\275!\204_\273\177\n\006>\017xO\275tA!=\022#\271\274:\231\263\274\353\022\271=Y\321\036<L\236\030\276\231\243\016\276B\207\241\274\315Bo\275y\255\005\276u\323\204=_m<\274\355\317\246\275]6\030>\234\312\031>$\266N=\355\304\311=\'O-\276/\3141\276\214Z\200=SF3\275G\246\252\274\325\310%>\013\250\250= PM\275\2407\231<\340\306\261\274\035\335\263\275l,\360\274\340P\025=\010\241~\273\302\320->\273\375\010\276\316\0318=&\221\253\274\214\207\322\273\021\253\010\275{!\357\275\016\374\354\274\302\221\033\276\242\001.\274\236K\321=\034\2627>\341\320\216\275\240\003\300\275/>\247\275\262E1\275\337\254E\276\370\360\376\273\032\351Z\275@\346\331<:O\205\275\255\201\251\275\250\240\202=\244B\245\275 \3208=f\r\244\275\235\373Y>M\036\366=\351\3422\276\002oK>\021\230\031>L\033\026\275\321\273\303\274\271\004\000\276\366\251\213\275\237_\246\274e^\364\275\353\347\031>\354D\274=0X\236=\020t\265=\224>3=\205\323\227=o}P\275\267D\377==O\261=\276U#\274I\314\350<j\321\234\275g \263=z?\025\276\0170\036<U\256\257\275\010\235\001>\212\032\003\276}\205D\276W\021\315\275KoF\275\374\321\204\275\372X\230=s\300)\276AK\256\275\261\373\350=X\266\000>\226\'\264=#\371\221\274\004\353g\273V\303H=\235\306\352\274\2673\307\273*\221\252=\202 _=[\240\237=\312\247W=\231v,;&h\031>\212q\032\276>\326/\276|D\317<\337k\274\274\264\226\353=9y\213\275\346\023\034\275T\322\007=k.\227=\375\235<=4Y\244\274\3166\t\275B\372f=`\n\203=4\273\002>?\230\252\274\321@,\276\3052\341=l|:=I\311\030=7$\251\274\331\026\244<0X\353\275\236a\353\274{l\222<\217!\310\275\0220\223\274\014\263G\275$\204\033><\336\335\273\245\006\360\274\016\314\010>\370\036\004\275\017\005\017=\273L#\276~\017==\\\355\020\276\r\005b\275\211\220\315=\000n\014\276\023py=\307\023\263\275\2775p\275\210\207\350=\245\243\\\2755\202\005\273Z\207*\2752qS\276X\260\202<\333X\030\275\213A\004>=\353\314\275\340bw\275w|\276=\276\277\026>\200\251\007\276\313{A\274\t\273A<\003\033\211=\307#\331\275\rB\211=\311\376\262\275\253\034\341\275\217\010\242\275y\026\251=%x\263\274\247_T\275\270G\310=\'P\226=\203\2209=B\351\322<\023\360\200\275\026\201\315\2750\351\253=\332!S\275\271:\220\275\277\351\337<\256/\364\274u\261Q\274?\224\014\276\255(\037\275\375\r\344\275\265\200\225\274Q\006#\276\354\350\343<\tv\341\274:\200R\276\241\202\205=\335\016\330=Ud6<\343%\242<\264\230\207\275i\270\021>\373\210\213\275\365<)\275\321F\201=\242O0\274\034q\355\273\321\270^\275\211U\352=\005\354\000\275\201\310x\274\245^\265;\372*\003\275\216;+\276\212\341Q\275OZ;\276Q#\005>\344_\355\275\035#\352=\t\025\307\274Q\204@\275\001C+>H\361\314=\257\267A=\037\330\020<\242\267D\274e\"g=S{\206\275\301\222*\276\346\364\336\274\375\351\017\276J\034\270\2741\335\320;P\t\355\275\327\210\215\275>\027\273<\216%\\\275\255\306\240\275\312\\%>\n.\246<\305\007\005\276\360\355\027\276@\034\325\274-\330\224\274\342\253\223\275\266\221\203<\361\341\003>\013\336X\275z^>;J\231\237\2754^\245\272\225\251{=5I\261=_\232\346<\312lC=\003\3360=\001Jp\275\234\247\203\274\227yp=\255\022:>P\337\022\276\030\276\202\273\030\323+=\233\2170=\362\177J\275\334\nc<\305)1\276K\037\213\274Tj\r\276\025\031\340<\202\366\035\275\032\356%\275\327\360+=\361u=\275\260t\245<\262\275\335\2750W\006<u\230\317= P_\275\017d:\276\342\336\203\275\033\214\223\275`\243K>\014L\327=A%F\276hF\346=\006\234z<\216|\235\274\006\030\306=\224-F>a\242\356=e\256\240<\224>\021>\220\272\'\276\332\"\223<\226\341*>\005\272:=+\207\336=\246\nZ;.}\306=\373\327\224\274#B2=\304\251\304=\341\332\301\275\373\234v\274#\260\002>\252wP\275\307\0336\276l\351\\\275x\325\330;5\3028\276\331\007=;\335.y\275\224\313\271;7\014\272=\201\177\262=R\376\276\274\207\321\236=\371\222\235=\237\227\306\275\014\351\272:\243\347\002=\316\331\205\274\r\277W=G\\\036>\017\204~\275*\360$>g\231\002\275v\024\356\275\242\027\021\276\375+]\275\311I\344=\305#b=E\010\222\275\335q\267\275\3711\'\275\321\274\216<\326\357\223\274Yn\347\275\020\261!>\251\223\207\275>#z;\365\275\037;,\341\227\275\342\202\223=U>\000\276\357\366\313<\363R\204=.\264H\273\202\226d\275.>\306=\246J\327=d\316\255\275\262\356V\275\222\260\342\275\372Z\222\275\372\350e\275\000\032\226=\235T\312\274\225\337J\275\316\300\013\275\215\250\r\276\031K)<\005\325\347<\214\217\333;J\227\212<\035\0214=\331[\212;\234\305\260<B\245\241\275u\235\252\272\321.\321=\177\351\010>\036\224\r>\367\346\365\275\354\004\016>\2439\307\275\300\236\227=F\304?>\035\032`=+\270\010>\317h\005>\375I\216=d%\267\275\253\033\250=\366\374\232\275\330_\017\275\217\021w<\361\034S\275\263\306h<T\331\326\275f\320\037\275clu\275\213\251\025\275\252\226j;\272\365|=N|\350<7q\207=\r\214\031\276\314|\251\275e\204}\275\314\245\333<\240\227l<4\235\234=T`\021\276\210\026\317\273\353\371\316\272\342\027\330=\357,\344\274\360\037\360=~\274\325<\216@\006=3\001\301=i\317\025\275\202\360R\274\352\305\333\275\243>4\275\211pp=\314\rA\275-\013s\2753|\354\274\325\255\021\275E\326\212\275\031V\346=\331\201\005=p\203z\275\257[\036>:=]\271\250O\356=\261eW\275\000\372V:\227q\326=\r\215\205=\362\261\277=\312z\252=c`\362\274c\346\264\275^\220\301=\004r\326\275]\3544\275\256\362\250\275\020\023#\2761\276\240\275\'\017\232=h\237\260\275Q8V>(1\337\275vep\275\315Y\220\275\332\337-\275\320M\334\275?\032><Z1\005>\n\026\226<\344\211\256<\213\337\036>\202\241\016=\274Fj=\232oY=\270\326\370\275\362\3355\276\263\215c;\007J}\275QL\242\275Wg\307<\2158\354\275Gr\031\276\221\346\004=\302\223x\275\262H\234\275\367\220/\273\304^\347=\355\310K=\256O\256\274 \337\032=\031;\331\275\312A%\276\364\215\'>\240JW=\222\245g\272kV\367=ZD7\275!\211F=td\005\272\343M\224\275\270w\223\274#\t\261=&\340\002>\226\332\343\274i/4\2768\316\241\275\033[\301=\211!\246\275\0105\021\275\262\017\342\275ad+\276V\204\272\275\n\3238>\2316\006>a\340\204\274\303\022\301;\n\337I>\n\244\241\275\314\324\233\275\374\372\320\274\306o\332<^#\022\276g\350\032<#7\273\275\265\311\277=c\253\331=v\3601=\332\366\221\275\344+\253\275/\235%=\304Q\013\2769?!=f\002G\273\377G\003\275r\237\'\276\000\3141>\247\222\240=\220\265a\275I\204\251=vCg=\316\234{=\354\345\013\275\245=\t=\032\301\254=)y6\276c\307\207=\243\265/\275?\201\020=\316\346\276=\344v\271\275M]\203<\2140]<\306\207\265\272\226\005S\2742\333\201;\213\206h\275:\271d\274\re\276\275\225\371\006\275\201`\275\274\252[\026\275\007\323\317=\025\3248\276\335PE\274\241\307\373<\233W\247\275\377i\021\275\353V\002\276\333-\235=(\310\257\274BNk\275\312\246\373\275!t$\274\035e\351<\t,\034=\343\315\212\273\222\030\217=3*\373\274~\005.>\314\035H\275\220\200[=\221U\016=|\247\214=g\247\246\274Z\277\343<\267\\Q\275R5\241\275U!\371;\252\013\037\276\031\322X=\263Z\217=%\306\314<E\227\320;\207a\226\275P\223G=\3424D\275\024\264\034\275\357\276\211<\007\243\013:\204(\237=D#\364\274\017\n\327;\027\355\t>\301\000\344<\251H:=iJ\">\356`\r>\311%L\275\265R\216\274\t\365\342=\260j\202\275B\277\317=\363\363\036\276\223$O<:\315\332<l\201\021=\274\302\312\275\363\303\266\275\312w\310=\360n\375;\264<\204\275t\2046\275Q\257\r=\000\025#\275\227\023\366=8\247\327<a\310\321=\237\265\352\275\303\331%=\001it\275*\273k=s$\254=\262\276\014\275\2463\352\275W\003\035=.\216\227\275\301Sc\273<J\327<\347O/\275\321\203(\275\341:\274=rS\007;\231\315X=\002\3377;r\3011=\324\372k=\224\325\330\273\371\321\003>\213y\220\274\317]\022\270\304c\257\275\374C_\274\307X(=\272\201\027>\345\246\264\275\361\366\231\274`B#>E\347\352<\307\324\313=\350\245\270\275\223\335\327\274\204\240\332=\341\037\035\276\372\021\316<\333R\"=\332B7\276a\347\034\276\302\374R>\351J\265\275\003]\264=\243Kf=\022\335\203\275\023m\223<5}\346\273j\336\342=\n\023\232\275\301\257\251\275\320\343\267=\275\3551>&\230\322=e\350\003\275[\224\211\275\021\240\303\274Lv\022>1\013\203\275j\277\251=\010i\026\275\n\306\300\275\031\277\027>m\221\241\274m\374%\276=\264N\275\317\001\257<\212C\321=\322\007\351<q\214\235=\312\364\340\275iX\210\275\306Y\257<M?\202=N[d<\372\270\215\274\367\242\007=\365#\301=\263\235\345=\030\261\254=%\356y\275aLK\276\227\004K=NO\266=#\331\031=\207\024X\275\2452v;\241Q\301\275\226n\307;\324\336 >2\000W\275\033#\313\274\375\341.\276i\371\226=\256Q$\276\232$\024>\274;\205\275)U\010\275?\005\330\275\322\307\266\275x\346\222\275\244\327\331\273\330w\030=\363\331<\276\271Z\">h\301$<\'\374\350<\236\3434\275\024\324]\274\250\317\231\275\264C\322=M*\022\2766\006)=x\r\302<(\"/>W\345 \276>6\217\274\351\010\351\274\225\210~=\203tQ\275\306\226\037\276\000\234\301\275\304\216\352\275Q\364y\275\354@\013\274\261\246\272\275\032x\006=\360Rb<Y\331\317\274\254\245 \274\232\002P\275X\241I\275\377\006\317=\205\305\357\2758\337\004\2760\236\326=\370\205?\275\034\337\227\273]\354;=\001N\270\275\374r\237\274\336G\025\276\322\016\002=\363\000`\274\0132J\276X)\t\274\031 \016\276\013\243\t<\367T\376=(\351\240\275\252\212\246<}tn\275\t\306\036\274?l\033\275\2558\254\274\376\031Y\273\003\260\247\275y&L<\021O\234\275\321\247\220=\210\300B=\232\227y=^VY=\247~\032>\'\270M\275\302\374\'\275\007X<\276\205\321\261\275\323\007q\275\3468\035>\n\0016<\301d\334\273\233\334\201\274\333\326\255=4\024\225="
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "Const_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "network/weights_2"
      input: "^AssignVariableOp_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "\350\301\264<\n\327#<i\037e;\266\343G<d\247\227<\233\337\256;\274\272\177\271\212%\004<y\215B<1\375\226<\304\321\355;\n\327#<\361\322\275\273\367n\243<\243E\357;\272\353\320\271z-\002<\363`}<^,\323<=\240\301;\217\032^<^E\033\273FM5\273Vk\262;\220C\231<\312\352r<\360\322,<\355\247C<\205\373\207<\344\346\202;`\3153:\323)!<\351\n\253<\036\205p<\\\251\r<\356\302i<\306\232\270<\323\255K<\0051\330\271\363\365\203<\371\301\277;\370\353\324;\3513\335;[\362N<\t\014\267:\004\0236<ONZ<\331\225\347;\006W\345;\3276\240<x\307\n<\377\247v<\320\362\230<\355gv<\200\013\256<\020\342\247;MM\361;r|\031<\264\307\331;z\226#<\277\337^<|\274\323;\341\323\275;\353C\234;\n\327#<\265S\214<\"\025\\<\360\252\253<\355\204\014<t\254O<\363\215\361;\035\316\264<\n\327#<\226\210\010;\251{C<\251\364\222\272g`;<\314\237\303<\341\367\202<\315\214Z<\252n&<q3\322;\374\256\277\273*\343\331;p\237\013;Q\327\260<pw\224;\315R<;\333\373\356\27268\032<\\\264\243<*\270\251<?\264\270;V]\035<\007B\031<K\242 <k\261\254<\010\310\354;\n\327#<X\213\274<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "Const_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "network/biases_2"
      input: "^AssignVariableOp_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            tensor_content: "K\334j\277\360\0052\277\377\033\366>\244\003\236\275\247\001\233\275\222\310\372\276\315\257\310>\210\273\207>\253Hp>\364>\307>x\332\013\277(\016\013>\265\022\000?\325J\345>Z<\245;\316\206\257\275.e4\277\345\265\334\276\367\253\373\273\032\347\\\277\227\364\017\277Fc\306\274\335\306\275>\347\230J?:f\345\276\301=C\277\002\214\204\275H)/\277,\370a? ^\247\276\253\255\357\275\353\005\035\277\203\305}>{\004!\276\365\233\375\275\032\006:?\211\202\214\276\267\0231?K\2773\277\275\217\304>\215N\013?\"E~\2747\306\300>\306fF\277\260\2115>\005\321\333\276\373\037R\277\317n\324\2767\367\336>\275\324~\274\311\013\343=\255\370\205=\005f\n\277\314\311?\275\003\252\211\276\256\256\311>NG\320=s\222\213\276VL\010>\267S\026\277G\022D?\210\014~>I0Y>T\343\200=\364\202\214\275\224\273\004\277PD\271\276T\243U?\025$\375\275!W*>s\331\270>\020\333)=\255\031A\277O8\002>\277\203]?\200\235\037>\253\244\332=\206\300\315\275\346\201\016\277\027\250,?\304\010\026\277Z\0332?\3426\246\276V\226\016\277\254 \315=\363\'\026>\312+\275\276\273\327#\276\276VI?<QG>OG\377=#\205d>y%\024>\240[\203\275kG6<\272\252\355\274\366=\t\277E&U>\203\007\216\275\036\255\">\251\304L>we\000>\023\247\222=\'kW?\320\352)?\273\226\316\276+\330\037?\023+\343\275a\032\026\276\027p~>\223\030\224>d+H>\315\034\361\276\350%\250>\360\264Y\276y\363K>\312\220@\2777\021\215>\\t\017\277\337\212k\276\037\332\224>\030\024\021\277W\235\021\277\t*\332\275\315\332\316\276\366\334\232\276N\375\207\276(Ld\274\002\276\314\276\271J\023\275F;\020?\375\222)\276\256\021\303\276q\021\023\275A\273:\276\254\326<\277\200\367<>\262D\003\274\215$\306\275\245\255\030?\377\243\362=;0S\2761\224\373>_%\265\275\275\371[\276\024\331\353<\001\245Z>\3067N>5\234j>|\340\231=n9\330\275J\244\332>0\264u>\330\324\214>\274\3361\275\214\020\000\275\255\341\252\276?\304\335\276\234/z\277.\2450?{\254\025?cQ\013\2773J\223\276\262\372\350>\304\201r=\200\225\226=\366\255\333\276-2\201\276m\\\354>\206k\341;\225\003\t\277\237\025\246>]\370\207=yT\211\276\037\363\035>\353\302\271\275\272\274\266>\321\230\373>n\211\024\277\334;\243>o(_>U\247\253>y\247\033\277\302\037\255>\360\320)\277i\257\326<\310\312\200=\320\3746?UX\014?\231\211\356>>\244x?M\037\014\277\242kl>\035j@\275\013C\020\277\340\247\322>m\3753\277\356\351\350\276\254\206\204\275\260\306E\277\341\017\016?}W\336\276\353\027\037>\002\305\"?^\372d?\357&\311>V\237;\277\'/2>\327=\235<_\014\316\276\236V\245\275<P\025?K\217N\277\341h1\277\031\317\366\276.\007\353>\307z6>86\215\276a\337\014\276\026\014\024?\330b\031\277i\342\326=\207\313!\277 8\223>\300\3261?\243\201\006\275\24455?|\333\370\276\206\177\220>\351j\214>\275\350\314\275_\\Y\277e\330\016>\367\334\006?\0232\221\276\027\320\031\276\242h\'\274\244\315??\271\221\013\277 \036\375\274m\233\222=\n\nW>O>\336>`\356<\275k4\257>mN\031?(\310{>\000b\242>\276W\n?*\377\030>\267%+\277\230\310\242\276\233\272\025\275\255\354\327\276\357\361b\276}\2468?\250\206\231\274\271\223X\276\3610N\277bJ\377>T\2419>\342Z\277\276U\262D?\230\326\214>\331\222\365>6\311\010\277\013&\320\276\300&H=;\335\204>,H\303>\0133\200?\367\223\345>k\350\310\275\222b\004?\034\215\373>\314\332\036\277c\355\005\275\034q\020\277\312Bf\276N\320)?\030v\252\276T\212\326=\241a(\277\257g\005\277\247\323\334\276\250sF\276g,\266\276)\373\262=\325\315\265<GZ\327\273\r\3749\277\237z\033>\210?I?&\357\317>^:\247\276\2017G>7\374\010\276hR$\277\214\361\021\275\023\362{\277\\<\311>\257\000X>\361Ua\276h\357\000\277\024\355\306<\005\001%=_\221\275\276=\350\212\276\363p>\276\364\336\177\277o\037\316\275c\217\010\276\004b\275\276\2069\035\277\340\255\277\276\304 \204>\224\333/>\271\250\267\276\003\257\356>\351A\016\277G\220/>\226Z\\\277\200O\312\275\234\007e\277\3177\366\2767Mu>\315\211J\277\035\025\r\277\241\036\010\276\347\301z\276\031OO?\242\324\315=\017\211\214=4ML\277\356\313z?\251\313!\2762s.>\330N\306\276\331\365\217\276+m\234\276!0\306\276+\353\203\276\r/\221=\336+`\276h\022\030?\271O\366\276\337\350&\277\246Z_?\264\357\021>\252\324\351\276\252\266\252>\217\030\236\276tFF?0#\266\275\315\330\203>\000+\356\276\272\277\341>\n\234\232\276\343\205\344=VSl?K\014_\277\020<]\277)\362(?z\3067=\007\302\373\276!\215\006\276\010F\016\277\023\347\217\275`vU?\t+\013>\374\236A?\225_b\277\030\226\360>\247\224\325>\033b7\274\215w0\276\213\373\214=\032fx\274_\020{\275\316\342J>z\255;?\243\255=\276\217\313\010?\220\212\317>E\001O\277\027\324*\277Z \321>\205\270\346\2767\333\243\275\\0\023?\252](\276\335\242\t>m\362\017?/pl\277\\p\267>\217\204\006\277\322\306Q?\210\373Z>\004\033i\277\32351>"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "Const_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "network/output_weights"
      input: "^AssignVariableOp_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\266(\210\272\017\2441<\327h\230<6\037h<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "Const_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "network/output_bias"
      input: "^AssignVariableOp_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/filename/input"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/filename"
      op: "PlaceholderWithDefault"
      input: "save/filename/input"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/Const"
      op: "PlaceholderWithDefault"
      input: "save/filename"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/StaticRegexFullMatch"
      op: "StaticRegexFullMatch"
      input: "save/Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "pattern"
        value {
          s: "^s3://.*"
        }
      }
    }
    node {
      name: "save/Const_1"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ".part"
          }
        }
      }
    }
    node {
      name: "save/Const_2"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_c39bacd710ce48a1b9f3b9bd12694536/part"
          }
        }
      }
    }
    node {
      name: "save/Select"
      op: "Select"
      input: "save/StaticRegexFullMatch"
      input: "save/Const_1"
      input: "save/Const_2"
      device: "/device:CPU:*"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/Select"
      device: "/device:CPU:*"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "beta1_power/Read/ReadVariableOp"
      input: "beta2_power/Read/ReadVariableOp"
      input: "network/biases/Read/ReadVariableOp"
      input: "network/biases/Adam/Read/ReadVariableOp"
      input: "network/biases/Adam_1/Read/ReadVariableOp"
      input: "network/biases_1/Read/ReadVariableOp"
      input: "network/biases_1/Adam/Read/ReadVariableOp"
      input: "network/biases_1/Adam_1/Read/ReadVariableOp"
      input: "network/biases_2/Read/ReadVariableOp"
      input: "network/biases_2/Adam/Read/ReadVariableOp"
      input: "network/biases_2/Adam_1/Read/ReadVariableOp"
      input: "network/output_bias/Read/ReadVariableOp"
      input: "network/output_bias/Adam/Read/ReadVariableOp"
      input: "network/output_bias/Adam_1/Read/ReadVariableOp"
      input: "network/output_weights/Read/ReadVariableOp"
      input: "network/output_weights/Adam/Read/ReadVariableOp"
      input: "network/output_weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights/Read/ReadVariableOp"
      input: "network/weights/Adam/Read/ReadVariableOp"
      input: "network/weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights_1/Read/ReadVariableOp"
      input: "network/weights_1/Adam/Read/ReadVariableOp"
      input: "network/weights_1/Adam_1/Read/ReadVariableOp"
      input: "network/weights_2/Read/ReadVariableOp"
      input: "network/weights_2/Adam/Read/ReadVariableOp"
      input: "network/weights_2/Adam_1/Read/ReadVariableOp"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/MergeV2Checkpoints"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Identity_1"
      op: "Identity"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "save/Identity_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_2"
      op: "Identity"
      input: "save/RestoreV2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "save/Identity_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_3"
      op: "Identity"
      input: "save/RestoreV2:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "save/Identity_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_4"
      op: "Identity"
      input: "save/RestoreV2:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "save/Identity_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_5"
      op: "Identity"
      input: "save/RestoreV2:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "save/Identity_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_6"
      op: "Identity"
      input: "save/RestoreV2:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "save/Identity_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_7"
      op: "Identity"
      input: "save/RestoreV2:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "save/Identity_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_8"
      op: "Identity"
      input: "save/RestoreV2:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "save/Identity_8"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_9"
      op: "Identity"
      input: "save/RestoreV2:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "save/Identity_9"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_10"
      op: "Identity"
      input: "save/RestoreV2:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "save/Identity_10"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_11"
      op: "Identity"
      input: "save/RestoreV2:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "save/Identity_11"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_12"
      op: "Identity"
      input: "save/RestoreV2:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "save/Identity_12"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_13"
      op: "Identity"
      input: "save/RestoreV2:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "save/Identity_13"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_14"
      op: "Identity"
      input: "save/RestoreV2:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "save/Identity_14"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_15"
      op: "Identity"
      input: "save/RestoreV2:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "save/Identity_15"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_16"
      op: "Identity"
      input: "save/RestoreV2:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "save/Identity_16"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_17"
      op: "Identity"
      input: "save/RestoreV2:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "save/Identity_17"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_18"
      op: "Identity"
      input: "save/RestoreV2:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "save/Identity_18"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_19"
      op: "Identity"
      input: "save/RestoreV2:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "save/Identity_19"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_20"
      op: "Identity"
      input: "save/RestoreV2:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_19"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "save/Identity_20"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_21"
      op: "Identity"
      input: "save/RestoreV2:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_20"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "save/Identity_21"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_22"
      op: "Identity"
      input: "save/RestoreV2:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_21"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "save/Identity_22"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_23"
      op: "Identity"
      input: "save/RestoreV2:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_22"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "save/Identity_23"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_24"
      op: "Identity"
      input: "save/RestoreV2:23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_23"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "save/Identity_24"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_25"
      op: "Identity"
      input: "save/RestoreV2:24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_24"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "save/Identity_25"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_26"
      op: "Identity"
      input: "save/RestoreV2:25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_25"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "save/Identity_26"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/AssignVariableOp"
      input: "^save/AssignVariableOp_1"
      input: "^save/AssignVariableOp_10"
      input: "^save/AssignVariableOp_11"
      input: "^save/AssignVariableOp_12"
      input: "^save/AssignVariableOp_13"
      input: "^save/AssignVariableOp_14"
      input: "^save/AssignVariableOp_15"
      input: "^save/AssignVariableOp_16"
      input: "^save/AssignVariableOp_17"
      input: "^save/AssignVariableOp_18"
      input: "^save/AssignVariableOp_19"
      input: "^save/AssignVariableOp_2"
      input: "^save/AssignVariableOp_20"
      input: "^save/AssignVariableOp_21"
      input: "^save/AssignVariableOp_22"
      input: "^save/AssignVariableOp_23"
      input: "^save/AssignVariableOp_24"
      input: "^save/AssignVariableOp_25"
      input: "^save/AssignVariableOp_3"
      input: "^save/AssignVariableOp_4"
      input: "^save/AssignVariableOp_5"
      input: "^save/AssignVariableOp_6"
      input: "^save/AssignVariableOp_7"
      input: "^save/AssignVariableOp_8"
      input: "^save/AssignVariableOp_9"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    versions {
      producer: 175
    }
  }
  saver_def {
    filename_tensor_name: "save/Const:0"
    save_tensor_name: "save/Identity:0"
    restore_op_name: "save/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "train_op"
    value {
      node_list {
        value: "minimize"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
        value: "\n\rbeta1_power:0\022\022beta1_power/Assign\032!beta1_power/Read/ReadVariableOp:0(\0012\'beta1_power/Initializer/initial_value:0"
        value: "\n\rbeta2_power:0\022\022beta2_power/Assign\032!beta2_power/Read/ReadVariableOp:0(\0012\'beta2_power/Initializer/initial_value:0"
        value: "\n\026network/weights/Adam:0\022\033network/weights/Adam/Assign\032*network/weights/Adam/Read/ReadVariableOp:0(\0012(network/weights/Adam/Initializer/zeros:0"
        value: "\n\030network/weights/Adam_1:0\022\035network/weights/Adam_1/Assign\032,network/weights/Adam_1/Read/ReadVariableOp:0(\0012*network/weights/Adam_1/Initializer/zeros:0"
        value: "\n\025network/biases/Adam:0\022\032network/biases/Adam/Assign\032)network/biases/Adam/Read/ReadVariableOp:0(\0012\'network/biases/Adam/Initializer/zeros:0"
        value: "\n\027network/biases/Adam_1:0\022\034network/biases/Adam_1/Assign\032+network/biases/Adam_1/Read/ReadVariableOp:0(\0012)network/biases/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_1/Adam:0\022\035network/weights_1/Adam/Assign\032,network/weights_1/Adam/Read/ReadVariableOp:0(\0012*network/weights_1/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_1/Adam_1:0\022\037network/weights_1/Adam_1/Assign\032.network/weights_1/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_1/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_1/Adam:0\022\034network/biases_1/Adam/Assign\032+network/biases_1/Adam/Read/ReadVariableOp:0(\0012)network/biases_1/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_1/Adam_1:0\022\036network/biases_1/Adam_1/Assign\032-network/biases_1/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_1/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_2/Adam:0\022\035network/weights_2/Adam/Assign\032,network/weights_2/Adam/Read/ReadVariableOp:0(\0012*network/weights_2/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_2/Adam_1:0\022\037network/weights_2/Adam_1/Assign\032.network/weights_2/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_2/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_2/Adam:0\022\034network/biases_2/Adam/Assign\032+network/biases_2/Adam/Read/ReadVariableOp:0(\0012)network/biases_2/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_2/Adam_1:0\022\036network/biases_2/Adam_1/Assign\032-network/biases_2/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_2/Adam_1/Initializer/zeros:0"
        value: "\n\035network/output_weights/Adam:0\022\"network/output_weights/Adam/Assign\0321network/output_weights/Adam/Read/ReadVariableOp:0(\0012/network/output_weights/Adam/Initializer/zeros:0"
        value: "\n\037network/output_weights/Adam_1:0\022$network/output_weights/Adam_1/Assign\0323network/output_weights/Adam_1/Read/ReadVariableOp:0(\00121network/output_weights/Adam_1/Initializer/zeros:0"
        value: "\n\032network/output_bias/Adam:0\022\037network/output_bias/Adam/Assign\032.network/output_bias/Adam/Read/ReadVariableOp:0(\0012,network/output_bias/Adam/Initializer/zeros:0"
        value: "\n\034network/output_bias/Adam_1:0\022!network/output_bias/Adam_1/Assign\0320network/output_bias/Adam_1/Read/ReadVariableOp:0(\0012.network/output_bias/Adam_1/Initializer/zeros:0"
      }
    }
  }
}
