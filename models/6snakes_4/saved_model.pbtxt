saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Add"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_STRING
            }
          }
        }
      }
      op {
        name: "AddV2"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_aggregate: true
        is_commutative: true
      }
      op {
        name: "AssignVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        input_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "BroadcastGradientArgs"
        input_arg {
          name: "s0"
          type_attr: "T"
        }
        input_arg {
          name: "s1"
          type_attr: "T"
        }
        output_arg {
          name: "r0"
          type_attr: "T"
        }
        output_arg {
          name: "r1"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "BroadcastTo"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "DynamicStitch"
        input_arg {
          name: "indices"
          type: DT_INT32
          number_attr: "N"
        }
        input_arg {
          name: "data"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "merged"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Fill"
        input_arg {
          name: "dims"
          type_attr: "index_type"
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "index_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "FloorMod"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Log"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MatMul"
        input_arg {
          name: "a"
          type_attr: "T"
        }
        input_arg {
          name: "b"
          type_attr: "T"
        }
        output_arg {
          name: "product"
          type_attr: "T"
        }
        attr {
          name: "transpose_a"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "transpose_b"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "Mul"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "Neg"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "PlaceholderWithDefault"
        input_arg {
          name: "input"
          type_attr: "dtype"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
      }
      op {
        name: "Range"
        input_arg {
          name: "start"
          type_attr: "Tidx"
        }
        input_arg {
          name: "limit"
          type_attr: "Tidx"
        }
        input_arg {
          name: "delta"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "Tidx"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ReadVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "Reciprocal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Relu"
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "activations"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
              type: DT_QINT8
            }
          }
        }
      }
      op {
        name: "ReluGrad"
        input_arg {
          name: "gradients"
          type_attr: "T"
        }
        input_arg {
          name: "features"
          type_attr: "T"
        }
        output_arg {
          name: "backprops"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_INT64
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ResourceApplyAdam"
        input_arg {
          name: "var"
          type: DT_RESOURCE
        }
        input_arg {
          name: "m"
          type: DT_RESOURCE
        }
        input_arg {
          name: "v"
          type: DT_RESOURCE
        }
        input_arg {
          name: "beta1_power"
          type_attr: "T"
        }
        input_arg {
          name: "beta2_power"
          type_attr: "T"
        }
        input_arg {
          name: "lr"
          type_attr: "T"
        }
        input_arg {
          name: "beta1"
          type_attr: "T"
        }
        input_arg {
          name: "beta2"
          type_attr: "T"
        }
        input_arg {
          name: "epsilon"
          type_attr: "T"
        }
        input_arg {
          name: "grad"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "use_nesterov"
          type: "bool"
          default_value {
            b: false
          }
        }
        is_stateful: true
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "Select"
        input_arg {
          name: "condition"
          type: DT_BOOL
        }
        input_arg {
          name: "t"
          type_attr: "T"
        }
        input_arg {
          name: "e"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Shape"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "out_type"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "out_type"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Softmax"
        input_arg {
          name: "logits"
          type_attr: "T"
        }
        output_arg {
          name: "softmax"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
      }
      op {
        name: "StaticRegexFullMatch"
        input_arg {
          name: "input"
          type: DT_STRING
        }
        output_arg {
          name: "output"
          type: DT_BOOL
        }
        attr {
          name: "pattern"
          type: "string"
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_BFLOAT16
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_UINT8
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_INT64
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_BFLOAT16
              type: DT_UINT16
              type: DT_COMPLEX128
              type: DT_HALF
              type: DT_UINT32
              type: DT_UINT64
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "TruncatedNormal"
        input_arg {
          name: "shape"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "dtype"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_BFLOAT16
              type: DT_FLOAT
              type: DT_DOUBLE
            }
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        is_stateful: true
      }
      op {
        name: "VarHandleOp"
        output_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
        is_stateful: true
      }
      op {
        name: "VarIsInitializedOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "is_initialized"
          type: DT_BOOL
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "2.2.0"
    tensorflow_git_version: "v2.2.0-rc4-8-g2b96f3662b"
  }
  graph_def {
    node {
      name: "reward"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
          }
        }
      }
    }
    node {
      name: "actual_move"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 4
            }
          }
        }
      }
    }
    node {
      name: "network/input_layer"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 9
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\t\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.3333333432674408
          }
        }
      }
    }
    node {
      name: "network/truncated_normal/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal/mul"
      op: "Mul"
      input: "network/truncated_normal/TruncatedNormal"
      input: "network/truncated_normal/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal"
      op: "Add"
      input: "network/truncated_normal/mul"
      input: "network/truncated_normal/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights"
        }
      }
    }
    node {
      name: "network/weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Assign"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "network/truncated_normal"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases"
        }
      }
    }
    node {
      name: "network/biases/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Assign"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "network/Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul"
      op: "MatMul"
      input: "network/input_layer"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add"
      op: "AddV2"
      input: "network/MatMul"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu"
      op: "Relu"
      input: "network/add"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_1/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_1/mul"
      op: "Mul"
      input: "network/truncated_normal_1/TruncatedNormal"
      input: "network/truncated_normal_1/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_1"
      op: "Add"
      input: "network/truncated_normal_1/mul"
      input: "network/truncated_normal_1/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1"
        }
      }
    }
    node {
      name: "network/weights_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "network/truncated_normal_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1"
        }
      }
    }
    node {
      name: "network/biases_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "network/Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_1/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_1"
      op: "AddV2"
      input: "network/MatMul_1"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_1"
      op: "Relu"
      input: "network/add_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.10000000149011612
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_2/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_2/mul"
      op: "Mul"
      input: "network/truncated_normal_2/TruncatedNormal"
      input: "network/truncated_normal_2/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_2"
      op: "Add"
      input: "network/truncated_normal_2/mul"
      input: "network/truncated_normal_2/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2"
        }
      }
    }
    node {
      name: "network/weights_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "network/truncated_normal_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/biases_2"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2"
        }
      }
    }
    node {
      name: "network/biases_2/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "network/Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/MatMul_2"
      op: "MatMul"
      input: "network/Relu_1"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_2/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_2"
      op: "AddV2"
      input: "network/MatMul_2"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/Relu_2"
      op: "Relu"
      input: "network/add_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000\004\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mean"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/stddev"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3/TruncatedNormal"
      op: "TruncatedNormal"
      input: "network/truncated_normal_3/shape"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "network/truncated_normal_3/mul"
      op: "Mul"
      input: "network/truncated_normal_3/TruncatedNormal"
      input: "network/truncated_normal_3/stddev"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/truncated_normal_3"
      op: "Add"
      input: "network/truncated_normal_3/mul"
      input: "network/truncated_normal_3/mean"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights"
        }
      }
    }
    node {
      name: "network/output_weights/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "network/truncated_normal_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.009999999776482582
          }
        }
      }
    }
    node {
      name: "network/output_bias"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias"
        }
      }
    }
    node {
      name: "network/output_bias/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "network/Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_layer/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_layer"
      op: "MatMul"
      input: "network/Relu_2"
      input: "network/output_layer/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "network/add_3/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/add_3"
      op: "AddV2"
      input: "network/output_layer"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "network/output_layer_1"
      op: "Softmax"
      input: "network/add_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "Mul"
      op: "Mul"
      input: "actual_move"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "reduce_sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "reduce_sum"
      op: "Sum"
      input: "Mul"
      input: "reduce_sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "policy_gradient"
      op: "Log"
      input: "reduce_sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "mul_1"
      op: "Mul"
      input: "policy_gradient"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Neg"
      op: "Neg"
      input: "mul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Shape"
      op: "Shape"
      input: "Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/grad_ys_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node {
      name: "gradients/Fill"
      op: "Fill"
      input: "gradients/Shape"
      input: "gradients/grad_ys_0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Neg_grad/Neg"
      op: "Neg"
      input: "gradients/Fill"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape"
      op: "Shape"
      input: "policy_gradient"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Shape_1"
      op: "Shape"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/mul_1_grad/Shape"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul"
      op: "Mul"
      input: "gradients/Neg_grad/Neg"
      input: "reward"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul"
      input: "gradients/mul_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum"
      input: "gradients/mul_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Mul_1"
      op: "Mul"
      input: "policy_gradient"
      input: "gradients/Neg_grad/Neg"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/mul_1_grad/Mul_1"
      input: "gradients/mul_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/mul_1_grad/Sum_1"
      input: "gradients/mul_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/Reshape_1"
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/mul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/mul_1_grad/Reshape_1"
      input: "^gradients/mul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/mul_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/policy_gradient_grad/Reciprocal"
      op: "Reciprocal"
      input: "reduce_sum"
      input: "^gradients/mul_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/policy_gradient_grad/mul"
      op: "Mul"
      input: "gradients/mul_1_grad/tuple/control_dependency"
      input: "gradients/policy_gradient_grad/Reciprocal"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Shape"
      op: "Shape"
      input: "Mul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Size"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/add"
      op: "AddV2"
      input: "reduce_sum/reduction_indices"
      input: "gradients/reduce_sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/mod"
      op: "FloorMod"
      input: "gradients/reduce_sum_grad/add"
      input: "gradients/reduce_sum_grad/Size"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Shape_1"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range/start"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range/delta"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/range"
      op: "Range"
      input: "gradients/reduce_sum_grad/range/start"
      input: "gradients/reduce_sum_grad/Size"
      input: "gradients/reduce_sum_grad/range/delta"
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Fill/value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Fill"
      op: "Fill"
      input: "gradients/reduce_sum_grad/Shape_1"
      input: "gradients/reduce_sum_grad/Fill/value"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/DynamicStitch"
      op: "DynamicStitch"
      input: "gradients/reduce_sum_grad/range"
      input: "gradients/reduce_sum_grad/mod"
      input: "gradients/reduce_sum_grad/Shape"
      input: "gradients/reduce_sum_grad/Fill"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/reduce_sum_grad/Shape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/Reshape"
      op: "Reshape"
      input: "gradients/policy_gradient_grad/mul"
      input: "gradients/reduce_sum_grad/DynamicStitch"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/reduce_sum_grad/BroadcastTo"
      op: "BroadcastTo"
      input: "gradients/reduce_sum_grad/Reshape"
      input: "gradients/reduce_sum_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape"
      op: "Shape"
      input: "actual_move"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Shape_1"
      op: "Shape"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/Mul_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/Mul_grad/Shape"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul"
      op: "Mul"
      input: "gradients/reduce_sum_grad/BroadcastTo"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum"
      op: "Sum"
      input: "gradients/Mul_grad/Mul"
      input: "gradients/Mul_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum"
      input: "gradients/Mul_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Mul_1"
      op: "Mul"
      input: "actual_move"
      input: "gradients/reduce_sum_grad/BroadcastTo"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Sum_1"
      op: "Sum"
      input: "gradients/Mul_grad/Mul_1"
      input: "gradients/Mul_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/Mul_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/Mul_grad/Sum_1"
      input: "gradients/Mul_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/Reshape_1"
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/Mul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/Mul_grad/Reshape_1"
      input: "^gradients/Mul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/Mul_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/mul"
      op: "Mul"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: -1
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/Sum"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul"
      input: "gradients/network/output_layer_1_grad/Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/sub"
      op: "Sub"
      input: "gradients/Mul_grad/tuple/control_dependency_1"
      input: "gradients/network/output_layer_1_grad/Sum"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_1_grad/mul_1"
      op: "Mul"
      input: "gradients/network/output_layer_1_grad/sub"
      input: "network/output_layer_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape"
      op: "Shape"
      input: "network/output_layer"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Shape_1"
      op: "Shape"
      input: "network/add_3/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_3_grad/Shape"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum"
      input: "gradients/network/add_3_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/output_layer_1_grad/mul_1"
      input: "gradients/network/add_3_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_3_grad/Sum_1"
      input: "gradients/network/add_3_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_3_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_3_grad/Reshape_1"
      input: "^gradients/network/add_3_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_3_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      input: "network/output_layer/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_2"
      input: "gradients/network/add_3_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/output_layer_grad/MatMul"
      input: "^gradients/network/output_layer_grad/MatMul_1"
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/output_layer_grad/MatMul"
      input: "^gradients/network/output_layer_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/output_layer_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/output_layer_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/output_layer_grad/MatMul_1"
      input: "^gradients/network/output_layer_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/output_layer_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_2_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/output_layer_grad/tuple/control_dependency"
      input: "network/Relu_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape"
      op: "Shape"
      input: "network/MatMul_2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Shape_1"
      op: "Shape"
      input: "network/add_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_2_grad/Shape"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum"
      input: "gradients/network/add_2_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_2_grad/ReluGrad"
      input: "gradients/network/add_2_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_2_grad/Sum_1"
      input: "gradients/network/add_2_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_2_grad/Reshape_1"
      input: "^gradients/network/add_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_2_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      input: "network/MatMul_2/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu_1"
      input: "gradients/network/add_2_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_2_grad/MatMul_1"
      input: "^gradients/network/MatMul_2_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_2_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_1_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency"
      input: "network/Relu_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape"
      op: "Shape"
      input: "network/MatMul_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Shape_1"
      op: "Shape"
      input: "network/add_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_1_grad/Shape"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum"
      input: "gradients/network/add_1_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_1_grad/ReluGrad"
      input: "gradients/network/add_1_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_1_grad/Sum_1"
      input: "gradients/network/add_1_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_1_grad/Reshape_1"
      input: "^gradients/network/add_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_1_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      input: "network/MatMul_1/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/MatMul_1"
      op: "MatMul"
      input: "network/Relu"
      input: "gradients/network/add_1_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_1_grad/MatMul_1"
      input: "^gradients/network/MatMul_1_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_1_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/Relu_grad/ReluGrad"
      op: "ReluGrad"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency"
      input: "network/Relu"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape"
      op: "Shape"
      input: "network/MatMul"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Shape_1"
      op: "Shape"
      input: "network/add/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "out_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "gradients/network/add_grad/BroadcastGradientArgs"
      op: "BroadcastGradientArgs"
      input: "gradients/network/add_grad/Shape"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum"
      input: "gradients/network/add_grad/Shape"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Sum_1"
      op: "Sum"
      input: "gradients/network/Relu_grad/ReluGrad"
      input: "gradients/network/add_grad/BroadcastGradientArgs:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/add_grad/Reshape_1"
      op: "Reshape"
      input: "gradients/network/add_grad/Sum_1"
      input: "gradients/network/add_grad/Shape_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/Reshape_1"
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/add_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/add_grad/Reshape_1"
      input: "^gradients/network/add_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/add_grad/Reshape_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul"
      op: "MatMul"
      input: "gradients/network/add_grad/tuple/control_dependency"
      input: "network/MatMul/ReadVariableOp"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: false
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: true
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/MatMul_1"
      op: "MatMul"
      input: "network/input_layer"
      input: "gradients/network/add_grad/tuple/control_dependency"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "transpose_a"
        value {
          b: true
        }
      }
      attr {
        key: "transpose_b"
        value {
          b: false
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/group_deps"
      op: "NoOp"
      input: "^gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/MatMul_1"
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 9
              }
            }
          }
        }
      }
    }
    node {
      name: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      op: "Identity"
      input: "gradients/network/MatMul_grad/MatMul_1"
      input: "^gradients/network/MatMul_grad/tuple/group_deps"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@gradients/network/MatMul_grad/MatMul_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "beta1_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta1_power"
        }
      }
    }
    node {
      name: "beta1_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta1_power/Assign"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "beta1_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta1_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Initializer/initial_value"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "beta2_power"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "beta2_power"
        }
      }
    }
    node {
      name: "beta2_power/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "beta2_power/Assign"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "beta2_power/Initializer/initial_value"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "beta2_power/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam"
        }
      }
    }
    node {
      name: "network/weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "network/weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 9
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights/Adam_1"
        }
      }
    }
    node {
      name: "network/weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "network/weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam"
        }
      }
    }
    node {
      name: "network/biases/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "network/biases/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases/Adam_1"
        }
      }
    }
    node {
      name: "network/biases/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "network/biases/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam"
        }
      }
    }
    node {
      name: "network/weights_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_1/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_1/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_1/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "network/weights_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam"
        }
      }
    }
    node {
      name: "network/biases_1/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_1/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "network/biases_1/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_1/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_1/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam"
        }
      }
    }
    node {
      name: "network/weights_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "d\000\000\000d\000\000\000"
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros/Const"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Initializer/zeros"
      op: "Fill"
      input: "network/weights_2/Adam_1/Initializer/zeros/shape_as_tensor"
      input: "network/weights_2/Adam_1/Initializer/zeros/Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "index_type"
        value {
          type: DT_INT32
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/weights_2/Adam_1"
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "network/weights_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/weights_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam"
        }
      }
    }
    node {
      name: "network/biases_2/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/biases_2/Adam_1"
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "network/biases_2/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/biases_2/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/biases_2/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam"
        }
      }
    }
    node {
      name: "network/output_weights/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_weights/Adam_1"
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "network/output_weights/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_weights/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_weights/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam"
        }
      }
    }
    node {
      name: "network/output_bias/Adam/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Initializer/zeros"
      op: "Const"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            float_val: 0.0
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1"
      op: "VarHandleOp"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 4
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "network/output_bias/Adam_1"
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/IsInitialized/VarIsInitializedOp"
      op: "VarIsInitializedOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Assign"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "network/output_bias/Adam_1/Initializer/zeros"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "network/output_bias/Adam_1/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/output_bias/Adam_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/learning_rate"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.999999747378752e-05
          }
        }
      }
    }
    node {
      name: "minimize/beta1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.8999999761581421
          }
        }
      }
    }
    node {
      name: "minimize/beta2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.9990000128746033
          }
        }
      }
    }
    node {
      name: "minimize/epsilon"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 9.99999993922529e-09
          }
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights"
      input: "network/weights/Adam"
      input: "network/weights/Adam_1"
      input: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases"
      input: "network/biases/Adam"
      input: "network/biases/Adam_1"
      input: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_1"
      input: "network/weights_1/Adam"
      input: "network/weights_1/Adam_1"
      input: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_1/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_1"
      input: "network/biases_1/Adam"
      input: "network/biases_1/Adam_1"
      input: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases_1/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_1_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_1"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/weights_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/weights_2"
      input: "network/weights_2/Adam"
      input: "network/weights_2/Adam_1"
      input: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/weights_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/MatMul_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/weights_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/biases_2/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/biases_2"
      input: "network/biases_2/Adam"
      input: "network/biases_2/Adam_1"
      input: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/biases_2/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_2_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases_2"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_weights/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_weights"
      input: "network/output_weights/Adam"
      input: "network/output_weights/Adam_1"
      input: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/output_weights/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/output_layer_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_weights"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta2_power"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/update_network/output_bias/ResourceApplyAdam"
      op: "ResourceApplyAdam"
      input: "network/output_bias"
      input: "network/output_bias/Adam"
      input: "network/output_bias/Adam_1"
      input: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp"
      input: "minimize/update_network/output_bias/ResourceApplyAdam/ReadVariableOp_1"
      input: "minimize/learning_rate"
      input: "minimize/beta1"
      input: "minimize/beta2"
      input: "minimize/epsilon"
      input: "gradients/network/add_3_grad/tuple/control_dependency_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/output_bias"
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: false
        }
      }
      attr {
        key: "use_nesterov"
        value {
          b: false
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/mul"
      op: "Mul"
      input: "minimize/ReadVariableOp"
      input: "minimize/beta1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "minimize/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "minimize/mul"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "beta1_power"
      input: "^minimize/AssignVariableOp"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/mul_1"
      op: "Mul"
      input: "minimize/ReadVariableOp_2"
      input: "minimize/beta2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "minimize/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "minimize/mul_1"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize/ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "beta2_power"
      input: "^minimize/AssignVariableOp_1"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@network/biases"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "minimize"
      op: "NoOp"
      input: "^minimize/AssignVariableOp"
      input: "^minimize/AssignVariableOp_1"
      input: "^minimize/update_network/biases/ResourceApplyAdam"
      input: "^minimize/update_network/biases_1/ResourceApplyAdam"
      input: "^minimize/update_network/biases_2/ResourceApplyAdam"
      input: "^minimize/update_network/output_bias/ResourceApplyAdam"
      input: "^minimize/update_network/output_weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights/ResourceApplyAdam"
      input: "^minimize/update_network/weights_1/ResourceApplyAdam"
      input: "^minimize/update_network/weights_2/ResourceApplyAdam"
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^beta1_power/Assign"
      input: "^beta2_power/Assign"
      input: "^network/biases/Adam/Assign"
      input: "^network/biases/Adam_1/Assign"
      input: "^network/biases/Assign"
      input: "^network/biases_1/Adam/Assign"
      input: "^network/biases_1/Adam_1/Assign"
      input: "^network/biases_1/Assign"
      input: "^network/biases_2/Adam/Assign"
      input: "^network/biases_2/Adam_1/Assign"
      input: "^network/biases_2/Assign"
      input: "^network/output_bias/Adam/Assign"
      input: "^network/output_bias/Adam_1/Assign"
      input: "^network/output_bias/Assign"
      input: "^network/output_weights/Adam/Assign"
      input: "^network/output_weights/Adam_1/Assign"
      input: "^network/output_weights/Assign"
      input: "^network/weights/Adam/Assign"
      input: "^network/weights/Adam_1/Assign"
      input: "^network/weights/Assign"
      input: "^network/weights_1/Adam/Assign"
      input: "^network/weights_1/Adam_1/Assign"
      input: "^network/weights_1/Assign"
      input: "^network/weights_2/Adam/Assign"
      input: "^network/weights_2/Adam_1/Assign"
      input: "^network/weights_2/Assign"
    }
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
            tensor_content: "R\0209>\372\r\236\274\375w\025\277\351\'\336\276r\250\247\275\351Y\226>!.\326=\214R\206\276\237\033\021\277i\313\253>\340\355\373\276\n\352Y\276d \353=\006\3045\276\256\243x\275p\222\232>\307\326\204>.\373c\275ma\362\276\007\304\025>/\311\274=T\374\000\275\224\"\224>\245\347k\276;T\351\275\007\211\376=u\202E\275v\215!\277\231\021\215\276\007\312\242\276\224\013\347>Jy\263\274\357\310_=u/\252\276\207\307p>\365\r\003\275-\334\005\277\027\370\336=\367IJ\276h\306\243=\030\317\340>\261\317\000\277\037A\017\276hj$?\261\311\027\276]\345\354\274v\014Q\276\264\304\365\276\361\36068\304\"\032\277\370\321\327;\245\031\001?[\3703\276\001\367\304=\034\217\334>\t~\327=D\340\010\277\250\270\031>\253X/\276Nq\316\275:\325G\275\245\001\021\2763ck\276P#\370>\237\247\023\275\307 \331\276\010f \277\363\202\210>\277Y\232\274\023D\255\275\0034M\276\352\263\364\275y\031\017?s\340\217\275?\323\326>M`L\276%\353$?\266a\347\276\0045\217\275CKD>\031\"r\276\256\016\020\277gyI\276\230x6>\206\350\200>#\246\223=E\312\230\275\221f\r>6\nk\2769d\314>\245dZ\276r\010R\276\320\316/>\237_\357\276S\032\255>\251\204\302\276\255\037\307\276\315Td>b*\032=\2159U\276h!\227\2759\nc>7\227*>\231\244\350=t\270b\276\005\316y\276\330%\322<\226\r\314\276\267\356\320>\343\277\211>\222\236&>\254\224\010>}\253\246>\346\331v=\311m\264\275o\032M\275\344\023\017\275\352T\332>\351?\021\277\334\025S>\0362\247\276\243\260\002?\247\n\246<L\324A\276\276\030\300=\353\304L>u\361\370>z7\361\276\220>\002?\031\331->\260\365\027\275\303\335\341<(\376\336>\311\255\215\276\277\251\366\275!\233\351\276\305\234\t?\370\336\351=Tgc\276\240\233q>\260B\354\275\236\355\236>\200\3660>I\354\204=\217@`\276\253\021\002\277\275\272\226\276og\236>T\250\017>\r\322\315\276\326\255`>\242\302\245\276gc\327=\255`\334>\357Ak>\356\354\265>\275:\214>ua\206\276\251\"\256\273\300\265\005\276A\251\215>\377Ig<\362^\004\276h\221!\274(-\027\276\212x\340>\302\314\214=H\240J>\317\341\204>|\345\237\275\273\350b\276z\205\327=\336\333v\274\307O`>\026\264\031\277@\314\277\276\361\360\302=\363y\326>\202\310&>\361\360\033\275Vm\373\276\251\322\005=Gu>\2765\341\204\276\225C\263>ww\253>\301\367\017>\314\240\222\273\323\310\331=\265k\370\276\376?\201=\033A\036>\210_\327\276]\315\007\277_\234\365\275\016+\315\275\207\222\374>x\266\243\276jd\013?k\337\335>*\325\017>\2642\002>\367\016f\276hj\010\2769\302\005<\"?\026>\2641U>\037\034\342>}\242>\276>\350^>4\3026>RY\257>\375\024h\276\264:%\277-\375\373\275\342\362\224\275|((\276& \314\276\374\2752\275\343\016\264\276\242\n\263>W\234K\276](Q>\306\332\263\274\270C\253>L\305\274\276\237~Y>\026\376\376=<\201@=\320\353]\2766\236(?\373\307\250\276$=D>B\374\234=\353\034\300\276\356\246_\274\024\363\273>G\322\027?\330\353P>?\021\362=uEp\275`\321\316\276kN\237>%\233\322\276\373\013\340<\\\316\302>f\243\240\276\341\321\324>M\212(\276<\322y\275\341\245\201\276h\253\014\277}\314\361\275\300\031\004?\241ZV\276O3\r\277P\022\320>\034\242\021\275M\001\014\276A\010\341\276\223\243|=\267\206h>\r\330\205>\231\345\213\276E\366\326\276\300\"\204\276z\301\346\276:k=:\365R\261>\014\200\"\276\232\302\'\276v\211G>m\230\233>Sq8\276\303!\331\276Q\205\263\276\330@\014?,s\324<\032\326r>\230\024\306\276\3174&?\227\371\340>[\'\362>\316\367\030\277C0$\276~\251\251>\353?S<\344\332\250>\371)\213>d6\200>Y0H>\265Z&>\362\355*\276\213DK\276gh\224>Fy\247\275\272R\337\275\346\331G=\346\254\031=9\026\244>\260\362\\\276\335\322\020\277\257B\252\276\020Ov><)0\276\205\376\275>\350\374\030>\356\005\262=\025Ot\276u\017\274\275[.\361\275=\243\340\275\324\003\326>\277-\017<\213\215\\\274\347\014\014\2774U\021\277\300\234\214\276P5$?#\224\200>w\224\314\276@\267z\275\334\337\217\273\016\341\033\277\326\301\302>w\032\177\276\022B\273>\nG\026\275V\350\304=@4\241=\226\037y\276\004\246\374\275\350!\233=\342\263\204\276\306\317\013?\r0\010?\336\r\241\276\232\\\311\275\350g\252=D\227\302;2\031\240\275$pM=\027\002\022\276\376\275Z\276\346\324\344\273\202\341\267>cCa\2765\177\"\275\276\311\304>H\017\252\276\006U\"=p\216\244>7\272\251>\324s\212=\357\032\255>\341\245\345>\325\350a\276\032\033\241=\2137\031?\247\306\367\276\227\304\237>R\347e\274\375 \260>\306\342\227\276\302^\036>\223\031\221>\364\233\023\275\376\003\330\276p1\274<\246GQ\276zl\023>,\016\367\276\364\210M\276\235w\r?\036\211\250\276\237B\000?\026\375\241>\316\241t\276z{\204\275\310\322\010\277\225\320\270\276\327\371*\277\223\233\321>\265\355\343;\326b&\276\230\205V=\303\350\027>\325\200\n>\243\016q>2f{>\230\213\304\2755\363\321\276Qg\243>\026_\241>\277c\324\2769\013\203\276\275#.>m\024 \277\214\324\035\276\304\261\013\277\244as>\030\307o\275\341\201R\276\373X\316\275\207BQ>,\037\224\276K\336\216>\22691\276)\341A>\336\265,\275\275:\253\2741\213\363\276\336\r\350>x\006\030\277\302\033F>\t\003\325\275\345e\250\275\241\240\032\276?\031\022?/\206\215>K\0272\276\304\266\254\276g\007\317>\032\251;>\213\2101>\323\200y\276`\025\234\275\314m\242\273\330\202\030\276\200\035b\276\340\031\201\276bI\233\275\353\337?>\322*\304>|\025\n?\0027B>+7H<O\324\317\275H\033d\275\305\262\213\276TY\006\277_\324\005\276\206Q1\274v\251V\276\345\275W>\324a\017?^\372\231=b\365\017?V\262\030=\344\273\276=\205\357\001>\341}\205>\357N\360\276\027\277\r?g\357\201\276d\252\371\2768@\335\276\324\264\352;\355<\322>\340\374A>\322\256u>\352\244f\276I\203\345\275\332\205\243> \370\375>\021L\315>\324\252\337\276R\206\367<\367\331\342\275\307\030\000>\200^\206=\217\016\263\275[@\014=\023t\354\276\355\265\n\276\335\301\024>\021)(\277\226!\013?\356J\013?\350\372D>\212\200{=\273\352\031?\273)\203\2767\364\r\277\267\324\300;!\t\035\277\242e=\276\030\371n>L\235\245\276\316}\207>\244\353\">\247\237\202>\222\322\357\276P\361\255>S\350\003?\312a\020\276\261\271a>\\R\273>Z\002r\276\177\234\210\276\301.\301\275\204?\337\276\026\344\035>\324\334\006>d\027L;\3629\377=gp\352=\005\206\363\276\027\335\351=\315\271U>\274H9=)\224\352\276.\252\326\275\270j8>\305\345\314\276I7\205>of\226=\022:\340\276\013~C>\320m\217\276^\331\215<G\234 \277\305G\n?\010\254\200\276x\230\037\277*\253\235\275>\007\344=\200\232p>\210\230\332>\326Y\227>\010\240\263\276$6\027\277\251k\331\275\221\r\'>8n\216= \330\246\276\250\214z=\177\311\333\276\300\317h>\007\337\372\275\n\373\325\274\031\327\352>{/\205>S\214\217\276\206$\034?\337o\270\275\364\016j<\326\025\303>\276\351\317\276\321V\263=+J\321\275O@\010>\267 \036=_\237\226>)}\306;\311\005e>\247\232\001\277v\2543>\261\261\204>\264W\211\276\327\014\274=\020;\275>\256K\324\276FO\311=\203\365\314\275\264\300r>/.\321\275\372\215\360;\033\234Q\276&\365\201>\342\370\217\276-2\214>\365\225\001=\227\327\232\276Z-\264\276\324\227s\276;\001\221\274\301\233\357\276i\205\335=\307\205\332=.7\350\276#\305\217>g\254\"\275O\334v\276\362*\210\275\363\\\275\2765% >\322\t\311\274\"\316\250\276[)\237\275xU\242\276\236F\032>\213\227\211>\366\016\231\275T\2339\276\301\016\371\276^Q\335>\222Lx>\310\206\000>\275`\251=\215\225_>\325\362\322\275\240\266U\275\365\\\302=\252\006\023=@\241O>zp?>+\004\261=b\236\227\274{\320\276\276e\014 =4S\337=?\313:\276\233\235\273>R1Z>\024\344\314\275>4\202>Y\343\252\276\326O\212\276|\353\312>q\224\250\275\276\215\321=\370r$?.\2543>O\274\'\277\316\201;>r\357.\277\376\"?\274\312\206\322\275\020\327\246>mD\237=\330F\354>\245{&>D\335H>uy\365\276I\322W>\025\277\027\276\322/!\275\371\267_\276\023\305\277=HL\303\275=\226\341=G/\326=J%/\276\372\336~>\212\202\240>4\'\r>#v\021\276\0361\344=n\326\013?\026\336\257<\037!\257>\343\345\007\2778\303\272=F\220\327\276!\231\217\275/\230\t?\321\244\200>\234$\374\276N\330[>\235G\004?\232\3277\276\211\365\001?\311\224^\275\207&Q>\355\310\310\275\177\274\035\273/KO>\256\013\215>\353\303r>j95=Gi\377\276\342\220\271\275\312\013\233\273\n8\267\276\267\r\346=\332\241\212\274\253\216\274\276Y57\274\350\023+>\245\022\214>uJ\201>\034u\323>\257\007$?\265\'\322>\234_\362\275\337\327\374\273\237\305\266\276:?\023>Z\025\213>\373\341\221>?\2416>\307\250\324\274\256\001\022?\003f\343\276\311(\227\276 \235\257\276\034P\021\277\216Bi=\"\200w>\337\351#\277\223\022\377\275K+S>\227\361V\276\213\250\200\276\032\010\021>\330\205\204\273\276jR>\r\324\230=u6x>\276:\035\276\354B\026?06\037\276\3716\253=\355\344\372=V7H\275\266\230\204>\007\3055=J51=\322\324\n\277\206s\304<\"r,>s\230T\276u\261\010>\223u\010\277,\347_\274!\320\260\276!\021\357\275\340\207m>@\200-\2772\262P\276\233\016(\276\252\326\321=\273,\003?\024X\371>\017\255\263=\251\224\020\27736\014?s\223\272\276t7\252\276\0053\273\276\004\325\300\276t\347\265=\274\262\n<\301\234\211>\303\007\005\276\002\246\333=\376\262\t\276\232h\014>0`\010\277h\n\017>\367\032\231=\234\006\347\275:\306a\276\334\3520\275.[V>\253^=>\326zd=\030{%>r\035\231\275U/\003=\347C\216\275\226\316\345\275\233\216r>\023\036\021>a8S\276?\376\267>\213U\232<m\266l\276\361\361\311>P\261\001\277a\252,=\033!\003\2777\343\002\276\261\340\000?\355\336\367>\007\0045\275\323\362\313=,1\006\277\214\027\026\274\\\211j\276\320\237b>\203\357W<\351\245\002>|E\332>g\200P\276\375\013\023\277\373\034\367>\310\243\207\276\3247\240\276\016\335\014=\254\216z\276\365\377\340>rT\213>\010\205\252\275\213UG\276-\351\225>e\365\251=[~\264<!\330\004\276-\370\357>k\312\272\274E\270\211>\370\375\253>(i!?\036\020\300>\373Z\364>b\355\265\276\366\247\323\273pD\020\275Y\324\233>G\332[>\227Ga\276\227\327\234\276\007\201):KJ\215>_3\002\276\014\236\020>b7!> u\216\276}\376\002>\256\232V\276}\317\361\276\367o\037<\003\re>\357wY\276K\033\373\273fu\325<}\020\370>:\343\036\277\005\025i>8R\266=1l\344\276$\025\004?\351\226\227=\374\t\251\275k\276b\275@\031#\277\342Ro\276\334\362v=@-\226=\346\251\001?\331\'\251>\315\374\272=\024\021\033>\344\022\013\276\231f6\276z-\221\276(\003\335\274/@\335\274\305\362\020?\016\002\017>\271\024\311=m\017\217>\025\017\"=;u.\2776\257\207\275m\037\270\276\273\006\036\275p\353\202=\3359\t?-\375\300\275;;U>P\332\020>\217h\223\276#\276\026>\374\316\356\275cXj=\016AE\276e\314L\276Z\353\207>\253u\201\276\324\222\007;?\342\321>*\022\217\276\304R\">\317\215u>\363La>\371u\242\276\210\200\246>\255\330\034\274\3547\356\276\356\264\240>S\023\325>\231\301\036\2778\030+?D\330.>\352\036\306\276\362\016\345>zG\005\277\235\362>>j\274\024\277?\321Z\275Q\324\221>\032\013\245>\337k\252>\025LL>>\367U>\321]\254\275b\233#?"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp"
      op: "ReadVariableOp"
      input: "network/weights"
      input: "^AssignVariableOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 9
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "-:\205<\345iG\274REt9\266\263\234<\333\017\301<,D\352\272\232\217s;*\010\323;\275\000T<\234\2330<@\323\301\273\326\314\025=P\036\022;\362\352-\274\0236T<\210j\355<\217\036G<\004\346\200<w\353\331<M\245\356<\253\224\323<\351\252\341<\376\350\026<\365\002\026=D\342\005:<\276>\271\351\340\267<\256|\260<\363\272\303<\254\035\264<\353\355b\274\n\315\340<\004\267h< \355^<H\220\207<|\255\000<\342p\204\272a1\271<\214\360^<q\364\n=O\345\370:\261\216\354;v\373\202<\'\251\202<\205\"\252<\375l\227<\303;\232\273%\312\303<iC\363<\016\rA;\352\336\035\274\320:\232\273\177\302\363<\311\251\206<\030Y\200\273\366\327e<\237\374#<}J\217<\351w\274<\216^\343<\321a\226<\014\256\322<\007\256\247<\301\014H<\363\256\226<\347E\306<\246\310p<\340\256\001=\367\002\270<\336\032)<\034\306\217<\303\016\326;\337hL\273\016\274\237<tHr<I\021\252\272\331L[;\266\204\220<jH\325<\335\313i<\275\032\016<&y\251<\272\025\007<\030\240\343<\205\035F<H\271\364<\2573\313<r\316\374<G_\025\272G\372\241<\327\252\347\273\322\233\333<\205\030x;\034C{<\243\222\270;\250\256\225:x\351\203<\'\324\307;\333\317\033<c.\036<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "Const_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_1"
      op: "ReadVariableOp"
      input: "network/biases"
      input: "^AssignVariableOp_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: "8\273\200\275g8x\275\231\250\260=\3620\251={5=\275Rl\204\275\211\307\037=\037\247!\276\016\336\320\274\313i\004\276\332\340\370\275X\026$\276m\245\255=i\014[\275\375\371\002>\360\037\263\274$1\312\274\333\215\304\275\375{\325=\261k\017>i\254\323:\037\006K\273\335h\246=s\tP\275\247[z=\024\206\322<k\007\325<\022\326+<\246\365\002\276\302\334\200=\373\350\265=s\250\272\275\\\2179=$P\'\275Z\330\200;\270\312\240<\273\273\351\275\320n\310=\003S(\275\345B=\274J\226\201\275\335\361\254=zYU>\"!\233=\221\236)>\227\270d\275\363\233E=\215\2163\275\363\257j<gN\337\274\031Q\304<t~s=d\0027>:0\302\275wK\236;\212F\017\275\250\224\225\275v/\223=\353#z<*Y!\276\231\214:\275%\034$\275e\227\316\273\212^\034>\232\372\362<&cC=`\322\007\275\373\007\037=\272\"<>\223\367\002\276\004\025z\274/\207\033=\264*\021=\222gf<\241E\004\276\245\024\203\275\022\356\324\274\tj\005>\202\252\206=)B\201\275\322\255\304=9\332\217\274I\344x\275\274 \300\275)\t\007>]\020\030>\026\307\246\275$>\211<s\361\315\275Z\'\t\275\277\2223=\005\302\236\275\267%U;\274\024\233=*C\364\275^\277\r\275\212(\022\276\327\245\227\275\331\016I\276\235 \036\275\005\343H<\366\273\355=\316z\260\275L\347~=\202\351\037>\351a\211=\367\037\211\275\230\262\342\2740\237i=?\362\t\276\207\242\336\275\210x\000>\211\317\227=t1$\274\332\036\236=I=)\276,\206n\275\251Y\215<~\240\n\276\004\224;\275>\240\310\275~\255\367\272\350\377n\275\335\035\n>\023\003\r=\261\200\325\274\262\ro\274\25054\274\317\'s\275\022\007\001\276\323\360\271\275@\345\336<\366Q\251=\0175\037>@;\265\275\"\366\323\275\241\205\232<\000u\360<\230\020\231=%\233F=N\355\370\275\" \303\273\325\351\212\275\341;w;\207\365\032>\3317\317\275%\347\r>\023\033\026\276#\221\r\275\3039\273:\021D\325\273f4\260<\257u\010>\025f%=\0243\244\274{\271\262<#\2176>\002\231\000\276\224s\007> \330\316\275\300\265\253\272bQ\242\275C\277\226<\007\331\305\275\267\235\316\275O\335\353=3\267\253\274\312\377\224\2751\276c=\321<\377=\2674\035\276\346s\220<\021\302\374<\266\204C\2747q\276:\020\021\367\273\374\364\036>*\362\022\2769#\247\275\031\206\t=\276<\247\275\270BA=\212\226\226\275\2408\371\275\230?\277=\276;\254=K\333\252\2755\336f\275\312yB\274)\244\303\274Q\205\367\275O\3656=\007\002\013\276e\2061>\231n\331<\231\311\301<G\016Y=<.\333\274\355VN=.7\020<\277X\255=\272\235\031\276\327\017\266\274\r\034*>\213\002\214=\257I\255\271`\337\327=\242\025\233=eP\267=i\201\031>\351\004e=\000\242\366\275C\235\235=\330\224\006\276\363\2477=\272\361\370\275j\363O<\310\310\'\275\362\022$<\313\025}\273\013\271\271\274k3I\275\374jX\275vi1>\222\377s:\322\302E\275\224q\226\274\201\275\243=\347h(<q\2557>\272\330\325=\310\241\320\274\254\025\276;\242m\226=\234\207A>\252. >\342\377\276\275(g\257=\262)\227\27326\223=r\342-=\363\260\265\274\266^W<\251\325\023\276\'\027\302\274\232\221\311\275?[$>;\265:\275A\223\177\273#\322\'>2\\\341\274[\330\022>\236O3\275\347\262\270\275\260\226\357\274\226\304\323\274\253\321.\276\000\271\341=\337\362\235<u\326\277=\206\321\275\275\377\024{\275\233\245\343\275\301i\022>\374\260\344=\177\332\350=\234\026\215=\2406\224=jId\275\021\\\034>\005fC\275\275d\001>\356\200\202\274J\321\270=\212\004\210\275\275\330P=\247_\345\275\364h\314\272\2202\007\275\267\275\003>\277Q\230\275P\323\231=\r\246v\2732\245\221\275\344k]\275%\251\357<\3415\006\275@k\235=\3202\272\275d(>>q\n\361\275\232%\205=\\\3510\275\244\313Z=rm\365<S\314@\276\302\362\371<\007;\226=7\025\326=L\010\363\275\216\206\223\275\362\324\216\274)\215\244<BO*=\306\377Q\275\"\252\267<\363\177\003\276\210SD>\177\025;\276\307\234\'=o\227\274=\266]\030>\203Y\367<\226\376\231\275\250\247\003\276;\005\'>\202R\216\274\333e\231\275\031\000\337=d\224\020>\234\225\033=IBr;\"\255\305\274;\272\033>?\345\335\275\254\334#\275\220\341;\276\377n\025\276A\315\321\275\"\nM<\237\n>>vT\021\276N\207\353\275\205\003\030>\355\037\262=\n\t\273\274\344\257\354=\335=\004=\345?M>\r\205D\275\242\367O<\325\010\312=\203\201u\275\007h\346;}\243\020\2765\223\364\275p\275\003\273\024:\304<\336\336\027=\264x\210=\000\300\207<f\230\244\274L\215\325=\312\312\022>\'\035!\276\004\242\017=\201\374\227=\006\207Z=-\000\243\274s\306<=s\rw=\214\262\335=\000X\006>)z\277<\030\233\215=\254\344\226\274\230\235j=3\217\327=\341\236\210<\257\230\300\275\205\257&\276)\204\365\274\36080\275\225\000\320=\353\312\267<S\270\271\275\016\030c\275&\306S\276y\'\225<\254\374;=6\237f\273\353\341B=zs\033=\333@`>6\321\232\274\231A\204\275\266\373x\275\335\232p=\005;+>\231\341Q\275\322\263\235=\353\030\365<\316\2112\276!}\316=\tG\202\275\246\026N=K$`\275\365~\277=\332|\327\275\036\2171\276\260\032\315=Fw%\275H\225\242\275d\366\212\275d\2305>\215J\262=\234\027\300=\337W\240<\033\253\340\274\273\0135\275\271=\340<\3313\330\275\373\261a=\017\211\237\275d2\252\2749\243m=\213o\313\274\nZP\275L\357\201\275\2016\277\273g\0261\276\220\311:=\023\257<=\207\362Z\275\335\013i\273\216\r\213\275r\257\220\275\353\001\203\274\373\244\323\272\347o\231=\272f\335\274r\261\372<\014\232\037\273\352\221\263\274\220\270\033>)\0079>\356Y\324=\004\331\200\275\240\'n=\353\222\024\276\235\341]=:\243\n>8\223\213=\247\335\373\275W[*\276\375\331\226\275m\016o\273\313V\260<\376~&\275q\323\215\275\340\006;\274x\275\205=Zs\010>\207\237\315=\233\341#\276\250\265\217\274\223g\326<|\177\020=\266\314\370=:H7=\262\341\'<\177\035\301<^\251*\275\030\013\205=\230\200\177<#\006\230\275j\353(=f\377|\275\307p\032<\331E\245\275)~\013=q<\200\275\021-\"<\373u\306=v\233\220=uu\357=\246m\037<s6\003<\352\3746>\352z\206\275i\201\350\273\300\016z=,l\r\275\020D;>\002\3576>\035\222\232<A\362F<\272\020\257=AP\t>^\261\247\275\3759`;>Kq<\336\372\314\275A\261H\274\312`Q=x\230\325\274\240\325k\275\036\326\004>\365d\000\276q\243C\275\"\315F=\037\016\020\275.y\020\276w!\025>\257\343\222\275\\\226:\276\304\304\264=\377\204W>[x\215<y\014c\275lw0\275\303\251\236=LOM\275\256\325?>%r\033;\204w\337\275\324\351U=\256q\016\275\256\024\372\274\t)c\273\367\326r<9_O\276\2630 >\010\026\352\275\"\326\316\275\342rP\275\363\r\372\274\272\232F\275\350\"\301;\2563\264<%\334\275\275pn\322<mG<\275\2748\010>7\347\017\275\354\211O=|\347\204\275\240q\214;|\310\327\274\366\316|=\246\316D\275)\373g\275k\331J=\311=\312\274\224\2458>\033m\214\275\3330\006\276\000\2464\2756q\274\275/\375\216\275\315\327\200<\310B\002\276d\210\313\274\301\324\223\275\0363\331\275\220]Z\275\312\226T=E-\230=\177p\251=\341\200\221\272\373\302\324\274\231_\346=\373\221\333\275l\032\262=\301\271\326\274\005\210\206\2739\225\305<v_^<N\341\246=\223\374\233\275\"\323W<L\343\227\2730\214\335=9M\277\274E\020\333\275M\001\017=\362y\n\276@q\204\274W\026k=0\235\213\274kA\270=\372\274\r>#\376\216\274\360\342\276<\204\207$\275\260A\277<$\225C=Y#\336=\333\211\221\275\324\302.<.\377\336=\351\236b\274\373@\274=\345X4\275\370\350m\275\263\222\025=\035\306\304\275\247\033\360\275\254\224\363=\220\013\016>\220\023\'>*\355r<X\335B>a\354\261=\250\267\305=]\337\205\275\207\304\331\274w\254j\275{wA=\000\254D>\331\264\374=4l:>\205\0239=\347\030\331\274\014r\331<\265D\034>(7\251=]>\233=W\0147\272\037\343C\275\213\334\370<\340\216\242\274B\247 >\264\n\350\273n\342\213\275\355\017\234=\350o\007\276\240d\201\275\317\000>\274\002\016\304\275\226C\325\274e\034\214;\\B\203\275&f =\341(\264\275\202H&=Ag~=\003\025\275;*\226\251=\314\215\305=Y\256\034\276B\242`\275\364\354s<\356\261\272\275\213U\231=;\014\\=\322\344\206=\205\343\232\2753f9\275a\321\304<\007\360\202\275\262\364\211\275\275\206\317\275)U <\035\262\204=?\021\326:P\020\331<]6]=\262\024\315=;\021\335\275\024v\217;\217\375\030\274\264e=\276\275\267\037=\237Jj\275\320\030\323=\351\340\235\275.\251\302\272\362Wv\275\252\323\3658\n7\317\275_\340y\275\301\234F=\342\336=\275\024\322\342=\211\247_\275\017\347\325=\345/\301=\242IL>\201\256\024=\361\262\317<\243\235\331\2752g\276\275\022\262\001=\331\036\277=J\"\004=\371?\342=\252\263W=\224w\n<,\242\206\275S\'\215\274\353~\276\275\3535\363;\004\214\316\275\355|7=\177\273\251\273\202k\230=\361{^=,B\202\275\276\277\337\275\340\002\341<d\302*\275\3327\277=-\373\323<B\305 >\031}}\275\203<\257\274\212\024?\275\331\200>\274\242\333b<\322Y\017\276}\273~\275\311\037\346<\037g\305<J\337\345<\323\037\013>\357m\367\275ZC\010\275\375\213\331\275\222\204\276\275\036\212\277=[\376W\275\220\375H>\352\315\366\2752x\213\275\366%\246=\346\340\314=\372\303\033:\354\310\020\274:\300\001\275\263\312G\275\361\002\t>|\346\355<\215j5>\356y%>\023\304\245\275ei\021\276\240\254\344<\026\004\244<\306\3751\276i\233\250\275#8\356\274k\353\000\275 \354\243<ugq=\227\201,>g\006\033=\353\214\024\275\035\217\026<\376\252\020\275\177\004\312=x\243M\275i\367\226\274\327Y\225<X\253\342\275\363\202\201\275_\317\372\274\234\314\016=|\370\254\275\253}9\275\265\365\">V\276\346<e\300\006\276\224\263\305==\225\246<+\274l\275*\201\343=\303ii\274\3477\244=e\314X=\037zG=d\334\245\275\201`\211<\261%\244\274\361R\034\276\276j\314\273\020\355\233\275\217[ >\344\367\311=\207x\261=\273\237\316\275KDH=\225\242\272\275\205\322\205=4sw\275.\031\'\276\\\006\036\275\365\177\235\275?\211\265=P\322\312\275w\306\'>\323\253D=\351\344\245\275\267\376\304=\340$6=\221\300\213=B7|=\031uJ\275)\260.>\357m\360<l\343\350\275h\352J\275d\021\301\275&\030\373=\007\265I=7\"\275\2751\\];\357*\254\275\341\004\222<I\214:\276\020V\262=\014m*\275\323x\010=\010\317E\275\013t\243=ax\212<\201\231\367\267[~&=\320\004\215\273\207\304\'=G\337\205\275\312M\331<\331.3>W<m\275{\307w=K\305\366\275\021\0019=c{+>2\003\003>\353;\264=\\\232\355\275\035\237\010=\351b\232\275\317\343\036<\013#\323=!\272\240\274\215\207\363\274\302\236\354=\227\343\302\273\004W\352\275m\265\210\275k\365\232\275\307\301\027\274\326a\002=\312\232\336<\254\304\'\275\355\335c\274x\241\250\275>\363T\274\276pt\275!D\326\275\314r\006\276\316\336\246=17\326\275yN6<\214\320\353\274J\0264=DG6\273\"\2031>\177\037U\275\274\206\002>\366t\347=\240\275\274=u\330\254\275\272\246\206\275#\034\350<\334\374\004\275g\300\224\274\210_\026=\363/\"<\247\354\330<\247G\265\275\025\2616>\216\031>=8\340\357=\262\317\024=\037<\351=\260@\265\274\000\256\033\275]\033\257\274\006\232\345\275\306\321\344=\212\337\017\276!c\227\274\303Ue\274\200\036\326=\004\2072=-3\351<v;(\275w!\202:\002\t\242\274\'\036\217=\263\205X\275]5\224\274\002\216!\276S9s:\225\014\277\273\264\313\247\275\233\0039\276k\222\237=\\\332\345\274\361\234m=\347O{\275\263\265~\275\213J\331<H\245g=W\346\031>\324\026\214\275\317\257\'\275z\r\026=p*\032\276aBg=\320\271y=,<S<\365[\255\274\303\031\315\275\352y\215=`)$\275\356\326\360=\000u\311=:\306\323=u\301\301\275u\327\200\275\347\262\256\275y`\311\275G\217\026\275\375s\311\275\307s\256=z\034<\275\264\206\020\276\325?\205\275^\230I=\254k\026\276fo\270<\3079\320=\001c\227=@\001\033\275\024\346X;\\\246\237\275\206o@>\204\037\231=\216\373\331=\031\357\r>\001\223U\275\267\336\314<\254J\272==/R=\3039\301\274\026XH>\227\315\333\275>\350Q<]\330!>\313\\\247=\304!\211<\200}l=\274I&>\352\341U=\356\3726=\265\363\265<\033\2635\275\035f\217=\225\324\343=\215M\222\275/\000>\275\326k\210<\302v\207\274kO\007=\2617\331=u3l\275\260}\t\276|\301\312<\'\316\372\275\302P\036\275Be\347\274\033!^\275a?s<\261\215\307=;\317=<\032\352\350=\023\000/>~\323\270<}\227\255=\272ZO\275\216\313\236\275q\254U\276\'\234\320=\206\276O\275\373\203\211\275\301\254\205=x\237#\275Q\266\">\370\334\365<\020\315\375<\372\354\363;u\001\212<\232\301\223\275\226hu<@x\317<\260\242;>\334\200x\275G~C=\020\313\253\274S\3219<\206\244W\276\233\233\336\274\345\243\000>_\332\272=\204v\365\272nL;\275A/\370\275\222<\242=F\252\210=\210\003#\274\354@\254=\322w\t=\364E\243;\004\343\364\275\n\265\366;<{\264\275\372B\347\273\032\257a<\200\001\272\275\203\006\272<\020\2725=\217V\\=`\206\230:\360\005\344=\246\226\347\275>\005&=\030\227\210=xv\337\275|\350->\n\3716=\036\312b=\274\031\354\275R\362\203=\035\365\246\274\356\346\014=\021\362\024>\253`4=\224!\023\276rx\332\275{\344\333<\341\n\364=y\277\022<\230<\200<\027\342\271<\221\267\035\276\031<\370\275\030\002R\276\004\377\333=\317\325\223=f\336l=\320\307\232<\006\212\000\276X\033\000=\232:$>\353\314H\276\031;\241\274\316\351\357\274]\007\203\275\347\001\010>\260\330L<\365\221\365\274\226-\177=\244xY\276\000\270b=\371}\212\275\263\304\215\275y\354A=\335\227\026\275x\021\025\275aUu<e\007H=(\036\374=\357\301\021\276\\j\002>\332s\240\275\201\000\r=v\374\303\273l\266\324=\330\022\256\274;\037\024\276M3m\274\030\275\252=\025N>;\222\317\302<\263=\366\275;s\260\273\360\002\037=\342\375>=\333\342\313\275$y\250\275\322\271y\275\000\177\002=\025\341_\275\203\340\332;\016z\277\273{\270\367<\024\267\266=J\235\203<+s\227<A\230\375=\315\255\242\275\261/`\275\221\266\311;3s.\276\'\004\214<\205+\320=-\311\016>I\216\233=\223A\362=\350 \026<I\0022\275\271XO;\342\300_=\367\202B>WR\353\274\031|i=\365if=\004\252\005>A0\231=Qt\275;G\373\322=\354 \006\274\335)\341\274\371\317T;W29\276\010\\\023\276\351\300\230\274\352\027|\274\tx\275\275\022\247\325\275\021\300\024\275\031\"U=\311\322!=\216\347D>f\306\266=p+\365\275\305\336\202<KE\275=\217.1\276\331\361\r\276\352\311H\275%\366`=2\375\004\276\203\350\024>A]X\274QEr\275\340\377\274\274\337Ut\275\312\260\334=\367\255\374;o\341\225\275\356\022\207=m\265\027=\337\320\334\275L\374!\275D\267-\276A4\021\274\033\003I\275Q\2177\275\017\0047>B{\r=h\203@\274\'\376\206\275\370\034\024>\324\365p\276\273\r\334=\245L]=\313j|\275k\251e<\007^\354=\\2\342\274\201\247\343=\217%\347=S]F=6\017\241=E0V=\334/\031=\000L\216\275\371\241\367\275\035\370\264\275\300s\027\275\023\300\313=$A =\036V\216<T\366\002\276\202\3422\275\027\300z\275h\307\326=\027t\331;\274\257h<Z3\357=)\340\231\274a\r!=\010\203I>\353O]\273&\314\225=`\267\224\275\364\300D\275\2039!= \356:=N\354\323=\217\224l\273\257\025\237\275\341j\r<\216\234\025>\034=A\276\352\202\002\276\026\312\311\274\2454-<\244\365+>Y\270\274\275\310\305\366<\263\264\232=\016_\222\2755\027\031;\021\000\202\275\324-f<v\205>=\311\322\264\275.\261\326=\257\202 \276\367 \352\274p\271\312<\001\230\'=\003%\212<\010\235\004\274\007X\314=\335\224\254\275\333\212\347\274\215\331\244<\373B\365\274\224\232w\276\346\363\243=\212?9\276\277@\022>\026\3135\275fV\317=\200H\025\276]S\271=\264\252\242\273\356m>>\021\343\231<4\020\337\275\261\370\326\275\276\275E\275\335\204\210\275_\022\033>\234\n\370=\023>\372\275\313\244\260\275\247\376&>d\267\r\276T\026!<Nc\201<\337\3542>-\225\262=\205\317\352\275\373&D=5i\254\274{\246\241<z=+=\223\304\267\275D]\235=nE\325\275\304(1>\005\352\022>hW\351<E\021\016\276\201@\034>;\327\334\275\363&\303<\255Y\306=\204\2361\275LW\t\276\362C\344<\210\212E=`\267\005\275UX\037\276\373\300Z<\313\373\245\274\376\027\241\275\372\231\204\275h\307[=\361\230\352=Vm6\274\305c\236=\316\024\351\275\323X\016>\250\201[\275\333\253\272\274\353\243\375=\305.\247=R\262\223\275&\246\256=\211v\026\275h\373\006\275\027\246T\275U\255\030\276\202\031H;\21505>\"\037\243\2735v\000\276\032\311\350\274\234na=8dV=-\036\200\275\256t\372\275\220\031\236\275\017[\245\275b\253\300\275\336\325(=\036\226\246\275yC\337\274h\003\347=\251\351\324=\371iN\276\341\276\303\275\275P\312=j?\235=a\303\323=\305\204\377=w\305\355=\347J\237\275K;\262=pU\331\274\347E\022>\n\255\365=-\241\310=\370\221\320\275X\347:=\'\016\240=\255\344?\275\244\260\222=\210\346\345\275U\232\031<VW\272=Z\340\354\273)\373r\275\323\210q=\330\031\320\274\177q\353=9\232\217\275U\322!>\330\027\375=\352\355\367\275\226\3771\276]\212\301=\263\230,\2757Z\240<\307A(\275!1\001\275\275\324\t\275\220\345\353\275bt\007\275\031\330\001\276\376\250}\275\212\347\316<p\365\351\272\334\356\000>\237T\017\276C\264Y=Y(r\275\252\022\261\275k\351\313\275\270\312\374\2743}\017>\275a\034\276\246*\316\275\027b(\276\340\312\327<Y\374\232<`@\263\275~\274$>R\035&>5\245\177\275\207\t3\273\377\370\210=\251J\237=(\362\215\275U\\\322\275\322\211\251=UcG\275\325c\002>\275\002\004\275hN\357\275\313AJ\274\317\025\232\274\373\203\332=a\265\241\275\031\332&\2757W\003\276\217\001\271\275D\315\252\275\307\377\320;C\343\303<_<\260\275\331\315\240\275\254\300\364=\244\210\'\276\371\025H=O\273\334=\325\310\014=\317\220\006>\353\322\003\275f\003\030>@h\212=\n\323{=\210\000z\275\241\245E=\200_ \275\312\333\275=+\211m=!t@\273cJ;=\225\374\322<6\242s=#\275F\276S\234T<\337\"\262\272\211\\,\275\301U\306\273\332x\363=B\343\351\274jR\034;\325\301l=\263k\020>0ZA\276\010Y\226=\023\346\006\274\027\327\336=\271\300\207=\302=\303<v\360U>Q\355\257<U\373\336=q\231F;\017\025\346<\323\235{=.Y\311\273\224h\007\276\346\262\026\275\306|\\=j\357\013>\000\264L>\306\262~=\251\330\010>\365\273<>\217\3778\276\263O\367\275\327r\242\274\276\177i=\212\275\033\276\367\014\204\275\320\262\021\275\037U\361\275\364\260\007>\027M|\274V\277w\275&\"\177\274\177)\317<-\026#\276\347\267)<D\216\230\273\375\016\341<Y\350\226=\207\244\314\275\364\256\032=\3238F=\227\375\273=\210F\337\275t\327k=\016(%=%\357\323=\334{s=\177.\034\276\267\240\277=\353WF>E\"\347\274\030\\\227\27579H\2723\265[=\246\022\225\275\235rW=\266\177\001>?\316\302=\205\266\333=\241\267\035>\316\222\226\275\334\035J<[\260c\274\035|\023=\037\207\t;\306\002\241\275)j2>lm\212\275/H$>\031\325\377\2759\\L>\202\323\233\275A\247\373\275\255)\214=-\265\260\273V\035\214\275\375E\256=\233\004\256\274\3432t=7\240\016\274t\276\260\2743\266\013>\304\274\002>|D\263=\177\224<\2754y~\2758!\325\275;\255\245=\2226H=&\035\274=\261\204\324\275\242\032&\276c6\267\274\311\377\344\275\220\335\237=\010u\257\274\030|\360<k\231=\275*\024\307=\000r\t>\020\212\300=\006\367T\275\315\022\252\275\025\220\374<\020h\032\275\323*\201=K\313V\275\035f\222=\377x\004=\255f\033\275\322\264\n\276\"\235:\275j\351w=3\230Q\274\264^\270=\213\3230=\037\001\234=\n:\204=ucg\275j\354\264\274\257\376->\314\337_<\260\303\363<#\276\241<\'\0037\274\203^\322\275\002\363\355<l\023\201\275\325\033\307\275b\357\257=\345\314\310\273w\374\">\214-1=M\245N\276\037x\247=\2204\017=@\347\321\275)\240\343\275\243\206\264<\"\354v\275\'U\213<\300\362&\275v\363\013\276}\364\234\275)t\004\276\241\033\262=\rD\002\275\202\n\024\275\332Iz=e\202\253=w0\326=\205)\013>n\032\345\275\275\222\375=i\333>>I\351\363\274iP\217\275\366V\236\274\342,\200\275T\321$\276\255\036\021=\335\311\277=\261\304\244=\\A\243\273\000\227\026>\024r\304;\342\262\024>m\314\001\276\225fw\274\032U\324=\031\0252>\2761\206\275k3G\274\263\247\365\275\272B\">OQ\205=\355\355\222\275?2\303\275Y\010\340;\214\017\020=\226k\204=_\303\257\274\345+\225=TRV\276\324\177\355\274K`#=\236\235\264=\213\031\344\274\334\000R\274\324\274\217=\304D\253\274\265\365\000>\004J\277\275\"\034m\273Z\267\214\2748\002\351\271\206\003==\314\316\231\274\026\350\000>.9\r\276js\251=Z\244\246=}\334_=>\354@=\003\256$<\277\226E\275\277\016\026\275\016\207\326\275R*\014\276m> \275\030\305[=\330\351\006\276R\351\372=\246\331\241\271\220\352\375\2745l\211=\243\347\321\275\315_3\275_w\237\275%e0=\260\360\244<`q\301\274]\n\020\276\374\261\014>8D8=\211ZH=\313\275\223<\217\305\t=\337\253\304\274\221\362\201\275|=\334\274\312\276/\276\236\240%\275}s\353\275JjE=\2335\314=7wM\276\"/\004\275\202\013\211;\004~}=\231#\275\275\254\027\027>o_\332=g\177\037=\217\255\223\274\204!\272\275\361\276#\275j,\257\275\350\304 <\2554\312\275\373/\353=\257\353\272=P\376C\274E\373\325\275\253yF\274\353F\010\276\036]!==\027O=\340\274v\275\010\'\213=\347;\237\273\365\313\302\275\354b>>?Q\277\275\2523\223=k\027\341\275\rUa\274\312\322\307<H\220\026;|t\340=e\224\245\275\227\210\251\275\223\251\212=Xt{=\325I\225=q\275\350<\201\347\245\274\277\251\336=\364-~\275\022\346\031\275\247\265\'\274\200UN\275<\372\036\276e~\226=6z\000=T\367\000\275\035P\002\276T]\262\275\301F\324=\233\314\362\275\250k\342\275\303}\n=u\027n\275\202\301\017\275\025\227@;\377\031\210<\240f.>\333y\204\275\376\253\030>\232\374W\2741\257M\275\261/\013<\277\375A\276\006\254\260\275>\326s\275\001\366M=\nD\377<M\267\375=X\322\324<\371\363\201=\267r!>\232\237\004>\253`\367=\2618%\275#\\\275<\270\325\245\275\212\245\351\275\233\347\004\275I?\002\275\205\0241>\035:>\276\337\323K\275Z\2344\272\230\2609=\234\333\333\274f5\206=pg\307=\335\211\001>\276\334e=\22622;\363t\250=\257\270\260:H\330]\275\360\250\030\276\247\333\235\275\221e\247<m_H=P\304\020<\335\371\033=c\277G=\014R\317=\250\243x\276\3306\r\276#\225\247\275\237\254G\275\260\261\264\275\034\267*>\261\342:\275\256\\\022=I\\,>\350&#\274\347`p=\\=\313=\270^G\276\210\354G\274{\377\033\276\013\230\252<\305@\003\276\270\314\350\275(\0012=\376\230\014>\014e\022>\023r\274\274\332\334@\275V},\276\212\211\325\274H\346\207\274\025\221\233=\n2\204=J\305\261=\032-\021\275\224\025I\275\376\343]\275a`\361=Y\327\036\276\254\263/=\332\3435;F\262\035\276\244\253\317\275\214w\234=\300\263\300;\272\322\271\275-c\304=#\214\254=#~\017\275\244\271\037\274\217\303(\275\257v\231\275J\316^<\312Q\030=\242n\032\276\350<E=\225\200\310\275\\\336$\276J\214\023<\362\r\225=K\367\034\275\003\261=\275z\007?=jY\033>&\373\271\275R:\000\275\200\357\215=\334<\026>\267\216\270<\333\206\254\275^\001\305=AF\210\275\316#\214\274\035F\343=1\014\323;\221\267\216=\001\341\372\275\234Y\314\275\036\346\322=8\310@\275\347T\314;\004\244\360=\200&\317<\222\336\036>aS\004=so\263\2752~\002\276\222\246\265\275\212\320\314\275L\3428=\3767\2459\373\320\252=\242\314<>i\355\263\275\274\"\233=\272R\324\275\342,\037>\326\326\231<\277\343\225\275\300JH\276\204\031\363;\257\331B>|\247F\275\300jl\275Z$9\276\305{\355\275\321\303_=\203\352\250<\362\035\360\274\273@\203\275\372\035\032\276\nS\212\275\003\215\312\275\277\236\216=\230\304\322=\034Y\177\275\365\231\211<\247\350\230=r\014\242=\202K\310\274!R\365<DQ\344=\"z\021\273\327f\341\274\303\'\316\274\305@\230=D\332\331\273\000\321C=\205\217e\273\2001\321=\003k\266=\277\037\363\271\266`4\275\373\244#>\225\020\350<\217|\t>i\214\030\276\303u\272\275f\333\302\273Y\241!>\372:\323\272\2657i=\314R\025\273\177\253\335\275\265\215\004\274\257\226\004>\001\342\214=T\305\344=o\357\242\273|\007\327=\007\212)\273\272k\001;\301r\254\275\261v\334\275^\336\333\275}Xx\275\311;\205=\001\0138<\304/\342\2758A\315<\363\341\246=j\246:=\270\035\366\274\021H\232<\374\351\340\275YE\237<\330\271\347=3r\025\276W\351\316<\237,\327\275!q\345\275\\\314\001>\310{\244\275\276e\253\275\310ma=\247\227\">^{\266;\010`q>\026\t\013\275sik<\201@2<R*X\275@\t\014=\274\303\025>\341\327\006=\016\252$>\313\002\336\275A\314\256=^5\221\275\206VZ=H^h=\361&\370=\357\337\210;\246[\331\275~!\035>\344\237\375=\360%(\276\234\235\013>5\033->V\257F=V\177\006\276ra\254\275x\305Y\275)\023,>\357b\035>p<\376=\254W\027\275\273\020\272<\034*\263\275z{\227\275T&\t\276\006\304\002\275\310u\225\273.i\207\275\2578\264\275Z\017U\275h\025\032>\245=\275;\252i\311\274\203c\266<\002\002\300\274\355\"\301=\302&N>\\\026B\274\273\236\221\275Qt\364\275\032\341B\275\013\233\330\275\221\327c>\330\357\277\275l.^\275\342\213\376;u\001A\275]\355<>m?\312=\376\366d\275\267\033\336<\270u\276\275p]b\274\260\241\230;\355x\243\274F\357\240=Su\364\275R\323\353<\342\361\363\275\251\025\313\275\306\017G>>\213#\276\266\231\010=4\276\220<q\317\263:\257>{\275\277\016\020\276o\261-=\"F\342<\227\271\260=\324\311\006>Z,\002\274\271\347\221\275\266^\251\275u\n\277\274{\317\203\275\t,\272=ol\020\273\233Z)>\033\003\037>\377@\322=\203\230{=\243\374\014\275F\253\247;\253I6>8\024\003>\226-\255\274\231S\302=9\335-\276&\207T\275\306\254\332=\021\024t=k7y\275\354\2158>F\240\202\275d\323<=\356\257\316\274\3370K\274\235\300\026\276\'\332\244<\3358\216\272\\\260\262=Z\215\034\276=\024.\276\331\006\006>~L\300<s\203T=\375\010\007>,\333\342\275<d\352\275O\203\234\275\260\023\215\275\235\3566\276Q\271\331\275`.E<cO\216<9\350\032<\265\261\020=*\030\031\276j:Z\275\256\347\241\275c&\265=\030\007\007\275\35755>\250\350\206\275P\344\352=\305\360\006\276x\206s\275!2\n>\367\316\340<\377\231\220=-\265\">\177\202\232=J\250C\275\305P\301\275\tq\004\275N>\354\274\211T\336<f\201\371\274Iz\312\275q>\257=\3758\233\274\272\215$\276\302\363\211=\330\2640\275\367\035\333\275\370\344\033=\321\'y<\236\177\343=U\307\356<B\323\253<\262+\001<\345*\234\275L\004t=\366U \275\020\300:\275\027\374\016=\360\360\227\274\355\370\263=\304\377P=\271\024\316=\247\231\314\273\250\270\230\275*\314\330=\3065\034=\361\334\021>\300\024\324<\000P\327\275\225\263\000>\242\364\326=$\215\335<\347Q\032=2Fy=\361\201\216\275\364[\256=\336vN<D\177\026<\237\356\030=\273\373L\274\232\232\021\275<c\353<\345e\362\274\031\374\242=\347f\000>\267\357\335\275Y!\r>\325&\365\275\017\367<>\014\340\254=\247\241r\275\343\273\302=\360U\322\275\216Q\013=\253\036L<\322\026x\275\036\030\333\275\007\350\316<\322Sy<\206\343\215=\026\014\271=4\342D=\231\267\213<\232)\3768qK^=\344\233\212=\034\n\315\275^\344\223<\371E(\276\231\025?=\033\033B\275A\020\026\276\263<\221\275\232\352\276=\025\353Z=|\266\370<\346\265v\275,\355\274\275G,\262\275\327\202I>\224\303\027\275\0071\222\275A\377\226=\213g\206=\304\341 >i\375\300={X\232=\001\252H\275\242`g>\032R\353\275\250b]>v\265\017=\340\326\253\274\000\017\300<\302\306\306<t\305-=d\217z\275\212\326\377\275\221\235\006>\246\203\302\275\256K\221;t\352\230<\003\326\250\275\214N\276<\342\257\214=\303\360P\273qP\\=\003\361\256=\342\274/>z\243a\275\246\306H>{\374g=li\177=\364y\231\275\356\226\216\275\307\361\235=\0315\217<\362\244$\275a\"I<eb\251=[*-\276\362\246\221\274M\267\264=\327\013Q=\350\234\311<D\201M=\365w\024\276\206/\205<J9\032=\241\177\201\275\306\223&\276hLD\275\263\272\003\276\316\354\341\275\241s\3439\217\206I\2754~\206\2757\331\216;J\366\362=\313\247V\275u+\305=b\277\013\276\367\213\270\275nvK\276\332q\241\2731\003\034=\255;\004\275\212u\370=)\302\363\275v \'>\205\316\325\272\022R\025>B\n\304=\246\2137\275\235\370\224\274\204\357\354\275#\350w<\263\202\350=\321\322\024>\2410\t<N\004\204=\206\376\030\276-%\357\272\223\353\300=\316]\240\275_\273\322\275\373\242\312\275\363\355\214=\240\217v\272DG\t=\304\000\r>/\206\220\274\365\374\325:Y\322M\275>\272\014>)\257y\2747\243\307=\236\212\375\275\372h\241=\304j\032\276\014\242\274;\330\300>\275 \263\036\275\256\356\247\275\200qe;\230\217\310=\244t<\275\220\311\310=j\220\303\273\304\257k\275\274\326\244=\356G\314<b=\002\276\217\303J=\334\222\036>b\246\343=3\372\314=\000\316w\275\260\227\030>\"~\226=\032\300\033>ME\244\275rn#\276\332V\327\275F\032!>@\310\276\274%L)>\314\262\233=\277\240\271\275\3468\363\275\236\322$\275\201o\004\276\322\201)>\206!1\275\317B\321\275t\242\261\273\343Q$\275\031G\325;\323\200=;,\357\036>\352\010^\274\357j\021=\323\224\351\275c\'\333\275\266K\323=/:\201=\"\026\346\275\t\300\307\275\247\033\232=)\363\010\273&=.=\253c\376\274r\251\267=\337\303m=yD\037>\004\232\225;%z=\276\2232\375=\0378a\275\377\0132=M\205\274\275\353\257\"\276\231\234\376<v\323\034\275\263\312\226=Zl\004>\330\251\025\2765[\355=\200\027c\275\241H6=\325\347,\276\204h&>>\372\351;\327\366\330=\302\254\313\275d\266\256=\347\037\314=\227\311\362=\272\016\035=\311\220\230=#O;\275 \3566\275g\247\265\275\366\026Q\275\021U\237\275\260\353\020\276\377\r\202=\177O5<-d\010\276\002\321\017>\004\000M\2752;k=\204\002\263\275\377\237v<\3117\n\276_\266&\275w\'\261\2747G\021\274\244\316\000>\032\242\223\275m\030\367\2754m%\275\317\262\226\2750W\333<\207\031\014>\r\220\360<\377)\013>\356k\326=\243\255(\275\253\251t\275\023c\207=$e\303\275\024\353y\274\r\317\220;\336\304\022\275\354\016\307\272\362CW\275&\331F>\330\205\352\275\201\024\024>\212nA=\305\361\035\275\261[d\2749\270T=\0371\262<\330\246\317<\370\037\373=\332\377,>#\376\354=\320d\373=\207G+\276\020DV:\023\273\014>2\343\260\274\246/\327\275#\261\366=*\360\327=\313!<>j\351i\275KhC\275\033\236\276\275\324W\027=4e5>a\373\002\276\022\366\023>\224\326G=\376>\264<!\025\306\272:N\225\275\037\221\356\272\210\251\204=6I`\274\006\203o;K$\360=\307\323\203=JJ\275\275\337\017\003=o\031k\275\303v&>C\231\303\274\357\322s\275\241\242]>M\213\276=z\254\316=\274\231\306=\275\207T=/E\205:k\307,\276J\003\026\274{p1>\214\364o\275\016\201\303=\314\231(\275\353=\316<\236X\005\275\332\025\030\276\3518x<\354TF=\310M\257=\375\342\265\275vR\313\274\363\224\010\276\031h\303;\235\313\n=\370\233%\275%\245\030\275 \322\257<\270\350\277=\336\177\366=\277\203\272=\354\362\356\275\031$\200\274\356\022d\275\253\332\323\275\250\332\200\275W1\330\274j=\305=\022\025X=\237\360\354\274\204Q\010>\220@\377\275\247\345\017>\374\265\003>%A\237\274\236\254B\275o\214\326=\024\275\220=R\376.>\213cS=\360f\217=\336\337\256=\377\212\313\275\371\203\201\275\272\2430\2763Y4\276u\254U\274{\322g=\313\033\014\275\202H\237=|\223\256\275\343\265\260=\355[\257\275\306\025\002>k\315%\275\300Qw<\257\326\023\274\211\016\214\275\260\3444><4<\274L]\002=\'\355\205\274\300}\266;\nb\007\275]o\366<\272\033M=\033zA=\364\227\334=\t\024\270=\016<\270=\265P[\273\311\357\355\275iF\315=w\001v=\261\001\n>\"\034\206=\3649\005=:\361->rv\013=Y\212\240=\267O\223\275\244\022\324=\322\t9<\320\270\264\275\231\035\376\275\241E\271=\205@\311=\230r\236\274\236\021\204\275\3669\004\276\027\314\026=\321\007d\274\306\320\370\275\370\026\346=\014\007\317<>.6\275\362t/\275\3164\364\274E-\320=D\206E\275\251\315\021\276\0237H>w\037\361\271\020\267\027=5\355\344<OO\366\275\"U\004\274x\304S<PP>\275\003s\263\275\272\365\006>\373Ev\274\205R\307\274h\276\r\276c\352\316=\221\254\035\273\020\rR\274\032\021o:\321z\315<\001s\256<\032\020\315\274\341}\355\274\352\210\312\274^\374\266\275\033u4>\373\226\365\275>\326\007\2760\226Y\275\214`\342=n\\\377<\020}\223\275g*P==\026\341\275>\2611\276\257\306 \276\241@8\275\370./\276g\312\252=<\020\271=:\254\350\274>\231\220\274\r03=\317\025m=\267\017\210\275\333\311j\275\023K*=af(>\234\372\301\275`\262\231=\3706\325=\226,\037=\331\277\314<>\036h=\232\304/=\216\2305=R\362\333=m&q<\031!\354=\014\217[<\216\221\357<cl\301=\362\367U=2\272\247=\246\337\331= \270\177\275\216\367\270<\000B3\276\013~\231;<^%\276\374CJ\275p\204E\276)\320?\276\274\250$>\212\252\014=\203\202\250\274\331\260\273\275\032\272\222=\377\350\356=\207\022\030\275\267\2429<\326.\010>\036M\002=\310)\210<,\321\374\273E\023Q=\310\330\345=\220JE\276\327\007_\275\276O6=\252?\314\275s\232\365\274\320#\036\275\373\275}=b\3276>R\000\314\272L\214\206<_)\373<}\361H>\223\353\234\273\250\374\314\275\3059l\275h\333\004\2742b\332\274v\373d=}\013M>\371\027k\276\301\3617\276\031\355V\274\344\267\363\275{/\022\276A\363\214<s\330\212\275\ro\002\275\207i\002\276\227\001\344=\313\016\000>\272\224\275\274\324!\227=\327\033I;\266*9\276q\217z=\201\032q;\025VL\274\212\344~=M\277\026={\031\255<Pa\224\275W\305X\276\3626\241\275|\306b\275:z\002=\216\326B\275y\271\216<\377\016\231\275\236~~<\266\004\334<\341\0353>\211\257+<\356\277\364\275\315\367\214<\010i\217\275\034\032\\<\360!\024\276\234\246\340\275\034\370\265\2743N\341;\261\3155>{\031\032=\230\307\014=\035\305s\275W,\326<H\316\200=~m7=\250\274\205=\365\364\231=<\276\313\275.\211\251\275\"G\235\275\346`\022\276\331\205\250\275\231\354\017\276\225\372J=\200\345m\275\0135\017\276ne\251;jG\366<V\347\276\275\362[\373\275\021\031p\275\022k\223\274W\345\363<\234\365H\274\375\361\005>\245n\203\274\026\233\324=\330\315\235=A`6=C\327\001\274\371\030f<\221\203\334\275\312}\'\275{\370\371=o\362\020\275\332\034\306\275\241O\017\276\006\261\324\275\341F\037>E\300\355\275R\347!\275\341\363\230=\'\313D>\253^ \274@\273\220\274\204P\377=\217\004\027\275=\001\273<<\035\227\275\325\334\214\275\037<\017\276\330\241\317=\226h\207=\366\261\327\275\276 \350\274z\230\036\2756\213\361=\252s\240\274\244\237f=\232yL\273B1\244\275\226U\303</\353\003\276\362\017\221\275o\254\006=\243|\263\275\212N\360\274q\304#\275\032w\333=\256\273-\274\274!\231=\235\010\246;\252\274>\276#\224\213\274\312\215\\=\266\006\3238\007^\324\274\021\372\023\274\335@f==k\362=\363\030\354<\370g\262=lh.=tm\324=+X1\276+\207\341<U\312\206\275L\254C\273\304FA\276P\266\237\275\010\354\275\273\023\225\000\276\250\305\202\275\013\363\231=\023\344\010\274\221CO>\363\250\004\276 \353K\275\223j\232=5q\204\275\236\027\326;Z[\025\276\200/X\276\327<6\276\311m\351=\323\352\343\275Y\274\252\275\361\335M\275=\216\010> \346T\274\360V\242=\210\000\226\274r\336\224=`\375Q=2\324\006\275\010\331\233<ob\271\275\317\3769\276m\335\003>\210\372\230\275\362\005\271\274g\251\010\273$\261L\2766[\225\275-\321\224=z\022\336=\364a\226\275\201\'\002\275bp\350<;\255X=\204\356\377=\303\232i\274\243\006`=(\365\233;\202U\000\274\356:\335\275\344\367\326\274\374\245\335=\341\205<>\341\237\326<\254\301\315=i\256a=\031L\302=\260\332\305\275\033\206\262\275\366\345,=?w\353\275\232`j=\037\032\300=U\017\360\2736\376\246:\346%\320\275\250\222\007>\036\266\244\274\306\207\027\276G3\033\275]\0134=\305\203\243\274\0357\033=S\034w\274u\365\221=c\201\020\276\016I~=\320Z\347=\220j\352<\273\204\316\274#X\233\274\242 ->C\300\261\274d\312\002>\003\324y=m\002\214<\2333\377\275\204\341M\275\245\024\343\274\006\275%<3\r\371\274#\247\000\274\005Q\277\274\253\222\213=Z\253\254<Y\336\261\275\317\376:>\365c\244<\256\255\215\275\271\035,\273\234~\302;\217]A\274\356A\013\276\324\316\031\275\350O\031=j\326\014\276R\\[=\2532\323\274\014iJ>\347\274j\274\307a\324=\266L\267\275\006\024W<\277J\300\274 \234\234;>i\337\275\237;\272\275B#)=f\226.\275@k\307<\033K\013\276\337\004\003\276ad\024\275\272\247\213\274S\006\333\275h\035`=\336n\033=\311S\033\2768\201\220;\215\010\261\2753S\347\274\271\334\273=]F\034>\202\270\225\275M\313B\274zn\362\275\243-C\275h\027\013>\331\307\331;y$\002>\312E\202\275\2676\014=\351\030b=;0\">\006\212\310\274sC\261\275\341\0239\274\265\\\017>\027\2430\275\270\336\336=\326\256\006>\007G\222<\252\014\374:\234\262\207\275\3177\344\275P[\022\276{.J\275$Q\276\273\024\365\262\274\351\207\302=\3336\304\275\203\377w\275\367\016$\276\360P\035\275\037j\020:gL\271\275\362\3075=\2617i=O#\256<\273A\201\275\340a\271\275\016\234\210=7\337\344\275V\232\214\275\206\312\352<\307\352=\273\345\255<\276c\321\256;\311;.>\345+j\275\241\242\022\2752R\027>\327&\276\274\245<\252\275|\365)>\036\257\247\275U\241(>u\251\305=\177Q\\\275GPZ<\215\036\354\274ix\227\275\277\020d\275\233/\313=q\346\242=\342\241\371;\205a\200<\022\2649\275K\356\347\274\240\311\213\275\342\352&\276\373\210D\275\245\307-\275\207\226\355:W\211\226;1\223~\274(\236\277;N;R\275\245\250\t=\247\231\262\275,\003\236=-\"\361=\227\314\216<i5\232=\251\350|=T\034\007\276\214O\362= tJ\274(\363\315\275\025\226(\276!\033\306=\225EE>\272\350\306=\331\322\233=\r2/\276\261H\022\275\236\023)\275g\177\337\275*\227s=\243KI\274h\3466>2\320\332=\021\237\215\275\373$\300=i\230(\275v\0227\276\243;\333=\"\353]=\200Pz\275E\267\214\275\227\352y=D\231\302\273@\212\312\275a\212\356=\326l\035\276\217V3>\305\243/=\347\235\006>\247R\363=^\355q=\336\2613\270\343\375H=\336t\236<\354z\201=\3417\035\276\376;\000>\000`8=r\372q=\321\363,=\335_\375\274\325\301\346=3\ts\275\372\320/\275\3172\217\275\374\353\314\2751\210\231\275\303+\251=j\225\354<\34530=\023b\360\275\373\002\317\272\253e\026<\377\253\250\274H\256\210\274\034\3052=\rW\232<1J?;o\325\305<r 9:\023[\351=Q\326r\275\021\337\247=do\031>~/\372=\220\361\001>\255\245{\275W\025\367\275[#\355\275\375\270\221=R\037\\\272\005\306\223=>(\242\275B\020\017>\004>\276<o,\027<[\360\343<\352\3222>c5\357<A\'d\275\214\272\205\274\003\3650>\001\374w=\227\266\267\275\252\254\037\275\022h\243\274\256\372\265\275\330\315\202=\327\275G>\306s\235\275\310Y\201=\213\241[\275\313f\345=\331\300K=h\2278\275\233?\237\275\327y)>^\335\342=M\312\216\275C\262\246<\343\030\367\274\354\274:\276\246\272\276\2757hL\276\022E\031=\210\316\003>\247o\034=\277\377\246=\014\213&>V+0<\207\355\351\275p\3327=\030\270\242\275\333\245\004>_\366\003\275\357\354\235\275\366g\020\276K,l=_\030\275=\237hN\275\235\301\257<\\\205\024\275\\}\202\275\034_i=\010\200\262<c\261@>.\034\206=f\225\244\275\030\256\242=\353\365\000\276wT\022\275\324\331@\274\025X\220=f\337&>8T\016>C*,>c$\'<z:\244\2753\221\255=\3613(<v\362\222\275d-\023<\003\267\363<\235\236D>\312c\037\276Ww \276\351\272\202=>\357\333=d\213\031>\300|\241=\367\371\375\275]\334\222=C8\000>\005\n\022\276Z*S\275(\326\005=\351~\037\275\000\203\253\273\215}\273\274\t\206\221=5\341\024\276\032o\370\275\344\362\340<\002*\352\274?`\220=/\300\311=}\334\005<\034\324\322\274>\033\266\275\313\244\315;\346\375\370\275\301*3\275\010\260\n>\200\330\000\275p\030f\274\211\250\002\276q4\017\275\310\246\037>\207^\244=\t1W\276\013\362\306=\334\200\035=\266E\211\275\317t\000\276W\257\266\274M\304.\276j\035T;\356)\235\274\004\033\373\275\204\352R\275\246af\275\300B%=\223\353*\276gl\200\275#\375\212\274\005G\236=V!\026\275Q\3429<\211\332L=b\310\022\276MQ\002>\320)\257=\3067\004=e\366\355<X \203\275\222\360\333\274d\2031>,\201j\275\200\362\220\275\260\360\312\275\342a(\276\000\\\002\275\320\326\014>\246\304\001>A\326,=\227*\260=\334\333\273\275\235\222\033>sR(\274\307\016\324=/\324\n\275e\235J=\021\021\214\275\032\210\271=T*\017=`\0103\2741$U<\\\203\362;\345v\222<\241\226\351\274G\313M\275h\224\261=\022+\320<\027@>=\023k\247=\t\357g\275\264\251&\274}\257\316\274o\021\211=\372\355\272<\032&\212=\226\230w\275z\347\373<\274rS<\360#y\275\'\235\035<6\311\325\275:\237u=\300\236\202\275Z)=\275^\032\211\275Y\335\014>S}\264\273\372\353\035=D\365B=?{&\276Rb\312\2749\332\374=\371F\231=_\310\215\275N\200\224=\037\236\033=\261J\246=\346\206\237=:\377\340=\\\025:\276\343I\355\275\353\"\t>\273\t\203=\304c\355\274\301\221\200\275\335.#<\263+\003=\274-U\276\214\312\000>\353\243\330<\207\217\362=\024\332\314\275\002+\357\275;\203z\275\235\232\371=MN\">Q\240-=\224\307\020\276\264=\240=4\0130\276w\326\213\275\212gC\275\3627\344\275\355M\332\275\260B\364=\252\230\316\275\365g|\275uf\235\275v\006N=\324M\006>8\203\036=it\225=\202\310\260\275\215\343_=_\353\216\275\370,2\276+\333\217=\340\330\200\275\342\354\335<j\252#<\220Ff\275\321\'\211\274E\265v=\034\350\242=\350\334\265\273\327V\267\2754\202\276\2732\341K>\355\363\252=3_\335\274d\0359>\365\245\302\275\021\000\203\275\231\302\253=\305\301\010\275\214\307\024=\305k\326=\242\341\'<<;z=c\314\254=\\%\241\275\341\307\320=\317\240A\275d\367\260=(&t=\347>\210<\256\305\253\275C\243K\274\333*\020<\3240C=1`K<\303b\024>K\014-> 9\324=\372\240\217\275D\023\200= \365\361\275\357*\327\273(\230\030>q\265.=\021)\266<k2\266\274\014\351\024>\263\247E\276\222B=\275\2555#=\245\3251\274\376\303\227=\373\274\245=N\027Q\275\316q7\275\217\215\252\275\026qQ=|\t\335=\\\177<\274`!R=f\014\371=\353\020t\275`\273?>\357\2269\275m\037\346\275\302\177\311\275?1I\275\235\253\363\275l\262\300=0\242\016\276b\251\010\275#\203\233\274\035\372^\274h\035`\274r\274f</\270\215\275\316\023O>\267\206\243\275\327q\357\275Eu\364=/\273\244\275H\000$>\374\021\034\275\203\342\237\275s\020\305\275\003+\010=w\305\340=\014\346q\275e\264K<\\\253|=\303\313+=H\031\350\275\006F\266\275\375\006X=\355\337\'=\312\322K\275\034T\036\275\375\2027\276\020\351\007\275\301\320\314\275\207\222\004>6\243\373\274\007\326\263=\200\212t=\230\232\332=\2054\223\275\222\017\271<A\000$\274\337\377\377<\236\353S=bfX>\217\353\215\274M]\356\275\371\rq=\262\0332\276\004\362\235=\327LX\275\267\024\222\2742\032-\275\212\023\322=,ra=\010\331\026>b\014\332<OV\255\273\035\306\330\2750\2116=&\365#\273\333gp=\256V\026\275o\031\"\276\2009\304\274\341_\270=\366$t\275\013A\000\275\255\222\207\275\216\002H\275\276\247 >8\324>>\215\260\311\274\262\204\301=#5\034>\202\323b\2759\256\233\275\206\n\016\275\253!W\273\211P\267\275\245\244h=\342\304%>^\266(\275\321\'8=\177\303N<\304\310\'>\350\021w<\266\223\\\275&;\263=\'\"d\275\035/%\275\n\2656\275\372K4=w\263\225=\253\321\254\275c\2431\276a\300)\275\250\010\230\275\320\367\031\275\265@\023>\201\246\024>\001Y\362=\r\022T;wn\"\276\036\231\217\273Fk@\2747\313s\274\207\364\203=\253x\270=e\356\r>y\311\004>\240_\333==\341b\274\010\222\022\275\241\256\270\273a{\232\275Ow\304=\t\212\020>.\210`=\034\256Y=7\247\003\275\375\277)\274\326\311\367<\361G?=\276`\251\274\266\267\254=\342\265\354\275\325pN\275A\3132>\033>?<j\315\351\275\'24=\271\274)\273\251\343\320=P\356\r>\314\335\313\274h}\017>/4\316\275\245-\365\2756!d==^\036>\255,\355\274\263\304V>L\265\367\275\205\233\332=\354\"\215=\3661\220\274\261N\210=QN!\276\014\014\020=\370v\200=\255Q\014=\221\360\242\275\037\236\200\273s\035z=\252\302\342<zqn=\n{\226\274B\327[\274\342\037:\276E-\275<\025l\364=\313\313\325<@L*\275\nu\037\275\\\r\002\275\n\277\206\275\222s\217={\213\326\274\034\t\272=\036\007a\274J\321\323\275|$k\275FO\n\2720\207\334=\312\377l\274\025\202+>d\3160\274z#\324<\330\362\003\275\315]\255=O\275\367<\373/\277<I\320\254\275\321h\204\2734\303_\274\305\237\r>\035.\214\274e(\003\276\335\"\240=S\217L\276\036\030\026>#\203\344\275*\301:>\037\026\177<\036!\221=\344ly\275\237u\206\275P\271#\276lC\317\274\315\370\020\275\001\254\371<t\004\203\274\332\365\332=\245\210\007=\252\3268=x\007b\275\257\235w=\231\374H\275\021\265\212\275\002\303\002\276!\316\345\275];\210=\337\202K<\016N\177=\365K\266=\357m\332<\305\317\247\275=\334\263=+\250\034=\236\244E\275]\257\021\275C\336\003<Y\241d<\351p=>\304\037\010>k\2555\275\330s\354\274\224\315\252\275\'\013&>j\214;\275\372\2732\276t]c\275?\217\362\272\007\\\327\275\247v\241\275\376M\002\275\262\032\264=\232\233\010\274J\232\215\273S\'7=z\265j\273\005\262N=\357\263#=\363\227\233\272w\3455\2768\004P\276\270\236>=q\371\351=\246\224\235=\3125N;\351U\025>yv\037>B\2215\275\275[\225<\024\233\304=\221\373f\275\003\374\025=\321\372:=\322P\232=.\252\317=\351Ei\275\377\373\365\275s\213\025<\252!\351\275\232\204=\276(\227\251;\177\250\324;:\301\330=r\020\201=\253;\215=\233)\t\276w\243T\275#\000\217=\033^\317\275\262\223.=y\257\264\273\027\357\306=\035|h\275\250\272\340\275\010\217\342<V\306\241=\000\245D\275\016\207\031\276#\205I=\200\342\306;\246O\246=lb\360=\246m=\275\205\215\201<\224\270\225=\3376\034\275\367<\350<U\213\267\275bi4>aI\005\276LP\t=\234~\337=~\337\t\274\201M\243=\030\304\324=\225\010\347\273\306\330\364=3\367\227=\347r\362=\036l\270\275mD\254\275\322\363\313=\330\367[\275\302LK=H\343\363\275\3363\021\273\217\340\351=\251\311\331\275Wi\333\275\226\003/>\223\205\032\276q\247\260\274\006\023\353\275\277#\326;\360\345K\275\022\312\003<\034\257\r\276B\325\r\276\362\270\221<pi\022\276\371w\252<\231\017\002\276U\221\373\274\341-%>\321[T\275\007\264\354\275\351\244\360\274\253\360\377\275\302G\311\274l\347\220\275\326\354M>\023\333\343:k\234\226=\245\316Y\275s@\256=3\353\031>[f!>A\217\252\273;\"\345=\316\001w=\336\201y=J=6=\330\201\270\274\342\221?\275=\224<\276\234\376\000\276r\025\356<\222\241\303\275\024\003\303\275\336n\t=\241\311\014=\372u\207;\307\001\210=\270\245\245=\265\373\231\275\215\374\202=\226\212\243=\r\300-=\317a\023=6\010\251<\220h\000\276\322P3=9\2758\276\322,W\276K{\254=\362\026\216\275\213P\342\274\273\243S\275\375\026\210=\0175\014>T\366\341\2735\037p\274@) \275\177\033Z\275\004Hj\275\316\037\306\275zd*=\377*\002>\314Qw\275s\310\031\275\246Uv=\306E\274\275`A\361=\304\321\001>\004\024\034>\037T\r\276\217\206\311=)\213\032>\313\246\024\276kY&<y\3179<P\t\216\274\266\360(=\230C\t<\247\234&>\353\030x<\206\372\325\274\314\316V=`\303\241=F\272\035\273|A\262\275\004\314\031\275\032\215\356=\377\234\206=\354\017~\275iJ}=\227\344\230\275\335\235\310=\213\327&<X\377]<\036&\246=\273\\\260=\225\232\305\274\326#\276\273\216\343\363=\036\363\014\275VG\025>\332Wy\275z\370\030>Z\001-\276\340\335\030\276N\036\323\274\334[3>\336J\033\276\2375S=\252\300\270\275X\331\350=n\2623>\333\205\250\275\340\016S=CPE\275\226>\227=\372Y\000>\243\271\257\275\254\255\'<\340L\220\274\336\272\035>\"~\005\2763G\202\275\3477\206\274\221\255\214\275j\304\226<\202\2253\275\270\270n=Ns\033=J\027\306\275\t\304\353\275x\243\260=\000\373\260=\241j\334\274\266.\223\275\3068\275=\024|\311\275\243\340\277\275\247\265?<\300P\000>\365\013\266\275\272\366}=\253\024\322\2743\207&>\371\353\201\275Y\016\024\275\243\026\353\274\025\'\262\275;D\326<\317A\202\275n\260d=,\3108=\241\227&>o\257!\275\'\265M=\264\267W\275{\2135><0\265<\220\357\016<\\\314\307=6\323\n\276\316\221\013\276i0K\276\034\316U=>X\332=\225\260R<(\302\">\351\242\335<\236E7=M\333\207<o\361\213=\350\t?=R\272\031>\202\275t<\343\361\003\276\323\342e\274\312\\]>zh\266\275(\237\003\276\035\217\371\275\365;1\275\3766\007>\264\222\227\275\351\033M\275\251\354\370=P\234\247<(\025\034\276\267\2574>\036T\305\274O\270#\275d\252\351\274\376It=\021\013\332=\276\200\246\272\300\251 \276\331\210\216\275!\003\020\275\312\035\031\276\244{\225={\003\214=\212\020\234\275=z~\275\366\266);\276>)>v\022\321=\304?\223=\271\322\245=\033\214\273\274q\210->\3472\n>\205\237,>\300\211L<\234\371\021\276\020\315C>V#\341\275\376\3654\275\246>8\276\023\310\240=\204\372C\275\300\r\032\276\247\252G\275\261q\013<Oh\213\274T[\030=\352M\010\275\202\353\214\275Y0O\276\301\201>>>\323\341\274\363\246\220<[>\317\272\325\326\035=\017L8;\006\371\020>\3338\301<\2401\304\275\367\367\305\275\216\177\005\273}\017\007>\367\356\332=\n,\330;ik?=\203@%>\354{>\273q_\352=\331\006\202\274\352PC\275\205\031I\276\265\017\251;\346aa=\305lf;\275\247u\275\226\002\327\274:\230o\274+\304\330=\226_\355=cSk\274\310v|=\265%&>\300\336\003\275l\303\303=2T\225=\330a\010\275\374\031\205\275\372\020\224<}\271L>W\027\177\275\367\202\353\274:\014\262\275\034{\321\274t\375,>\002\374 \276\021\352\021\276vv\304<\003\207\271:6\220\"\275UT\037\276\tBb\275\234\373x=\037\241\240=\342x\300=\\JN<t\373\003\275Q\200\277\274\364\355\304=\202\350\206\275H\036J<\325)\376<\357oi\274\270\016>>\373\337\303\275b\215\204\275\246\206\313=\241\t\272\274\370V\367\274\016\300\351\275t\237\204\274/y\204\274x\037\236=8\3162\276`\000o<\246s\377=\247\024\375\275\200\272_=\n\014\345<\215TF\275\373\266\n\276\3350\003\276\212\316\235=P\344B=\013\034\360;g\303\177=p\360\330=\023\007\244=k\255\037=b\256\344<\324/\212\275\373A\363\275\243z\027>n\211(=\325<\227\275\235NI\274\255\323&\275?\245\364=+v\021\276a\201\211= \007\323=\357\260\236\275\211\215u=\002lC\275\316\377\273==\3746>38\244=\221\024\347=r\3324\276Vn5\275\033L\026\276\330v\034<\3341\231\275\010)\204=T\031\373\275\275\206\"\276\014\014\240\275\r3v\275V\372\350=Y(\244\274\347}\312\274y\016\246=bS\030>/\001x\275\303\226\357=\022\210\233=\346\240x\275`\016\210\275U\304\354=\237R\277< \234\374\274\375\365\346\275\216\032\321\275\207\360!\274S\350\210=\272%\307;\314\2730\276<\313\237\273\251\253,=y\3157<HD\265<\222\177\343;:\373\027=\007\031\343<u\317\233=%\233\327\275\225\177\037>\323]0>\307{\352;M\264\206<\277^\312\274\306\205\213\275\267\217\026>9\261\223\275\355ev<\005\353\260=\364q\252;\027f\365=FO >\343\3424\276\266x\227=\021P4\275\270)\030>p\233\000>\254\366\026>\317\261\014=\356\313D\276\371\034,>\"\337\264\275\020t\353=\315\253K\276A7\236=\327\355\245=\302\302N>\270/\010>\245\254\232=:=\275\275\214\364\367=\377\276:<\023#\021>^\322L\276\034\240;=\004\"\314\275v\246\034>\314[4=\331\264\034<\337\035\311\275\227\303\344\275\010>q=\016\t\317<\304n;\275\202\322\322\274\213k\222=^\204\373<\240z\207\275\006\331\000>nC\352<\354\273\314\275E\226\327=W\016\'=\262\365 \276\027\230}=\033\253\204=\204\224\370=oy\224\275(>\263\274\002A)\275\365\206\274\275%.\001>,w\266=\207\360\255\275;w\234\274R\305\236=n\270\005=\313\337\010>1\252\236\275\371\211\354=\006\244\005>\214O\305\275q\366V=\360\215\301\274\365\265\036=\263\356\307\275)\006|\275\353\367\030\273\001\354\331=\001\304\010>\217\335\361<\243/\'=\273\320\304\274\224\203D=\216\t\335=\275k\002\275\276\337\231=e\026:=\241*\303\275\271\337E=\317\325-\275\332z\270\274\177\350B<u\316\277\273\034\366\200\274\326\236\010\275\376$?\276\265\232\t=\315_I=\021Vb\275\004\326X\275\347xz\275It\307<8Z\346\275a\223k\274*\206\226<\235J >\266\024\255=j\303P=\326\323\r>\205\203\334\275\244\337\233\275\315\022\257\2758\\\270<\260_x\274Q\224\014=\020\226\304\274\354M3\275SH\354=E\305-\276IG\022\276\351\033@\274\177\254\343\275\272O\277\275uc\305\274\375\355\301\274D\261\221=\003\031\007\275\320\343S>\354i6>\327\327\031\275\271\323\010>\024\267\330\273\312\202\033\276\224p\232\275\237\032\366\274F\210\372<\331\002\217\275\265}.>\322\351\031\275\001\014S=\225c&\275\236(#=\272\372\326\275\352|\267=6\\\023>\034\237\272\274\232\344\253\274+\232V=*\226\364\275L\366\302=\346Y\251=!b\266<\351\000\367\275\207\246;\275\272\035\201<\213\231\\=\365\237\271=<h\034>\215T\363\275#R\000;\370\364\036\276\224*,=\001\206\212;\014\330\250\275\221K\334=\365\264\214\275\200V\301=~b\232=\225\247\306=\210\213\260=$#S\275\'\333\344=\247S{=\3548\336=\231\304\t>\305f\016=\325\257\010\2742\231\302\275#\351\r\2761\024\027\275\010\301g<\244\020\363=\201\004E\276\026\'\232\274a?\264\275\236\014\235\275\034\177\031\276dH\265;\335\236\201\275\275\316\341\275\205K\257=\270\210\313\275@\262\254\275\245\361d=\312\367.\275\272]\014>>M\310\2748\366O=\n\305\256<\331\027\325=\237Q\"\275\'O\251=\t[\321=\302 \252:Y]\205=\314u\304\275x\343\373\271\020/\001\276\024\035\024<jh\211=C\362\262=\005\353A\273^\272\204=$;\n\276`K%\275pX_\2758u;\275d\242\025> \200\360=6\360Z=\022\345\376<\222\2334\274E\335\275\275\2133q;l\230\016>\3538\326;\265\370\241=\364\324\027=\233Qd\275\304\2274>\357\177\006>X\023\306\274\311\271\250\273\016\373\357\275\037\244\361\274\273\322\026\276d\335\334\275t\244\352<g\363`\275=\'\261\274\244\024\t>^\312\227=\273,\232=5ms\275\332\223m\275\210i\374<\304\301\004\274\332\262\272=\245 \332=\257\352\022\275!\010B<\374\007\344\275)\376\275<7\013\274=\251JI=-\214\360=\021\277\025>\362r4>]}(\276\027\341\314;&3>\274\360f\271\275\252\330v\275\335U\265<l\370\007\275bUD\274\203\242\227=\201}G>\260\322\260\275\327\001\344=f\013\354\275\020\0041\276\027[\236\275\r\215C\275\314\022\022>\206\277\031\276$RP=\373\305\002=e\234\005\275\035\000J\275UgA\276\3364\002>\017\255\014=\377\335\311<\010\333\342\274\307\200+<k\362\032\276\230\2274\276\177d\376=.\276\003\276\343eE\276PD\375\275k\334\203\2742\360O\275\005\035\020\276\326ik\274\267f\267\275\341IZ\275\231\222;>=/\"\275ei\314\275\254\025\243<\304d\272<K\206\233=P\251!>:;2=\353N\n\276\217\267\037<\253\357\263=.o\254=\201\263\300=\354\207\006\276\2458\254=\321\204>\275\314\265\270\2758oc\275B\017\007>MV\336;\301\037\311<\375\277\313\274b}R\275\372\244\324=w\342=<\357\316\253\275\3033\t>2\r\263=\020\337\310\275\362|\270=\200\3521\275\265\344\371\275l1\370\2757A\001<+DC\275\237\226\264\274\301\275\331\273\321 \230=\275\344(=@s\034\276\276\371\346==\255\200<\227l\240=\364\365\001\272\235\364\021=\033K\331\275cI\325<\374\227\312\272\262^\320\272f\r\342=tQ\304=%\256=;\030\265\274\275\265J\274={X\224=\\\317\334<2\023\256\275L\244\037\276\302p\224=GC\007\276d\313\276\275\214\014\214\275\366^\007\276\265\354u=*\276:=\243\374\202=c-\373\275\322\347\364=M|6\275\222\254\350=*\321\317\275N\226\r\274\225:\001\275\211\313B\275\346\335\333=5\0279<\211\236\337=\237\025\353=\256g\354<>\331\t=\217\360!\276\037\303\016>]\246\2409\244\3025\276B\225\200\274\330\303\374\275\333B:=\014\264\247;1\327\341<\026\306\266=j\277\300\275H\233\001\276t\255\261=G h\275\221\232\004\276\\\236\313\275\021\331{=\2201N=\237\241\t>\230!>\275\235\031\231<\270\227\311:\243\217\206\275\214\337\033=\332\270:=\225=\372\275\024\3721=bs\024\276i\021\036<\222\026\203=8\200\346=\224\251\277\275hA\341\274\315\224&\274\2337\266\274H\333\265=\037(\004=\264z\236=\215\346\203\275$_\233:\"\020.\276\037}`\2740\224}\274\271\235Z=S3\345;\327+3>\254\256\236=#5r\275\265\266\336<\000d\033\274\316\261 \275\024O\250=\306\307\007>;\312\005\274\373\266\251:\200dh<\310\004\370\275\312>\207\274\024h\304=\303\tM=\336\016k\275{\352(\276+\211\310=\257^\234\274\253\261W\275\306)\256\273\030\213\354\272LFK=p\335L\275EB\237\273\270\037,>\256\206m=\337P\233\275\256\230\275\275\334\235\260=\330X;\275h\006\031\276\275\334\307\274\371l\263\275\250Hn\273\304\206[\274U<\334\275\313\3646<\311\326\006\276\357Pf\275$sA\274\350\005&\275\200\221\315=\017h\\\275\245\370\021\276\253w\212<\036\263*<\222L\377\275\340\326\262;J\222\254=\366o\223;\205\324\254=\334\276i;\214rV=\335#\205\275$G\002\276\377X\334\275\255p\210\275\311K\210=\341.\374;\021\351\360\275\351+\370<\201\247\257\2759\341\301=j\377\234=mX\337<7d\013\274\344\261R<y?->\\\030z=\002y\326=\272\330\333;\034:=\2765\310\300\275\300\245\016>\214\264\315\275\352\254\202=\010\310\032>&\200\244<\337\200\233=\222A8=-&)\276\256\307\201=m\270\325=\203Q\032\276\371\021\367\273\343\341\336=?\362\321\275\331\036\206\275\260\254I=:6\266=o2b>\377\030G=\3014\013=\221\277\037\275\014\275\240<\372\021.\276\024\374c\274T\357\270<\t;~\275+_h=\232\344\312\275\003$Y<\016@G=\376\003\364=\240 \350<|\332\212=B\244\202<oD\277=,\323\302=\326y\374\274U\205\314\274\272|\375=\036p\221\275>-\365=\204\254K\274f]\001>\0315\003>\346\316\013=\006\222\212\275\245\0306\2758f\024\276\235Fe<o?2>\255\231V=\004\377\217=\016.\322=v9\255=\245\223\311\275\035NC\275\217\276\255=\244\245\203\274\270\374\313=g\331\025>T\007\001=\3340\333=(\211\007<B\366\270\275\003\343\201\275\377#\367\273\315Cl=\255\341\224\274\316(\205\270\213=4<\242\220\342;\364\375.\276\277!\264\275\016\323)\276\326\\\024>3\324\266\275U\313N=\234\032\357\272XDi\275\037K\305=\277\237>=\226\310\211=\246r\270=\302\360\237=\211w\355=\\\331\266=\271\323\022\274\221D\225=}\372\372=v\373\336=\217\362\246<\324\005M=\217\231)\275f\004\261=\264\343\220=\327\206\021\276\372\245\267=i\027@\275S~\346\275\006K\242\273\237G\302\275\233\333N\272\201\252i=\240\037/>\326F\356\273\304\212\002\276\204\325\330=_[\354\2753\r\305\275\213\216\371=^\005D<\256\001\323;\341\212\330\275;S\026>\250\347\235=k\314C\2740&\300=\023\233\'\275\334k_\275\373\274\022\276E\306E>\335LJ=\371\367\341\275\2451\217=%\310h\275*\342\242\275\020\310\020\273\206\221\255\275T,\026>\0267\316<\260\340s<\203x\320=X_h=\031\242R\273\335\324+=0\\\200=\227\237\267\275\226s2\275\320\355\026\275T5\n>\257\362\302=#pB=\212\022\332\275Z1\260=M\254w\275z\261\036\276\322c\221\274\373j\366<)\205X\2759\345\010\276\252\264[\276\260\313?\275\033\237_=\0130\001\276\301\302\306\274\024\205\273\275\242AD\2769\316\331;^\3340<W\204\232=\027\340\333=R\201\027=Ib\367<A\2627<]\007\333\274\026\014\360\273\315&\266\272E\320\234=\026V\320\275\367\336G=\314K\375<\304\332\311==\255\273\274\311?\003\275g\036\001\274u:\357=,\312\257=\227zr=\235\252\265=Zx\002>O\014\205=\016\340\377\274\227!\242\275D\301\272=\227\345c\275\345#\007\275\010j\372\275l\020\230=\303k\021=Z\360\016\276\357\273u\274\340c\022\275\315\312\345<\327u(\272nY\r>\"\277h\275\214\006\227=\376\356\213=\205 %>\250\232\031\276\003\3643\275\034U\373=iN\375<\256>\270<n\377\336=\267T/>\241\312\006\276@\034\376\274\251\224\033\276\257G%>\n\261>\276\264\343B\2756[\254\275\006\214\300=+\203J<\201w\222\275\335\000!;\255t\031\273\323\214\371=r\272\207=\3171V\275\336\207\027\275\316W4<\247F\330=\037\203\276\274\214M\310\275\374]&>\233j\243<\266@\364=\003\304\360<\036\232\260\274)\231j=7V\t\275-n\022\276\225\225\223\275>X\023\276Z\033\303\274\311\320\002\276\310\312\007\275\256\245h=\004\324\021\275i\002\256\275`\026a=E\274\273\275B\246\004\276\004@\235\274!A\215=\262\272\021=O\300\021\275\260\027w\275\255/):\373\252%>*\331\240:\230\177B<\035\314\202<\366\036r\273\377\251\301=c_\000>\024\'\377\275\367\006\006\274\374\2158=\216\244,=\252\366v\274\325\365K>\375\330(=\t\373\310\275l\022\255\274\251\255\350=\022\0263=%/\227\2744\332\020\275\304\372\276=\201\273p\274\345\223\201=\370R\035=\347>\007=\347\371\213\275\271p\"\276\255x\025\275G\374/=\306]\343<\235\351\277=ob\035<\261\020\316\273\031f\367\274K{\024\276\\\327\r> Y\312\274j\034+\276\\\215\242=\r\'B=\211\t\234=\271!\244\274\310\361\273\275\242\024\372\275\0029\216=\265pz\275\207$\t\2762\363\376\275y\250S\2759L9\276\340#\177=M\370n\275\341\243\272\275\020\346\001\276\300\026\373\273\217Q\010<\230\311\217=\336\022D\275]1\216=\372\337\342=\2112&\275\303n\230\272\214u\377=Cb\350\275\n\273\001\275\217\266;=\226\242\002\276R[\200=\251p\'\276\306}\027\276\314\336\233\2752\222D:\236B\356<[+\031\276TLP>q\217-\276\211\323\325<\250)2;\342a\341\275\263\020\252\273\037\003\254\275\312s\377\274\014\027\314\274\027t\341<n\2470>\232\351\241\275\277\024\347\274\274|\331\273\361\313\361\274\304\212.=\221\316\342=;!\215=m\224\321=\243Z\332\275=\304\226\275\037G\013\274\016S\n;\375\1779\275\312\026\211\275[S\233\274\374\275\373\275\3208S=1\200.\276\023\366\203\275W\023\001>e\027\360\275\033X[\275\207\315\353\274\026W\\;\232\t\267=\030S}\275n\333\225=\2161&=!e\224<\337\333\255\275\251\303\366\275 \274\036=.\334\004>\331i\376<\261\241\240\275\223\350@\275\242r^\275\212^\003:\353\302\254\275<\270g<\264q\002>%C\227=\307\235\002>\025\235\341\274\205\3714>\343iD>\241\276D\275\223S\236\274\225\274q=x\010\030\275\364v\217\275[\212\016\275]7\221=\307=&=\"}\343\275\005\361\340<\340]\233=\345<\007=\240\001n\275\241\211B>\372$\311\275\210<\344<\271E/\275\264\345|<\343\227\025>V\'\376\275(~u\275\370g\207=3\312\334<\020l\344\275*\333\020\275(j\216\275\245\217\271=>\376\247\275\204\304\034>3\276w=\326\035\361<T\364\263=\367\237\212\275\030\030\261\275\252I\010\275\351\277\335\275\030\372\244\2751\252\203=\204\262\024\276\231\376\237=\204\205\311=\335\373H\273O]\323\275\330\212\233\273nS[\275|F*\276\003\270?\275\224\306=>X\214}\275\215\277\330\275v\333\216<}\236\242\274Wg\256=\234&?\275\250\346\227\275\205\217\276\275\031\362\036\276\271\251N\276\tJv=(k\301<w\2270<vuc=g\337\253=3\230\350\274_\351\023<\010\000{=c\n\345=\270\240\244=\357\365C\275\255P\206=g\264;>\315\242\260\274X\300\210\275\222\227\000<\331\200\200<\346%\277\275\235\312Z=\346g\006>\315Wq=\307PB>\323t\310\274\"\270R\273gX\211\275\024\313\020>xC\373<\016\233\347=\320~\275\274\223\354\315=z\026\320\275.I\353;%\3224\273\305\177\271=\366\263!\276\014\276\024\276U\215f\2731k\234=h\2668\276c5\351<^\323\226\275\337<\003<\3040*\276\335\232\241=\315\331\210\275\016\217\245=\3146>=\2017@>g\377\334<\335\321`\275\324\335/\276\021\240\347\275\204\330g=\254\325\355=\204r%>\366\353\367=\204^\206<\024\353}\275\375\325\237=\317\217\316\274\322\2131\275 \217\200=:\341\303<\247\014!=pt\233\274\371s=\275\316t\013\275\251=:\2763o\356\275\363/\226=\037\306\001>zN0>7\r\223:\220\267\263=y\311\322\273\210\301,\275q\006\202=\242\237\307\275\355\214_\275GW\t>/\211~=W\350\024<g\t\301<\034&9\276D\343S=-n\213=\246\277\204\275\376\377f\275E|6\275\316\337i\275\231\225\307:\224\200\377\274W\214\330\275\214\332#>\000h\360\275#:\375=\365\001Z=\344\357=\275Cl\223=\004\245\251\274\3462P=m\307\017\276\177\317\266\275$E\323\275N\035\224=c\263!<\364\327\277=\003: >\255z\367=\177\"\336;\016,\253\275\200\034^\275\2748\344=\227\246!>\304\'\002>\374\303#=V\014\363=-\334\371<\t\237u\273\2228\237=~h\320\275\270^\216<z\312\201\275I\371\262\275\366\t\223\275\013\201\365\274\217c4\275\340\272o\274d\330C=\016\225Q<X\024\211=\242\014\365;kA\030\273K\303\366\274\337\342\265\275B\033,\275\205j\305\274\r\233\010\276\327\373\004\276\202\350\210=|\177\275<Vg\327=\345\272^\275\350aT\275k@\241\275\232\014*<+\362\212=h&\333=u\265\021=(\0173\275\001\357.\275\340q\316=__\224\275:\322g\275\037\251:\275\245\265\204\275\220\356\257\275\362\224\326\275!w\257\275\'C\353\273H\232><G\301\342=fP\005>9\261 \275\327@\005=@\224\032>gZ5\276\014\300\r\276\355C\007>\232\201\357<\275\345c<E>\024=\253\231\036\276h\350\021>w\266~\275\341\3744\275\362\360\365\274n\302\013\275\275\256\211\274Aa\005\276\2621\334\274+\250,=\356@\367\2741\304\205\275\023\230\252=\364U(\275\036A\342\274g\306]<\177a\322=\366\211\317=\222\205\272=\"\265\366=\004\366\204\275e\t,=\212?\227\274\200\265\261=\006% \275\213[k=\360\032#<\016;\210=\240\241\250<w\370%\275\330\325\306<\326\022\003\276\004\373\216\275\005\252H\276\031\215#>\272\0131\276\231\216\210=\322\020\365=3\245\215\275\206\207\373\275E\3209\276\314\362\366\274\277e\300=;\223\327\2734lm<\260\360\334=\217wI=\010CQ\275\017\315\343\275\366\251\245=\346\312\313\274Sl\231\274.\335->\377\254\344\275]\376\200=\260m5=wxZ\274\330\252%>Ww\330=\357\353\255=^6\247\275\357\001\367=B\325\226=:Y\246\275\013H3=\373g)\273C\021<>\231\224D>H\0220\276D\2578=\342\004G=\216\371k=z9\305\275\206f\332\275\372\377\273\274\021\202\326\275\301\261\373\274\207\310\324<\027\2477>\251\363\211=L\331c\2731m:=z\\+>\377\217w\275\264|\243\275k\374\025\276\237S4\274\260\306\30695\334/\276V\216\030=\233K\360\275C!\035\275\207\230\005=f.\346<\375\366D=E%\006\276|\016\254\275\317\214\345<r\356\221=\223\311\204= \005\013\276\351l\032\276\243:\235\2750pA\276\003\3361\275=X\274\275\345k-\276\316\275\022\275t-\315=\010\367\031>\240,\355\274\204\241H\275\rH\232=V\311\262\275C\030\335=\003\177-\276\035\n\205\275\244\340\205<Z\215\233=\020id\276o\255\372<5\246X=6\344\216=\037\035\014\276\"\206\310\275\t\364\345=\344=F\276\2620\201\275\242}\273={\337\342\273\023Qb>\307\330\277\274\220\313\004\276z\201\250\274-X\031<Y\334+>R\010y\274w\300\200=*w\212=\364&q=\232\374\000>\250g&\276\034\337<;v\304\261=\260\215\037=\254\016\000>\314U\337=\216\212a\273\212\nm\274:\016\005>\272z\327=\227&\366\274\360O\021<\032\035Z=\310f\'\276\033\323\227<zT\027\275\030\360\373=\001\304\335\275\237\347u\275\231K\227<~\216\000=\\\307\324\275v\321\033>^M\337=\230\377D\276\273\315\300=X\206\202\275\277\013\037\276x\3450\276>[\316=[9R\275\274\266\212\274\2724\332\275GY\037>x\252+\276}=\330\2751\260\353\274\353L\311\273j\340\320\275Jq0\275\333bv<V\362\343=\230\350y=\005\356\330<\314}\250<\200\324\264\275\273K:>\263\031\013\276\315\365\030\276\371\'D\276U(\205=\025!O=\277$`=*oQ><F@>IIT\275\245\201\304<\214\322\320\275^\323.=\002\367\n>\266Hl=AlI>l\344E<\264j\000>5\031-=\264\037\r\276\334\376\223\274M\352\317\2753\010\267\271m#\277\274`\273.\273\240\000i\275/l\222=\252\300\341\274-\320\013>CG\247\275]\213\014=\307\250H\274\277\363\265<X\250\313\274\0341\310=\207\253\212=\034\223\342\275C1\207=\317\354W\276\321#]=\004\235#\275\351\324\241=\214\2353>$u\345=*>\354\273\326a\367<\020\035\241=\004cx\275\202\274\246\274\360\214\327<(\013C=\371\270\377=a\255!>\002E\361\275-\266\242=P/\024\276f\232r\2752^\010>\037\346\003<B5!\276-u.=\264e;=!\344\025\276t\nQ\275C\201\260<\305\007\202\274%\2709=\3452\014\275:t\225\273\237x\332=\254\300(>\230d#\275\360\223\350<\234y7\276\007\2676\275e\234r=\326\356\343=\326\312\233\273\325\3505>\315;-\276V\032\027=\023\204r<\256\241Q=l\005\243\275\036o\016>\014\032H=\2446\302<,8\226=%\007y\274|\265\023\275<\0061>\033\230;\274\274\242\331=>\305\316\275\321\201X\274\322\213S<Kf\355\275\036\250j\275T\360\025=\n\346\227\274\371@\205=b\200\233=\352\265,\276\351\324\275;\252\021\203=y\n\302=\374\023)\276\005\276\227\275\005m\240\275{y4\274\250\237\'>\354l\207\275\201{\257\275\305\3115\276\236\355\006\276l\337\332=pHq\275\024y\333\275\241\245\340\275 \023\013\272\354\017\032\275\264\261\374<\006\251\333\275\265Q\321=\353;n=\276\210\307=\334\271\272\275\245dU\276\300\214\r\276\247\027\313=\235\223\021>~<\241\275}\373\215=\311g[={\253\355=m\276A\275\325^\020\276\232vY\275j\"\352<\177\201\300=\007[\351=\206\320\021\276B\312\244\273\202/\253\275\307\010\227\274\207\331\365\275\3434\004\276\373\217E=6\272*\275\373\364!>\206)q<(\370H\275\266\243\363\275z#\031\276\356UE>jd[\275J\225\350=\322\371c=\367>\364=E\313;\274\201\205\337=H\222\271=\372\251\236\275\316p\376;\261K\035=\364v\034>\376\217Y=\262\264-\275\351\325C\275\303\257\244\274%\000N=\205\367\370<\345&b=\006\030\330<\204}J>j \315\275\217J/\275\312G\341=\242p\203=\351\006\016<\276\343\206=\232\371\212<\227\203\370=\2229\216;\217#,=C&\305:\337!\035>l\262c;/2E\275\371\274&>\001\260\007\276\273\250\004>\267\232\236\274\260G+\276\320J\202\275V \307:]\024V\276\374\242\004=\306\273\240\275\214Wa\274\030\366)\275\3210\244<\'\302`\273E0\372<:\343\274=\330\231\215\275\017\364\360\275`go=%\2016>\233\212)\276\312\013\340\273\357\250 \276ju\230=eOI\275G\231\264\275\030\341\352\275Q\221\275\275\366j3\273\254\000\224\275\332\245Z\275CQ\021>\032\211\313=\226\277\350\274\246\001\264\275\215vz;n\241\211=\210\356\037\274\234\351\024=\320?6\2755%\000<\014Q\227=P\327\317=\237\020#\275\327\220,\276\177\253\023\275\031\253\273<Y\'\001>C\255\241=an\331<\\,\353\274\021\036g=\017S&\276\001\260\362=\271U\337=?0\312=p\342\n;\370f\307<`\227\374\275\031J\007\276\372\2143=+*!>&\326\223<0\216\\\275\377\313\237\275m:s\275\002\357y=s\313w\275\342\255\205\275\303\220\361\274\244\370>=D\260\374<\257\345\350=\204\2349=\225\342\003\275\013\205m\275i\030,\276\335<\027>\257\242\366;\004\2173\276e\257\231\274A\354\233<\247Q\301\275\232\303\256=x\026\277\275Nn\000>,\177\023>v\252Q=\224\033\243=\036\004+\275Z\'\213\275\260\361\226<\235\356\032=!\354%;\324\202.=\312\243\353=\263\325\342\275\220:\207=\361\274\007<\t)\316\2738=\355=X\236\025\275\256x\023\2753\250\200\275\330{a\275\231/\230\274\351~\026\276\276}\364=\022\233\230\275%\353\t>\302\275\227\275+\324\321\275\243v\023=\370E\336=\024#\235\274t0\333=\237lz\273\336\353H<c\2502\273(M\004\275\025\300\202=\005A\344\274\2772\215\274\315m\226\2754\327e<\257\305\225\274\023\342\206\274\304w\033=\206\203\264\274\330d\t>2\234\334\274\354&\304\275\366[i\274\373\253\367\275\345~\267<\210\242\237\275\230\375\207=7\227\210;\351\215,\276\306\207\343\273\261Y\323\274\231u\006=1-T<\273\317\254<\374\343;\275\273\265\020\274\245\226\342\273j\3448\275\004\204\317\274\265\336K>-\342\347\275n\206\213=,\3473\275[\215\363\2752\362\350=0\362P=W~\230\274\263:\250\275\321$\036;\032\262p\275p\354\316\274\204\t\204\275\035\274#>\037\210\214=\345\333\345=i\334\256\275\267\342\337=\030~v\275\267mE>Y\"\212;\242\222-=\345\257\006=Ue\217=\033\312\351\273gw\024>[6I=\267 \254\273/\224\037\275?\253,\276\361\227.>\n\006\362=\241w\373\275S\002\264\275\203\332\210\275\023\341 <K>\337<\256\334\337\274\202\335\000>x\201\321\266\337\265\035\276\2118|=\001\220\253\275\334\375\252\275n\326\203=\326[\273=\2455e=\326\353f\274zt\333\271\023\260\025>f\t\325\275\261\341I>AE\267<\177u\304\274u\311I=%\223k;\025\356k=\254\204\274\275_\273\210=\242\'\"<\266j\336\273\326\274\324=v8\025\276Y\276\027\275$\201\371;R\334\324\274\243\017\036>;\372)\276\300,\245=\203\211!=\032g\001=\204,\247\275d\367P\273.\214\242\275\214^\224=\311bB=\363\221/>\003o\337=u5.=\366\334\025\274\247\276\342\273G\377\233<J\362\022\275\205\222\255=TK\267=Bl\241=\333\307\\=\267\"\024\274\313\246(<;\225\033>X,f=g)\205=\345\256\370\274V\342b=x\031\210\2759\353`=wO\002>\366(\266\2755}>>\356\356\310\275\013\001*=i_\215=\200\374\206<\010p#\275n\213\031\275\377\267\002=\226\364\251\275\311\rX<2GZ=rBq=v\027\253\274\336M\214=&\326\257=D{q=V&\305\273/\316S=\207$>>\266\317\001\276\006n\343=\021\246\315\275\351jc<\374L\346\274-!\224\274\201\035\265< \277\356=gzQ\274\262Z\201\275b\207A>\253c\317\275W\t\347\272\203\256\t\274~o\036\275#z\217<\307\2560\276z{/\275\031f\177\275\306\223\340\275\377_\003>\217\024\010>7\341\224=\223-\205\275V\t\251=H\377\362<\031w\030\276\324\332\206<M\212\352\275\220\322g\275tH\212=\302\010*\275;\037 \276\316Q@>\006\"\271\275v@G=v\311\024>\0236(=\320ok\275\024pa=#e\266=\314\027\373=\362R\\=\211\024u=\304\021\037=\245\225\004\275|]W\276?\3178\275\272\\\362=\240\257\242\273.\301\350=O(}=\304\227j\275\236*f=\037\354\354=\245\r\263\274\236J/=\023\364\271\273m\350m=\3103O=\037\251\367=3~\301<:\345$\275\271\006t\275\216\2248>\337\301\244\275`\252C\276I\360\230\274\372\341O>v\310\322=l\377\226\275\335\233\312\274\036\225w=\271\205\251\274\200^\356\274\206A\253=\200\241\331\275Z\201\020>\\a\350\275=\253\033\275 o\002>\331\373\r\276\377G\310=\034v[\275\343\277\230\274\361\n,\276\376}\n\276\001\3066=O>\301\274d\340\t\276\274\203\352;n6]\275\030\2732=\267^j\275I\362\334\275\025\232\364=\237\177\314=cY$\276uU\334\274\r&\250\274\350\217\241=A]\016=5A\203=\235\034V=\303\373\005\276P\021\275=\263\326\010>+o\020\273\210\370[;RW%\276T\007\203=b\207\350\275\013o4\274\333\217M\275\332\022\034\275!\323\334\275\2648\367=q\021f\275D\227\037\276v\234`\274{Y\252\275\354\340\203=\222\035\n>\235\310\'\276\242\371\316=<\201q<\256\273\210=b \007\276\031\022\231\274z\263\201;\272c?:Z/\022=\003\357\021\275y\343\007\275\007\327{=\247[\226\275m\177)>\217@:\276\353A\360\274\3119\036\274\322o\261=4\026\267\270l\363\341\275]\034Y\275\207!s=x\352\013\276_*\204=\325\325\367<\3179\004>\367\235(\275\334_#=\3132\233\274\026/9<f\351l\275\334\360\231\275\230\\\356=q\254|\275\210\367\027>\237\315\205=\316\024\217\275\366\237N=\274(\202=%G\005>\022\333\031>\036j\325\275d\244\274\274\223\271\270\275\010}\027=w\\%\275*\251\023\276Te\305\275\240\004->>\223\">\nW\035>\177DA=9\375\323\275]\331L\276\247\243H\275\0315\037\274\357\355\223\273\364$\340=\374\273\226=\373E\235=\352\314\234=s\341\203\274\373\002\246;\275S\362=|\310C>\254O5=\345I\033>Yk\246\275\346\334\217\273j\031\267\275]\230#\275\0240/\275\243U\232<\201\331D=\304i\031\276\240\332n\274\210\375\035>s\265\016>H\257\n>\202\357:>?\226=\275\214\342\324\275\264\220\306\275\202\373\207\275\254\031J:\r\311e\274\',\033\275b\225\010>\2600\005>\313\326\214=\320W\321\275\372N\356=u\353\225;<vU>\357k(>n\335\370=\3527\262\274C*\004>\307\345\320=\242\336=\276 X\371\275\307\033\272\273\365\364\373\275?\245\026\276\371\010\236=\rz\033\275\262;\022\276O\260/\274\242}\315\275\240\351\t\276\310\233\205;\244\210\243\274\307\204f<\372.\002;\2145g>\365\276\303\275\202\206\362\275\nTU;u(\337\275\307\331\243\275\367\030\017=\360\375b\275\336\206.=\036\264U\275F\346\304\275\242\355\006>c\213\272=@\036\252\275$\001\266=Z?(\275\271\243\360<\256\316\017\276\007,\035\275\353\227\352<=|\"=S\321q=\344\245p=nB\203=z\302\264;!\365==\227\030\377\275\307J\036\275\233\326\346<\014\247\022>\260\3431\2765G0<\267L\362<\221\216\224=hX\236<y2;\274~4\210\273\r\326\200=\306d\017>\"y\206=\030\237\234=\305#\300=62->\214S\313\273\327\272\366\271\371\315,=\344\341\243=\206\364\247=3Oz<\036&\207\275<\004{=\376@`<\250\371\341\275C\275\371\274R\276\211\275\27216\275`[\247\275\222%$<\253\331\260=\003\206w=\354#\\\276|\330\264\275\032\034\331<\240\203\250=\210M>>$S\234\275H\260\027=A\256\376=\027\322\017\275pW\230\275\034\376\347;\006\014#\274\241\372\036>\034P\001;5\301\334\275$\266\347\273\214\361\351<M\021\265=\021\013\236=8\355R\275\362B\307=\021\030\002\276\035\231\262\275\367\260\221:XMH=\342\336\277<S\014\323=<\245\373=x\201O>\020\204\216\275\255z\273\275\217\215!>i\007j\274\300k\265=q\305\300=\376W3=c\214\326<\340\225\232<\025Hb=n$p\275b\265\223\275I\"\021=\'4\370\275\321\206\226=\314j4\276\202\232\206=\036);\275\336~,=F\333\375\2750\335\231\273\245\254\324\275\237e\306=\034\376,\275\3609:=\244\217\250=Y\366\000>V\340*\275\207F\244=5@\262=\352\272O\275\270\3644\276\213\274\232\275\207\027H\276\025\3342\274\301\027\343<\014\334\253=\026\352==GX\372=}\260\245\275\210>K\276\251\234\005\276\007\220\365\274nw,=\303B\305=\211\277%>+\274A=\313I\201=+\367\017=\352J\324\275\261\374\265\274\0351\252\274\352\023\332={\017\226\274MUa=Xe\\\275\005C\253=\311h(\275\260\021\327\274\207\005$\275\024\3400\275\336\265\312;\3152\214=\036\210 \274UmR\275%\232\235=x\225\235\275\006u\311\275\024\363\353<\352\216S\275p\277\335=!3\336\275\034oe\274\203\335(>a\344\216\275k\203\266=\314\315\350=\323\034\224\275\325\263\235=j\235\001=\310a9>\277z+=C0\202\275\327\332\027=\375\217R\275\001\333\013=D\2066\2754\322\212\274#\246\030\272\260\217\332<\267_(>\n\377\342\275\304\321\023>k\032I=\354\240}=P&1\274elo\275\261\233#<\244\215\\<^\3454\275\r\343\017>\302\373z\275\272b\374=\346\254\271:\330\033\371\275\303`\264\275\257R\002\276\350\242\270=\221N1<\3201/=4\242\305=\344\021\036\275l\300\301\275s\022o\275\220\266\014\276\376Fb= \316\263\2754\261\343\275\0375G\273\311v\303\274q\315\231\274\245\331M=<{%\276\366\331\031\275\355;\027\275.\201b=O\312\205\27425\354=w\017\001\275\3673<=\307\004E>\370\226j\274\034\303\326=P\333Z=\260\247\226=\037LE\274!4j=,H\303\274\227\300\025\276\026\342H=\2734\007>\337n\202\275\016U,\276\352\250\233\275q\376\334=\255\2420>[\367\307\2759\254\r\276\264\205\330\275\244O/=%0!\276E\007\211\275h\354\362\275\372P4=q\327b=\234_\"\275\375\373\021\275\321\025\246<\315P\346\275\316\242Q\274?\016\177=\331\272Z=\010\213(\274\023\336\215\275\000T\232=\216\033\024\2760\366\036=*\036\343=\335\213\236\275\303\342\201\275\275\366M>5Q\247=\366b\253\273\350\214\201=\277Wp\273\007v\262\275\225Fk\273\024\305\314\273\372\364\367:\177\2148\276}u\262\2751\223a=\361g\310\275D\n\016>\305\270)\275s\0006\275\374n\036\276f\215\212=\230\334g=\330\351o=\2037\325=\240\033&>\314\316\017\275O\267\325\275\305\251\r>\237\200\271=K\2230;\036\266\222=\2720\367\275*e\347\275\247EZ=v\341C\275i\271\376;\353\362A<\366Z\255=\305\000\220\275\271\241\312<,y\n\276\364\375\r\272<\343D<\263\214\261\275-\244H\275\306\320\212=\nI6=fk\217=\003W\013>\205\223\310\275\220\251\214=\215ZO\273\004LV\275\006%/\276\242\355\'>G\316\360;\252/\347\275\340\332\226\275\245_\200=\205V\267\275\254\271\311\274Di\335\275*\230 \274@V,<hf\021>\321\030`\275\022\221L=\344B\315=\367m\313\274\274\316d\275P\037\304\275>\024\001\276\215\210\207=\251r>>A\330\373\273\362|\000\274\233y\220=\r\254\311=\253R\010\275q\217\207=m\353\026>\263\307N>;g\250=\336\037\223\272\205I\220<!\302W=\360\330\031\272\n\376\213\274\305\274\255\275,\326\200\275l\207\263<\237\212h\274\0018_\275T\017\005=\253\347$<\352=\000\275y\220\322\275\367\375>\273.\226$=\\\3620\275ih\034>Z\330r\275\212\'\263=\216\303\\\275\'\035^=\212\262\212=e\241\275\275\037\301\010\275+\362\013\276$\326\306\275\375\277\006<\351\007\234<\374\001\370=\232a\241= )x\274\361\243\001\276\305\302\375\275\022\265|\274\013\267\311<\314\275\202=<j\033\276\362\301\223=\243\206\032=\347\306k\274\231j$\274L\302=\275bE\363\275\323:\246=.c\370\275\220\223\347\275\332\025\027\276\301E\364\274\230\223(\275\363Z >\357\"y\275\244\313o<\346\370\013\275\346g\274=E\006\204\275\025z\024\275r|\337=\337\327\033\274P%\300;\306\307\254\275\203\335\212\274\215i?<g\320\346=fg\004\276\003W\001=\\\256\t\275\275U\207;5K\233\275sl\204=\006\363z;\322\346T>\201\321\227\274A+\240=\300?\373\274\230\3048=\010YM>\341\215\355;0N\"=\"\236\236=\240\241\305\275\371\030b=\362\323\267\275\005\366E=\234$O=\200\024\277=\213\327\235=\377\232z\274YK\311=\253\223\036>W8a<\206\007F\275\330\001\224=\211;\000>Kk\031\276\222\316\271\275\364X\325\275\236\334I\276sg\034\275\331L+=\315\346\202\274\361\317\007=\361\364\273<\243\347\177\274\017\2716\276\177\010\301\2749(\000\275d\357\371<Lp\301<t\270\240=\240\307\005>\222~\271=H/K;\240\010\303\275f\237->)\224\306\274\302\n\235\274\002\rO<\263#\314:\320}\202=\327\025\365<\007\210\235\275\031\260&\274\227\376\314\272\224\364\013\276\375\016\016=c0&=\222\023V\275o\3020\275\0100\016\275\350]6;\001\263J\276WA\325=\245\212\223\274_\362\000=\241bU=0q\276\2759p.\276\"\277\023>\362N\025\276\261r\337\275\362>\016\276\216.e\274\343g\026=\177\237\264\275\366\235?=W\336\205\275\022\223G\275\276)G=\334\307\007\276&z\213\2759Mj\274\351<\222;\003\357\273\273\373\337\010\275\207y\357;$\224\031\274y\321\225\275\352OQ=\324}\007\276]\316\215\275a\264\n\275\357C\344=\320\324U=K;\245=h\204\247\275\264o\240\273J`\365<9L;>!\320$\276WP\354\274Bd-\275\026/\330\273n\240.<\365x9>3\332G>{\346\027>\3634O<;\365\202\275\267Q2>q\266\243=\003\316\343\275\333\373\335\2756\nJ=\322om=\363\025\351\274\376\r\334<H\256\250<\231\376\343\273Z\0303\276\201\333\273\275\374\264\234=\263\034\336\2738\344\210=\001*D\275\035\321\376\274|l\226\275\203Q%>\302u\220;l|N>f\361\201=\331\031\215=9:I=\273K\356\275\334\274R=[(G=\263\242Y=\300C\'\275\205\223N\275.y\243<\277V\225\275\220Q\213\274\326~\010>\033\213\375;\351A\260\273\020\232W\275\035X\360\273\010\250/>\273\233\262=5\246\230\272\265\302\266\272\017\024\265\275\352\033\341\273\024d\274=Y\032p=-\255\273<\306\021\010<I\370\225=\373^~=H\336\273=h#&\276!\250\356\275\214\2427>\351j\016>| \210=\352\022\036\275lt3>\367\270;<\022\016-\276\025L\025<\267\343\331\275\3537\017\276\021\232\272\275\3432P>\001\371\034\276\307\217\035\276a;z;\304\253\027\275\305\\\260\273\341?\257\275Q\346\025\275yY\264=D9\206\275.\257$=\3766\225\273\245KN>on\025\275u\252\217<\315\241W\276!\022\005=Dk$\275T\342\330\274\242\253U\274a\270\231=\330+(\276\0010p\275{@\037\274,\223\334\275\246o\247=hR5\273\373nR=\353\213\330<w<\345\274Sy@\274\216%\266\275z\"<=\013\270\\=\234:,>\353\260\343<yU1\275x\370*\275C\215,;\250k\213\275\266\231\210=\250[K\274GIl=\251mb\275\252\346\271<\\+|=\327\\\234\274n1\030>j\363i=U\354\254\274k\331G>s=\242\275~0\317=T9\223\274\253UA\275\263\333\325\2754\215\273=\333\367)\276G8\333\275\301\272 <\017F\305\274\000\233\007\276\332\213\024\275\251\016\254\275\275YM;\314JT\275u\243\211<\353\034\010>/\300\217\275~U%\2765\222\270\275jh\033\275\213\003\006\276\202\2546=a\206\342\275\021\030\341<\222N\300\274\226\002\220\275<\365\317=\030\3203>|_\363<\357\351\315=\304\350\243\275\005b\347;\270U\214=e\213\375;\010\014\r\276;\306\302=\355J\030=\335\330.>2\371I=\263\271\177=\224\230\201=N\210R<&\032\000\275\357\261L=\236O\023>\211\304\345<\277$6>\323\036\037\276\201\367\253\275/W\030>\023\367\221=\313\335\327<\227\372\332<\332l\364<\303\031>=@\317]=k&\236=\251\376\003=\027\363\261=\005l\023=\315$+=\356\263\032\275\243#Y=7\345E<)WG>\256u#<a\230\350\274\003\243\256=\327\326\000\275[T\214=2\360\021>\331\207\003>D\031)\275\0375\253\274\317\0278\275;H+>:.\010>\247\347\250\275:(\022\276p\314\376\273d\376]=E\264\261=k\226\017>[\201\222=\217]\271\275\311F\305\274\030&P>N\006\227=\275~=>\257\255&>\213A\270<#\275E>\333qS<\255\207\177=_\250`\275d\257\346\274f\234E\275Yr?=J\367\240\274\366\310\270\275C\303\007\275\211\343\302\274\336\267\355<\353+\263=\367ZP\275\301e\304\2746\024\244<z\341\266=f\334s=q\010d\274@\201\251\272\351\333\357=J\004\\\2756\310\227=\034\206,\276\031:\274\275\255\272S\275|\222\256=ks\232=\034?\213\275\324\013\032=\312E\020\275\303\270\305\275\357\260\322;\231\205K=vJ\353\274>s\305=\260U\350<\333P\303=\273\001\365\275\223`\342\274>#0\276\204\216\251<F|9\274\271\262 =a\344\263<\202YG=k\221\355=5Y\242\275]u\202\275\354\316\222\275+.?=\322\021\242\275y\332\026=\363J\217\275\034J^=H\361w=hb+\275{\\\265\273\350\214=\276c,\025=\353\001-\276n\240#>\260L\245<;{\361\274\231L\316\275\351M\375\274\312\267\225=\177B\264\274kT\354\274)\3152=L%\375;\002\177\017<\311\363l<\rq2>\271\003p=Q\\\320=\221\235`=#\025\006\276-c\t\276\036\220o<\360\236\003\274A\200\017=\010U\273\274$\037^\275.D\304=\301\344\375<\366\204\206=1\354\370=\260\306\363\274?\252\001<\345#\203\275Nk5\274\246PC\276+<\272=\236/\372<\025\3667>;\347\375<RD\223\275q\000\241=\242\302\237=5\2676\276\303j\267=\255\311\246:\013\327*=e\276^=K\374\246\275\317\277\031\273\204:\374\275T\321$=\335\355a\275\224\371\001\276Z\214X\275q\211\014\275\320\313\031=Ta.\275\2552\362\275\004\331N\275\035>\026>\305#\216<\006fR=\333\341\251<{\236\323=\243\251\372:{\365\031>_\307M\275O\217I>rk\325;\234\r/\275\367\316\234=\361\343\257\274M!5\276\037\231_\275\305\330\213\275\027\031w\274;\233\273\273W\216\035=\036\022\006\275\352(,>\021\316\306\275\272J\204\274\207\256\322\275\' \261\274\n\330\314=\032=!=\230\210\013\276\\g\261\275\324\336\005\275\272\355L<w\352\016\276\226R\002\274\270^3\275H\277\340\274\tIH\275E9S\274\333\003\327\274|\014\032\276\027\342T\276F\264\205=\303w\342\275\375b\345=NI\327=\300\360<\276]\252\271< \"\203\275\014\261\255\275\365\3253>\250\340\017\275\312F\340<C\003)>\261\222\037>\247\345\346=\031\032\367=\014\037\320=\314\247\242=\224@\226\275v\233\314=\033\230\311<\324s\225=e\260\235\275\240\312\223=m\236W\273\334vN=\233\036_=\237\344\002>\203\213P=\237s\235\275\354\352Q=\353M\345\275P\\\351=gQ5>}\3706:T\237\001\276#\331\207\275\273z\227=]c\025\275\355\230\003\275\333\256\331=q<\306\275L8\274<\333\331\356\274\3323\224\275\271\215_;\003\353\264=AL\t\275?\206&>n\0375\276\354\004\235=QN~=\275%\003=7\373X=\r\323o\273A\037\n\275v\271\212=X3\226\275\224\256\010>\373\242\025>\276j\t\275\247\301\276\273U\027w=\212g\372=.\231\302\275_\250\222=+\037\347=\354\350\245=:\021\330=\272\023\225=\363\2735<\223\212\033\2763\375\316\275\252\323\323=\206\337\034<\266<n<\tm\307=F\207K>\201n\'=\377?\376;\367\235\232\275\022\272\253<\211s\205\275n\331\266\275V7\203=\372(\023>\0050\361\275\317\'0\276IA\356\274f\314\022\276~\330\026\274\006P\035\272\034n\313\275\000\252\236=\205\324\026\276\'\374\376<\341!k=\250=\032>\177\014\204=\002\005\206=\023\225\020=\rb&\276#Z\"=9\020\332<\331\'\247\275\375\270-\274}\224\005\274_\202I\275\361[\222\275\207\235\306<B\351\031>r\3339=y\314\244=x\035\333\275}\2422>?\364\330\274 \037\245=\305\324\344=\364 _\274\001\371\241\275\027\326{=c\343\217=\350\226\006=H4\360<B\265\026>I\330.=\005\350\021\275\205\t\001\276\256\3251\275\215\371x<N\005\037>\r\030\021\276\030\241\315\275\374&\345=\360\235)\275\252t\347=\005\262\337=\344\231\306=\334\007\023>AM\263\275\367b\217=\221\264\023>\332\273\360=\232A\207=\2065\211\275x@\203\275\021\347\252\275\021\224\357\273z\335S\275\371\301\005\276\307\023\021>*\002\361=\275)8\276\324\t\226\272\"k\236\275\357*\247<\t;$>\241\370!<\221\342\007>\256\223\020=\227\340&>\333\352\333\275\351;\230\275o\272\351=6\344Z\275\3303\300=\251.A<\034\031\024>{\321\242=\000#\002=2\207\032=j\330\221\275?\001\276=j\034\013;ef\267\273\246\013\"=qV\020>EZ\004\276\342\310/\276*\005\225=\013\236\020>\2758\213=#w\326\275c\206\237=\215\021\240=\025/\236=\027:\315\274\303\377A\276\204\336\337=\364\313\212=vC6\274\377\366%>\243\273\335=\tK\225\275\350\2529\276\331\0039\274F\320==\354\336->4\007\352\275\374\373\010>K\342q\275\034\372T=s\023\207\273\275\027\037\275\376\rB>\236\013\331<eN\030\2762C\001=\346\220O>_\337\022\275\327\300\233=\363_<>U\323\220=\326\300\010>\320\207e;\347\364\352\275I\032\342\275\301\3636\275CS\232=\2306\200=\331PG=i\020x=\2502\212\275\001\212\001\276N\307\200=\014\024\244\275OF\226\272\000\347\000=\026s?>\343\325K=p\013a;U\313|<\0309\314\274\r\335\251\274\303\221\220=w\363\347=\373\026%\275}\266\250\275\302\024f\275ww+\276-Z\346=\307&\353=H4G=Cd$=\302\000\226\274|Y~=fw\244\271I\032\020\2725\361$\275z\033\335<\037~\252=j5\260\274A\220L\275x\372\375\274x\226\302\274\362\276\021\276|\311\200\275\232\373|=\t\315\215\275\372\363\035\276\354\351z=?\361\277=\364i\227=\264u\327=\344D\036\275\324\221 >]\246\306\275p\323\032<\255\304M<\261\332\362=L\000\303=\305\256\300\275\274\327L\276\344\346}\275j\325\276\274+\t?\275\220?\023\276x\203\345\275.\275\027\275\003F&\275\030)\326\274\361\032d\275$\331 =E\347\246=\2763\225;\356gr\273j\031\371=\226\324\206\275\347K\027\276\312\335:>hL\275\273\024\231\200\275\251\202!\276\364#\364<\250\234\347\274\r\344#\276\254\014\232\274\266qB\275B\000\253=\225\215g=\tV\"\276nq\316\274\177\376\230\274\003{4=\245\307+=(=\321\275\325L\010>\214\026\032\275\313\2448\275O\234\257\275\013\320\010\274\272\276\203=e\214S\275\023k\242<\377}\023\275\307\302\254<xfV=LF\035>{\020-=\251\214j<\"\345\213=\334 n<\347e\375\275M=\374\275\033\335.\276o\276\303\274\316T\206=\024\324 \276\303\227\323;\316\245:\275>\003\035>\370\331;=\323\320\004\275\237\234\244\275\005\201+>\336\312\337<\243\276\"\275?$\035\276\327\222\214<%\010[\275\001\343\231\275c\272\331=\244\277l:\375F\240\275\272\351,\276?\310T=g\256\376\273eu\320=\032\247\033\275\030\340\230\275\235\205\345\275\314\240\266\274\316%\310\274\326\251==\245\003\233\275\374\325\214=h>)\276\247\023a=\204jp\275`M3\274g\233\316\275\0354\331=\347\304^=\021\322\310\2755\261\007>\272\361\322:\305\274\221\274+\277!=\243>\022\276]\232\302=c\300b=\206\233\265=\321\242\316\275\373\342\237\274\"\005\'>\027E\035\275\311\177$\273)j\304=\035ML>\346\032B=\362A%>\032O>\275\311~?>\023\n\r\276\234FY>2w\005\2757\034H<1\365\223<y\035w=\310\033\335=\221\016\307=o\367\267=\215&\373=n\222\254\275\312W\021\274Q\237\000=\370\177\214=\353\035\014>\237<$\275Y\364\003>\313\013\024>R@\341=\206\341P=\032\246\275\275\3549;\275\355S0\276\014N&\2747\221J<\304\1777\275\024qF>H>\205\275\034>\034\275\007\317->V1\n\276\036\320 =jYZ=\350\270=\275\3060Q=G\212p=\372HA=x*\376=\271g\271\275\325\315\211\275\214\0102>?\020\274=]\244\375\275\341\276\227\274\205\204O<\261\302\255\275\035\240;>;\304\330\275\201\273\223\275\235\254\220\275\252\231\335\275\254>\372\275\232\240\"=f\301\271\275\226rx\274\323 \006>\240\2102>\302\232[\275\330B\023\276\306g0\276D\277\272=\245I\013>f\\\263<\232\0064\276\023\206V=\005w:>\343\330\374<\326\315g=\006\266\000\276\322\312=\274\032&\275\273W\"\026\275&H\220\275U\251\024>\211\027!=Z[\317\274\036}0\276\300\277\"\276&.1\276\025\202\206=\361\033\366=3\360\317<^\360j;\361,B<\217\356\205=\025\025B\275\225\316\243\275N\224W\275\3002.\276\227\257@=\323\300\261=\177m\255\275\023!\215\274u\221K;@\317\016>\373\364\263=f\004\005>)G\314\273\206\213\031\276&\212\\=\2563\246=\201\345C=\263%\211=\260b\021\275s\273\034\274C\260\372\275\003\267\302=\211\225\252=\320\376(>r\3643\276\317\036\'\276\240\230\322<R?t:t\334\365\274\305\323\002\275\264y%=\320\212e\275\270R\204=E|\362\275\245x\324\275\367\304\340\275\311n\007=]\247\036<\3674\024\275\2740D<6\336\270=C\226\265;\304\373\307\275\221\262\341;\300m\317\274\035\374N>*\273\233<\231\342\237\274\274\365r\274\371\250\231=s39=\350\252M\275\363\301\331=\022`\010\275qv\030=\216\004\357<\200\274\244<\304.\211\275\225cT<\3714\357\2741\3040\274zB\263=m\"\003=\\\327\004>\006\321\007\275\235\226\205\275m\270\310\275l\232\243=ac\231=\275\226\033>#k\026\272\233\327\226\274\245H\206=\004\342z\274\327\354\333\275(\035\244\275\230\225i;\3502h\275h\261\327=\376Tz\2750C\213\275y\367\217\275w@\355\275z\267>\275\325\344|;3\342\357\275l\"\3579\026&\300\275\361/S=\"\021%\275\257s$\275\005J\351\275,c\021\275\212K\002\276Bo\365\274C9O\275\226\200Y\2753\206C>\232N\016>$\351z=Z\307 =A\245\004\276\220\360\266\275\247t&\276\225\274L\276\243@0\276]\022i=\251\013b=\320\007\030>\010\362\222\274\323\266N\275\303%\020\272\250\025\304;\322\212\273=\300\3018\276g\250\240=\256+\371\273\372\037\014>po\313=\256\256\017\276d\261\226\275?\365\211;?\017\213\275*2\262\275z\340\351\275F\201Y\275\313\273\364<\315e)\276\306\304\251\275\262\356\322=1\005#<d\253y\274\003}\177=!\237^\274[\021\301<\001\324\300<\001\340q=\010\372\325<\260%n\275j\345\352=Z\301\317=\251^\244\275N)\265\275<r(=Ht\007\276\302;\010\276I\016!\275~\006\014>>\310\"\276\031S\245\275{os<#Y\016>\263\257\243<\267\207u\275\332Q\354=YX\355\275\344O\243\275`\234\t=\362\374@=\241R\010=\\\307\310\275I\223V\275\245\354\030\2764\004_=\307\2328=\307\346\\\275\350\323\201=\013\212\317\275\272\227\357\275\330\214\261\275\330\001\313\275\221\021\230\274-\177.\275].\t\275\316<\001<\031U3=\350\307\014\276=\201\266<\036=t\272\236\031\000>\324%R\275\365\300\221=\206\344\272\275B\317\016\275\271\267\020\276\340\255\366=\262\244\333=\257\027!;<<\033\275\"\240\217\274L\356A\274jE\321\275\262+\301<W\346\275\275\201\323\235<a\003\010\274\340\216\212=?\270\035>\256\004\036<-\376\007\275m\245\'=>T\030=\300\273H=\017(\003\275y\256\010\276=\250\257\275\026\3557\275\301\013l<(\333\236=7\357\207\275\345\275\356=\277t\306<~I\275=\371\323F\275j\036\250=\377\372\274=\367\024<\276\246\316j\275\016\240D=,\360\006>)dv\275\372\371(\275\220~\177\275\3341\"\276\347\035\212=u%B=6\366\251=\273_\222\2758\210\267\272\026\2500>\340\024\262=\344\305\032\275nf\034>\t\033v<\226\204\362=*\313\314\275\2036\321=~\250\222\275\241B\243<\242*\216=\264;5:\036d\014>&/T<\334\'>\274&d\246\275\036\213\260\275\r/\360\275P\374\334\274h\356\377\274\311\352=\2762n(\276\261a3<i\272\001=u\321v\275\277\267J>\266\337z\275m\024\230\275\016~\014>\0056\005=\206s\303\274\227Q\266\275\270R4\275\225\356\362=&\351\332\273\3648{=\031d\t\275\351\366.\274uR\310\274\305`\'\276\352}A\275K\031D\273\030\377j<\357\252\272=u\027\226\275\271\034\244:\336+\225=\377\243\032=S\376_=\001\326\274\275\355\315\215\274r\374\257\275\241j\005>t9\240\275\221\327\327\274\262=D\275\310\\S=\272k[\275<\254/<\272\322\232\275%\207v<\222\0033\275H\213\234=\007\271\212\275\200\230\276\274\3719\230\275\023,\306\275\256\034\312=\000|C<\363\274\212\275N\277\246\275\333V \276l}\227=\252\206\265\273V\235\260\2756\226<=\216T\327\275\215\366\303\275\263\324%=\236\2505\275\276\236\225\275\024\030\036\276z$\365\274\2615\337\274\027\216\t=kwo\274\324\264\361\274\311\027\227=\333{\004>\t\203E\276T{1>\016 R>\232/\';)\250\230=\217V\261=\231aH\274428\275:k\033>*5\327\275\237F9\275\242&I>\224B\027\2757\235\264\274\211M\031\275\353&\003\276\006\233{\275\026\274\210=\375\267D\275\307\344^\275\r\317\202=\214\255\310\274\267\365E=z\r}<\311\204;>\023\262\355\275?\331\271<Ws\007:\251`\027\276\324\244T=\"\262\t=\373f\330<\204e!>\0317\034\275$\211U>_`1>\203+\031\275\027c\233\275\264<;\276r\336\212=X\351\220=\\\335\210=\004q\233\275\000\377%=\310\261\226=]\316\300\274c-S;\347\342=>\262\n1\276\207\207\342<\3434\265\275\364\003\304\275\013\342a=T\357:>\226\335\203<\252\273\371<X\250\033>\246\221\001>\353\312M=w!c\275\272\235H>j\305\251:\021\277>\276_\023b=6m\314=;\2432\276\246D\327\273\264\240\r=\311:t\275YR\355\273\337\317 \276\276Y\330\275\251 D\274\020\206\032=\030\337\210\273\334\202\217\274\357\200b>\033.\324<\301\275\026><`\221=\251\304\357\275&/4\275\246*\225=\354\240\214=\323C\356<K\373\277\275\256\336e\275\033\354\004>s5\261=\r\236\264=Z\274\311\275\017V\345=\377f\334\275\013\226\362\275IU.=\246%\';\261B\022>M\235\262\275|a=>\357\301G\274_i\233\275o\263\376=\325k\256=a\220\326\275+\350\343=\375\032\370\275\234\356\255\275i\307\343=\371\237\243=\217\000\371\273\225}o\274\361\357\002>\0252U=\007\246\367\275\317\347\221=\351:c\275`\263\225=\341\340\330\275\264\276$<\250\320\\=Y\227.>\252\315q\275\336{1\276\033\367\n\276\302V\315\275\306\364)>\265\004\341\274\257\3572\275\247\356\010\2767\230\214\275_{*;\244\213\001>\345+/<\306\335\266\274\230\202\222<|7\032>\310)\233=\032\032\'\275JT\005>\'\006\262\274\312\206\221=\333[\215\274\235u\367==\370\301=\251\274\360<\256\325\272\275s\225\247\275/o\230\275)\t+\275\177\250\264=DOq=\3636&\276\3734\265=/U\017\273>\020\202\271\240\223\353<\317\305\365\274\364\211C>\313\320A\276}\177\016\275\005\3615=\222\336\234=\263\2450\275\262\262\211=\306Y0\275>\302\346\274\342\266\n=\225\277\306=\321q\310\275\006\225_\275t\034v<\210\031\316\275\253\223E<\375\304\214=\"\021\035\274\\p\321=|\240O\275\327+\341<*\"\\=W\320\334<\345\277\237\275\"\021\275\275\036\346\267=\034\220\032\275\231\000\343=\303o\031>\254r5>\323P5>\256g\301\275Ty\207\275\026~->\243<\202;\376^\316\274\'v\244=|\254.>9 \"<[\216X\274\255\301\314=\021\354\204\275\355gP=]\303\024=\025h#=\356\343\322=i\373\221\273\325p\245\275U~*\275S\312\272\275:\377\032=\272l\347=\030\210K=\242\004\204\275,h/\275\370\275h\275\203Aw=\370\366\t>$\335\202\275\366\305\201\275\016\276\346\275p\364:\276\220Y\031\275\305\336\357\275\341-\234\275\021\333?\2761\362\226\275\212\205\215\274q=c\275\270qB\276\016t\334<\243\322\246=5>\352=;\362U=\236~-=\277\326d=\2770\366=\375\254D\274|jD\275\266\350*>\215M\264=\031F\270<\rbq\275G\020\004;N\316q=\211+w\275\nK\020=\020\256\206\275\033v\370\275oht;\023\022\270<\021\022U<\314\001\001>2@\332\274\023\203\370\275\366\t\203=\030\013\356\275\251%\257\2754 \215\275\355\r\025\276S\037\020=4\301\014>\204_\261\275d,\007\275C\236\222<\t\235\000\275\342P\236=!\037p\275\005>\000>\347>S;\0068\215=\177\323\255<=\231\272=\027\321\375<\325\370M=DN\253<\366\352\224\275\366\367\316\275\343\366\200\274\374\234\311=)@\217\274\013\007\367=<\270Y\275\240\300\231\275\036{\020\275\003\343\257=\025\367\203\275\330N;\275\212\311f=\332y;\276\277\306\021\276\201\203R=+\320?>\031\215?=t:\014\276\326\271\010\276\306v\017\275\005\332\n=\257[s\274\330\013\207\275+\2532\273\370\332F\274\013\240+\275\354\313\257=#.\252\275\372\3174\275\205.\246\274\266\224\235;\272\\Q\275\221F\263\274\t\376\364\275\233B\376=6\013\233\275^\225\223<\371t\215\275\013o\253\275\023\367T=Hf\200=\266A\325\275\267g\373\274\264jA\274\036\001\217=\332\232\n=[\264Z\276P\263\\>\001\335\001\276\334h*=h\317\310\275\200%{\275{\266\034>\262L<>\314~\201=\246?\357<\357Z\216=\331\267\370=!\365\026\275~X\303\2758=Q\275\344N:\275at\"\274\226\260\007\276^(\217\275J\231\230\275Z\316g\275E\017\207=\357\254\233\275\030\254\253=\035o\200<\371\t\024=\344\351\364=v\177\031<a\332a\275.\351\033>B~\207\274|LZ\275\236-\350\274\257\237\010\276\237#\033>^y\230<\016\373G\2704\324\014\2753\n\352=\273w\245\275\000Z\017\275\360\215\007\273\356\373l\275~\327U\275\260u\313\275/\263\177\273\2117\024\275\220\2303\276\037\231\255\273\257\250T\2742\177\242\275\364#!\274\244\250r=9x\356\275s\220\324<\264Nh<\231\013i=\t\252\"\276\033\215\366=l\227\002=\017\357\221\273\244a\326=t\322\t>f@&<\327\023u\275\351\300\231\275\313(\364\274\225\002=>\025\303\323=M\230\352=\201\211+=\004\334\320\272\\|\255\275\255\240k\275E\251\026>\237\271\211<*\361\211\275\303\320\n\276\227\231\305=\243\356\"=?\342\023\273h{.>3\364a\274\214\3302=\361\314\007\275\215r\020>y\316{\275\2518\334=\034m\243:\255\nF\273\260^==\036\034 \276\303.\345=\177\344\311\274K\337+\276\251x6\275\235\373\241<C\233\013<\355\354L=\213\\\201\275|\010\021\275\370\237\023=:\351\241=\364\372m<\233-\237\274 \243\252=\335\313\227<\226\354\345=\373\r\231\275\205D&\276\360\213,\275\'\003\226\275v,i=<\214\212=\200\225\021>\372\223!>S\220\262=Y/\001>Se}=\002Q%\276m\022\010\276r\034\034\274\216a\301=\373\315\266=\360\261\232=\002$\333=j, =\301+\000\276\322\277\241=M\344\010>R|h==\205A\276\247\301*\275\022K\217\275#\026\211=\233\313\036>\017\362\310\274w\256\'=\262_z\275\364I==\321\2318\275{\361\331\274\200]>\274\013%\014\276\226\220/>\177 \344;M\254\323\275|\275\003<z\225\241\274\375}&>=2\271=\010\322A>\177\305\205\274\304=\370<\274\243\211=4t\035>\305\242\275;Qr\223<\241\033L=\334\275\270\274\310-j=k{\224\275Rr\243=\213\2035\276\303\014}=\256\005\224=\2042\330\272\342\010\274\275\307\206\266\274\271\344\262\275\227\277\204=\307*\004=\321\311\332\275\226\242\n>\233\352\036>\253\364\272\275\341\204\315\275\347\355\002>\305\223\373=\000\\\022\275\273/\340=\246\342*>Q\262\333\274\342)\t\275\352{\262\274ud\331=\002(\250\274\377@\252=V\"\035\275\010\342\244=\343\3704=\204\001u\275mo\023\275Y\243\025\273\2143\251;\314Q,=\317o0<\247\225\343\274W\276\344\275\253\2373\276\0109\214=\030\246L>\013*\366\274jn\206=B%\017\276\213+j\276\242\226\203\275\372\215$>\273-\215=\032I\300=,\213\237\273[\250\331=\014>?\275S\363\306=0\034\264\274\016\374\222\274\264X\354\275\033\240E>.b\346\275\247\264\205\273\337G\252\275\207-&>L\034\231=\315`\231\275\032%\004>&F+\275F\2219\275\034\007\303=\347^\317=\230\377~<2<\017>\271,\315=\n\353\206=\214\026\320\272Z\340\034=\177\244\214\275\367\222\033=\362\2404\276\005F\372\275\226\256y=\003\002\377<\362\013\347=\342\360p\275\321\220\371\275\244O\324=\231\226\264\275\213;\316\275\000\334\302\275\325\222\326=\260\252\260\275\026\345\201=\332\000\006>\006o\262\275oQ\300<\001\327\272=\241\213\r\275pb\035<*DZ:jyA:\014\272%\274\266\270\264=~\021\r\2754\235\r\275wd\354<%\3553>\262\323\244\275q59>`\341\010>L\355\207=\'\213j=\251\016]\275\351\272\300\274\302\240\247=\312\262;<-\027`\275\237N\204=\311<\343=\217\274\312=p\324\272=\024\2545\274y@\313<\243Iu=&r\203\275\235\314\331=\013\306\035\276\345\037~\275\233\275\020<\022\"\332=\325\037\267<m\271\360\275Eo\312\272\316\327\266\274\273a\t>\215 \201\274\234\242s\275\nbQ\274\220\361L=\201\330\035=:\003\222\273$\233S=\262Q\350=\332\2665>]a\227\274\344\\\347\275\302]\370=P\244\002>\035\363\344\274\274\272\024\276r\304O>1\304B>r\300\224=\027y4>\346^d\275\301\273\300\275\260\002B>\343%O=>\205`\275|\343\r\276H\\ >W\301v=\341M\000<\005T\211\275I\006\002=\253\335\371\275\332\271\304\275h\303\324=\366/\021\274\3629\362\275L\364\200=\241\216\205=\222X\205\275\2628\016\276\212]\213=\273\234#<\013\275\010>F\332<\276z\230\034\275\232\211~=\301\367\203=k\223\262\271w#\330\275\272\2218>\231\315\002>*\341\226=\3727{\275\246\364A\276\020$\272<\235\370Q\274E\223\215=S\007\221\275\211\013!\276\016R\354\275\377\356\325=|\351\213=\315\\F\275\272\330\210\275o8\215\271\031\332\215\275J\247,\276\021+;=\256\021\201=\017\r\032=*\202\204\275\223\377G\275\"\231\274=\370\211\304=\366\036\371\275?\256\016\275]O,>\346\2732\276\026\357\357\274\026\242\205<\342\0303=\203\031<>3\177\261\275\020\362^=\213\247\373=!}\271=\324\251\257;\323%\355\274<\030\237\274\376\352\214=_\272\307=\204[\000=\366\004\026\275W\2353:@\206\n>*n[=w\354\331=\305\014\262\272X\003|=Q\261\316=,\\\021>R\255\260<g\007\001\275\361\374u\2751\232\215\275\022AD\275{(\242<\365V.>\377^\003>\261\215\257\274\033\t\243\2755\376\303\274\352\343\373\274\303\347\215\275\261\034\347;\253g\343\275\030\315\367=a\370\320\275\353\016\373=\326\177\220=\253\274\265=\377\030\200;\252,+=\232\262)<r\240\001>\235.l=%U\240=\236\206\236\274Rd\014\276\344k\356\274\026n\t\275I!\002=\232\300\024>\262\257\342\273?5\221=\305\360\020>\267\264\002\276\034\353p=\342\257\257\275\202m)>&S\360<\266p\212\274(\356\207\27550f\275NZ\301=&\336G>\343\350\251\274\254\303U<\200r\027>\327t\242=EW\235=9, >\350\360\306=\270\301\313=\006\370\t\276\263\013\n\275OB\274\275}\336\013=@\344\026>>\231\316\275\310\034\216=\305\354\375<\301\3303\275L\221\021>\002\374\024\275\225]\037>\0048\325\274\\\315\221=\001V\002=:*\026\275\003(*\276\212\312\236=\345\024d=\254\216e=>\215\031\275\342\260j={61>V\353\225\275$C\017\273M\246\230=L\2152>a\217\033\275\t\372\035>\367\361\000=\267\n\301=\3014\021>\313q\326\273F.\013\272\0160c\275U\247\002\276\212T\250\275Ff\205\275\345\226\"\274,\313\321=\261WG=\221\240\233=\376\304?\275\207\221\224=\006\232\345=\364\006\316=\022\035\215=\020(\253=\373\264\375<\246\251\307=\177\336x<\203V|\275\'p\n\274\277\372\247\274\245r\301<\013A\275<;\354\316\275\352\320\221<\357\332+\275\376E<=o1\357=\350\372}\275n\354\027>\346\212\211\275\367\315\216\275(MY<\360\221\024>\201\024x\275\375\367\023\276\262)s=`1\254<\277\275\252\275+N\211=4\030\315\275g6\365=\332\272\035\275\177p\032<z\010C>\347\315\031<Pt\033>\251I\231\275\003\324/\273\313C\325=\321f\213=\3258\246\274\307\302\320<\3073\345=\0055A=\226Y\025\276z@\215\275R\261\321=\\\331;\275`B\257\274\265\021D\276\246\024\010\274\2777\375\275\251\350\337=\231^r\275\353\313\234<S\350)=\224\322\204<\327\310*>\351\267\006=\233\247\252=S\341?\2765\241R=\277\277\215\273\203\014\027=p\350\224=\020\002\376\275\255/z=W%\356=\243\034\226\274\221\214\215\274=.\t\275\253\270Y\275y o\275\252\037\262<\320OB=\205\217\221\275&k\035=\003\334\344\274\347f\320=\354G!>\356i\013\274Q\324!\2757M\257=\363\362\267\275\313e\300=\243\370\200=~\235\242\275jE\261\275\327j\210\274\215\206\237=\245\355\034=P\332\224<\"M\300\275\246D+\275\'\2771\276f\212P=\006\342\347\275\001\017=>VvO\276\316\2242=\004\325#=\337\266\350=\341\356\007<\024(\205\274\316\020\351<\021q\220=n\302\334\275#\026+\276z\"X=\032\344\357\275\370\210\322=%\331y\275\025\366\216=\026\266\325<\010\024\252=/\342.\275,\014\324= k\225<\252\300\317\274w-\244=.\262\240\275Rr$=uj\243=\245\224\"\275kY\310=G\221\366<\233ku=\004l\303=d\322\343<\205\262\373<\2046\301\272<\237\307=\026\353\007\276=\344W=\250C\177\275B\235\356\275|\223\210\275\022\324\026>\336t\007>\347\016J>\226\204\236=\274\222\211=\262m\316=i\312i=8+\334=\376f\341\273\247\343\036\275\220\355C\275\330\302\3729\345J\232=rW\203\275\265\312g\275\341\267\254\275\310\375\371\274\200\035\354\274\010u\204=\004\035i<\266\\\352\274`q:\276\014r\274<\210\254\274=\276\361\322=\216\256$\275P\251\026>=\206\206=h\215j=\n\364\225=@\366\234\2752R\371\273S\275\374\275\330\216Y=hnj\275,%\375\274\300\221\364\275c>\016\275D\253\037=\035\272\013=\370C\343<t&8\274\027\207E\275\355\033\253\275r\024\004=|\0305\276\247\"\341<a\302\323=\347&\035\276\204\373\n\275kP\361<\363\263\301\275wT\007>/\232>\276p\215\262=g6\354\2747p3>\221{\002>!a\026\276\302\204\002>\220\nm9xj&>\334$\016>\203w\362\274\275\233X=r\221\227=\320kH<\302Q\307\275=\364\275\275\313\334\327=\303\334\376=\206\276\275;\013\010\374\275\273O\025>\227?\001=D\316\326\275\201\207\271\275{[\357\2755\351\366\274\272m\010>KS\325=\335\337\252\275\016\362;\274\235\245\354=\256\2707<\354\3137>\311\032N\275\325\361\243\274\200\214\275\273[?\010=,\2611=\343\366a\274\364p\265\275\241/\005>\377\016r\275X;\343\274\222\256\312<$\006\264\275\362\233`=\262\204!\275N\r\214=e\236\261\275\372\353\226\273O\270\344\274\245\002\366<{\177i\275\316\245$>S\342+\273\327&\314=\'P\230\275\301_\000;\351\313S=\331\334b:i\007m=\326\316k\274\312h\020=\214\206\246=nX\215=hS\225\275\252\377\030\275a\201\003\275!i,\274\275O#\276\375\347\253\275\367\\\322<\272\367\302\275$r\204\275\212\3317\275t\177\270=3\035\202\275{\257\030<\rT\353=7\352\033\276\361\362\004>\216\245@=\032\"\203<\344G\026=\255\036\027\276CP\325=\264\221\267\274MM\031\275\230\352/<\300\362\206=Y$\233=t4\304=)\322\316<\030\003;\276\226\310d\274&&\217\2750\024\356\274\305\272\317\274\320\356=\275\331\302\031\276\251\376\003>\233g\306\275\230\004\334=\323Hz\2742\312\237=Z\257.\273\201\233\265=QG\005\276\246R\322\274\370\002\345\275a\330\232\275Bz\355=/\351\254\275\236p3\276M\322\354\275]Ya=\343\251!\275\374M%=\263\265\263\275\023\226\002>O\257i=\306\"\310\274\357\002<<\030:\007=9\345\375\275\340\032M\275\370\231<\273\211\375\002\276\260\031\223=Y\\\300\275\004u3>b:\334=U\270\007=2\351:>\303\335!\2758(\025\276+\340\311\275\227.\022\275 \233/\276\314\363\322<!:\371\274&_\301\275\376\027 <SS\343\275J\237L=\336\342\211\275\236\030%\276\007~\255;\310\276&\276\302\271\206\275\332\323\313=y\342\325\2758n\017>\014\023:=iU\336\275f\354\362\275T\371Y=\227\037\023\274\023\372\t>Q0V\274 93\275i\261\306\275\271x\224\274\277\352\013=\260\232\006\2762\232D\275\021~b\275\256\270\023>\376-p\275\230d\033\276^\314\232=\002\360\250\275\266\034y;\020n3=$\004\003>\317\305\346\275\357\003P=)\212R=pg\375\275\224\016\215\271\302_\354\275\203\2353\275\201z\225\275\362\275\265=1(\200\274\344rG=\214\215\217\275\224\312\332;\300\t\022=\361d\374=\340\305\214\275\261\307\352\274Ls\026\276i\322D\273\256\2431>\357\3221\276\226\2452>\356\177\"\275\333x\301\275Hr\241=U\"\265\275\335\253><$\331\365=\263\241\261=\357b\354\272t\006\010=:\'\276=J\333y\275\2078\253\275%\236.\2756S\271;&H\031\276L\207!\276\355G\r\276_\342\246\275\035\030->\250Y~\275A\211#\275`\315\271\273\035\003\211=a_\264\275\266~\320\275\210pc\275\237\3619\276\301\227J\275\017\254\216\274\224\277\\>\232\270B<\275;\224\275l\233\375\272yKk\274\242\031\016>U\035\267=T\203:>7\213\352<\214\213X\275\0003\341<@\211]=\337\236\272\275\373N\226\275\327\245]\275a\273F<\304\310*>\033w\023=\0245\'\275mx\">\357g\004>\360M`\274]\250%=h\267\210=)\022[\273A\374\001=3\205N\275?\332/=1\356\305\275ux\365=\355\210\n>\006\304\363=\262\267\257\2743%\016=G\2648\276\256\200\240\275!\027\345=\017\226U=\365\344\255=f;\203\274\342\022\361<\373\251\256\275 \332\303\274\032\020\211\275\006\241\244\2758\264\326\274n>\340\275B\305\r>\264z_\275!\325\010>\240\277:>\036D\337\274\340\305N=\362KU<\206F\347=_\202[\275\371\001\001>X\331\237<\177l\254\2751\2628>e\",\274\303\272/\276&\003\214\274|\201\305\275J\177\002>A\277\014\276\360\304\014>\345n\305=\260kF>>\226\220<\322\325a\275\252\013\255\275\263p\333<O\340N=8\267\317=\244\272(>\324$\037>\371\240c=)4\266\275v\202\233=P\004}9\230\240\'=\257\2743\276\002-\211\275\252.\007\276\026y-\275\314\324\373\275}\254\364\2756\360\252\2742\245\277\275\261x\246\275\250\254\001\276\227\231\025\275\333\177\016;{\326k=\205\2640<s!\206;\213\363\372\2730\345\374\273\274\352\";A\315\007=QP\256=G8$\275\221\000\245=\341\327\315=\306\002.=\246\023)\275\353\356\010\276\036\316\241=\232\376\263\274BX2\276\254\3315>\235\0358=[U\277\275QS\237=y-\033=\256\252t\274g\317\301=\2368M;:\037\005\275r\336\201\275C\371\224\274\023L\360\275\356\216\337\274\310\376\206\275\311|\202\275\"s\017\275\004J\345=\003\252\327<\341\211\r\276\377c5=\351j\020<\3679\351\275\376\317\376\275=Dc:\235\014N<c\3077\276\266\265\240<\247\334\360=\226o\243\274\n\021U>(bD\275\233\020\304\275\232c\204<\005\325\243<\245\327\037\274I\305\226=\0358\032=\0275\n<\221\331\210=6\215\200\275W\221\372\275\265y2>\350\\\312\2756\"\351=\2569\222=\346\036\010\274j\204\372<\263\263w\274(#\251\274G\335\320=>\205\032\275r\251-=\023F\035=\323\377~<\337\237\241\275m\375\323<qi\367=\005\301\321\275\255\037\313\275\316\365\241\275\251\037(=\217\317M=\367\035\241\275^]-\276\331H3=m\016h<\002s\253\274\370\273\377=\232\362\204\275\3777\232=\036\024\236==\206$\275\325\220\357=\271\302\361=\251j\345<^\373\r\276.v\353<\325\345=>\325+\207\272\021\354\020\276\'-\004<SRh\275NC\177=\037\222\017=\357\352}=\217\255\206\275\031\004\005>\365F\000\276\353\365\353\275\324=\203\275\271\257\301=a\356\363\2755\025\261\275L\357\211\275j\226\257<\275-\202=Z\235J\275h\370M=\315\205\276\274^b\036\276Mzd\275m\327\200\271\306\006\205<\206\005\267;\0028^=\224\340\236\274\033\216\002=\276Z\205=\366\347\000\275\353\005\305\275\317H{=\254\203>>\026*d\2747a\225=|1\256=\217\025x\271\246s\003=\277\215\\\275\023x\345\275)6\354=\017.\005\275\272[r=\245\307\234\275\265>\365=\220\177\022\275c\363\322\274\255+\367\275\365SL>\362s&\276/Bm\275\236\302&\276\312\026\261\275\373\237{=\351&\365;(\202\"\275\031\334\330\274/\370\334\274\000\310\037>\270\352\300;v\337->,(\242\275c\211\354=\177;\001>@\242A\275\363.%\276/\026\001\276\265=I=\214M\256<\233\210\247\274\323\227\230\275\360\251\275<\315\321\370=\006\"\300=\340\354\320=\234\315O>Q=C\275\340\310G\275\273\333\360\273Ks\336=5\217\006\276e\373><\252\210\270\275\205R\360\275\312 \316=\232\207\362\274\203\3657\275\025\334\335<b\323\340<w6\242=\013D\001=v\020\200\275\337\222\224=\320\'\232\272> $\275\026}\001>\210f\202=r\005\341\274\344\372)\276\230\320/\276\2438Q\275\247&\033\275s\210`\274X\261k=\027\271\205=\237=\317\275\356\004\035>\232O\337\275\350\241\257=V\360#=\374V\265<S\3568\275\262\216\013\274\327 p\275\006\203@=\262\313(\275\357\366\310\275I\027$>\0242U\274\005\034\257<ya\220=K\210\343\274\203\274\300=u\332\271=\000\227\213=q\202\316\275A\"\236\275\302u;>\303HO\2752\221U\274\370\216\244;_\314\032\276\025\224\241\274\303W\016\276EFK\276S\0178=|\246\322<\233\210\204\275\036\004\310<%L\353=3\267 <\244d\347<\034^(\2761\350\020>*\345\321=\013\200\324\272\033\361\334<[\254]<\374\366\004<w2\355=\312G\032>\031`\020=\314\214c>.\3406<\314\177[<c}\231<\245X\270\275\332\251\335\274,\227\340=\374\374\200;\262\264|<\020\2759;Fpt\275\230\267d=u\202s\274a\344H\275;\2344\275\024\360\215\275\033\206\006=\243\007?\275\334R\017>nq\307=\035\245f=v\3308\276MD\265\275\331/H\275\241\350\331\275\303r\246=\246t\332\275\3739\355\275\375M\244=k\273%\274k\361j\275\264\237\005\276;\005\360=IC,\276\324\217\230\273|\223\277\274\372\n\216=z\022\331\275\030\3750<^\224\021\273\206\010\321\275N\341\331\2733r\232=/\231]<\224a\027>1 \311\275\217\311\005>\331\0226\276\250]\340\272wx\246\273\377\r\213\275f\2209\273\254\232Z=K\2340=\305X\013\275v\032N<\317\301?\275Q\204\275\275\340\271\037\275\016S\220\2752\023d=_S\335=\033@\215\274(\311R=\247\306+\276\362\366l;\216\026n\275\214\017\023=:\351h=8`\324=80\242;\324\374\032>\233\207I<\241\264\014>\262\025l\275\006\367\201\275w)q<\3315@<\335o\035>W\271\010:\035H\315\273\315\230\313\274\372\326\353\275#s\266\274\304\255;\274tu\300;\200\001\332\275\267\253\026\276 \t3>V\r\r\275\317\377h=f\327\316<Ewm\275\367\205\002>*\"]\275|\2622\276\016\303\005=\010p\250\275\216\270z= \261\240;\317\276\320=k\242\005=mx\017>\002\202I\275\264\356\026>\362\365\276\275\270\247/\276\350\371\210=\237\262\321\275\304\277\316\275\3206\016\275\216\216\362<\335\247\202\275\304)\372\273\216\202h\274\246\3612\276n\226B;.H\204\274B\223\222\275\314\301\240\275\322\206\030\276$\214\351=M\346\377=o\367\214\275!h\255\275\356\323\341\274\261!|\275\354\246#=k5\001\275\007\365t\274\t\232\212<r\"\031=P\221f=n\346.\276\341\310\353\2745\243\364=\230\3053\275\302\321\362\275\252Q\314\275\356\315\325=(\240\312\275\303\013\245<\024\264\274=\363\302\n\275\327\007\231\274\010`\357\274K\347\365\274\212\305\t>Sv\021>\346\277?=\264NI>\315\324\321\274\363\014D\275b\353\301<\224\327\351<\235S\235\275o]\235\273\322yA>\024\377\236\275\246\217-\276R\016\370<v\203\030<\016\336\003\276C\"r;h\337\207\275\211\225\267<\2368\034\275_\360\034=3\307\315\274\242K\344\275\331H\343\274\270\315\370=\305\0337=\027\005\223\275\0303!>v=\377=\001e\211\275\006A\225\275\025q\'>\362\221\010<)\016\002>\030\310\355\274\210\023\004>OH\306=/k\321\275\317\244i\275=\221\360\275*_\371\275;?_\274S>\010=\325\347P\275\226\366\203=\215\327D\274\375\301\267\275\345\270Z\275\007\007\200\275@\001\342\274\330i\030\275\275Q\341<\331\220\306<,\220\002\276Bv\207\275\215\356\227=\341\017\325<!\325\001\275\177\'\"\276\261\240\003>\214\333\002>\207\261[;\005$-\2766\335)>\3343%\275\273\212\210=\220\365\262\274\0068\243=\206?E<rB\016\276\340\226{<\235\035\202\275?\034\211\275\366Y\304\275A\216\323<\030\006m=\246\006\213\274\225\350\025\276\261\016/\274*\265\255=\273\026\274<\325r\260<\337\352\032<\227\257\247=W_\036\276L\251\240=\010\346\017>s\224\261\275\342\220\n=\277\013u=\372VG>\300S\275=\200\355\341\275z\317\360<\364O\356=\014\021Q\276=9\313\275wX\272=\254f\373<\211\022\253=W\323\004\276\271\271L\275\306\376=\276\266\206%>\'\257\001\274\"\235Y\276\227\256\332\275\352.\253\275\033\226\225<\007E\261\275\343\335\001\274\263\300\007>b\216e\275]\266\335\273,\375\244\274@\333\017\276[\205T\275\325/\264\274\344\003z=X\252\\\274\334\237\207\274.Y;={R\010\276\003\340\304\274\rX\207=N#\301<\3574d\274\342\003\357=\311\357\017=M\221\220<\337A\024\276\010\234\332\275\312j\262:#\224\221=f\020a;3s\324=*]\231=\252!a;\272\013\245\274~\'k<\327\226\256\274\252|L\273\004\374\026>\266\251&>e\374\263\275\310\371\376\275\203\260\220=\300\361\253=\315\023q<0\000\335=!^\"=\266L\240\275\327O\"\275\"\315\212=~\234e=\0006\345<3\300Z\275\251\002\334=\234\364\261\275\206\"\346\274s\222\216\275\367-\t\275\362\013(\276E(\213\274\014\255C\275t\352<\275\310\016\227\275\225nY\274\036\311(\275\240\'\222=\222\222\034\2766\030z<\245C\013\275\016\344\035<}\345l\275\367\205\220=\251\035-=8t#=z\227\224\275\223.\211\275]P\221=\345\221\314=\251m\006\275C;O\275\356%\313=i\265J=\2314\036\274\346\365w\275!\231\232=F\001\'>\276\235\257\275\0315$>g\036\\\275\244\n\371\275c\353J\276R|\205\273\035\254\"=\331\226\r\276\347\3720<\273\264\031=\311\354\024>!\371\361=\322a\215\274D,@=S\034?\275\036\263\003>Z\234\207\275\036%\252\274787>\362\274\203\274v,0>\313\331f<\234\254\354<>\371\246\2751#m=\376\036\372;\354\376\200\275H\272\321;\275\232\244<\340\321r\275y(\005>\340\373\356=?\376\306\275\367\212\335=\023\357\306\275\221\376\201\275\007\224\267<\347\316#\2757\236\210\275$<\325<\241\314\373=\233\337\026>\237\223,\274:\020\210\274y\274\353=\341\266\376\274\230\020\253<\202\366Q\275ok3\276\026\243\217\275\273u\335\275eV\232<\3063\031>\2306S>6d\330=\333\237\346\275!\300\374=\031.u\274Q\353G\275\365\323\254<0xD\276\265\264A\276\211zh\275\337\027\306\275\261\231\340;+\257\254=\335Ju=\rF\257=)\260.\275\212P0>\327\013_=\350\356\223\274\036\372\200\275\240\316\376=\231C1>\336\225\232<\024*\212=ct\005\275\232\204}=6\262\345\274\240TG>L\270V<\266c\266\275\251\212I\276!\204\340=\261\370\316=>#\004\276$m\222\275\222\027\303=r\303\336<\237\0204=\274\340\345<\246\270\014\276\024\246\261\275\316\247\002\275\377\303G\275g\224\304\275\310;-;\242\022\025\276\005\343\206=\304<\252\275X\010\230\274=s\226=\252M`\275ZP\331=\354;\237\275\317\305\036\276\270\177w\275\252\344\013\276v\312G\275\346\025\006\276\327\275\251=\253\326\350=\200\375\330=\204u\201\273\274\243\306=o^\r>Ow\234\275}\264\327\275$?\003=\016\226\200<\212y\247\275}\037\311<pa5=\3612\217\275\003#\313\275\253\231\036\275\253\'\205\275\276Ol<b\265\007\276v\233\277<ch\331\274\372\002l<~m\311\275&\336R\275GL\221\274\274i\313\275\212=\214\275\202\2440\276y\310\n>\327k\210\275H\332\343=g/\016\276\377\333\204\274\302\3755<.\304\304\274\240\022\034\274\326\252\031>\022\024M=AM\216=U\317\270\274\357\037\033>\242\233a=s\330\253\275[\343\346\274Y*@\275\274\254\002>4\022\226\275J\2742=.\327[>O\335\222<\223\222\270=\222G\221\274o/\357=I(\033\274F\244\232\275N\330\342\275\031\320a\275\241\276\207;\361\255\270<\315[\273=p/\020\276\261\315\256\275\2527\301\275\237\006#<\220\314\007\275\221\272\243\273\245\"\340=PD$;5\360\004\275Q3\220=\272\273\265<\221\270\374<I\230\031\275\256%&<\223\'\224=\321\367\203\275\272Y\234\275\030\376\004\276\206\023\306\274,\304\030\275\207\332\330;]\247\333\275t\214\324=\256aT=B\305\033\276A\310\355\275x\363#\276:2\306\275\260l6<\336^\r\275\013\244\370\274g\0169=\177j\371=\322\256\353=\033\216\321\275\335\264\t=\256\371\216={\345\256\274(\334\353=&^\3417@\302\r\275\000\035$=DV\316\275\231\307\356\275?\240D>MC_<l\250P=\240\n\354<R{\004=D>\232=;rN=\301V\353\274\371~T=e\275\237=\367n\000\276\214\377\305\275\017\375\307=EUn\275%\361\252\2753\357\347\275\252\004\203=\256\312#\274!\250\237=\315\276\025=\212 E\273\2205W\276\260r\341\2755Y\007<2\270]=\215$\312\274m\215\205\275\2644\0149\230\205\014\276\277$\240<`i\336\274Vm\312\274\007\364\203=\203\213\'\276`\211v<b{\213=l\260+>\235O\004\276\226_\206\275\337\263\215\275\330A\310\275I0\023\274?\024\207\275\336$-<b3\252\274e]\311\274\220m\305\275\347\361\213\275h\024$=\242\350\004\276I\310\273<\257z\211\275\372\307\010\275\315\305\032\276\361K\224=\360c\316=X\316\353;jA\030\275\250\241s=\303\212\307\274W\370\201=\261|\255\275\222\211#\276j\201\n<\231~A> \241o\275S\006\007\276NI3\274\220\037\317<m<\314\272w\211\362=G \033\276\034\325e\274\224/t=G\347\013\275\215i!\275\233\200\240\275\276tM<tV\364=\375\301!>\004\'\330\275\277u7\274\333\017\366\274\315n\221\275\215\332\034=\306n\211=$$\206=\335i\222=\320\275\005\274\352\346`;\225\177n\275\0073\006\275c\257\030=D\177\367<\275I\213<\007:4\274\353\367;\275\352Sc\2752\226\242\274\224\347\201\275\346BJ<:-\271=\344\213\333=\327y\243=\255\241\235=\262\232k\275\240\211\246\274\327\371\322;\205\237{<=\305\367\2750}\311=0\370H<h\343\245;\017\0070\274z77\276a\000\216\275\350e\312\275\302[\327\275\'\351\356\275\017\223\307=c\014\314<\202L\316<\317\2054\275<\223\333\275\245\205\213\275\272\303\260=\242*\002\2751$\223=YA1;\216\002\336\274\276P\230\275\300\304\210<8\r\017>\256Jg\275\322\303\017\274\004\211\277\274\245\254\344=\037W\304<-n==\n\355&>\017,\'=\024C\364=v\005\033>\200\223\016>l\"\370\275\020zK=**\332=\323\002U>\335\355s\275\377f\353\274 \257P=C\344&>\277F:\275Y\005\351\274\013Y\336\273\027\300\257=\355\330\354=\375\213\217\275\303\377 \275\362\023\275=\315\026\344\275_F\215\275t?,>\312#\252=\262\244\n\275\025o4>0^\250=m\362\272="
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "Const_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_2"
      op: "ReadVariableOp"
      input: "network/weights_1"
      input: "^AssignVariableOp_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_3"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "1_\327<\0200V<\303;)\274\030r\353<|\2165<\010\250\245<\237hu<A\303\250<\352\026\263<1\003`<V\310[\273J\244\217\273\216\340\213\273\254\020e\2718\364\325<X\261\034<(\253\333<P\310\277\274\245?v<\230\245\216<\321]1<\311m\251<0\024[<K\310\220\272\333~\363<Vf2=o\n\2029\364\\_;I\332\312<RE\260<\256\370\014<\\\2568;\2053r<^3u<\013\276K\274S\033\226<\000s\307<=g[<5\264\350;\205\223m;>\235\322<I\206v<*\320n<\202\336\366<J\213\243<E\360\332<\262+\345<\2757\036<\300v\226<r\374\217<\000\014\213<\204\020\216\273K\355\225<e0\234<+E\232\272\210U\326<kA\314\2734W\267<M\214C<\341m\271<\007\243\342<{\017\251<\3676\370;-Q\210;\333\212\356<\255\326\256;\272\311,<+\030\362;o\267\266<#\001z<\000%^<\263\326\034<\361\314\233<\310_\307\273\274b\204<\337I\273<\2432\254<\005\005\301<B\t\337;\250\347\212<\250\003\234<\253Q\333;\230\355\212;\027\002\216<\031\334i<\315\313\024<\034Fr<\327\315\277<z\214\337<\246\340\241<\207\207\230<\221\'O<\332[\237</\300\004\274\365\345\221<\314\303\305;\236D\206\270@\336\013<\004\312o\267\254\355\265;"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "Const_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_3"
      op: "ReadVariableOp"
      input: "network/biases_1"
      input: "^AssignVariableOp_3"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
            tensor_content: "\357\275\216<\214\340\002\274\256`\362=\373@(>\'\212\256\275\222\211\270=e\266\332<\376\363\342\275[V\371<&Q\357=zi\373\274\225\024\226\275Q1\222\275\247\272+\276\232{P\276\357\370\026\2748\237\327\274\345:\212\2743w\306=\343\377\271\274mXS;=C\023\275z&\262\275ih\004=\'\323\272=}&E=uN\370\2739\261\325\275\276\364,=G\213`>\031\364\324\275\375y\347=\357\307\267<M\255\264==\256\266\275\340$\366\273\276n\226\275F\211 >I\257F<%\006\032>z\370\211=#V\"=Y\301\200\274\031\337\224=\373{h=\330P`=u&\340\275\304}\307\272\260\313G>\250\304\323\275f\3000\276)\024\016\276!\313\274\275\t\214\305<\027X\004\275\226\334q=\r\243 =\344:A\275\307\364\031=>&\315=\216#\021\274%\331\030>\253g\203\275\262B\035>\226!\r\275\330-\306=\200e\342\275\213\206\331=\251\272\027\275\226\237\322=\307,j\275H2\316\274O\261\333;L\210\037<\'\351\035\275\271_i=p\222\204\273{\337\226\274Z\325\227\275H\350\261<\366\231w=\t\227\266\275\233\222c\276QM\026=\323V\363\274\t\351#>%1\016\276\341$\230\275:\356+>7\302.<\342X\251;\226\021\347<\315\315\304\275\234T\327\275\276\312\035>j\241\341;H\220n<*ii\275\327\306\304=\342M\223\275\013\237(\275\345\313\341<\t\336\003>\tb\001\275F\000o\275\210t\240\275\377\333\254\275g\325\276\275db\367\273A`\017\276\321\236\233=3\336A\276\004\225\354\275\3500\313\274\355\333\035=+{\320=B\262\225\275^-\246\275\322\206 \275\232\375\301\275\331\217H\275\3609\226=j\273H\275\0012\301=-Vg<99\014>\014\227w=?\027\357=(\231\240\274!y\r\276\305\264\374<\021u\372\272\275\177\234=\007\030\212<9\342\321=.\324\250\275y\373\365\275\315\210A\275(.\265<\225\257\007>h\027\255\275\024\203\025\275\265\361\242\2755\t\213\275\324\267\">\2707\207\274EN\302\275\024\303\300=\022\216\314=I\'O>\331kc=\303\336\267\273!\303\211\274\317\371\366=\n\206}\2753\204*\276\031\342\373\275\322\257\204\2746x\010\276\025/L\275\314\260\230=\026\nA\276:~\377\274|!o=4X\314=\247#\347=1q\261\275\335*_=\357\317\213\275\237a\n>Q\267m\272\334M.\275\267\200\332\275tY\023\276A\265{<i\243U\2756\312!\276;$\276\275+X\004>nL\344=\202\n!=\0203:\276\313\r\322<t\374\266\275\215:\373=\230\335\247\275\3261\036\276\3176\353=\024zP\276\021\356\235\275W\010_\275%\027\210=Dd\310\274x\203\003\275\303\303S\273\260\367\326=\367R\253\275\251\366\023\2755\314~=!S\224\273r+\320\274\246\242\264\274\333\277s=\244\242\277\274\240\003\243<\205\364;\275\374R\323=\361\252\222\275\tb\270<\336\035A;\3618(>\275\030\347\274-~\203<\204\3345\274\310\355\221\275\334\355E\274%|\370=gO\353\275\340\274\271=jY\"<\236\030\035>\001\3515\276#T\024\276\206\371\200\275\314\300\310\275\032c\357\275\207\032\227\275\276\332\017\276\261\322\033<\305Wy\275/\261\004>\371\177:\276\313\246><{\242\032\276\203K\022\276\353\005\004<\3268\300:s;*>yV\036>\324\373\031>C\177\313=!\330\276<\274M,=\256\325\267=\335!\034>\023(\253=\021\002:<3\023\017\275GAo;\275\030a\275&\253Y\275h\367\\=\270\177.\276\316mb=JL\017\275\370\333\237\275\024\276\213\275\232\277v\274\241\221\236\275\\\343\353=\266\'\234\274I&\013>E\231s\275[\327@\275\033\005*\276\224\356\307<\305+\245\275\266\220\211=\334\347\330=\224\217\021\275;\t@=\306J\344\275\tt8\276\037\317\205=L\006p=#E9>\231\027x=\\0\034=\037D\037>\341\001\016\276}`\262\275\352_C\276\301 \031\276?\020\021=\251\253\327=V\350\307=[\232\361=\267\331\351=\251\217\337\2750\345\324=E5(\276\r\267\266<q@\247=\003\262Y=W\235\260\274\350\324\027>T\326\027\276\316r\020\273\265\001\344\275g\022\253\275*MC<\232v\244=j\033\022\276\021C\276\275q\010\372<\034\360F\276\257\214\303\274b]i\275\364\252\200\275\274t\374=\270\330\036=\375\033\340\275\304\t\013\275\200\360\006>\262Sl\275\016\005\322<1\234\310<eD\344\2735z\325<sf/\274\363\312>>\270\022\367\275\310\367\274\275\313\277\303=hZ\267;\214W,\276\367\262s\2751\014T\275\001\225k=>\024Y=\235Z;=s\345)\275Q\300\306=\224\330\325<z\365\2409\034Z >\2362>=?\026\342=\215\244`=\207*\260\275\344\312*<\313M\326<WK\033\275t\250u<\032\236\342\274\305\2371\276\332 \234\275\210\222J=\317/\343<\230\031\026\276;\355\034\275\376N\322\274\325\276\307\275\330\'\006\276\357\267\340\275\314\354\324\275U\270\372\275\'\306\252\272\335\250}\275\3020\003\274\353(\271<\223\233\204\274\221c`=4\270\026>\210\030\230=\0259\277=\252\236\263\275\343\255\332\275\211\346\263\275\300\211\357:(\330:\275\225\343 \276\225@\262\275\317\262\224\274f\223\202\275\327\224\n=\004\332\341<C\037\217\275\275\036\275\275W\306\033\274\270L\301=T\330\305\274\2540\202=\025\001\016<\255\336{<\325o%\275U>\264<\327\002\027=\210\223\r\275\357\211m\275\344e\340\274Z\262\006>y\362=\275\202.\201\275\335\360\253=\364\340\225<\023\317\315=\000\251\035\2741m\226\275\214\343.>\335y\241\275c\260\327<\007\034\353<7.\235=\213O)=D\231\033>\257U>;4\334\362=dy\350=\014|\224=\303\3047=\325s=\276\304\204\230\275\230\200\255\275\350,\020\274,Y\000=\"Z\314<^G\231=\200\301\021\276\241-\254\275aW\372=\224[\372<}\205%\276\343\240\220</\3351>t$\247<M\253\361:\315 4\276\033\002>=d+`\274\346\337\206\273x[\n>\374\325\256\275\262\007F=U*\202\275\342r\242\275>\230(=\220\206\270<\237\2750>\317\366\025=\306\236\024=\210-\216\275\352BJ\276T\n\246\2754\241\021>B2\037=\200\212\315\275z\240#>0\221\234\273/\003\250=\335\317?;9\034\014=\252R\243\275\366/\340<\362\265\036\275O(\326;\247\257\207\275\030E\026>$\346x<\346\320\020\275\351\377f\275\214\007)\2752\312\245<\267\'\035\276\207]Y\275\377\347\263<\236\3070>n|\r\2769\372%\2757\334d\275Y*\310\2757p\211<z\312\306=\3776\251\275\t\245H=\372\247\030>\201\240 >\223\014\352\274\274B\032=DR\374\273\326\017Q<\337\330\212=\233\225\254=\256\002\214<~\255\366\275\031\013\224\274PUN\275\010\033\204<mg\014>\373\273\244\275\373\343\204=\030\313\034>\353\217\350=\025\352\240=di\237=;\2379\275\266\025\207<\231\330@>\227^6=\225\250\303\274M\251\317=\353\375\352\275\212\300\230=\021K\273\275U\261\322\275\352\350\315\274\362\tT\275\300\256(\273\266\021P\275?aY>S\365\013<\373\'\020>\350\001=\275\223\000\013>E\215\377\274\206\305\202<E \251\275/\237\343\274\365\262\315\275\222\347\321\274\216T\030>kc\341\273\014\020\214=\020\251\330=6\355\037>\\&\033\274\277\037G\276\253<)>c\300\\;\301\362\210\274, _=`\330L\275\027\371t=\215\270\273=\211\313\200\275\367\307\320\274A\226\t\276z\262\337<>\327\032<\213\337\311=\360|\267=r\232\266\272\031\234\247=\376\372\200\275\256\0002=\253\343\333=[\3302\2764O\023=\030\223\032=_\206\225=\031\250==?]2\275\306\366\206\274~^\023\275\344\210\320\275\357\235*\276\021\227T\275\364\336\241\275z!`=2\030\351\274^\242\307=\027\254\245=<v\336<\347\334o=_\342*\275\230+\203=\232\266\">\213%M=\337=f=\320\024\373\275\234)\025>~\323\275=h;K=$\003\341<\364\371\261<\244E\356\275\361\316\247\274\311]\001\276,:\201=\016\030\262<4\330\224\274u\361\271=P{]\275\364\270=>\223k\301\275\232\001T\275!\2101\276\236\233\036=s^\332=\237JT>\353\331\273=\315h\037>oH\262<?\321\245\275\261%\276\274\273\315\301\275Y\331d=)\276\r>\2374\r;^z\000\276>\2268>\262p\223\274\013\200\310=\211\030R<\213\352\251=*\306\033>\013s9\274_=\236=[\317\032>i\211\346\273HW\373\272?-\372\275\025\377\311\275\332W\351<a\366\367=\256:4\274\r\210\275<\301- >\311A\"\2762_\022>N\365\007=\351\374\325\272h4C\276\211\237z\274\265+\n\275C\013\006\2769\003\223\275\201\227\331;\353\353\261\275?M\033=\203-\323\275\006\317\317=\2137\217\274\306o\020>J)`=@\372\271=\nd\263\274\250\275\335<\257\212\311\275_\214G=K-1=\2246\020\275\251.\023=\t;(>\3323\313=\220\320\000>Z2\235\275\t\314\257=\000\264\271\275\007HN=i\247\353\275-\213\317=\211Q(<\014\203\3158\324\337\235=:y\231\275\217\201\332=\270->>35\202\2740\236\206=\203\273\346=\'0\344\274g\265\341\275\205:\003\276p\r\274\275\314m#<\343\324\205\274\321T8>\313?\252\273\"b\207\275t\027\255=\270nk\275\261$\222\275o\031#>%\255C\276\202\365%\276a\271Z\275\372ae=\2058{=\221\032\302<\r\004\261=\344\315,\275\250\213\335\274.$\314=nT\217\275\024:4\275^\033\344=\375X\202\274\016\246{=X\260,\275\227\312\355\2752\347\005\276\340\312\327=\003)F\275w-\351\275x\265\223\275\316e\256=\241w^=\035\270\020\276\2034\323=a\351 \275\177\000>\276\335\327g>\264\027\370\274\214\356t\274\\\263\365\273u\304\266\275\323\013\026>\200J\021=\022\337\223\274\347\035\000\276~h\217=\344\270\n\275\005\232\332\275\366)\\\2748\340\350\274\222\312c\275]\2736>?\217\032\274X\352!\273\263\023\221=\374Y\251\275\352\372\220=\376\274\231\275\"\254h=\017\377\237=\231\332\306\275\374\310\272=\265\237\023>Pp\367=\265\232\233=\030\245\371;\277\022\223\275\001\3568>|\3367\274n!`\274\023\234\007\276\016\266\024>5\223\013\275/\256\005\276pZH>\221\225|=\275u\233=2\233\013>B\375\363=\230\333\027>j\010\260\275)\240\017\274{\227\036=\213@\021>\230$\254=\320\005\350\275\340&\t=U&!\275\271\245H\274L\253\327:\001\003\037>{:&>Y\"n=\240\034\254<J\016\370\274\302d\007>\244\322\355\275\345m)=\213\225/=\270a1\276\300 (:t\205Q\276&\336P=\221o\356=\364{\231=t\030\231=%\332]<\216!x<I\304y\275\030\373\204=\223<\016=\253\274\331<B~\334\274\013\273\226=l\366#\275\t\341-=\207Q\340\275\206c\014>q\n\301\275\240\261\227=\033\027\032<\247Qi=U\t2=\247\'\355<\353\177\301=QY\370\275!\350\017>\324@\342=J\320\271\275\311}\307;\017\213/\275M\020M>\223\\B>\301\333M=d\222\304\274\251\203*<\013\220$\276\034\021h\275\362\3538=\201\253\200<\tZ\347\275\364\225{=\206\334\022\276\211s\207=\021C0\276\202G2<\350/\300;\030-\017>\273OL\275\177/3><\321\245\275\267YC>\250@\226=\004\226\262<\3136\236\274\234\023\027\276G\020\177=\027\"@=K\361\016>\3140\205\275PH\316\275\254;r\275ia\341\272\323\230\310\274\201\272\230=\350\315H\274\260\374G\274\373\315\224\275\321>\020\274a\n\211\275\004S\272\274!\363\216<\366\0035\276\264\216\257\274;\311\213\274\254Z\017>M}\206=\343%\023\275\215e`<\200^\346\272\302\244\206=\307U\213=\274\332\004\274(\031\203\275\006~\353\274\264`h;\276tO\275\327\376\320\275\312U\221:)\235$>\342E\004=;\367X=,~\305=\261\370X>?\276\001<\211\014\331<\\\2368=\'h\276\275\355\022\302\275\020(\217\275\234R\271\275\374q\217=k\205\263\274\031\304\016>8a\330;\3516\226<2\2514\275dT >1\241\033>\3075\257\275\3161\312=~\333\300=g\227\204=Qo\255\275)\337\244=2b*=d\264\376\275\203L\367=\352\036\225;\243\177\266\275\023\271\334\275\276f\205\275C\347\347\275\315FD\275C&\000>\351\336;=\230\310\n>\242\203\247\275\362\324\310\275co\035\276]\260\221=\230\365\233=\300\026h\275M\332\322\275dC6<\037+<=,\030\225\273J\243\223\272\300r \275\325\025\307\274 \007D\275\\\230k=\333\221\235\2757\204\024>X\231C=B\000\021\276\274\346\024=|\014\300\274 \214\247\275\251\322@=\337Vh\275\310\2200=\003\034\014=\346r\247\275\307\'q\275%\025\352=o\356y\275\366\325\020\276\020l\301\2740#\026\275\331\315n=\203\n\257\273\300}z=\332\220\000\276\260\201\263\273\2373\006>\350\216\n\275o\213\242=\362\352\027\275\374\205\216=\361\237\022>\256\262\220\275\335M\313<\264\023g\275\211\001>\275\307\367\014>F\331#=\330y\"=\231\007\335\274\252\343\355\275\324d0>\271\002\300=$\026\202<\245\212\316\273\004\320\266\273\235^\266=\207\270\204=\342a\261<\205w\327=\241\016\366\274\245\034\277=\013\3273>O\367\237=\271\356s\275\307\017\332=n\207\254\275\360\352\275\275T\347\037\276\317s\346=\233 F\275\234=\277\274\230\306\372:|\230B>\013\207\236\275e\210\251=\034\236\372=\367\307Z\275Q\307I\275+\007\272=$\203\002\276<\230\033\276\201;\022<\177|\t=|h\242= \016\034=*\027\036\275\307\004\">\364Z\237\275(\217=\275\364\377\275\274Y3\214=\217\315!\276bc:\275\302\356P=x\252$=\301?-<\241Y6=w\357\017\276\255\2335>\243\354(>\"\311\334<\344\026)\276+\343\004\275\022\244\343=\315\224\017>\222]\367\275\216\211\363\274\265\371)<\254\201\362\275\2132\236\275\337^\236\275R<\242\275J\255-\274Y\244!<\344\007\004=i\314\013\276w\265\007=W\035\264<\301\255]\275`\210\017>\025T\370\274\260\377\016=0|\204\275\252\002k=m\210\007>\253{\027\2762\206[\275\360\271R\274\034\331\320=\232\223\361\275\004\263\241=\324\370v=\377{5\275\010j\330=7\221\224\273R\033\264\275\243G4>\270W\'\275\201db\275\224\342\204\275;\025\022\276(/\037\276\033\324\203=h\332\344\275k\354\222\275:\276\000>|\"^=m\324\365<s\235|=\014\025\264\275\224\027\036=u\354%=\033\226\314\275\372\2409>q\311\302\275\031uj<\016\3551=\257\351\356\275\231C\021\274\246\212n\273\251\345\020=\033V\331<\236\312$>\204I\201\275^}\257;\230\224,\275\311\224\241=\366\260p\272n1\032\276&\313\217\275\003\252\213\275j]\237=\276^`\275\247)\335\275\023\220x=\227\321\035\276\253\235\224\275\356\023\276<\367\321\235\275\262\331\232=\332\t\'=\r\256\344\274 \322J\276\304\230y=B\312\000>\r\3222\276t\357\200=\2769\277\275q\232\037<\256N\327\275X\313<=\311\216\232\275\357\232\345=p\300\300\274s\'\254\275\223\325\312<\027\341\374=\245\332E=\007a5=)&\312\275C\235\327\274\014Na\275\233\270k\275>A\033\276$S+\276\257\270K<\320\377\364<r\335\370\274{\315\016\275,\231\251=-\374\211=\230\245]\273\035\310\014>\316\232i=\245Ww\275\277k\032;\031\253\266\275\220\230\003=\035\007o\275\324\221\021\275f\254\221\273s(<=%\026\336=\351\365\203=4\005\231\274v\270\025\276\217\221O=\224\265-\276\001s\232=\376\r\374=1[\033>;5!>\360S=>\223=\273;\005\3450\272\205B\231=\025\307\016>\272s[\275.\333\035\275\217\242\232\275ah\263\272i\221)=ui0>\003YD\276#\364\333;\017x\227\275\220d\351\275\354\'\014\2759\206*>\177+\350=t\224\223\275$\032\263=\275F\346=0.\350\275]\026\373\275\r\005K=\254\267\033=\004\3057\275\\\203\237=P\037\232<\207c\310\275D9\317\275\224D|=\366n\024\276)\000\027>\260\035\001>\332e\233<V\233\245\275|\365J\275\336s\r\275\313\251\201\275N\233\201\275e\346\247\275\223J\267<l\0365\275/Z\\>\245\371\034\276\305\275\005>Gs\001\276g\026G>q\246v\275,4$\276a\005\021>\236\031\321<\216\360N=V\241\244=\233b\371\2759\237m\274}\350\335\275\222G\247=\027\025\t;\334\256~\275\273\306\t=\307\203K\275\247\250\334\275\305\241\350\274\305\260D\276\267ko;\307\273>=S\261\003>\347\014\361=\263\003\323:\002\245\027>\323V\025\276\372\204+\276B\'\327\2757|\226=w\232\001>\3503\240\275\373\356\245=\341\013\211\275w\213\350\275\232\202\266=\273$\330\273T\322\335\274\322\215\014=`\000B\275\242\342\316\274\222f}\274\'\276\225<\217\231?>\270\374e\275\233\346\245\275O\262h=\016\030\237\273~I\254=\241\026\007\275\272\255\304=1\034\362=\"j0\276\251\325Z\275j\2574\273\301\205\340\274\350\245\212\275\254\233\210=\031\375n\275Y\206\226\275\243+\003>F\336\275\274\342\0269\275Be<>x\363\357\275\347o6>\343\212/\276\224:\327;)o&=\035\330\327=\325m\366;?\332\022>\216\307\270=\243_\355=\336\323+=\331L\r\275\351\220!\275mV\234=\006\213\241\274\344\313K\274\003^7> \344\254\275J\324\'\276\257\202@:i\273\232= Y%=\202\325i:\340H\031\276T\326\342\275\352\027\347<\010\265\322=:\023\t\275-\206\355\275\276\277\220\275\n\305S\275\260\266\331\271\353\001\263\275\004Ee=\016SB=S\377\001=f\033\303=\342\274>>+\273\002\275\013\242w;\001=:>S\204\211\274\311\226\255=r\217e\275\251Z\'>\220\024D\275O\021\252\275?X\256\275\223\321\303=\325!\271<=\261\237\275=\247\230\274Z\272q\274\362\264+\276\236t-\276\tH\321<\357\365\377\275M\024v\275\001*\336\275\262~\211= \021\247\274{h\201:H\305!>\213)\023>\032\356\231\274\245\260\000\2758_O\276\355\230H=i\301\207\275q[\357\275\326\037\320=\321\3414<\"X5\272\020X.=hp\341=\273\356_=|\212\206=\342\005\220=T\252l\274\r\336 >>y\354\273Ekq=\257.\203<\315K\003\275\2548I>\327\223#>\036D\261=\336\262W\275\013k\360\275\021Xr=\222G\204=\232\006\t>j2\331\275\341\3305=)\323\357\275`h\002\275\353E\021\276\241\035\254=~\353!\276\265\203\375\273!\304\201\275IC\253\275&R\375\275a\346\021\276\003$\235\274x\376C\275\352\272\030\275Y\2522\275\373\330(\276\363\"r=\230i\301\275\0076\360<\220Pp;\016\3645\276\035\363)>\206\236\230\274\264\212\021=d\307\237\275Z\226\014\276\207;\322\274EC\347=\037\247\250\275\355bi\275\217\024\230=\277\301\260\275\227\010\346\275y\235:=c\352\234=\225h\026>\362\261\002\275\270^\300\274G\214\032<\273\233\207<\036=\202\2755!\252\275\023\005[=\264{/\276\354\344C>\360g\357=o]\264<\302\353R=\316C\335<\031\367g\274\262\017\313\274\223\t\225<n\350\204=7\261\r\275!\032\001=\271j\215=\3051\323=\306qF=\\\201\212\275\211\277 \275\245X#\275\314\222>\275\352\327:\275\234\262\205\274)\n\272=\310\322\022>d\306\240\275\213\345\236\275*\003\036\276s\302@\275X\031\327=\212\276\223=\253j\226\274\020\312\t\275\037\216\251=\013#\317<\007\351\032\276\201K*\275S\320}<\001)p\274`)\277;\243\346\351\275\354\262\352</Xk=\251H\024=\177\244\373<\374\023\216\274\300\n\236=\327-}\275\377|\355\275\262KM\275\241\211;\276u\250\242\275\340\241p\273\020|\326\275\320\240\316\274\350\342\200\275\250]\033\275\\\336\234=\033\020\332\274\2576:\276\252#$\274A\303\003\274\244\"\201\2754\016\325\275~\376\237=p\006C\275\261o\375=m\260\275\275\275>K>\2508\223=\034\264\006>b\243<\275\365\210\257=m$\303=<\203\025>\327-\325=\034E\300\273\342\215\345\275\226\225c<e\244<\275\312N\230:p\222U>\274\010>\275\240d\246;sR#>\331\365T\2767\266\213\275\026B\201=\316Q\352\275\301\014G\2753Z\010\276\215\312\306\274\210\024\216;\343a\302=X\235\026>Q\345N>\311\336\216<\037\232\256\275h\0248>\234\307\237\271\236S\224\275\017\317!\276\241s\037=\271N\003\276n\273\261<\347\204\036\276\272\222\342\275\300\346\377\275\210\034\342\274:\336\362=R\017\010=8q\037\275\246\037\232\273Q{\036>\303\332\003>\277r\235\275}T\362\274ed\354\275\353\240\024\274\341NA>\367\251\220\275\273\004\017>\2257\257\275\253>\220<\374{\026\274\304A\322\275\231\034%\274\037\"\301\275\217\307\237\275S\007\231\2755\374\225=\264\026&>\342\r|<\'\245\010<\340w!\276\\\375\360<z\340J\275\321r\336<\273aD\275\032\240\236\275R\206\224\275\256C\316;\201\000\201;3L.\275\305\310\300\275\270\245\034\276.yi\275\200\357\350;\252\274\303=p\371\021\271\3057\t=\326\217<\2741\273\335\274\212\355]=\356*\323\274n\330\254\274\345\233\234\274\314\341\367=i\356\231=-\365\340\274\207\250\211\2751j\t\272\256\'\221=\255\202\252<\272s\014=UCQ>D\013D=\017\353\036\275\237\271X\275&\316\033=\237t\023\276\2323\205<%\372\237\275\347\2632=~\t\210\275\256]\216\275\244\303\210;\370V3\276\366\031\027>4CH=L\262\003\276NZ\276\275;\221`\275\325\204\265=\006\224\340<\345\241\221=\007\204\225=\\\346\202=\003\n\263<\247\027+\275G\241\004\275 \311\357=\017\332\244=\004\203\265\275T\037\375\274\331\332\347<\0136\352=O\221\377<aj\331\275\001G\007>H\204\223\275\013\3543\276\240\243\373\274\272\224\235\275\306\205(\275h\010\331=\021\353\353=\330\237\233=\034\3365>\223\001@\275}r\246\275G\322\301\275\343\267\360:\251A\201\275\301\335\016\274i\344\347\274+_\237\274\213\010\234\275)\000N\275\212X\265\2757\233\221\275B?\267\274\205\250\340=b\257\233=\014\027\024\274 <w<\373W\336\274g\017\327;\207i\305\273?V\010>\032\362j<\231\313\017;\206f)\276\327\231\357;\332\255\366\275\332z\007\276!\326\007\276\234@H>\003\324/=Ty\016\276\327\005\301=\335*\013=\350}\032>\033\306\037\275\021\324\342\274\212\313 \276\2626\331=\321:*=\242\350\001>\032\223h=\314\234\361\273\255\311\211\274\000\262\233\274.I\016>\316\315R<\226\r\204\275\252\241\234\275&\022\200\275$\373\022>\353x\001>\024\375>>\245\225\301=\241i\241=\375\216\247=\0207\026\275q\203\271=b\240\330<\350\023\372\275\212?\370=\257\006\301<p#\245\275|\376\001>0x\311\275\2401\215\2754a\246\275\273\301\244\275\306\013\006=\247\235\210\275\364\262\036>\273\372\212=\232?\330\275S\246\334\275\240\343b=\270q\244=\225\270\336<\351]Z=\225f\372=\214\317\362\274\213V?\275z$\035\275]\212*=\301\244^=\362\310\264=\001K\305\275\215\246V=\204M.<JV\241=$b1>\025\t\021\276\377\265\207\275^\206~;\'\252\325=\357\325\250\274`T\033>\306\363\275\272\r\312\254\275\217\\\354\275u\222\257=\177\203\212=\367.\317=Z\357\215<jm\333\274b\n\023\276\340\030\332\274`Y\013\275-\336Z\273EN\264=9\323(=\250\325\017\276\332X\022>\301\350m=\177\261\260\275\375\271\272\274\201\2478\276\340F?\276,\r\236=]\201\267=\217\226\245=\244\305\274\274\264=\275=\227\225w\2758\306\300=\326\367\203<\366\363\253=\207\342z<*\366N\275\026I\032\274\330\027\360\275\"\340S;\016\212>\275S2\224\275\004\276k=\3172\333\275\271\025#>$\330/>\210\317\240\274(\233\023\276\341o:>\273\355\276=\036`\023\276=\370\203<\000\266\252\275\n\254\235\274\215\375\216\275\250\234\312\274\032!<>\341h\330=n\271\004\2762r\014>\343M\246\275\272A\327<\326\032\027>\323z\">\373\\2\275\233\022\242<\020\241\202=-\243\017><:\236=\207d\r>_Z)>\254\261\007=\371\306i\272\362M\225\274<\341\315\275\021\226\304=\265G\247\275c\232\023\276\004\266%>\264Z\010>\266\340\201\275\301\264\313\274X\342\336\275\271p\231=O\255\215\275G \003\276c\244y\275E{\305=\025\005\032>\217\037\222\274{\273\217<\332\234h=\260l\347;d\260\013\276W\364\'\276\305\002\211\273\257\360x=\256L\017>\300-\343\2748*\237\275K~\367=>9\206=\014\2376\274\003;\244=r\213\326\275\034\371c>q\245\210<\350K\0009\'\302\275\275#3 >\262\006\035\274\374$\213\275\220\037\371=\"\321\242=\246~\331<\3604&\275\325i\324\275\330\347\300=\325\376,>)\374\352=\022\245|=\0102\222=P\222\275<\247\033\270\274\205\t$\275\235)==\236\244\213\275\031\013{\275\215\337x\275\241g\216;;M#=\337\361\026\276\024\005\315=m\360\211\275Z\342\353\275\031M\010\276s\237m\275\236\346\307\275y\346\017=U\351\006>\225\030\300\275],E=\340\026F\275B\223\363=\246n1\272\321\276\007=\345\343\354=\\\266\333\274]\243\365<\222\317\206\275\253\357\274=\360`m\275W]\357=r\272y\275\315\343\032>\235\326\020=B\211\344\2755\\\242<\241\373\265=\275\003\366=-\3167\274\305r\352\275J\307\033\274\305\274\217\274#/\241<\0065\224\274\002~x=I&A=<\233\022\274-+0\27605\007\274\275@\325\275,\263\247=\250\372\252\275\303\026[=_\006\327\275aR\n\275XA\261=`\223\021=^\027H\275\027\300V>\237G\314\273\317\244\322\274\023\273\312<1r\241=4\363y\274j\027\204\274\035\226W\275\254\255\240\274L\262\334\274\261\027\246\273\347\014z=\276\022\022>\037\265\021\276@\253\330==\364\033\275x\246\301\274r.\330\274\302&):#\013\217;\334|\302=\030\372{=B\314\350<\330b\320=+\001\247\275\352\tM\274\021\264+\275?\340\362\275\017y\006=\355\'\201=\220\n\374<\032 ?\275\304\035\201=\304\271~\275\225\335\273\275;}\320\275\022^\312<\325\3144\276\263\343\031\276W\356\215\273\332\322\031>\270\0066\275\377\301E=H\241\322\274\020\360i\274x\301\027=\037\315\376\275\303+\213\275\035\374<>[\324\240;\334\2719\276\311\262?\275D\356\007\275zw6\275#o8=\254o\t\276\346\034\035\276`\250\313;\374\371\346\274^Z\032>\375\364\254<Y\007\002\276\314\r\365\275\347\223S=\032\330\317\275\243\037\200\275|\354Z\276\347\307D>\322i\t\276\347)\004\275\377p7\276\000\265\262=\353K\346=\177\361\314\274\366\016;=.\206\r>q[\030>\n\243\034\275\250\344,>\035mO=\224\036@\275\373\020\010>%\0055=\024\255i\275\205P\240=\177\367\273=j\375\265\275=\227[\275\275\240\344=Ds\317<\255\037\314\275Q\240^<\325\372\310\274%\277`<\331Qu\275P}\t=\021$N>\013\271\265\275\270;<\273\237U\214<\332\353\034=}\241\344\275\t\335\375\273\372c\215=\237b\226=0)\006\275\331}>\276\323\262\004=\352\237+=\3625\341<KJG\276\231G\242\274l\355\033>\343Z\266\274\356N\010=/\302\023>lb\320\274\371]\014\276\315\244\355\274\007\362@\274\314\340\002=^\013E>\337\342\004\276l\036\263\275t\246\250\275\332\376\330=\251\330\006\275\230}\326=\217\2661>\260\237\352\275\031\272\003>\234\260\313<\222M\241\275I\034c\275r\212 \275\033\264\'>\036Lt\274D\362\004>\215N\201\274\230\024\247<A\230/>h\311`\275\205a9>\t\354h=\300\331G>\03468<\'\355\217\275\204\215\201\275\017\275E\276}\335\237=z\212\332=X\266\320<\036C\211\275wW\375<\206\256\322\275\350\037\336\274\277\\\030\275g\216\032\276\331\354}\275\323B\020>#\2608\275\357\010R\274aj\262=\267\254~\275\030\251\240=[\323\350\275\177q\252;\220?k<\0268\n\275\255\215[\275\343\337\013\276\333\206J\275\333\306j<\311\205\355=\345\222\302<J\203\316=cv\002\276Q\323&=M\316\307=3\"\005>\273#\327<\t\303O\275\245.\030\275\230C\020\276r\326\010\276n\277\353=\206S\204=7\367\352<\256\223\245=K=6\274C\236\204\275\236\023<\275\203qB\276\270\025\263<8\3248\275,8&=\366\230\324\275+\302\215=\025lG\276\221?\235=oO+=6@\002\275\272\372,>\252\310\030\276_\332\234\275s\221\260\275\341]j\274\356Gc;\r\372\244=*\325\271=\014u\372\2752\036\244\272\376\262\212=m\034E\275/\263\n=\014\372x<\334W\302:a\262\316\275]\333\n\276>`\301=U\367\347\275\200\273\250<\207\331$=\261\326\230\275\274\365.=\315^\252\275\\\217\351\274\317\372\013\276\017)\313\275\275\346\006>\244\3660\275\357`\226=\312\023\354=\226\343\213=\341\265\360\274\256Xc\274\2302\234=\315\217+\275Ce\353<y&&<\035b\301=9\r\036\276\2540\345\2745\3624=\330sN\275}\230w=XE\200\275!8\037\276\327\"\005\276\275\256\263\2741,\035>Q/\r\275\312\230\024<F\205\324<1\350\024\276P8\233\270\327\257\313\275\230d\311\274Q\2173\2740\2764=<R\237\275O\243\215=\344=h\273\3404\242=$\341\246<gU<\276I\267\241\274\324\203\276==_C\274\252\021K=\202\317\261\275k\254->\364\231\232=*\276\313=y\340@=\300\302\004>\207tG=\002\373b=G\024{\274\377\335K>\367`<\275\340m\212=\265%\030\275\364\232\r\276\316\2231\275dMD\276\366\323H>N\311R\275\207H\337\275h8\211\275\231\2371=\302\212\016>\214\204#=;\337>\276p\347\256\275c\241\202<\244\345\201=XI)\274\017\033\346\275\250\252\340\275IO\222\275m\255M\276M\371_\275H\nF=\'o\206\274\312\006q=\225v\337\275\t03>+\032\201<&\203Z=\220\216\227\274\224\330\275<\251\256\035=&g\221=b\277\202\275\265\003\211=\316\n\227<\221\307J\275\277\r\200:G\010G\275\361\347\377\274\236\211m\275\253\335\317\274\371\364`\272ug\007\274\304\241\265\275\356OH\275-m#\276\317D\326=\332P\003\274\357\312\026>\222\010\265=+\375\377\275\242=\331=6\210\214\275u\261\341\273oE)\276\034=\356\274|(c\275IS\222\275\302\332\251=\351\220E=\355\330\344=\264\203.>\336\250\270\275z>\007\276~~\364=4\256F\275\003\306\254\274\000M\257\275\3377\324=n\240\206=\027G\315=:1{<\223\210\302\274{\352T=Sy\225\275\267+\366\275d\361e<\357\027\001\276\321\344R=:]\220\275\021`\231\275\276\020\264\273\002S\373\272\212- \275\371{\307\275\345\365.>[t\320\274<Uo=,\262\020>\322\302\033=\'\340/>2\255)\276\366+\205=\375\240]=\313\240\226<\350\217\343=\210\216\024\276\374\001\t<\360\362A>\221@4>A\335\226\275\327\372\207=m\336 \276\006*\036>\2660\003>m\035\224\275\255zW=\006x\037\275\230Y\316=|\021a\274,\336]=\013\274X=\027\343\350\275\025\3659\275\235\227\204\274\305\035\254\275g\330B<\326\016H\274\204\033\377<:p\007=\317\310^\275\034\325\217\275P\275\010\275\207\224\000>\2461\335\275<\014\227=\354\311\227=\370?\202\274\003\224A>\177\352\313=1E-\273\t;\037>\350\250\257=\250\2536<\234\034\210=\254\343\025\276\275%\217\275\271%%\276-K\320;\037\377>\276s\354~\275_\365\253\275D\035\306:B\373\227\271\363Yi\275\263=\243=\264\312\216\275\376\205\301=\342wY\275g\341z\275\204\215,\275\255V\035\276\343\3542\274E\220\227=O\313\263\274\\\361\016>#!]\275\225n7<\216\225\000>CWW=2\356\004>\337\334\351<c\032C=}\006P\273N+{<\001\353\267\2757\362\237\275\257\234\276<\036\266t=W\242\r=\336\316Y>\372&K>\207+\265\275>\357A=\362\336\002>\227\344\026>\353\207\351\275\313\345\247<\227#\343\275\323j\336=\016\n\'\275\273\255\247\274\245\010b\275\210\217\237\275\342^<<\310\035\234=ls)\275\004\027\256\275N@\370<\350\345\024\276\005\272\000>\211\030\224\274*\222P={\003\325;\307\304\221<\023\004\340\274{\231\031=?{\351<\302\347\225\2751>s=o\230.\275z\212\t\276P\270K=*i\276\275\331\007h=\363\355\215=\313i/>\310\271|\275\036h\236\275\307m\332\275T.Z\276\rx\034=\t\330Y\2756VV>\344\000v\275\2032\257;\n\211q=\2418\335=\234\201[\275\313\323\020>\305\016\330=\246\355r;\233\230z=\275J\344\275.\035\266<\3613\016\276\\\304V=r\023\270\275\215 \232\275V T=\030\374\204=\256\016\321=r*i\275\360<_=\312\035p;Nx\242\275c\211\026<eE\322<>pi=\030\267\376\275I\247\235\275\335^\001>\243\264p\274u\227\225=\276T?=P\230\261<\276YA\275\255\202\212\275\323\222\r\276aN\020\2763\035,>\024I\001\276yM\351=\225\307D=\244{\363\274\252\227\243<\311y\204=\232g\222=]9\211=r\266\010>\327~\245\275\271\020\022\275\207\277\370<A;\343\275\261\340\314=\244~m\275L\373D\274\270\351.\276\312 \307\275\257(\263=\374m\017>\310\242\332<\345\373\354\2757P\033\274\207\240\272=\235\342\200=\213W\000\274\250\325\272=\271m\261<\337\366\253=K~\260\273U\363W=\323A\002\275j\177\303=\347\272\274\275C^\004\275E\243\342<i\306s\275e\257H=\204\337\257\275\274\357,\273\243\206\374\273\203\222q=C?\233;d\260\307;\211\262\025>?\220\345=\371\266n;\276\271\332\275\2044\025<c\t =;\364\346\275f\030\"\276\307?\r\276\337\036\017>\265\037\344<\354\210\256=;\"\272\275\212\372g\275\3234\031>lw7=t\277\322<p;8\275t\032\376\270\210\220z\272\335c\341\275\205\336\237=\361\205\260\275\221\262\334\275 \237\203=\352D(>\320\241\225=\3130\"\275\363\276?<\n1\337\275\365\206\340<\333Z\025\271\030\312\277=\371T|=\332\375\265=\005\354\'\274Wq6>\374\241\247\274\tk\237\275|\346\225\275\246\315\034\275\260\226:\276p\2577\274\347\276y\274u\370\232= \3711>\022\301\247\275!8\321<\300\210\017\275\016%\274\275\256\301\033\276\345\272\234\273\023\325\177\274\354\254-\276\003\201$=~ra\276p\362o\275\021N\373\275\325\201\t\275\316\277\211\275S\256w\275\007\006\212\275\014\321\327\274\376\014\200<K\205\274\274\307\021\315<\365\236\334=7\030\201;\376\243\244=\272;\033<\326n=\276]\335\313\275\027)\243\275\023\372\024>\365\316\001\274\354\013g=\214nj=\377\333\001\275\224\210P>\264\213/\275Q\275;<\276\024+\276\321\306\375\274\351\374\247\274\260y\300\275p,\210\275\376\027I\274-\220A=\255\223\237=\367\302\325\275\nM\341\275I\333O=\321\226$\275\361# \275o\353\301\275\300\321\030\275\t:\014\275!\026\026=^\3073>\210\325=\275U+\020\275b;#>bUK>\315=\306\275\334\003C\275\007\223\220<\202t\021\275-\223\001>\245\207p=U\361\021\275\223\256\n\275\322\272\203\275\001\344F\2750\032W\276\360d\364\273\377\314\217=\312\026\272<t\004&\276$\330\272\274\300g1\275g\0038=\272\251\016=\242\256f=\347\010\335\275\025\227\331=\344;\330\275\242x\032\2753\351\001;!\277\002>\232\266\337=\303\242g\275\333~\021>\366>%>\205$\200\275\327\253\342<\302\235\240\275~(\215\273 .\003\276AF\272=\236\302\360\275\3660\032>m{C>\\\335X\274\022%%\276\031g\016=\2338b\275\345%|=Ip\\=\330Y\300<,\211\017\276\374\024\223<\276\330X=\341!W\275\352$\035\276\033p)\272\327W\330\275{\324\322\274^5\301\2757\317\311=\220\355R\275W\372\337\273\214\220\002>O\t6\275+\030\213\274\263N\320=\313{1\276\320\341F\276<\213E\276j\364\255\275\362\360\254\275\014D\310=\374B\262\275\311\301^\275px\305\275\266.\253\275(\316G\275\221\2518<\265\263p=\025\373\207=\310e]\275J\271\377=K]\243=\024\220)\276\227iE>M=}\273\n\207\236\273tt\026=\025\"\233=%\237\274< \336\253<\202\207C\275\251#\022\276\374\355\363\274 \212\345=\332\307\340\275\225\"\364<\210\006\316<\313~F=\334\177\004\276\005[\000\276\202\335!>\374\3035>Fd\246\275\363Q\306=\367\222\355:|\004\373=\313\236\355\275\005Z\247\275\261J\275=\003\201\304\275\003\234r=\370*\262\275SJ^=\007\253\322\274j\211\006>7\273\364\274G\264;\276\223\233\034=,\375\310;\254#\333==e?\276\262\264\356<\277\364\017=z\320.=Cx\354\274\000t\243\2751\003g=F%\210\275\250x\232\274\2732\226\275\003\007e=/\212\245<\361\367\311=\271T\246\271\325\243.\276\222\371j<\375\354\377\274\342\240\033\273`!\000\276\222p7\275\343\350\304=\304\356\033>\331q0\275\363@\007\275\227M\260\275d\200\237\275\1773\026=\301%\257<\265\030#>\243c\352<\251\231}\275\244G\322\275\322\201\261=WK\217<j\305\307=1X\005=\324\314/\275MB=\273\200\355\335=\360\033\003=lI\'>\023C5>\005Q\240\274\364\306\324\273\301q\207=\277A\024>R\256B>\365\014r=,\2231\275\003\024\026=\311N\351\275UTl\274\260\322I=iP\276\275\213\r\216\275\277(\220<s\271~\274$@\035\273\003\270)=\227\r\371\275F\'\">\253r\271\2734\257\234\274\342\212\315\275\263\276\335\275\232\344\227<\267\223\230\274\204+\221\272Aa\016\2758\356\307;\223\311\323<M(P\275b\002\r>\270\366\332\274\314\257#>\345\374\006\276\275V\344=O\006`=\365\315\027\276\256F*>\227\217X=\034\031\365\275~e\251=\007\037\230=Xg\202<\373O\212=\355\374)> \363\315\275L\007\027>$tc\275\335\026\010\275%\344\271=\307\342\254<)\212\024>\357\371\251\2757\254\353\275\275\030\270<#L\020=\350\300\232\275\320u\354<\346\375\"<\374\241\314=Cbz\274\313_\241=\305\276\206=\2077\212;\033W\n\276\331b\306=\330j\027>Z<G\276`\032Q<\265)\367\275\376\220\000\275\222gm\275\202(\260=\nb\013\276\232?y;g\177\345\274\276\212\314=,\240/\275\357H\342=\261\235\213\274\244$\272=\202\020\220\274`d3=\322\251\373<\332\334\036\275\333\035&;\302\355a\275\262\360\373\274\316\017Q\275\311\003\022\275\215eC\275p\345\266=i\007\277\274\r\237\203=(\264\252\275@\314\033>\331u\275<s~B\276\033I\013\276\303Y\333\275\241\335\360\275\031\010\034\2766\222\010>\346Au=\210P\202\275@\030\277\275\302\354\225\274\022&\314\274\217 \240={\2617>H\206D\276B\372]\275G!\t\275j\246s=\271\021\234\275@\241\342\273\337\274\245\275\022\007:=O\262\352\275\"\261k=\257G\374<l<\243\275\227\315\361\2757\267\261=\002R1>\376a\377\275\376\262\251<O\024\261=\325:\217\275<\374\t\276tTP=_\214\320\275\215i\277\273\347\260[\275\272,\004=\212_Z>\010)=\275\251\205\236=`\037\361\274S\333 =\313\004(=\342\326\230\275\351\355\277=\231\301\010>u\3036=\270\276\333\275N\253m\275h(\374:\036U\331=\363]\311\274\223\261~\275\356\001\323<\261\216y\275\312\332\205\274#\230\364\274\0026\362\275\002t\337=\337\337$=\233\331N\276\036N\250=o\033\355\273\303\231\270=\317\257\353=\371\225\004\276\\\335\'\276\022\006a\275<\271\357=Ww\016=\220\340\354<z\276\301\274\345\007L>\255/\027\276)\000g\274&;,\275\244\266Y<\271\375\030<x\362$<wd <`\033\017=\312i^\274\236Kf<gw\035>>\230\243=r:L\275\205\354\262\275z{\211=2\253\013=\234U\037\276;c\312=g\213l>U\237\275\275\256\227\005\276\2539\224=\267\347\014\276\360\005K=\222\345\014\276\302\020\236\275\225\301\364=\327\216\244\275\201\177\336<\356M\251\275\300\000\025\275t\301 >\315\240w=\365\300\237<\255=\020\275\254\322\005\276C\027b=\025f\223\275\367\216\321\275\240\333\344\273\003\247(=\0052\004\274\304@\334=\350@\024=\227\234\210=\222\177\256=,\300\021>\335\233\247\273\005\347D\275\341\026\370\275$=\007>\235\007v\275[G_\275\2204x=J\363/\275\265\r\330\274\207\006?=\351\000=\276\007A\321\274\270\037\271\274\003m\256\275\336!\205\274B\227\356\274\214q\242\273J\324C\274&\216\370=\354\206t\275\005$\312=\302\372F\274\005\024|\275x\377\r>\237\226\350\275\324\2265\273\350\3134\2752\266(\2750\227\364\275\037\202\347\275\310\375\000>\007\265\027=O\315b\2758;\221<\034\373x=\247Gw<\344\337\202=I\365\223\275\010\0320\275c\350w\275\0100\302\275k\255H>\024z\327<\177\226B>D\003\344=\233-\014>\303\215q\275\264\216\364\274\361LR<\376U]\275\036\214\247\275\324L\326=:\316\273\275\177K\217\275mG\214=\261\211\204\274@\035^\275h\315\210\274H\3219=\255\227(=*\027\364=\263|\265\275\303OR=G\006\016\276\262\360G<\235\2046\276Z\251\251\275\321\0202\274\317\243%\276\217\356y<0\264\364=?q\337\275Ed\212=\316\330\266\275\237\267\340\274\201nP\275c@c<\354j?\276\311P\254=5:\272=\221\252\314;\223\325\343=\005\230\254\275\274\006\200=\035\273Y\275\020l\212=f\030\002>R2>\275\310\014b<x\223\327=<\237\223\274W\270\205=2\313\267<\322\253\276\274\217\356\345=\207\204y\274wl0=\024\323\247\275\305\374\207\275\006y\210<F\350\267\275%6\035<`\256\337=D\034>>y9\006>\350\033#>W\371\177\275\330\014\332=b\205\004=\036\010\037\274\3477S\275\304\006\036>\246\256\261\275\036\372>\275\205\002>>\025k!=\344#\214=;k\"=\027\2522=\267o\301=\024\253x=\\M\313=;\364\211<\232e\326=\340\225\020\275W\377\013\275\274Q\264=\224n\241=\357\020n\274:\250;\275\243rr\275i\000\201=^\033\000>d\026\022=\\\267\014\276\035\302\232=(\200r;\231\2150\275\275\270\016>\366\233o=\351Q\205=\027\332z<\266L\256=\237\307\025>Cn\237=\203\226\024>\363w\267\275~\340@>nz\225=\027\210~\275gC0\275\222\322\215=x\242\005\276\307\277\355=K\261\322\275\022Fh\275\351\177\317\2754\301+\276f\301\241\275c]+>\017\201\364\275\020Q2>\225W\344<\020S\014\276\353-\013;f\214\017\275\305]\323=m\275\027\275\222\310L=p\244\r\273\203q\225<\270\237\374=\277\367q<\003v\005>\366&W;\366\230\215\275!\317\032\275\365\000h\275\311z\003\276(K\232\275JA\210=Y@Z=\020j\365=g\032M\274\231\264\027<\326\336\362<\204\332\265\274\204\037B<0\003\300<KIf\275\336\264\244\275\033\340\007\2750\232\022>\340]\263\275\"\304\314\274\004\354)=D\240\241\274\234*F\273\265=\300<\302\275\363=2\005\274=\376=\344\275\0249\036\2752#`\275\233\212\010\275\213\354<\275\271|\325\274\244\036\230=\203k&\276\013\326\270=\016\370\333\275\354\257J=\022^\001\276\341(\037\275\000\210\376\275\027_\353\274ym&>\204)&\276\001\'\223\275\325\013\031=a\336x=P S\275-\303\254\275\0376_\275c\312\306\275\005JD\2765\363J\276\223\\\302\274c\307\342=O9\347=\300\"!\275\246\360\221\274\267O\014>\227k\265=g\035\350\275/J\257=\222\333\336<\"9\004>T\366,\273\003R\'=4\343\327\275\n\222\217;(\314*=\273!\235\275\003\273\313=\264\036\031\276\265-\001:-\306\333\275Y\207\315\275\241*\335\272`\265\273\275G\016\016\275H\023\005>\0030Y<\306\377&\275\022\260\321=z\030\243\274\362|2\275\372\177N=M/\007>.\273\021\276\366\201\002<\2671\215;\225\016y=;j6\276{\321\241\274\261;^={\355\231=y\177\022>\376J\375\274re(\276tZO=\2453\253\275]\2259<\306\275\261=i\270==vD]=\260\315\371=\037U\017=,a\001=\334O\273\275\346x\274<\274(\305\274*Nz\275\261\017R=\010\205\376\275\005\354\276:,\007M>\010\236\014\275E\344\335=?\244L\275P_\303\275%\336\362\275\013\327l<\377\3511\276A\205\010=\263\372\353<\224\343\253\275\351\371\315=\241!,=\325*a\275J[J>\377\021\235\275\273\367\305\275J\004$=\025\223\025>J/z\273h0\377=\314\213@\275\361D:=\r1\345\275\003F\001\274\341\030\024>{\211\374\275f\270\020\276\t&\316\275U\264a=\036]%>\244\320j\274\321\340\006<s\366\022\276\03118=\"p\222\275)\371\343=\226\247\304\274\366\006\224;\204P\246\275$\361\306\275-)^\275\315\375\241\275k\320\255\275\246\272\375\275\220\371!\274\365F\315\274\311{\207=\245\300\266\274\253>[\275YQ\343\275J\342\317=$\0137<h\337\r=\344\331\035>qW\033=\\}#\276\003\t\301\275\250\022\326\274\375\022\265=l\266\327=t\215\230\2753\223\222=\320\303\265<O\355\002=\037\016.\276\207\243\214=Y\373\246<\206o\006<\222{\270\274\314\200\314\273\3258\317<\262f-\276Hk\345:\r\2761=M\207\213\274SJ\351\275\030\362\026\275\2526\315<\243\210\276\274\255}\001\275\037\000\257<\247\242-\275\372+\333\274nS\221=\327\022)\276\346\201\314=\004~\267\274}\025\203\275\226\371\220<W\306\265\275\205\316\240\275v5\245\275*\006\243\275\306\365%\275\257\243\351\274\273$\365=l+\243=c\234#\276\375\340)>\265\343\177\275\352\327\367=\014\352\316=ECo=\372\035\264\275\212\342\230\275\250\235\365=\036):\276\316\354\243=\'}\003\276\227\320H\276g\037\005\276\017\245\177<`\340\\\275d\300\336\275D\225\304=I&\242\272\255\203\352=\313\021\201\275\321\010\020\275\321Wu=\304\026\337\273r;O>E,,\275\213<\246\273H\327\252\273\262hD\275Zd\220<\023?K\276G\261\035\275\307\372\350=\306\246\'\274{\375\006>\026\030\214\275\035m\240=\314\221\'=\307+\206\275\220\332\312\275\363q\255\275\037\002\320\275(\227\367\275V\207\364\275g1\325=\003\215\226=\261o\312\274\3669#=\3418\266=a2\217\275\265\365\273\275\221K\217=\325\277\353=\216X\300\274\003S\365\275\"\236%\276\267Z\013\275\340`2\276Lb\017>{Z\307\274\355\003\005=T\366\213\275M\240\\=AV(\275\303\364\236=\213\355\035=\255\362\335\275\027i\006<Jd];\0006\354\275h\247 >jM\035\2767e\257\275`\204\234\275\336\3600>t\247\205\274\3428\307<\t \312=B\355N=\235o\247\275\303\034A=\267\335\">\205\356(>\333\276\t\276\312&\r>+\315x\275\221Y)>&[:\276\225.\372\275\277l\223\275\257c<\275\030\263\321\275o\0310>\3652\271=\n.8>x{?\276=\353\332<\271{h=E\341\232\275p\221\217\274\226\322\231=\005\245\224=\037M7\274S\240,\274\010j\023\275\002\230\342\274\0336\023>\310B\370=\316\026\240=\31080\276\363=N=\201u\240\275\371\303\320\275J9\335<\352\276\205<\"N\n>\206\364\024\276CL\204\274t|\242<(\327q=i\225\231\273\325\366\274\275h\236\261\275I\177Z<\340\203\026>\350\261*=\375X\200\275\264\201 <\220\213\363\275\275\253G\276a3X\275|U\'>)\204\205\275\221N\244\275\233\210\000\276\260\324w\274\324\010\243<\377D\230\275^\323#>B]|\275R\024\250<XO\255=\334p-=\251\377\n>\351\363\361\273\331\2341<6\227K\275\224\351>=\325z)\275\214t\204\274EyR\275A\245\205\275\017.H=G\360\340\274\245\017)\275j\233\260=\260\231]\275nj\">X\352\013\275\324z\262\275aR\"\276b\326\025>\220\036\277<z3\225\275\025\204\260:\242\251(\275\251\240o\275\250\265H\276\253\326\316;\023\326\256=\2223\202<\306+\332\273\203U\203\274\034)\020=)\325\017<\031\210\"=\233\272\261\275\242\325\023=a=\024\276\202\211\260\274\262*\373=\363\326\236<\007\365\211\275\243\031\256;z2\231\275\375\376\262<\201\210\t\273\256s\004>n\331^\275K\201\251=\337m\240\275WY/;\'\302$\276u\023\222<\357b0\275\206Ym\275.\262\013\276\365\225\005=\247\032\367=b\354.;4zv<\021\234\335=\374\216\307\275\361\254\004\276\3108\327</\203F\275\370\341\236\275d\267W\275fS\r\2758\310\350=9\376\025>\326\256\032\274\036f\007>k\023\235<;9*\274\024\'\013\276\234B\274\275W\036\377=\214\262\200\275\371\206\023>]s\005\276#\305\230\275\202\315\231\275\2143\254<J\026\270;A\024\021\275u\316-\276\221\250n=\213cA>\272\322V=|<\262=c\035\025\275\300h)=\346\316*>@~\203\275\tG\005>\274<\001>\344\300@=\326\361\010>\206\346]=ky\245=\374]\264\275\245>=\276\261\210\262\275\205\277)=\216*Y\275\273>F\273J6\301<m\236>=[{\216=O\017\003>\251\307t\275\206\016\363=\3475\302=\332\323~\274\331/2\276\215\227q=\306\346Y;\266\320\270\274\211&\320\274@d\037\275\217\213\347\275|%\260<\007H\324=\013c\270\275-\255\213\275O\200\r\275\211\254\202\275\031\353\366=\022\224\245\2731y\245=\270\302\212\275l_\200\274\020\327\315\275\017\345+=m%\356<\236\265{=i\265\225=\347\010\000\275}\001K\276o\371\020>f/\265\275\345q\365=f\303\344\275\273c\223\275\243*\304\275i\261\025\275\325]\030\276gs\250\275\267\234\201\274\027\372\310=4\334\302;|m\021;sm\314\275\010/D=\177L\033\275\307\010\370\273\335\014Z\2755u\361=\023\246\035>I\313\003\276\312\204\004=l.\177\275\231\333\255=kg\371=\3629\267<\333\365\261\273n\225m\276\277\013\025=\026S\241\275)\035\214<\334\210\003>\006\312\213\275x*\275\274\313J\364<\226\332\267\275\\\230i;\020N>>\232\263\274\272\026j\"\275\316\330D<;n\016\273M\256\256\275\3230\346\275\247+1\275\027\357\363;:\227\330=\370|\001>\222\343\217\275\371\274W=\375n\271=\347\227\001\276\235\035\254\275\213\357F>\013,\352\275\226Om\275\000n\312\274(\361*\275\227\001\271=\232\344\312<\214\314\202=\313f\006>\020\0220>\002\342\203\275\235\324\346\275m%\264=\007\024\376\274\277\300\177\275\270^\221\274b\262@=\362\235\334\275\2053\237\275\023e\022>\271\006\242=\202\320+\275\361\247\355\274\3468\333=\364&7\276 \027\337= \321g\275&\311:\276tG\017\275\245\226j\275\344\312/\276\265\362w=\217\250\350\274pP\252\275Zg\376<\327\270\217\274\016d\023\276\270\252\310;\353y\245\275S\334%>\314\211\335\274Z\252\017>\257#H\275\035\327\035\2768H\025\276\301\372\024\275\\s\251\274gws\275\245l\376\274\223\250.=\201M\\<\334\226\207=HV\014\276\264\035+>\357NI\275\225\207\376:\335\337\217=g\352\270=\026\032p\275y\225\222\274\372\262\266\273\013|2\276t\260\227\275\241\212\000\276\n\252\277\275\371\212{<a\007\n>\366\034\000\276\204.P\274u\022\311\274\016\265\272=\tQ\004\275\267\336\232=\243\366\201\275\373\354\022>@\336w<\005\303\022\276\341h\001>\245\234\301\274yW\304=\177\025\314<\262\312B=\372z\255=\303\216\227=tR\t\274\024(\307\274\\\'\213\275\363\225\372\274\237\263\022<u\367\346\274@\267\371\274&Y\200<\262\2554=[\250J<\371\233\373\2759\316\022\275\320k4\275\001vd=j\320\001=\360\\T>\2206C\273\270F\264=\310\241\221\275\343\265\231<\234^\363<1\177\216=(\0240\2750$\"\276\341\275\272\275a(\032=l\022g=k>\334=\024\324\276\275\211\261\361=\355g\314=\354\302\023\274\246m2<!\365\254=\"\037d\275\256\005>\2751e\214\274{\3779\275\304\307\334=<\217-\276\370\003\244=\231\271\023>B\227G\275\304\325\255\275m\032\356=\027FB=\202\352@<lm\317<\247\000\261\274m\346\221:\351-e\275\000\212\316\275?\016(>n\324\275:0\320u=pV\025=\345wc=C\000\371\2758%]\275\204#\353<\216\250\341=\275\332\320\275\311\217\016>v\271%=\262\245\224\275[\007\335<\224So=\373\365+>\305l\024\276\242\021#\276O\361\351<\270\037-<\1779=\275H\004D\274\230\334Q<\3066\032>G3\343=\220Y\215<\321|\013\276\305\326\234=g\242J=\355f\215=\007\370\354\275\035\005\352\275+\013\235\273\244\207\236<\251\360\331;\335\320\261=\376\303Y\275\272Iz\275\017\252/\276\233f,\276\373\231\035\276\243\035\203\275\375E\t<Nb\201;\t\005);&Z\020=\232-\230=\3426?=\003\t\211\275\265* >\023\003\220\275\357q\365\275\346\347\217\275]\214w\274\347\361\177\275c\360\t\276%\3539\276{U.>z>\227\275\023\335\301=\000U`<\'\312\371\274\242\221\332=\347\331\036\275\003\017\030>$\276\276=\r~\234\275\026m\017=,\313\241<\007\234\256\274\365E\276\275z\253\210:\221\351\237\274\327W\232=he\203\275Y\343\227=\237\255\356:%\336\376=\025\241\222=\375\207.\276\356\252\261=\r\2214=\334\234\341\274\227\335\240<K\':\275\351\022?\276\310\034%\274\222\243\370\274Z=\350=?v\307\275S\360\311\275\250\315]\275\034e\345\274D\013B\274\033c\034<\366\224\212=\277T\376\275]`H\275\201`\240\275\313\232>\276\311\310Q<\256,F=\236\255\217\275\371\025\026\276UB\351\274\365\243C=\230\206\243=\340I\275=\301}\021=\250\023\005=\345\327\363\275\303f\300= O\311\275\230\342\331\274$\255)>\347\340\210=+\316\025\276C\032\023\275F\375\257=\253\253[=\034\351\207<\357\023\340\274i\375\360\274\177\005\222=\266\204e\275(\241\336:\023\2325\275\022\316!\275A\346\274\275GfU\275\270V\017\275\022\303\003\276\024\217X\275K\007\001\275}\250Z\275\243k\260<\217\357\032\274\314o!=\036\246h<N$\300=\257L\017\276\321E\343:;;\254\274m\013\213<\036\021\371\273\003_8=(\212\214=\330\274\366\275LVG\276\355X\366\274\322Mm\275H\270F=\034>\"=E)\340\274E\230g=\'\312\316\275\221\370+>c\317\313\275\351\367]<H\325e\275\207=\252\275\\\274P\276\226h`>\205T\272\275\302}8>\303@\312\274`\350\016=2\246\035\276\357c\320\275ln\242\275[\321+\276!y\351\274L~\200\274\354\037\361\275\303\363U=\223T\317=\371\216\352\275\201{\222\275\206\251\033\276\361\020\250=n\327\207\275\317\023\331\275h\033\333=G>\253\274\276\234\233\275\253S\t=\201\313\244=\361\366\312<aF\217\275\355\200\200\275w\275\344\274\235\350p\275\272\223[=\335f\347\275\344Y\010\275\202\022T=Jj\006=\302\357\307\274\303\370\377=T\276c\274nw\214=\242\326\242=\032DT<\367\321\243\275\303]`<\365\217\004=T+\365\275\261\344\274\275\360\326\203\275\001\026\356\274!\221\226=w1A\274\314FK=I\266\273=U/R\272\3400\253=pA\261\2752\335\353=\246\331\336\275k\367\"=[V\221\275\334\270\235<8\017\236\274w\215\343\274\362u\004>\363\354\251\275\242\200\363=\274\257\036\275\372_\362\275J\246|=\244\025t=`\016\313\275>\216\006>\335\203\200=9\345!=\244\260%;\252n\246\275?\353\005>\316\2636>R\023\376\275\203\277\336;\227\364\312\275q\373\265\275\226e\032\276)\007\345<\215\232\234=\317\300\247=\272I\322\2740b\205\275\375\277[\275\2643B\2761+T=\270qa=k\2177\275\007\261\360<4\271C=[\362\217<\374\254\n>\216S\214\275^\251\211<\336\335u\273\026}\331=\330\214\215=\315a\317\274\203ZX\274\340s=\275\220\025\272<\256u\334=\204\226\201=\362\222\276\275\250\210\006>\033b\225<\262G\004=6$\n>M\252P\2758\347!=C\376z\275\243=%=\347\240\317=\000\330\352<Su\304=P\357\261\275Y\257\002\276T\306\351\274W\275\n\275\00491>i\354=\275R\027\265\275jAU\275HFe\275_\377\302\275Z\253\261\273.g`=\370\222b\275`\022><C\264\350\275u\177\265\275\327\245\237=r\320<>a1\311\275\002\211\272=\t\353\352<\033\344\030\276[\367\313<4s\314=\345y\375\275V\005\005\276\303\242\306<W\246\r\275\321;:\272r\006g\274\343\261\254=\237p\375:p\3129\274\353L(<|H\333\275\261\217\t=7l\325\275$\017\273\275\324\370\360\275OT\324=c\3151<\220\237\206=\372\266+\273#\231\343<\307\252K\274_\010\003>\372\010^\274&p+>\376\276\276\275g\271\223=.8<=\366C\311=\274\221/\275)\340\370;\265z\276=\254\314\016=\317U\357=1\362\004\276\231(\335=\333\213\004\275J\353(\276CQ>=\021\345r\275\316\2032<#X\271\275\236\305\235=\356 \021\276\2670\301\274\023\021\303<\263\212B\276\302\\\021\2742\356\324:x\000\206<\374\220\035\276\250\265\235<g\252\255\2756\364\273<\351k\265< \327\231\275\027B\025\276\322\303\260<a \327\275\026t\273\275R\306\235<\030aY\273q\312\301<A\200\376=\300\217\003= \235\260=QB\246= o\364\274\205\233!>\204(\305\275\030!\027>\346\336\320<\207\250v\2731\t\257\275\334\3347=\270\320\357\275\204\204\376=aE\233=,\376;;\t\005\032>\2651\262=h\300\204<\327\315J\275\376x->\334\357+\275i\262/<\234\223\n\276\327\223F\275\230\004\237=\220\231p\275\311\330\025\275X\326\226\275\335\217(\275\236\366\037>\262o\335=]\031\273\275\026\201\241=p\\%\276dZ\226\275\243[\314\275\213%\351<\324\331_\273\327v\271\2747\200W=H\245\031\276\t+\013=\330M\007\276\017#\227<\261\037\n\276\004\245\315<\363\375\215\275(~@\276t(\254\275\033#\332\275N$\363\272\377\353\020\275\250\013\344=\232\2461\275\332\027.\276C\211N\273~\355\313\275\257\224\313\274\372\205\213\275bC\347=\037\255\271\275\375g\271\275\016\006u=\n\347\340\275\3530\356;\037\316\312\275f9\250\274R\225*>\010\234\206\275\260}\010\274\263\326\n=\"\253\325<\245\213\330<\366 \016\274\261M\265\273\2326\031=\252\273\265=\306\005\324\274W\265\252=\217L0\276\034\247\207\275\376\274\'\275She=\207\230\310<\247\265\374\274\300\272\334=|\354\027>\005\022.=\374l3\276\314F\006=\267\346_\275\227\217\017\276Vg\335<\023\230;>[\373\227=\351\205\206=\360\000\216=k\\_\275.\262/=2}\360\275\351\265\225\275\274\264\205\275\347\315@\2763\354\001\275m1\033=\340(\373\275\353\004\267\272\313@/\275\230b\347<5\026\373\275\230;\t\276\371\253\327\275F\210^\276\337\321\031\275E\315\305=~\225a\271(w\266\274\325\255W>\016#\356=[\216\326<\253h\350\275\340$\245\275\250\3445>\340F\'=\340\345\027>\201,$\275\026\324\337<\243\200\344\275\244D\365=\256\000\317=<6\022>\272\021)\274O.\221=\257i\032\275\275\334\036\276\343\302\221=,\253\363=c\323\034=\363\324\027<~_\327\275\376*\350<\271\324\251\275\025k\263\275\007\305\232<\365B\320\275\254\357\365<\217W\210\275\254%\024\275\305\3204\2758\033P=FLB\275@\024e=\021E\020\276Y\014\265<G\347k<\020Z%\275\032C\340\274\022\330\222=\337\202\377\274\014\310&>\346d\217=\223\007\340=\032>0>\303\244(=\006\201\020\276\247\205x\275F\3145\274\313\201O=\031Z\256\273\213\261\024=O\265:\275\247\306\343=C3\227\275/\217\027\276\370(\311\274\340\311\345=|\335\'>o$\013>\273\244\271=\014\274\231\275\221\211\300=\346\311\032>(\350\372\275M\260\262\274\326M(>B3\250\275\210Q\371\274!R\317=r$S\275\375u\233=\024\330\325=\206\227\260=\367\034\212<\032\305\204=\245a\372;\013\264\225\273_\377\250<}\316\274=!s\346=4\033+\276\261&\222\275i\256\345\275\266\336\274\274\016/\002>)\240Y=\353<\000\276~W\010>N\357=\275\236\000s<kXB\275Q\367n\275\257\315\271\274$j\242\274\351\002\">*Y\211;\243\257Z=\036~\220={Z\\=$\204C=&L\206=B\036>;8\332\006\2750\256\342\275W\203Z<\210\277G<\2314n=\024H\'\276\345\031\316\275\266v\357<\370M\236=\373\312\177\275T\t1\275\242{\244=a\336\023=\332k4\276\016e\275=@p\206:k@;\275h2\002\275-f\244=\371TK9\275}\245\274D\335\004>\350)\354\275b\325\027=\235\277\344\275\361\'\203=\367Y`\275\347\006\251<q_\031>\034I_\275\372E\322=v.\004\276N\254\005\276oV\302\275\361\315\020\276\373\340\350=\227Q\373\275c(\000<\017\201\250\275f\335J=\324\270\242=\271\\@=\351E\216=\260\356\004\275US\317\274\336\265~=\321i\r\276s -\276\247=|=\343\266\331\275/\363!\276\213>$\276\234d\272\275\214\307c;\344\336\247=\323\332\324\273k\030r\275v\267B<r9\326<\364\245\213\27446\324\275\223\353P\275\265\021\226=\375[\276=\325\322\351=\212w\332\274\276\242\223=\324\254\303\274\021\337\331=\353\2016=G\204\304\275\2269\n\275\217!\307<\373\037m;@\327\334=e\274)\275\206$\227\274\247\037\374\275\267\007O\275g\215e\275\023\221o\275\331\212\240\274z\025\332=\333\354\000\276|\332\000\276E\001\021>\222+t=(Gk=\331\266\330\273\000\3740\276\221\241 \276\343`\233:g`\333\272\341[\317=7\177\033\2766m\357=\354k@>\225l\366\275\356\221x=\362\274R\275:\377h\274\0355\311=\025e >\023UW\275\213\262\001=\360\355*\276q\024E=,i\203;\262\346\220;\341F\000>\tB\302=\211f\306<?\315\202\275\277\203\240=\303u\315=\317\374\005>\376E2\274\3232\037=\321\376\202\275\247\322\345\275&\210\227\2747\317\207=\365\224\257<\rH\003=\030v\233\275\307\322\n\275\352z\026\274\313\264\260=\364\335g<\215H\247\275\021\237\254<\t\351\357=\021\034-\276\301\203\220\275nN\026>YA\275=\361\"x=\r\315\202=\2772\377\275\370\210\371;\035\016\337=\332\257\253\275f\344~\275\321\252\251\275\r\3221=\030F\257\274w\307\204\274\027\336\374< %\325\275\177a%=\325\205\262=3\262\377<\345k\204\275\352\340d\275\026\345\014\275\213F\273=\217]B=;\235\361<\030\366\346\275\273\036\300\2751l7\275e\371t\275\013\361R\273,\252\340\275\352,M=H\354\266=\316|\262\274a\207\230=\312\007q\275\225\246#\276c\316\214\274\001\352\017=\375\2624\276\234\014\013\276A\300|\275\207\374\267<p(\262=\377\230{<(\002K=\021u7=\246\303\223;\260\301\331=\204J\264\2759\330C>\250\254\344<\371w\366\274\214\273*\276\357\257\251\275O)F=\266\307\013\276\237\206\337=E\201\302:\235\336\250<W\361m=\251\337\357=\361\315\343<\032\230\327\273\201t}<|\356\316<\345\274\344=g:\321=\371\351\224\275\036Q\271\275\353M\'\275_e:=;\347\311\275\202\273\251\275\271\200\221\2755\030\007\276W\022\343=\247\3213<\262\352\227\275T[\201\275\262rR\275!\352\212\273\207\312\003\276\243\234I:\314\313\001\2753\274\331\275\346\031\357\275(/0>>*\343\275\335\017\363\274\301\2131>\246N \2761j\277\274\034\"\267=j\004\301;\3109\274=H\245\344\274\360\227b\275=p\334\275&\270\217<=\2472\276\003xs\275\024\323\003>\022z\352\275M\317\246=\324\205\024=\210b\t\276\362\313>=\\\265\030<|\320\t>a\376\243=\263%,\275?JS=\277\020\230\275_\017\200<f\214&=\263[\211=\214\336:>\361s+>\205\244U\276\261\366X\275y\253\360\272W\235\032>u\020\353<\017\320]=M\225\273;\031\241\014\276\035\257v\275-\323\317\275\337\372\351\274&H^=\027Cx\275\036\014\223\275\205\275N;\2436\365<5\271D=\322c\265\275\345\250\254\275\375\023\326=\342\350c=\n\202\377;b\335\237=\314\310\267\275\354$\004=q\026\034=\023\215\n>\363\250\341\275\336\227e\274\351\240y;Y\314\325=\345\331\322=]\231\320;\201\210S\275\327$\361\274\251So=\010\210\247\275\223\243\376<\0354\304\275\360vP\275=9\000\275\366\301\001>\023\010\037\275\225\240V\275\230\301\014\276\306\025\032\275\226\350\t\275\2316\202=\017~\277=\302\250\326=\243Y\210\275\352\367\202=\246\2205<\266\257\221=\350?\216<\031}V\275\027\376]=?\252)\276+/\312\275\215\342\270\275\351\1773\276H\277\330=]8\324\274\257\202\350;`(\246\275\\\035`>\033\027\267\275\251\256]=\365\207\236\274x\230,=\325\323Z\275N\003Y\275Q\307\235\275},3<h\013\017=\221\2602=R\030\272=2-\024>\346m\356\274\347\225\220=\212\214\252=0\0370=\')\273\275.\030\300\275^3\205=\375\n)>\214\254!\2757\241\n\2767}\016>\315B\n\2763@\346=\230\212D=\343H\024\275\031\"\340\275\352\217\332=\252I\257<P7\240\274\245\373\260\275\226\330y=\030\016\330=vn\253\274W\224f=R\036\361\275\310\017w\275\027P\306<9\036\365=\277(\005>\345c\227<T \200\275\2773>\273\330\365\017\276\013\314\224\275\2268\263\275<\366\256=\034\230\263=\250\031\371\275>A\272=1E\347\275\310P\234==h\245\275\271n;\274\202\274\005<\337\256,\275V\027E>PL\340=~\223\314<d\336o\275\210\364M\275\006\033_\275\340\331\273=0\313#\275\224\356\317\275\244\037\256=\261\340\221\274i\277\340<(\330\334\275\244\215>\275\247\274\263\274\217#\037>0\240\034>\007\030)>\203\362\035\275H\322S=\243\277\365<\033\3129\276\035.|\275\312\207d=\367\275\333\275%\201b;\016\010\351\275sM\276=\2226`\275\014_\311\274\307\207P=\356M\272\274\332\273B\275\253\212\333\275d\337\356=\367\267\363=\031\254\207\274J\363\007>XF\323\275{\272\267\2759\237\007\276\0174\273<\230KB\273I\\%\275Rm\031>.x\036\276ZM3\276\267\306h=oF8\275QK\261=\215\351\306=\321:<\276E.M=\317\237\273=.j_=\254\275t\275\241\253\022=\204IY=\253\376\356=9P\207=vT\367=\304;\362;\211s\323\275\276\233\250=[3\214\273\253\222\r\276;8\327=6X\301=C\354\274\273\324\351=\276\222z\036>\325\014\023>\365\342\261\274\250\004\370<Of->FH\331=\177e2\275=\013\300\275\203\037\346\273\342uH=\022\032\200=\220\276\351=n\354\r>V%\322<\216V\310=kl\034\275\345\005\310\275\204k\002>|{\274\275\353`\332=\021\336\363\274\2362\320\275ZD\206<W;\230\274\266\013<>\233\n\327<*\003!=\3416\256=\212\365\n>\264/\352\275\2148o\275\330\2117=[\357\342=\202\001V=OZ\022>\322\330\210=@\270_=\tD\201=\021\203\270\274\270\311\347=\336\234\200=\353\220\265=.\331G=\353\034\336\275_\274\324\275\213cl\274%D\236\275u\3333\275\346\017\240\272^\242+\275 \241A=o\316\352\275\230\200\246\275\246n\351<\335\016\221=\314\274\n\276\241=\006\275\232\315\237=\013U\220<\016\2401<\253\216\204\275>\210\214=h1\032\276*\005\035\276\024\333\342<2\304\020\276\371\202\372\275\r3\326\275Y\304(>o\263w=SY\334<\374\212\211=?\\\211\275+\337\025\275\263\372\013\273\353`*\276\2760\244\275\343\024$\276\036\3226=\215\0058=\027\357L\275\364\250p=\222\314\032=\214\224\322\274^\001\320=W7@\274\375\316\301=\010\\\">\305\3007\276-\362\320\275D\315(>\211\226\224=\233\237\351<\206\274\256\275U3\027>\016\273-=Xq\323=\261\333\273\275B\222\026\276\'\007#=\222*6>:z\310=I\337\265=\263:\273=\200d\311\275\340\014\001>ce\207=/\325\016=\"\351\003>\306E\370<\322<\236=\343$\360=\332!;\276\220\205\242=\244\004\010\276,_\024\274\243\006 \276\264\001b=\363\201\307=\313%U=\224\331\364=\202\371\360\275,\326\256<E\306\316=\327\177\267=\0379#\272f|\256=\234\016@\276\034\336\215\275\303b\037\275\272v\201\275MA\320\275qg3>e\026\302\274\021\247 \275+\345\357\275\312\304\014\276\325\372\362\274\035\353\270<g1\013\276\321\003\257:\307!!=U\231K\273\274\327\'>\277\266T=\177bB\276>qN\276\223\226\347<v=\027\276H\316\264\275\232\004\306\275\243\024\303<0\222%=\033\215\317\275\242^\351<-K\360;\237b\"\276Tr\265<\001\243\204\274w\014\247\274\035\276\007=\036\210E\274\022\322\237=\270\212\302=\355E\027>\334\013\004\276y\267+\275\316Se\276r0\224\275_}\005>\211\303\242\275\001\243+\274Y8\246=\310\034h=x?\017>\022\375\013\276\234_\322\275)\325\264\274\003;\013=^\316\354\2732C\365=\335\320\013\275\360Y\263\275H.\217\275X\252\357=\3009\324\272\257\320\357\275\350\336\031>\227\307d\275\306\032\001>\300|\213=\n\210\335=\317\033\263\275%\313\213\275<_\n\276\227@\363<q\0254\276n\361\240\274\001\365$\276\363\260\327=\370\225\251\275\304HG=\265\301\265<P\323]\2759\203k<\032WO>p\200\351\275$\317\221\275\266BF\275\327\3377>c\036\362\272\342\264\372=\337P\026\276\025\016\243\275\337\232\331\275\325\250\215=t\215\'\275\242\324\233=Z\327\016=PI%\276\2364\215=\223\351\003=\002p+>\211\036\334\2753\362\270<\376\2618>\303\2261=B\377\262<\223\027$=V\312E\275b\235;\276\002\263L=\264\370\277\275z\267v\275\002\334\354;:\331\345<\250\272\232=un\177=f\330r=\274\361U=\232\311\014=D\377P>\242\324\304=\210\201\335=\n\266\'=%\304+>\003{\031\274\273\0102\276\306\027D\275\377g\264\275A\362\365=\324J}\275\243\002\271;\201\007\006>.\217\004=.N\365<P\255\266\275\373;\303=\324\354\327=\030&\246<\337\035\334\274\227\333\344\275[\307\031<\317\234P\275\336\020\024>\320\220\236=\253%$\276$m\367;\311\345\250\275\256\240\243;\372\216,=Y\220\226<;\211\206=\276\262\030=\377q\033\276\344\247\033\276z\002J\274\237\020\013\276\3540)\2764t\345\273:%\220\274\014\3313=\372\353\224=w\216\000>\302\223\016>\354x\324=\203\235\030\276\355\262\367\275\364\251\032=\024\032\234\275\203{\260=\336\222\321<\3568\245<\264\350\223\275\275p)\275\027$\241=U\314f>\303m\017=p\205\231=y\375\206<\232T\261;5Z\261\272\225\274\365=r3\347\274\030\317\004\276\321\034\210=\020lj<\224\345$\275\305\364\024\276{o~=\303;\203\275\315\314\343=I\213\177=\36200\276\237)\272\275\347\225\343=\3161\017\276 ~\215\275\203\241\\=1|-\275\213\r\213=\235A\362\274\241\365\236<\3371/\276\200\207\030\276\276\374\201=u\025\021>[\3416>m\273\376=\\X\217\275\177\353.=~\253\"=\004\031U=(&~\275\354\235*<\222\232\214=\375}\302=8\351\026>\005\334\356<\247\275\023>\356\267\372;\256o\177\275\247\020\276=\201\177\222<\362\343\200\275\325}\311;U\272\003\275\306t\315\275\3155@>\n8\372\274\264\264\247<\r3\341=\013;\177<L\017Y\274\0167\000>\310I1\275\242\'\230=\335\220G<T\260+>lc\250\275\327\006\320\275\022\303\023=\350\026\270\275a\005\023>5\267;\275\354\005D>>Z\002\276\221(w=\023H\333;{\363\022\275\342\004\362=s\362\004=\360\2178=-FI=4\214W=d\223\316=E+X>\023\350K>#\337\360<\254\306\344<\313\375\345<\3241>\276\203\017\341=y$\035=p\024L\275\310\373\335:\210,\016\276\215\2315\275O\272\023=}\014l=\340\314\003\276X\321?=\217\274\262\275\264O\347\275\243\216\n\276\370\301\253=\272 \236=\270\267\301=?\212\003>\366\025\001\275\206\354\245=MD\243\275\006\371L\276l=\032\276\342\307\026=\336\260S=\023\305\376;m\342\277\275\034\300Y<\206$\237\274\247\036x<b\323\273\273\241I\343=R`\006\276HS\320=9VN\276n:\273<\334\304\220<\300\202->\322\212\332\275I^m\275\206Y\267\274.C.;\3376\020\275\001\037\003\275 I\372<LI\232=\357\227\001\275\200\237\215=\337\033\020>\277\003\237</\240\213\274\276#}\275\n\257,\274)\243\";\266\022\233=\265\314f\2758\330\232\274M\036\315\275X\330\013>\264\257\010\276j8\344\274Z\245\017\276\273\311\001=W\354\224=\363\236\373=\355\261e\273jfr=\365N\215\275\240&|=sl\322<^?\233=\243,*=\010/\345\274C%\366\275\177\365\347\275\265!1\276\\\260\200<\260\230\324=\253\361H\275P\220\037\276\356\224 =\2251\335=\177\216I>\255}\204<\035\346\217=\336\307\023>U\026;>b\215\260\275\217\242\243\275B\376\r>1\231\264=AQ\215\275u+\331\274t\324\361\275n\302\211\275_m[\275\237\025\203\275\370\314*<\225\010\335\275\357\'\216\275\364\245\363\275\177q>>\234\310\362=*\244\001\274\311}\317<2\311\257\275\014{\022>\371u\200\274w\336L=P\007\245\275X~E\275\032t\017=\031\3476\275v-\347=\206\306\210=\304\352\353<_>3=g0\237=\236\r\002\275\361\000#\275\331F\r;\371q\000;\363F\223\274:\210+=\033\362\214=\265\266%\276\302\262\001\275\347\r\200<-\010\347\275f\034\376\275\366\032\273\275\025\265K<tvN=\033\271~\275\375\377D>\253_\257\274\220\325\014\276\272\313^\275#M\311=nF\211=kY\240\275\014\241\215\275\361R\341=\372\017B<\261V\215\275\007b!>\265\3722<\301F\303==\357\213\274VK\236<s\277/\2763\316\257\275\216\t\335\275\316\3342=7-\250\275\025)(\276\007\262\303\275f\2246\275\213\305\372=\364\301\272\275\302m.;\342\205>\275\003\364_\274i1\n>\322j\355=\317\310\345=\346\250\246\274\276f\306=y\311\342\274\376\034\024>r\324\202\274\346\212.=\327\005\016>Pq\232=\022o\026\275\3710!=\031\312\243<9\264\311=\277\364\207=\334s#<[\036\216<\363\244\017>\240\371\376\275(\261\314=\372>\300<\356\341\272\275\326\340\370=\267\233Q;@\234.>\005\254w=G\235\220=\220Q\263=\304\034\214\275\322\314\005>\255\270\016\276\022\254\t\275\2479\323\275\246\357\035>\3419\007>\344x;=\001\367\"<\257\304\237=\234Y\375=\014\331\024>\006h~=\322\313\257\275/\366J=O1\227=\240t\027\276}\354\202\274Z\2042\273\014x\016\276m\214\365\275|\333\'>[\244\024\276\210\003\035=\253\315\323<\371|\366<\212\227\304\275\350;X\275+\267\371\275\n\217C<\265C\327\275\020Qj>\031\376\320\275X\006\324<\253\'\243\275-\271\013\276\332\310\341\274WBn\275:\346\021\275\334\004\342=\320\263\263=x\201\303\273\360l4\276\323$I\275\240H,>!\311\233=\340E\225=N\255\227\273\312\006\r\276\343\317\224=0#Q\275\004?\355=\035B\224\273\007c7<\257\0142=\216u\337=\363\324\013\2755jd=\325\261\206\275\002\372^\275\213R\224\275\273\334\022>\302\200\302\274V]\222\275%\223\020>d\231\232=6\006D\274%\013#\275j\236\220\275\006\354\372\274;?\023\275\203\324\334\274\206\227\034<\212j\265=\017\254\001>\002\313g=M8\263\274\370Y\026>Id\350=1\264d=1\352\t\276\342Q{\275\'\335\016=[\322+\276\327\355\200\275\302{\314=\237S\223\275\275x|\275\263y:\2761\013\\=\2417\355=\217\210F\275x\205\216<\013\243/=c1{;\366\260\202\275U\3637\276:\315\263<\235\241\347=\030qS==\354\364\275\021Y0\275E\255->\325\214\205\2752\336\321\275\276\217\231<\004\344\312=\007\265\356\275\360\363\320\275\001\327c=\343\305=\275D\311i\275y\246\370<e.\363<\377\037\334\275@y\\\275\r\356`=\244\233\273\275\251p\321;\210\006\336\274\301\315 =}\362g=\nU\210\273]\220\214=\263\332\020\275Kd\037\274@r\265=\0279\214=\021fI\275\327\315\217;\310P\342\275\177{\373=x4\004\275{i\023\275(*\336=\242(\366=\262\010\257\275>\364\027\276\232\343\357\274\201&\261\274\337\226\272=\352\016\277<\315\005y\275\233W\354\275\030\350\031\276\307\021\001\276\350\037y\275\023p3\274\020\371\253\275\254\251\263=\002\027\202=\025Q\314<\334\255\236=\372\216\310\273W\356\204;\276\010\275\274\330|\025\276\275\210P>H\036\261\274\372\005\004\273\220\317E;\022M8\274-\2531\276\035\327\345\274\r\332Y=Lh\005>\016\2560=\352\305\340\275\367*\305=\232fl\275\277\360\220\273z\3122\275\345Y\233\2755[A=Q\233\375\275\016\026\335=\202M\004\276\241\r\037\276\362\347\034=\010m\000=\323}\350\275\201?\303<\252\"n\275s\376\241\274@}\216=&\326\225\274_\323\346<\231\035\010\274x\\\352\275\273*\346\275\326!\225\275YPk<ei\021\275Q\326?<\334\251\271\274\010yh\275\003/7\276\222\360\303=q\251X<\006\033S=V@\310<\222\255\026\276(\254\363\273\365_\002>\335,-\274\256\360\036\274?\336.\276%\333\223\275-n\367=9\250G=s\271Q\275\361\207\212=\353\322\007>V\316\253=#\213\332=l[K\276\324\217\326<\307m\266=\377\233:\275X\271\037>M\244\312=u\373\335\274\251\352?\275\363\324\023>\231q\227=\365H\322\2745\350\200=\237e\346<f\350\027>\003\371\216\275\307\314\220=z\323\266\275Si\373\274\257\255d\275a\274\\\275\333\320\233\275\2225\016;HDh<w\013\337=\306\311\224\275?\342\353;\273\361m\275ua\353\274Z\352S=\361\203\371=\2336\367\275\357\2767>\266\255\000=P\260X=\021U\262\273\323\264\357=\332\300k\275\321\031\020\276\255\217\013\2768\270.\275]\312O>\210\215\311\275{\242\247<\376\034\213\275\343-!>\350\356\r\274\303\361\236\275\373\325\354=m1+\276l\342\017\274\37769=\310w\370\275\3335\003=g\372\333\272\347[{=\3771\243=\351\215\337\275\365\226\004=\200\2076=t\361\203\275\347C\004\276\200Q\032<\205y\345\275<\341\341=\305\232,\276(\272\t\276\233Y\n>|\\\306=O\006\234=>\374\253\275?\231(>\233}\002>]q8\276\030\300#\276\204\005\007=W\r\326\274\242`\263=\317\022\317\273\003\323\021<\337\032W\275\\\200`\275\003\272t\275\353\242\223=\257HY=\315\372\201<\262\350\000\276\356/99f\330\204=\2767\254=v\332\303:\324n\340=\267<\243\275\223Sv\275\307\245\016>\225\265\360<\\\022\201=\256[y\275}\365A\275+R\233\274\347\365\033>\325\366\236=\252^\267=\277\266\225\274\361\276\320=\3075\023=n\"t=\307}Y=\007H+\276\3719\006>\315\006\214;3\303W\274\'\234\325\275\343\240\275\274\333)\271<C\177\232=gL4>b\025\367;@G\270<g\313\222=\251\302\220=\242\363\275=f0Z\275\237\201\211=\370#\236=i`\240\274\034\235\367=\023\346N>\214d\231=\347\201g\274\300\002(\276\225\301+\276\016\377\357=<\212\220<~\217\235<\316\004\316<b\326\322\275\323\346\257\273\362\256I=7\370\246<=\320+\275\270\177\355<\355\0376;\016B\277\275\211\245\026\275\225\264\236;1\302\323=\022#\026=\333\370\324\274]I\235\274\245\213\254\275\324\245S\275|\212\275\275?\317\027>\215?\025=])\204\275+Q\032\275\367\365\003\276w\362\324\275\254\241\213=\245\226\222;\215\241\230\275\351=B\275bs\234<\003m\247\274\315/\364\275\262UK>\310\270\250=\226\303\030>O\033\253=\2511\226=\036\223\256\275+\007s=\023\362\265=\255\216\376\275\257\260\257<\324ey\2748:\216\274T\276\307=\265\305\003>\036\030\013=\305p\007>\037o\220\275\240\231\231=Q%N=U\356\257\275\342\243z\275\317\243\234\275I\037\303\275yW\035<\303\225\205\275\375\373\265\275 \251C\274\001i;=jQ\265</C\263\274\010p\005=w&\204=[\254\274=\245\016\352\275Q\\\021=\226\200[\275\360\314\261=\005;!>\370*;\276\356\270\034\276\202\337\200\275~%\034\275\364\324=>\366\003\026\276\003\204\001<tb\222\274~\351U\275.<\025=\014\331\322<\265\275[\275\226\205\300\275\340\370o\275\203\005\001>\r*e\275\307\361V=\250\273t=\3379$=\201{9\276,\250O\276\025\324\330=\264\2057>\357\004\021\275\213s\220\274#\377\265\274\302b\377<\246\372)=\"*g=>\304\236<\362i\032>\347\375\010\275&\257\\=\231\202\220\275\350\360h=_\304\234=/Y\037\276/8@\274\351\244\221\2746a\257=\022\276O>\271\301\304\2753\374<\275K\233\033\275\317\033\345;D:\356\273\\\036\354<\221\256\277<\257\305X\275\352\306\026>R\276\'=\306\2344\276\314n\235\275\016) \276[\300\315=\213\006P=\022?\321<7EA\272x_\360=\"\250\r\275\206\352\033\274\373\252\'\276\025|\271<\037Gn\275\023\311\241=\370\027\337<\265\343\344=\243\014\323=\203 H\275\354,C\276/\323%<\010s\266\274\355\337\006\275\306\362!\275pt3\276lp\027>\2200\353=\241\376\t>\222<L\275\033\335\237\274tG\255=\353\006\370=\252~\"=q\313|=\325\000l<u\346\'\275#\220\235<y\024+\274*\336\222\2741\211\340<N?4\274\363 \321=\204\351W=\347f\226<\357!\233=JH\267<\253\257\026\276\r\346H=\225\304[\275Rk\204\275ea\266=\020\350n<Q\247\232=\323\006\022\276\344\311\333\273j\221(\275/\263?\275\215\000\212=<\266\370;5\027\206<1n\322\275\361\"V\275d.\032=\254\316\000\276\361\250\020\276D\357\204\275x\345\214\275_\025\033\276\305Fv=\210S\020\276\304\317g\275\352\321\023\275$\230\250\275M=\001\275\177*r\274\237\356\223\275\337W\255;\177\277\211\275=#\022;\260\263X=\325wR<\245\333\330\275c\007\342\272\362e\250\274?\336\022\276\370$\360=\26050\276T!:>{\360A>\360\250r\275\361\256\320<h\337\225=\346%\255=\344\263\254;r\010\222=RZ\352=\333\373\004\276\237j\177\275\210\245\035\276\366\013\304\275X.\324<\360\341\230=\'XJ\275\373\244[\275\302\276W<\230\244\277\274P\304*>\271-\326=r\211\021=\000\324T>\010\347\335=.\037\004<)\0300\275\025\307}<\306\272r=\026\375\261=Y|\000=\250\002\235=o\307\345=\315\266\207\275l\250\206=\037=;\276\240S\222\274vr\232=\211\257\331\275%;\303\275\267\t\225=\251\337E>r\343\220\275\376~\215:O\336)=g\014h=\r\000\367\275|\360 \275\3664\026\275;\272\252\275\331\010\002\2750\024\260\275\202\2765=\037R\022\276+F\t=\017ry\275\364e\333=\347\335\377<\340v\274\274\376X\021=\207a\025\275b\262\273\275/y_=\340<\'<\177P3\276/\323\321\275\321\007\034\2764\252.\275\322Q\221=\212\253\331=\256\200U<\252\001\260\275\002[\001\273\022}\260<\214\273Z\273a\311\215\273\275\203\345=\005e$\273\367[\321\275de\014\276\267\235\243\275\275\021\204\274\002\367\356=J\331\235\275\311\377\r\275-$A\275\224\013\305<~a7\276\307\367\266<-\243\002\273\2321l={ \226=1\332\214\275_@\352<GJ\235\274[\225\026::\255\303=+\2524\276H\210e\275\215\007O\276\323\326\016=-\002\203\275\244$\374<\205T\236\275@\233\343\275\240\303\242=\343g-\275\276\341,>*\222$\274\351^\233=\233B\230=$au\275\214\035A\275<\246E>3e\263=K!\274;\277\200\321;%\230\322=-wd\275\014+X\275D\021\246\2744\375\345\2740\3038\274\255z\264=4L\370\275\321\n\237\275\356\345\327\275\324\220X>\363\351\257\275bi\371\275\373\301\246\275\344\020\223\275\327\024\263\275Kx\003\276\261I\024\275\n\344=>\031\033\010>[\035\201;W\363f=\034)\r\276\340\007\240\274\234w =\232\350\260\275\364!%>\361Z\261\275\n\322\013\275\361)\307:\310\370M\275[`\203=\361!\324\2756\027=\276\311g\2719%~\341\275\006%\t>\365m\203\275\003-{=?>\341=`_\270<o\260\370=\305\367$\274s\347\351=>h\323\274?0\201<\361\245D>`y\344=ab,\275}\206\226\275\302\232\'\276\202a\000>\366&\017<\225\361\323\275\274[\322\274\235\022\235<H\340\347<\345V\376=%:\310=\036\347D=\2241\024\276wF>>\305\001\343\274\225PL=\232\033_\274DLr\274C5w\275\276\351\033=\227B \276cTH\2758k\364\275\314\276Q\275\362\331\370=!\376\033\276~\365(=F\211^=\345Am=eR\020<\323\264\255=\353\344\250\274q\207\271\275WI8>\333\027\017\276\234\346\241\272\253KL>\247\314(=\030^`=\020\326\260=\006\253g\275\005\244\235<\2536\035\275\346b\303<\255w#=\024\200l=(e\303=\250c\000>5\352U=\230\210\201\275\261\212\264\274\303\242\216=\2764\243\274\304\336\200=d^\020\276#\363\"=\356\2038\275\250\324\016\275L;\265\273x\037K=\310D\204\272\260g\002<\023\216\027\276t7.\275w\332\036>\327\355^\274\206\212#\274\362\014\250\275\235\264\343=/mU\273\252\031\032\275z\263\220<(<\257\275q\r\343\275 \215d:?@\357\275 %I\276\327\031\030=\004>E=\334\262\222<\251O=\275\026$\032>C\335\274\275I\t\207\275\206U\224\274\005\265\274\275\227g\353\275o\263\023\276bP\215<\213L\365<Z\361\032\276U\330\032>\007l\236<\264\3312=%9\251\275\252\007\226\275\342\024Z==\211%>M\206H\275N\377\241;}g\245=\257\234\356=T*\037>\234|\002\275\nQ\007\275\002\333\031\275{T\033=\n\252)\275\370\334\305\275\331\240\377=\202\353\276\275\260\314\347\275\326\020\354\275\375=C\276=\316i=\356\325\244\274\254:\305\274f\230\374\2751\014\325\274&\220q\275\273\301\222=B\334\370\273[\300\243;H\013Q=\371^\214\275\371\026l\275\207A@\275\220\224\263\275\212h\236\275\256>\036\275x\264\331=a\300\302=\340\252\230\275\355\223\010\276\352<^<\333S\377\274S\364\371\275\352\367\352\275\177N\021>k\\\270=Xj$=^\375\025=\257~\023<\364\337);\213CU=_\004\315=\314k\036\275\013\254\234\275\014\341\214\274\352\250\r\273\223\340\345\275\317\225\245\275*?\346<\342\312\007<\201n\010\276\337\234|=\017\267\035<\n\030%>\3326\016\275\317\201j=\340\263\037\276\313\310\'>;\245\272=/\221\335=\001\344/\275\202<*>\270e\327=\352H(\275X\036\216\275\244`\'<[\241\227=\034u\020\275\362O\256=\007\321\375\275p&\335=\227\375\362=\363K\240\274\223\243\336=\326j\333\275\307`\315\273c}\305=f\177\010>2\2616\276Y\027E=\274R,\273\377f\023\276$(\300<b \326\273\277\256\032\276pO\255=G^\017>3%\345=D\346A\275O\302f;\036\233\256\275\037\004J\276}\014\307:;D`\275\016\334\343<Rk\266\275\020\377\326\275\343\360\311\274\013\316-\275\225z\332=\203\261;>>\303\205\275\354Q\004\275\262m9=\276\311\265<w\242~\275\367\213\r>j\222\255\274\205\017\201\275\026\303\217\275_/u\275\317\372\035\276_x\306\274\337w\206=\014\260^\275\210\001\276=\203\375=\275\003\201\215=\033L\020\275\024\332A<[M\261\275\022\242r=\226\342\365\275\344\r\021=E\206\265<\t:\016>\270\241\216\275\273U\001\276o8\314\274u\030\222\275S{\032\275a\226\025\275g^\265\274\210R\275=U\207\030=\343\273d=\2530n\275\020\327\032=\260\277\033\275\232_\035=\341\014\177=P\3309\274}\334\003>\327<2=\300\323?=;\020\377;\275\303\271:\206\343\344\275\026\224\222\274P\305\025>\330V\222\275\262\221\220=pv\354=\274\317\251=\020(\224=\023\273\032\276\030\217\241\275\207\216C\275\326\2144>\036W\324;8\024\203\273\030\005\\\275\004\r\025\276\253\360t\275\245\310\323\275\276M\024>\363\247\366=\314xq=\200\251\005>\207\206\235<\330\221\315\273\010[\320\275\"e\324=I\227\213\275YV\215\275\305\020I\274R-=\275}v\376<\224\300S\275\266:.\274H\"\215\275`\032}=\376\'\025\2763n\252=r\220\230<\302\241\031>\374\347g\275/B\025=e\313\231=\300XE>\241ae=v\262\235\275/\3472\276\200\305\242<nx\266<\244\256\273=\247.\327<=\3121>\227\007\342=Y8\212<\323r\357\275\326\023\"\275H\370\223<\223nK\276\321>\251=N\263\\=gU\017=\027\220\300<)\247h\275w9\035;\327<\036>\205\264f\275\332\313p=\244\332r>W$w\275T\265\366<\370s\316=\006\2116\276\021\000\001=\252\271\257\275\360\263\321\273c\237\t=\244\360\024=SkK>\270\\\327\275\266\231\003>Jme>;\276,\274\257\025#\276\240\337\275\274\245^\250=\277\017r\273q\t\023\275\254p\256\275\003\030\360=\315F5\275O\341\362<\321\270\n>I\233\261\275\315\303\264\275\377\231f\275]\235\356=c\321:\276\300/\233\275\026\214\007>dN\016=\317\265\357\275\224\243\302=\373\347&\274\237\177\333\273\314\340\203=\347\014\276\275\237\355\263\275\272{\t\276\373\247I\2757\316\216\275\334\333\263\275\253\257\217=I\342\226=\310\312\235\275M\200\266\275S\253U=A\375\374<,\366%\276\244\230\035\276\251\036\005>\223a\027=\335C\267=\256N\202\275e\363\275=H\245\231=\014\247n=m\345g\274\373MG<+\220\036\276\234;\277\275\360i\273\275KH\324\274F,\341<\016\243\033\275\255V\325=\002\323\336=\321\264\200\275\034\303\201\275\252D?\275\315\261\224\2757\016+\275\216\021\202=\000\374\254\275\313O\255\274H\356+>\320\207\307=7\261(>\013\255\344\274\005\203\277;r1\021\276\2131\235\275]\022Q=\272\271\314=\351y8=h\367\214\275$\253,>Yg\026;r9\022\276\213o\216=;\226\024>\013\367\360<w\226\024=\332,)\276\260@\221\274^\303\227=eI\206=\224\210\203\275\034s\253=\215\217N\275V@1\275\264\207$<\270\336\307\2752\003\021>M^\246=!\364\307\275\302\332<>\250\305\375=Rg\203=\'i\306\272\346\362\004\275o\n\245=!\321\237\2751\363\240\273H7\333=\270@\016<\215V\213\275\010zK\276\373w1\274\005X\003\276wT:=\3375\201\274\350v\355=U\324\236=\020\022g\274j\274>\2733e}\274\200H\234=\213\340\362=xw\023\276\200b\004>\336\266H\275\357\244\017\276\n!\221\275\014L\026\275\004\r\224\275\245\362\373\2752\241\306\275n\325b=Fv\026\275\312\273\274=\346\367\367=\366n\256\275!4Z\274i\272\357\274e\027\212\275a\361\275=\246S\321=2\250?\2763T\262=v(\346=\241P*=\315\334\370=\376\277):\361\335\237=C\3319\275\266\177\'>\"l\006>Eoi\275\273\224g\275\017\367\311\275M\332\210=\215\3115\275\3522q=\326\236\305\273\256\270/\276\010\177\317\275\355dK=,p\020\2754y\023>\307E*<q\302\367\273\315.\031\276=T\327\275\222\027\023\274\236\306!\275\017\344\001=zM\307\274\376D\225\275\250\035\010=\343\346R\274\311[\315\275yN\275\275\347A\222<\205\376\220<\241\005\010\276\220\371\001=\013H\\\275x\221\244\275\003U\022>xk\364=cq\263\275\301\202\242<\214\302Q\275\006N|\274\333B9\276\250\303|=9\007\314\275_S\207\272\337\261\223\275\217y\014>\332q\003\276\037\332\025\276F`\330\274\211\276*>\220\214\374\274\221\n]\275H\244\020=\226R\304<\343w\237;<\272\272\275W\024\200\275\304SL=g+\031>\177N\003\276\210\331\374\274\272^\375=\243\372\311=\234r]\276qp\\=w\002\362=\272X\262\275\360\250\375<\263\036O=\202\360\264=\314\360\014>\346\223\234\273\211\223k\274=\'\317\274[\333\321=\317L\023\276H\265\027>\027\250\033\275\362\3310>\235\370\374\273\r\345\337\275\024\316 >\251\256A>\2156Z>\2612\000>\343\316\242\275\000q\272<z\374\323<Q\313\264\274/\3167=\2742\333\274_\3524\276\200\322\220\275J\246\245=\332fV\275\275\201\213\272\340\226\212=\031\262\313\275J\321\346=\006\006V\275\241;p\275%\244\033:\237T\233\274C[\201=\207m\310;\303q\032\276\261\206\252=\364\347&>\223M\214\275$\356R<\301\372V\274\002L\355<\272\312E>l\317\022>\026\261\303\275\2041H>F\247\325=2\005\2478\366\305\311=z\003\n\276}3*\275\0247\340=\237\3739\275\264\3245<0\323\230\275\316\322\341\275\014\261\313=\332\275\030\274\230\036\246:\223)\275\275I4\330\273\362\307\243\275&\336P\274V\332\273;\000\305\004\275\025R#\274I\026\022>+\2346=\247\335\307=\227\255\r\275\303_\307<\374\355\000\275\246\275k=\325+\367=\311\332h=\243\360\272\275\217[\356<y\206\272=\203\250B=\344\351R>\337\021s=\247\274\263=SH\027\276\2717\340\275{\n\342\274\321\326m\272\216F\247<)R\212\275\244QS\275\306\336k\274[b\277=4\360\216=\0236\221\274\346\250\342\275\225\200\314\275\0278\t=0\376 \276\343n\263\274\205\223}<\337\232.>\177\336\245\273i\325M=\313\\\001>8\312]\275\307\270\375=\367v`=P\340\202\274\237\254\340=[6b=20\371=:_\266<\217$o\275\344~\271\274k\333\215\2744\256$\275Z0!\276\377\033\205=\'\2112>\201\301\221\273SE\3549!\320\356=J)\324\274\211#\277\275)\002\272<\010\227\237\273-\331\013\276\234\337\024\273G\006\236\275\342\355\004\276\027\003\236=\031\273\267\275\223M\"\276\365?0\276\307\357\t>\021\330&=y\274\020\275\332\306$>\037L\323;\327A\263\275]-\244\2750x\360=\365^k:\244\335\320=\352\035Y=\327\201-\274\221J\254\274\232\222\025>\301\225\005<\376\362\270<\032\227\010\276\0138\375\275\007\353\221\275\\:\230\275\275M\010\275\266w,>Ir\316=\247 \243\275\214\372\353=\016\252[\2753\270*\276\212\204\210;ssP=\023\\\234\273\313\244\226=\312\265\370=\304\205!=\316\352\200\275\246L\n\276\336\007\345\275\336!\371;S;\006=}o\022\275\336\203\227=%\310\277=\357\263\202\275\231\022\371\275Ey\344\274\236\254\255=\360\322\200=}\246\t\274\337-\r\276\017\312\241\275\212\276\247=\365\356\244\275\235\343\337\275\005KK=\212\226\262\275\272\334\257\275\313y&=\335ai\275\207j\221=\214\342\010>\221\022\271\2754\336\256=\333)h=\225\001\363=\251\030\312=i}\242=\200M+>\014\321M\275\272+\344\274vl6>\206\350\325\275\275:\t>\340\002\252=\265vZ=\251=J\274\007\361\342=\257\344\255</\3156\275iE\202\274{\003f\275\337\371\224=\233a\305=\264\325d<\365aK\274\025\370\205\274\222\020\003>\266\365\010>\326\376\225=:\317\304\275\002\3566<\035\273z=\312\363\360=\267\343\272\275%\0132\276\006X\274\275u\225\013>O\270B=Q\004\311\275m@\010<&\033\372\275\022\347\245<\304\006\010\276\370W\204=0\347\265\273iL\347=\207d\204\275F\027\207\274\021\261O>1\343\347=l\352=\276#\007\263\274\355\243I>\372\256e\275M\363J\275k\253\370=aA=>N\364\353;8\330\233<H\005]\275\036q\203=v\212\201=\365\346\247\275\0324!<1\355\205<\252\336\306\274\336\005\330=\254o\r\276_E\362=\263\221\264\274\2265\323\274\312S\234\272\013\243\003\276&\277\350\275S5\025<%\240X;@j\010\275P\321\325<c\275?>^\257\305\275_\336\205=Q\365\236\275:\324\">\204\317\363=D\026.>\021\316\330\274N=6<D5v<j\274+>\035j\006\2763\035\311\274\305\204F>\267x\240<0N2\274}\035\271<<\263\217<\367\2207=\241\336E=]\360)<A#\350=\365\037\376=t\034==\003.\213=\206\237A=\256\256\276=\345\204a=\333a\021>\237\200\002=\370\324@<\343\"\037\276\000z\244\275nXO\274\360w\376=\372\n\037\275\313\226\206\275Y2\t\276\250p/>z\375\362\274\033\305\313\273\342\3748>\001\364 >\367o\310\274\347 z\275\261\331\n\276e\026\320=*\272\037\276\241\031\212\275g\020\031=\004a\367\275\316\353\217\275<w\276<\177\327\236\275B\207\241\275\321\017\t>+\336\034=\336\367\256<\353\0231=\374\375}\275-R\\=\310\337\304=\2618\177\275\264\023\261<8\006F<\227\225\330=\367\336\013=&\216m<w\312\025=\276\212\323\275\2631\336=\215\277\363<\005%\251\275(w(={\271\351=:\226O\275\354\025\332=kq\220\275\'\303\346\274\276#\205\274\\\336\320\274\307\200\344=6*\t\276\227\3433\275\340\217\037\275\035/\206\274\272\301\373\274/\256\206\275\362\346\210\274\276\033\273</`%\275\372\362\305\275L3\031\2765\213$\276\203\364\013\276=\0029=\035\004\207=]\365M\276\255RF\276\224SA=t\302\202\275rdx\275\316\264R<\036\0141>\220\310\t>m\225\301;U\221\267\275\2330\354\274k\342\264=\321\355\223<\246\353$\275;\341\331\275{54\274\367\211\366\275\301|\221\275\243\221j=L\301\251\275\"\366%<\2513@=\202{\222\274]\361\231=\214\324\025\275\274\\E\272\023v\226\275bC\352=\362\256q\275\0218\367;\025\2646=\317\275\337:\265}\000>\023V2>\264S\035>\200[\376=\000[\246\275\320-\253\274\275\270\361\275\337%\344<\200\236\216\275J\327\225<=X\020\276\211\324\021<\023\217\\<\213\r\021\2754\216\202\275=H\030\276\334c\267\275\235\023\314\273%\320h\275%v?\276\211\233K=\270,V\275\320\223J\2755n\330\275\212\202\323<Q*\375\274\3269\375=\230Y\\\275\r~~\275\212\024\332\275d\361\347<\342\273\247\275\331\027\331\275[\376\245=+c0>?\254f\275\273\364m\275\360\306\372\274Y~p=\356\214\366=E\027\271:>\321\035=kY\374\274\303\324\342\274{\307\330<\230k\213\275\244\023\330=q\320\247=\335R\317;\241\241\343=\356`\357\275\001=\376\275\236\002\006>U\322\016\276\301\347\343\274\201t\243=#w\337<\236\036\375=\230\325\337=~\036\204\274\024\260\337=\022u\255=\353Y\260=\240\312\377;\2541\202=\257FB=\212\335\357\275\352\305\317\275\217\335>\275(l1\275\307\374<\276\264\021)=\223(\005>\376[g<\220\315\355=\210\236K=\332\203\252\2743<\220\273\271;\204\274\306\374\237\274\037\0310\275rmC=C\224\t\276\272\0143>\021\254\014\276\245\001\261\275\255\236U>\311^\025>\247rJ;\376%\017>\233,c<\005\243M\275\376\004\211=Re\311\274\177\377\311=\377\352\036\276\211\014&\2750\262l>%H\003\276\276Z\344\275\210\277\"\275\317J\203=\313\026f=\245\331\253<\203m\253<3\271\024;\277\310?>\243\023\210=EhU=m\325\223\275\335\213\361\275\361\326\002<o\030\326=\357\330;\276%z\024>\225P\347\275\252\320\276\275\214\340\342=\265V8=\270\027\216=\242T\343\275\3071q\274\264\235\030>\270\214\022=\2631\240\275B\006\r\275\276mG\275\034\343J>\220\262\270=\310z\335=\215\242\213=\224\3614<Ur\301\2751\0021\275\357#\013<\371T\007\276\341^\303=\266\330\n>\314\311(>\275\rE\274\256u%>\236\021\323=\017=)=\323y\217\273\212\n(=q\233L<\037:!\274\3469\331=\252\214\006\275\030\r\213\275\311k\346=vV$\275\210\372\212\275P\221g=.\251\216=\254I\321=\215\363\267\275\303\303\226\274\354x\020\276\022\006\244\275fIX=1v\223=\265\247\236<\334\2751>\037lJ\275\337\246_=\205$9>kPW=\246\273$\275\274L\032>\230\2223=m*\">\304\005\275<\3508\353\275g\274\003>T48\275\332\n\024\276Z\334w=\206\376\244\274\205\241\257\275\n\353\252\275u\203\251=G\332\347=[p\327<\373\207K\274\030\272\211=\202\010\023\275,\204\362=O\336\001\276\204\266\244\275\257%(>\247\177\013>W\252\212<B\204\374=\\\217\251=\245\234\027>-C\014\275\205Q\007=\204\333b\275kQ\201\273I\373Z<\261\201/=fJ\t\275}6\244==\224\207\275\251\005*\275\302\231\006>\247\270\213=\241\t\232\275\312\363i\275\254\026~\275\233P)\276\213\2117\276\231:\235\275\277\225\001>ZJ\374=\0365O=|\334\335\275U#\001\276\323C&=7\025y\275\212)I=aJ\321=\347\310\177\275\274}\251<\037\313\037=\240s\260\275\311-\243<\276\340\266\274\207T\017\276K\241\212=\331\3647>\371\006\370\275\373(\243=6\221\222\275Gp)\274\323J\'<\320\013\232\2756J\023>\022\367\364=\372\005\334\273C\354\315=\230\031\363=\312\244\333\274\263\230\014\275\363\304\034>|\3132\274\372\030\311<\366\270\017=\210f\213=L\004\226<\360\222\'=\212@\016\276\220\337\255\274\204\335\224\275\177\210R\275[c\245\275d\334\n<\nX\"=\242\026\177\275\347\213\r\275\342\240\'>\304sG95U>>z\314)\276\013\373\330=p\204\245\274\243\316\025>?@\022>Z\255\243=?\365\230\275`E\277\275Z\273\314<\027Q\356\275\242\267\245=\001\245\277\275)\023\000>SD<>\363\236\246\275d\307$\275\254S\346\275vu\264<\233\360\342\274\234`O==\361\346=\027\265i=\201\3276>J\270|\275\220\370}=\346\023\227\274M\024\265=\r$\235\274\000\022\023\2764\252\227=\334\313\013\276\017w\376\275=\223\030=\243\001\025=7-X=\305\3341=\340\245\022\275c2\265<d\256O\275\257\007\350=\220J\205=\'<\311\274f\340\253\274\272\351N;\364)B\274(\377\223<O\223\013=4\203C\276\333r\357\275\234\307\212\275\024/\320\275fR\037>\2361L\275y\323%>6\237X=\233|\276;\346\311r\274\236^W;\211\274\254=\255\336\300;@!\365\275R\215\211\275\375\024\373\274\371\351\345\275\346U\332\273\000Q\322=F\r.>q\255 \276$hk=}\255)>M\204G\274g\2644<\365\250\362<5\3709\274\220\211\233\274\005\217\r>\345\270K\275\372*\262<\364`\314\274\332\002\010\276\247(\373=\264\0266\275V\031\027\276\376<\206\275D\016j=\347\233\362<\031\252.=\204\340\022\275LI/\276(\237o<\261<6\274:I\357\274-\376\226=\243X\330;\342\366\301<\342\372\211\2751\3610>_\020}\274\301\201[\275\230M$9[\332J:\272]\207<\302\315\007\276\215}\232\275r{\035\275\354\\\303\273\341c\211<\201\357b\276\234{\"=(\210\\\275~\366\275=\211\220\204\273\335\000\343=K7!><8\304\274\245!\370;\274\222\234=y\r\022\276\002\351\325<pA\350=\345\214\310<W\364\230=P$\221\275#q\317\275:\325\037\275}\227\317\275\365\203L\276a}\036\275\023G\021\2753yM\276g\2761=\te?<0A\236\274yBH<bV\304=\264!\274<\377;!>\216\372{=\212\013\264=\001\005\320;[I\264=\005yj=\001&k=\301\017\373\275.N\025\276\321R\317=%\246\335\2758\034\014\276g\033\323=~\204\305\274\252\353f\275\307\2234\274\036\341\030>\345\0252\276\340f\357\275\364\376\207=\266#:>\237\210;\276\226K\375\275B\024\216\275l\275\300=\264\342\016=\372\223\000\275,\'\267\274\027\246$=\233X\364<?\304\204=54\254\275Z\251c=\273\256\017\274&\225\213=\032=9\276\331\354\235\274\351`\214\275U\222\214\274\363:\334\274\360\257\331:Y\274\025\275\266\335\277=ZM-\274T\310~=a\354[=\022\\0\275T\333\233\275\326\347\201\2751FT\276\340\214#\276\211Zs\275\324\333\034\276\234\371\\=\302dV\275d2\262\275\236\314<\275\266\022\363\273\303\365\002\274\235\266\010=_9B=BL\255=I\343\020>>\373\232\275>E\232<\373j\327=P\261\341\275\036\267|\275\314\357\322=\377z\r=\324\202\215=Z\026\014=\371W+\274F\362V=\337\372\\=\'2#\276S\034\230\274\364>\330<\264\'\002=\327X\264\275\010\265\264\275i\307\225\275\023G\223;\241\370==Gp\202=\305jB\275F2\026\274\276\tK\274\317(J\275S\354\027=X\230\037\276\244\261\000=\364?v\275\235y\031>\023\257\330=\340\312==0\177\304\273p\312\036\276Z\356\206;\305\031\242<\037\254\201\274\340h\234\275\350\357\017=7+h\2761\2506=\367$\323=n\355\003\274\316]\363\275\030B\343\273\256\327\266=\022\340\020=f}}<$\370\256\274M\260X\274\'\252p\275\372\275V\275\016H\t>1\201\024\276\003B\001>\250;3=\254M2\276}\177H\275\004F\275=_\026\021>\321J\265=n\322\326\2747\202\335\275e\336\224=>G\331\274\313?-\275\205\353\363=\256\353\366\275\003\240\251=\247\025>=mH\263<\360\347s\275R\345\004>\243b\244={-\024=@\274\262\275\214(\313\275fF\233\274j\321\035\275\205I\257\275\036\337\364\275\245c\335=\365\265\303<\340\205\202=\273\362\235\275\336\372\003>@2T\274\217\215\363\275!\001\206<_\021\247:1\032-\274y*\'\275Q\016.\276\271W\225=P\024\274\274\025\235\260\275u\366\023=\215Kh\275E\234u<\344\260!=n\265#\276P&R\2753[\357\274|X\372\275\2669\201\275\351v\217\274\204\347\214=\206\217\251\273\347O\337:\244\220\342\275\377\3147\276#s\016\276\210\2619\275\231B\360<\331\376\000>w\331/\275i\247\231=BW\245\275wK\204\275r\\\250\275\001\254\205\274b\311?\275\020#-\276\004\207\275=\037\340.\275l\006\227\2757,\003><?q\274\357E]=\007\302U\272\007\025\211\275\372}\021\276\350\356\302=\256\354\t\274C\304e<\245f{\275a\201s=\346\320\241<\304(\026>\301\373S\275\322~\271\275E\317H>d\350P\275Z\220\352\271\036T\3269\350\252\322\275\277o\246<\220Vj\275\014\022=\275\212\336.>\347S\275\275W,\r\275\310T5=\361\302\323\273\331\350\241=\277\000s\275\250=\010\275{\010\020=\352Y\265<3$\230<\027\313\372<N\374\364\275W\327T<\244\272\335\274\311\210@\276[\233{\275\305\206<\274{e\320<;|@\276\216\376\210\275\003\014\010\276\3624\265\275~3\316\274\300\327\207=\021yr\275lh\013>\315\361q=\237M\031\275\221\271x=\257\201\212\274C=\352\275\270\260g=4@\t>\214\3536=\300\323\240=\244\3044=\306\0043\275\260].=\200xD<\313X\233<\276t\033\276\243\nz\275\242\245\260\275\345\261\230\275O\347+\275\031\0004<\373rV\276\002\343\365=c\345\235\274\267\307\311\275\321\341\262\275\230C\r\276#\212\251\275U\026\013>\013\277\202;X\377\367\275\244\240m\275\327\021\261\275A)B>\013u\371<l\2372\274\214\024\244\275\320m\316\275\345\324\315;\024T\234\2751j9\276w\310\216\275D<\240\275\n\324\262\274\314]\301=$-^\275\333\266\233\274\024\305\262\275\340\251\232=\211\300\304=F\214D\275\227\020\022\276\0243\276=\225\221\r=\305H.\276\323}\'\276y\242\372\274Q\034 \274O\320%\275\313\203\220\275*\213\001=\202\261\200=D$}\276\354\234?\276Y\010\376=\350C\340=yN4\276+\347\265=[\005\266=\2077\350=\376!\242=%\216\020>\"\325\013\276\205\200%\2764\314\226\275$\260\252=\244\260\257\275\213C\034>\352\245\032\274\373J\247\27542\356<\325 \">\207>\r>\352\354\372\275\341y\025<\370\2439=m\017!=g\000\315=\305:m=\362\177\320\275\377\240\311<\304n\363\275\007I\010\276#Ga\275m\"\021\276\023\304\343=\247\201\014\276\n5x=\277XG\275\3154\352=\232Eh>\277\025\334=\243\255\r<b\026\030\276\225l?\274\353\335_\275\347\263~\274xu\223=\332)P=|\3314\275S\324\311=\235P\221=E\233\026\275?\255\340<\021\242\000>\312\034\033\275jA\004=\027\033x=\262\216\225\274\332/\230\274\302\237.<\'\333\245=\220\335\204=[\024g\273Z\255\005>\245\254\250=\245\347\220\275~4@\275\353 1=\324\251\233=\204H)<\223\351\306\275W\357\311;o\200\204\275\272P\271=r\265\020=G/\222=\t\223\370<\315`\322\275\276u8\274\226x4>Nv\010\276\n\257(=\234\337\243\273\274\240\317=,\237\013\275P\321\253=0\204\004>j\366\n=\013\310E\276S_B\275{\203\272\273\371o\024<\202LD\275\002\367_\275\2008\243=0\376\303\274\203\330\037\275\301D\243\274/4\033\276\331\035\206=\322\006\220\273\223\226\265\274\224h\272\275\3763\343\274v\\\210=%T\032>\263\263\240=\345N\252\275\207s\202\275\001)\334=\006\020\026\275\003\340\345\275\305\003\016\274v\371\001=\032\345\264\2755e\227\275\224\026\265<\240\275\303\274\003)\374\275\326\2207<\212\322B>Y`\275\275\303\337<=\037\220\033=\234\267\331=EK\017\276VF\246;[\207\037\275\317\272j\275\247\017\332<@k\005>9G\230\275\240\250\026>\256\333Y\274\315\017\370\274\230\265\272\275\253c\020>)\266C>n(E\276\220\001\375\275M\021\212\273\253H\024\274*\242[\274\235p\342\275\257cC>~`\361<\307W\314\274\227JS>\311G\214;\340h\010=\027\210\022=\034\363\270=\347\037#\274^\373\224:\241n\006\2763>Y\275Of-\276\010\036\222=\200\327\340\2750%\265\273\002\\\"\274\034\031\340=E\2203>\201\035\226;\361\3261>\345\030>>\241J\232\275[\227\242\274\231\266\373\275\225\252u=\037u\335\275\216t\256=\205{\026\274\nwK>\r\353d\275(\024\210\275\335\240h\275\034J\237<\221\233!\275\225\212\250<\271\262\260\273C`\032\274\240\223\365\275\230\335~\274R\202i=\270@n\275-\323\270\275:\276s=\247\233\266\275x\322\002=\200\037\307=\237\020\322;\257<\322\274\2672\247<\"\000\202\275$\221\223\275\333\312p>\246E\341<G5\261\274\201\225\310=\335Oj>\036\304\244=%E(\276\370|\323=G\205\257\275\331\003.>\006\226\336\275t!\305\275{6\240=<\355\022\276\217G\377\275\177U\273=J\240\241=\'\230\037>\366G/\276\350\315\024\275\324\017\030>\361\367]\273\200\236\305<f\216\361\275\224o\231\275\222\317\t\276\261\226U\2751\3219=\201\241\n=\351\203\340\274^w\016\275\212\314r\2748\rS\275h\020\346;\313f\t>_a\034=\230N\344\274\326\207z=K\035\t\274M\277\273=Hh\226\275\231\344\212\275\314\241\311=?\372#>@\2421\275\337\377\235\275(\263\004>jx\362<\002\316\004\276\030X\314\275\"\rR=\267\235O=k\322\344\2751A\001\276\222\230\340<7\206\332\273\311\224\223\275\304X\364=\0042z\275u\010\032<]\323\346=\304\025\355;\270\364\326\274w\330\033\275r\351+\275\270}\315\275\353\313\364\275\250\254d;\005\025\251\275>\252\005\276\257\020>\274\264\265J=]\231\327=t\234\271=\306\374\032>\274\3447\276&\312F=\035\310\331\271\244c6<\205\214\364\275O`\305\275\003S\261\275b\352\242\275\312\343\247\275\r\343\227\275/\365\334=u\236\371\275E\203\362\275\344\236\351\275\276\026\371\273\321l\311=\223\340\317\275\344\372\207\275\017N4\273^\034{\273!Z\034\276\327\245 =L.5=\020\347\343\275\250:\201<\256\357\211\274\301\303\\>zb\356\275%\247@;c\300\004\276\343\365|\274\302\220\360\275R:\301\274]\270#\276\235\3771\276\333\310\236\275\224c\307=|e\333=\031sy<\256Z_=1\224\203=\002`a<\027\353%=\000\344\212=\026E\006>R<\366=\002\244\264\275s\306\\=|(\022\276f\331:=\266\021\277;\314=\371\274\234\237\007\276\023\263y\275\004\240\203\275\002\336\005\273;x\035>8\316\023=\306}%=H+\257<j+\022=\320\025\343<\223\177\334\274v\342\214<7w\250=b\314\315=TQ_\274o\237c\273\234I\234=F\322\273\273\023XL\276\370?\207\275\327\n\227=\246\252\017=7j\013>\371\245\252=\236\305\225=\373\275\r\276\240\327>\275a\206\243=\254\267\255\274y\350\"=:(\230\274\335\361}=\245\213\341=\'\\;\275ER\210=b\350\225\274\231\022\247\275\000\004\307\275G\315\266=\2405h\275E\263X\275,48\274t\'\r\276L\250W<%\177\037>\272\225\260=\037M\016=F\243\t>\\5\262<>\371#<@1u\274 O\277\275\204\264\363\275\001\255G\275[\216\301;[;F\276\335)\300\273\266\\\014<(\014\354:\365s\245=\223\356\252\275\263\374E=\032K#>\247{\316\273\367\201g\276m\301\214<\320s$\276~\204X\275~\263\022\276\370\364\234=\322\240\r=@\276y\275\000\221\350\275\243@\344=\213\0241\275\020\227\267\275YE\254<\030\243\251<;\266\236<\264\002\326\273\177\010\234<G\256+\276\244\032\003=S!\207=b\250a\274\031nK\275&#3=\021\274\234\275\306\0270=\026\327\256\267\215~\251\274\003\203(\275\302q\222=\236\nd=L\362\215\275\350\300n=\r\177\251=\363\033\230\275\267\332K;[\374\345=\002\364\036\275[Z\210\275g,\355\275\230\214\024>iu\322=>\013\007\275\020\201P\275i\311\212=\330\310\314\275\232\'\266=\360/\270;7hH=\345\332\"\275w\207\337=\310\207I>\373\310\271\274\254\036c<\262{0\275R7\351\274\234\301?=\271\353\231=\'\253w\275\230\206\324\275>\225J\276\331u\237=\342\022\031\276\227\345\260=\004\233\245\275\374\262\033=\331\316\246=\016<S\274\230\213\013\275\030]\215\274\330;\216\275\367:\227=\265\253\323=\217K\317\275\002bh\275\032\001\236=\356\203E\275\363\355G\276\234\0203\275\363\306\305<\245v,<+\003\030\276\217\355\262=M\020\361=\242\262\341<\271#\257<o\211\244<\">\305\274\334\260\214\274\277\320\310\274L\211\353;\367B\240=\242\205\001=2\2620=\013\'\271\275&\240/=\3253\226\275q\025\315\275\361\216\177;\244\337\330<\232U\023=\306\252\273\274+\234 <\222,\271<\2711}=\251\246>=\205\177\257\274\n\321\246<\243Z\006\275\213\217\013=\217l\017\276H\202I\274La)\276\003A\346<\221d\372\275\331B\305\275i\\\345\275\007\323\341\274\340[#\276\026\342\273=7\244y=\"B\236<\270%\016<\n\246$\276N\307\345=\345$\224=\244])=\376\206\352=\343k$\275U\210\272=\277Z6>\014\331\020>Y\313\305<8\330P=\362\205\372\274nP\212=\366%)>\217\0017;C\245D\276\325\246\337=\262t\371\274\260\250\233\275>q\345\275\211B\001>{\253V\274L\365\347=\2125\276=>q\311\274\257b\337\275\224#\252\274\356\036\363\275\270\010 >bh\002\276\255Y\001=\013A0>\375\351\214\2756a\022=1t =1\n->\335\223\224=.P\225=e\336\316\275\013\347m\275\272\'\274\2758\356\304=\374\367\213=\264]\326\275:\222:\275\364\241\340\275x\370+\276U\302\360\275\255\330\222\275\313\246\265\275\264fe;\345\247\"=\237\037\361\275k\316\226\275:\273X\275\203k\222\275fO\010>\204wl<\027\013D\276C\226\366\273`\223T=\255k\027=/S\212<\330\240\'\276\023\316\352\275\216\033\304\273\2375\236=\272\262\256\275@\271\254<\243\331\203=O\224\t=\200\002q<FN\262=\253\365U\275\254f\016\276\036L\217=\021}\024=\213\'v\2756L\325\273 \273\233=\340\323\350=.\367\021\275~\313#\273\347d\255=\356b.\275q\335O\275l\034.>j\266\315\273\366\302\017=\0318T=\335m\233\275\220f\356=\235%\005=\t%\244\275\371\324\325\275LM\r\276\342ic\275>\360\252\274P\202\020\276\261\326B>\032\221\257\274\032\216\036>\006\205;\275\3505\301=y\245\251=\276\327\210< \246Q\274\037O`;\032\210\244\275\270\216\326\275E\033\352=\301\025\005\276\333\235E>H\371+>\251\274\313=\260\312\333\2751\217\010>\';\300=.\0254=\2677\252\275\235\242\253<\370\327\272<ZN\336<Gf\345=*\371K<\003$\2109Z3\274<W]\325;qN\304\27481<\274\007\010\225\274\342\270T<^\031\204=\365\322\t>+\373\236=\366\257Z\275\222\017-<\030\305\274=\034\035%>\'^\214=\237\355W<\177\275\302=\220\313\355<\326\221\367=\327\201V\275GDM\273\000\262\340\275\372?/=\242\211\034>D\322t\275\202H\215\275^\230\320\275I\313d\274\332]u\275\336M\266=\2772\246=\3452\205\273\177zC\274;\370\255=\030v:=g\347O\275\233\034\003>\206\2461\275\2021\235\275\022&I=)ZO=\245\216V=\231\2637\273\204\211\306\274\010UW\274Yi\266\274i}\220=Mg\203=\244\366\273\275q\356\275\274\244\276\273\275\300\224\256\273\307\037\375=h\234\343\275\024-\341=\310W0\275\373\024\010>Y\024\325\273\226=\257\275\227\261\246\275\307\266+=\022Sd\2754t\017\275r\210\327\274r?\r\276\005\334\306\274\320\303\021>g\351Z\275\205\223\347<A\354 =^\201\317\275\017\232\377;\005\205\247\275U\254`=\027\372\322\275\305\341O=\265\253#\2765+\211\273\346$\262=\225\376\233=\034\350\230<\316/&>w\234\357=L\374H:\316\237\007>\251i\033=\026\245:\275(y,=-\177\320=\237\030\020>E\3115\275\237\335\023={\022\261=vY\210\275\373\346S>(\304i\275Y\313\030\276Tq\324=R.\265\275o\247\203=<\035k\275\277\3363>\267\273\021\2763_3>Vh\267\275\250\236J\276\347\033\212=\243=O=\223\330\250=}\002q<y\267l=\215^\004>\273\260\220\275>q3>\275\271:\275N\316P\275W\354\023>\214\307\254<]\032\003\275\361\342\314=5@1\275\001 \224\275\014\025P\2759\010\035\275\346\331\306\274D-8\276\2440\337\274\341\343\234\275\3075\320\274\351T\363\275\252H\002>C`\276;I8\203\275\341(\356=v[\203=\325V\004\276\020\356\010>\026\224U\275\325\366\357\275\265\246\374\275\322\301\243<my\321\275\373*r\275\360N\026\276\257\227\352<\213.\023=\360\262Y\275\220\270\235\274\003\223\033\275\370\274\227\274BA\255;mq\005>\024\323\037\275\020\036\351\274qi\270\275\272\020\361=\301 \302\275M\325\014=H\356\260<\262-\272\275h\263\213=\313Y\016\276\273\252\234\274\177\035\362=tl\277\275\356\004-\276\234\215\005\276c\265\">\365\237\005=\347h\365=h6\326=\252`\255\275\2656]=\350\342\210\275\213!\027\276\277\314\221=G\240b<\024\374\035<<`\221\274u;@\275> M\273cP\224\275\022=X:\266Z\357\274\235g2\275f\220\223\2758\332K=\325\207\250=3&p\275\001G\341\275ct\323<v\275\005>\001y\032>\257\347\"=\201\024\324=\216\315w\275\022\273r\275A\201\025=7\352o\275d\222\242=\2600\271\275\251\360\016\276\265\206\014\276\264\264\373<d_\346\274k\323\220\275\335\311\323\275\223\010\"\276\302C:=z\307\336\275O8#\274\223\346\360<E\226@\275P>;\276z\376\177=\341I\333\274\215\322@>u\351\266\275A\333\310\275(C\230\273\231\306\225=\271\360\233=\256\250\344=\305\230\240<\304M\326\275\271e\017\275\"\361\030\276#c\036\276\313\014\303\2742\024\334=\231\354\366<\235\006\223\275\213\2440\275\305:\217\275w\336\355=Q\341#\276\217L\311=Y\310\352=\267\016\250\275\204\374\247\275\343R\311\275r\033\240=\237\341\004\274vqP\275S\376 \272\016\227e\274`\370\312\275\014\341*\276\247\250\245\275i.\234\275\242\246\020>\344\304\230\274!\256v<_#L>\343\367\270\275\202\010\341<\023\025#\276\317@\212=$q\346=Nt\373\274H\351v=\255\360\255\274\372\033\207\275\207\226\211\275[\354\251=8c\251\275=\330\301\275\307\220\373:\265\204\232=\'V\205\275\302\235\242=\341\"\362\275XY\210=\0369%\276\316\255*>\262\266\035>\227\237\r=\027-\316\274]\275M<\233\'\010\275\024\013\353\274\004\323\n\275\017\034h=\350\316\022\276\200D\004>{\233\237=~/L\275\302\021\203=mR\355=\322O\345\2753S\223\275\017\237\337=\232\313\013\276y\372P\276r\235\306=7WO=\306\3433\276[\223\021\276\300^8\274\276e+<K\330Y=E}Q\275h\201\027>\207\3565\275\375y\334\275\267\332\213\275\215p\304<M\260?=\033\301\232=a=\013=\323\371\205;\343)j<\214\230a=]9\226={\016\345\275\304!\251\274Z\343|=z\262\250\2756\254\020\276\031\327\005\276\002M\035\274\363h\341=\324f\372=\006\257\371=i\355\356\275\217_}\274\021T\242<\225\333r\274\310@\370=\014\276\315;i\201J\274?\202\022\275\257\365\320=\227)\352=]Y\310\2757{\260\275\251O =g\223-=Z\272=\276E8\345<\237\307k\275\216\272\027=},/>0\346{\276JL\026\275]\260P\275/\315\007>sU\010>^\016%\276\364c\265<e\241\364\275H\276G>YV.=\351\301A\276\333\023\231=\311\257\263=\003\244J<\227\352I=\374\341\231\275\317:\177\274\261\007.\276DEt=\365\241J\275,\217\007>IO\226\274\025\032\332=\306\212\251\275Fr~=\363\210\267=\017bl\275\375\376\245=(\241\371=\207\037\257<v\027\250\274\315\357#<\225\007#=;\331w\275k]\324=\005\264U\275\237e\352\275L\235\305\275\267yp=\242\350\212\275\276(o=\340\341\020\276>\177\202\275\031\nb\275\004\2417>\017\016\257\275\253\2074<HS\342<\021\267\324=\230\267\260\275\006\r\245=6\005n<\245GB\276\300F\341\274v\027_\275\263\376\222\274\302w\006=\220\212s\273\203_\355\275\307@ \275.\230\374\274\315\225\025>\270\013\'\276\361g\211\275\0021P=\005v:\275R\204\357\273\323%\306\275j\355&=\307\376\002\275\020\355\216<~\341\253<p]a=\031\244b:\361B\301=\342 \333=\214\006\255\275\2338\270=D{[\273W\000 >\377\r\230\273\r\016\003\276\034e\217\273\347\020\277\273\262+\252=\242Q\304<m\372\275\275\022\255\204\275g\325\021=\264mI\275\261\3310\276\204\271\236=T\302\003\276\370v\016>\030?\n>\227\366\326=\332\n\213\275\366\374K<\024\217\203=\212\307\323<\230\363\272=z\313\020\275e\034\221\275BNa=Z?K\276g\275\240<\006\003\013=;\245\226=_\033\025\275\251\233\203=\005\304\032>\240\334\233\275\327\232\001\275\001\"\005>\335/Q\276q\362\362=\356d\370<\000\273\351\275\3225;\275\031\n\236=1\207\360<\203\224\013\276\010\226\007=\264\026&\276\346~\005\275\367=\016> \242\333=l\324\207=\234\037a\275rU\264=~i\336=!<\275=\346\314\006>\2733?;\374p;>\034q\016=\002G9\276V\356\323\275?\353\001\275O\2171\276\236\321\323=bt5<\3752\326\274|\016\350=\360d\236\274\026\230\021>\376\316;=ay,\275\323\253$>J\214\002\275]\361j\273\002\027z<\016x+=\211\372\277\275\306\266z=B\311\272\275\350Zk<3\241\264<\305\364\177\275\t<\367=\206\241\274\275\203?\367\272\020+\366<\307\245\322=\342)\016>\305Z\210=\257\272\034=\225\237\245\274\205\217\272\274\361\205\236=)\024\327<\345\335\004=A\277p=)=\221=\232\026&\275K\247\200\275\340\242\331<\'\010\020\2754\rZ\275z\\\357=|\242\035\274\020Ic=z\255U\275\325\231\216=]0\'\2752M\321;\305r\224=\020i\252=\374\313\t>\246\315\223=;5\014>\234]\366=_|\005>\206\263U\275e\361>=34\354= 5a=9\013^<\203\345\351\275_\204\202=\276\215\257\273\273~]=@\203g\2758\276J\275\212\204\270\275\377\262V=$\014*\276.n\006=\356\177$\276\245\276\r=\371S\234;|\324\t\276\267T\316\274\020M\336\275\023M\005>$i]\275\311\375\333\275!v\250\275\014\271\320<\216\026\023=\005]\001;\0301z;\313^\272=p\307#\276\313\337\324=\030\355D\275\244\nM=\233\362\202\2731X\001\2756\252\307\275\361\336\002\275\250\373\352\275J\020\205\275\212\264K<t1b<\332\204\021\276\353\271c\275k\247\021>d\302\267\274\312)\377\275\232p\032;\371\365A>L)\211=\323\3053\275j\n\017\272\217\203o\275\2412\031\275\223F\027\275\220-\">\315$\220<T.\227\275\013zN>k\216\t>\340\\\t>\350R\257=\311\006\'>\013x\213=kl\000\276\351\302\233\275Khp\275,\321\013=\036j\377\2750#\332<y\350}<^\203\365<\034\337\203\275\257\253\220\275\265o\351;\343|\255=\375w\006\276\221\367\331\275O\331\326\275wGe\276\236o\210\275\223E\324\275)\276\231<\326\233\200\275\220h\306=\322\322B\275\277\323\375\275j\177V\275\";-\272\254a:=\277\214\002\276\035\337\356\2759g\002\274T\302\317=\276J\202\275C\010\232<\263?\306\274\230m\004\273\374c\216\275[4F=\242\332,=0)\005=Bc\373\274\304\311\005=R3\344\273\365R\326\275y\371\363\275\342>\212=`\261\300\275\200y\235\275\1776\245\273\356\205\257=\205w\312\275A[\360=/Z3>~!\267<su\006=@\010\021\276\217\357A<\261\257\251\275\007\002\221\274\\$\262=\257\210\247=\353`\207=\230\005;\276\205\\=\275\316w{=Bs\022\275=\010\355\274\257\216D<{\240_=\254wZ\275\362-.=V\217\016>R{\246<\270m\340<\357!\372<>\204\206\275o:\244<-p\021=k\276\032\276qk;=\034\333\270\275\021\032\036=\177W\214=\344\n\032=l\026x\275kEB\276o\203\005>\002V\027\276\242\261\210=k\351\033>d\330\347\275r\032!\274/\031\373\275\020H\346=\350\337?\275\360Y\222<\334\022\345\274q\013\276\275\261[k=uy*\276K\271\247=\346N6=\266V\023>\233\270;\274rAR<\001G\016>=Z\311=\325,&<\325t8=\224\260\271=\005}/\275\233\263\323\275-\030\335=\332\203D\275?@4\275\275\303\212\275a\245F>fi\337=\3203\271=\223)\203\275\207\304<=A\375q\275.\214\220=\"\302\262\274\205+\221<\261g%\2752u7\276(v\376<9.\277=\037y\205;\240\3021=\204\224\273<\213,\226\275\324\313\202=\250\013\222\275%\373\215=\320\006G\274]tU\275B\207\316\274\260E$\276\023l\303\275\216\177\310=R\232\237\275\'\006\037>\350a\027=\214\310x<\224\251\321<K\335\315\275\204!\010\276Z\0226\276 \2578\274\245\017V\276\313\244P=I\026\246\275z\"&\276?K\313=)\007E>\331E\312=\010\225}=\326\2236=h\004\321=\240\nz=;\307\212\275`\307\212=\214\211\302\275\277I$\276,\204o\274G\220\277\272\236y\210=\316\177\215\275\364\242s\275\036Y\277=\214`\303=i\3101\275a\216]\275+|J\274\344\224\322=\250\006\313\275\365\027\233<.\336\340=\330\362\214=\2421\031\275\322j\370;,\005\022<\336\014\246=SR\275=\035\235\232\274\000\255t=\207cj=\311~\254=;\335\006\276-:\327=\202\360?>\223m\037\276\333Uy=f\003\000<9\022\211\275\215]5>\034,2\275\024}T<\206\n@\276oT\315\275\214\343\265\275\250\266Y=\014J\323=\227\265}<\tAi<\356\217$>\244^R\275\313\233q=*\354\376\275<p3>_\323\253\275\033\274\026>\204^\033=\006\361\371<\204]\333\274OJ\250\275h\306\250=Q\234w\273=K\232\275\377E\342=`tU=\205E\250\275<\036\350<\276f\t\276\274\371|\275F\275?<\022\305\204\274\341-\t=\356\315\035=\333\010\017\275du\016\276\213\246\332<x\242\276=\353\252\231<\210\376\340\275[t\241:\177*\257=\271\204\215\275j\3573\276\203\003,\275\001F\026\276\t1\220=\251\244/\274\314^\357;iB\025>\230d%<\212F\236<y\347d\274\027\365u=x\037\014\276\271\354r\274\000Y\013>\354\254\031\275\253M6=\252M\022\275\254\321\247\274<\353\253=U\364\210<A\357\026\276\026\241\021\276\232I\030\274\t9\200\275\353\301\005\2764\262\222=\303\215\016\274\243[\263\275\324\246\030>\343\231!>\254J-=\035\336\270=y\333\037\276\003R2\2760\245h=\344\354\033\275:\371\000\275\216\3704>\376l\217=b\3046\275\033\270.<-E\261\274\002\321\311\275\260\331\232\274\225d?=V\344\014:\004A\'>\261\264\021\276U\345#=w\001\262\274\311U\021;&\037\006\2757\357\362\275L\206+\275\014\210\034\276P\221\35296!\004>\022\214F>\272\206K\275\017\270\262\275\302M\220\275\317\263H\275\322\003N\276\370\360\376\2737\n\202\275j\200\027=6\232\230\275\327,\230\275\262\010v=i\310\211\275\355\217%=f\r\244\275\247pf>F\033\376=<c)\276\313=Q>\364\230\033>\356\177A\275\245\202\272\274\367\326\345\275\005\225\246\275g\322\213\274\206\305\372\275\315Y\025>\342\t\247=\377\'\242=\327\256\243=\277x`=\226\236\235=3\372[\275py\t>\275*\300=Z\236k\274t\347\r=\247\356\244\275\"\027\237=;\263\030\276\0170\036<\354\261\243\2756\373\016>\212\032\003\276F\204O\276mN\264\275\201\nH\275nb\212\275\251u\256=s\300)\276|v\255\275D\336\327=q\337\377=\226\'\264=#\371\221\274\250\253~\273@\3404=\322\371\021\275u\325\273:\207=\337=\364\365T=b\245\236=\255\241V=w\354/\274\263\314\013>\212\264\032\276s^/\2766\252\255<~\234\365\274\027\351\366=P\204\224\275\204y/\275\363\032\302<Cy\216=\002\"q=b\273n\274!\234)\275\277\300\206=\243H\246=\267\023\364=m\016\364\274\351\324-\276\"\344\326=%\340\n=\301\236\332<x\273B\274}\340\\<^N\000\276\306t\301\274\004\300\r=$w\321\275\364\234\007\274\263\320H\275\344\325\t>mJ\200\274\000\373\265\274k$\005>\370\036\004\275\325$\026=\0218+\276\2613 =v\245\031\276@\335G\275\'k\304=6\217\033\276P\014\201=\307\023\263\275\314\247G\275D\363\332=L\001*\275\212|\3119Z\207*\275\240LN\276\010\010\343\273\333X\030\275\030\345\356=\317\017\277\2758\231\202\275\325\336\210=\030\356\n>\364\201\006\276\327\350\217\2730\264\231<\177\341\206= \235\314\275\rB\211=2m\302\275\342\235\311\275\234\257\235\275+\240\274=/\276\204\274%\255i\275\227\225\343=\2050\211=\327\371/=\323\2468=d\366\226\275\022\274\274\275\006\234\305=\023e\"\275\271:\220\275x\264I<i1e\274u\261Q\274\020\313\023\276F\223!\275k\036\336\275\206\021^\274b\'\"\276+\210\310<\331\004\321\274g\355^\276\270\313\210=\335\016\330=\010\320><U4\242<g,}\275\354^\016>+V\214\275\221z\333\274c\263y=h\327m\274\202\306\300\274\332Z\205\275\177\357\273=? \322\2741\317\202\274\036|j<\020\361\265\274\347\\(\276r\017e\275\262UI\276L\244\001>\250O\352\275\214_\000>b\\\237\274;c6\275\204U9>\206\334\353=f\2211=\005\370\016\274\341)\223\273\274\376\202=r\277\241\275\265p3\276\023\264\003\275U@\033\276\313>\024\275*}\276<\177h\352\275\302\207\224\275g\301\374<-\2674\275\303\004\262\275]\027,>\034\264\266<\340`\371\275\360\355\027\276\177\215\357\274W@\257\274\365\227\302\275\216\230C\274]\265\006>\3159\204\275[\024\373\273\235\227\225\2754^\245\272j^\256=p\352\255=\241\203+=\332\014J=,,A=a\267\250\275\346\\\245\274\227yp=5\315\">\210:\014\276\21288\273\332I*=\312W\210=\226}1\275\337{\262<d\001(\276\251\333\207\274^\366\013\276\025\031\340<\343\300F\275\265\317\342\274u\312$=wyO\275\203\305\367<\320\356\357\275.g\314<\357\342\355=\n5e\275\377\2609\276>B\275\275\377\352\203\275\330~Z>]=\275=A%F\276p\333\320=[\240\220<\216|\235\274\220\244\310=3\335D>!0\365=\351\247\250<\002:\361=on)\276\004wo<\232\256/>/iP=+\207\336=\303S\001\2749|\311=&O\217\274\203\021/= \345\335=\370\246\271\275f(\217\274\273W\000>\032\025\036\275\002x9\276\225\375l\275\263t\214<\354\2531\276T\003\003;\206\004n\275\262\271w<_B\304=\024G\303=\327\317\367\274\204\300\240=K\026\245=V+\257\275Qo\342\273x6\002=I\274\252\273\202BH=4\225\036>\346\331\213\275`\340\035>*\365\032\275\227d\353\275y\370%\276\250ZY\275&B\346=\212.`=@f\233\275w.\266\275\277\263\031\275\316\266\025<^\306\303\274\034\265\336\275\036G >{\247\213\275\351@\374\271\335Y\001<\345\265\200\275/\303\241=\334s\365\275r\372q<\016\221\235=Qf\200\274e\013k\275.>\306=Q+\326=\327\252\270\275\200\215L\275\214$\341\275\2316\211\275\314\032M\275k\353\223=\235T\312\274d\214T\275\016b\036\2757\260\n\276\317\3641<\006\256\000=\212\027\240;\003\362\225<\263X8=i\345\177;0\215\232<\000\r\250\275\322`\025\273\025o\327=\026\237\003>\034r\003>+\207\370\275A\332\013>\217\211\266\275\315\262\327=\264\205<>l^R=\330\001\376=>\225\014>>\033\223=\t&\274\275\253\033\250=v\377\226\275\276+\022\275\217\021w<\222\3033\275\247%\210<6\013\325\275z71\275\204Gx\275\306\030!\275\372Q\334;\3116\222=LH\343<7q\207=YY\032\276\0025\244\275V\354~\275W8\336<OD\267<P\375\254=\002Z\021\276RB\021\274\016\324\225;:\270\334=\005<\006\275D\265\372=\345+\347<\3750\001=\243G\300=\367\325\373\274=\326\000\274a\317\307\275\000\213;\275@Zw=\301:?\275\271\305j\275\321\242\t\275a^\031\275-4{\275\227v\361=\001>\017=\273\373\204\275\330\000$>\361\233\004;g\332\365=\342\214H\275\016\177\246;\277\266\335=Y\200\205=Q\006\262=\322:\271=O\313\353\274&\257\272\275\t\264\300=\336=\345\275\265\330C\275\007\277\232\275K\'\"\276\001\256\257\275\037\000\246=\346\022\245\275k\243Y>\n\333\355\275\277\206]\275\270\371\247\275\0277%\275\320M\334\275\204\2737<\031\321\003>8\026\221<\233\340\014=\363\r\037>QN\'=\314Ra=\232oY=\256X\364\275kV;\276\340\310\213;0\263\211\275t\234\244\275\366k\311<(\266\355\275\355\213\033\276&\376\014=yr\207\275>\260\242\275\302\031\t\273\0353\346=\371\027O=\364\000\320\274a\025\014=\211\224\311\275\347\377\032\276\377\222;>atN=\334\355\002\274\323^\010>\213-\030\275\354\030C=\353\255]\273\343M\224\275]:N\274D\337\270=&\340\002>\027\003\336\274\311\251B\276\3452\241\275\263p\306=.\\\252\275\327\320\033\275\214\264\340\275!;,\276K\254\272\275\n\3238>\205\370\362=C\352{\274{E\364;\216\222I>\220\204\263\275?%\203\275T\241\352\274\373\353}<<T\023\276\274\340{<\323\n\316\275\303/\320=\347\014\333=\311\206D=[\303\213\275\276\212\203\275Z0)=\312_\t\276P\t\033=?\016\2239ci\354\274\317\256\026\276B\2575>0\224\247=2y3\275G?\254=\366\342V=\216\000g=KI\331\274\234 \312<\206e\260=\366-1\276\275E\206=\247\314<\275\316\014\021=\005\311\302=\nR\262\275\"d\230<\203\032h<\334rR9\231\025W\274\213\241\316;9\336Y\275Aws\274|\006\244\275\271\361\305\274\014\030\024\275\222\016G\275\2738\347=\235\333A\276\374\177\245\274\367V\352<\233W\247\275\245\265\360\274\251\356\000\2766\216\244=\004\261{\273\334Fk\275I\202\013\276\326\242\257\273\035e\351<\377=\353<\320\353\264\273\005\275\202=6\241\324\274[\3477>\323\tG\275\252Ug=\264%\036=\353\t\216=\017\326\221\274\342 \312<\006\2606\275P\352\232\275\367\303\365;W\346\"\276\352 F=\262l\217=\2005\r=\214x\323<&\225\202\275S\327+=\357\303r\275{\360\257\274q\312\250<\256\330=\274\204(\237=t\005\352\274Yd\351\272\027\355\t>U\026\002=\230HN=N\234\035>\307\231\021>8\032\t\275\265R\216\274)\325\352=R\352\205\275*f\337=\363\363\036\276\274\341b<\005_\303<Y\016\033=\347\336\261\275\207D\243\275\215-\267=hl\017<\024D_\275\031\270_\275.\2416=%\242\033\275@4\n>Q\260\204<\345\212\313=1\020\333\275\323\331L=\233U\211\275y\324K=\243\313\304=j\327\030\275\3610\372\275\276\254f<\326\200\247\275\260\277u\273\232\323L<u\214\'\275\0262\014\275\235i\262=eB\317;\n\001e=e\021\204<\353\233c=\361\275\204= \"\202\272\263j\365=\234V\314\274\343\372\224;%\251\272\275\252\023d\273!\027G=\356\361\033>\257\022\262\275N7j\274`B#>P\3451=\344\234\333=\306\035\274\275\3146\321\274N\242\314=\002\370\032\276^\333\017=\343M+=\332B7\276Tg!\276#pa>;\207\303\275\t\317\322=<\224n=\002\350\202\275\372/U<5}\346\273\372\247\366=h\263\214\275g\261\267\275\336\323\307=\246\026:>r\202\324=\352E\355\274\326\014\206\275\021\240\303\274\353\276\020>1\013\203\275\213X\270=\347\3149\275\244\270\263\275\267\024\025>y\225\317\274Py2\276\240]a\275\377= =\000[\331=T\242\021=\246\331\234=}%\274\275a\343\226\275\016\262\277<M?\202=\t\313\346<Fr\241\274\367\242\007=\354\252\275=\276\321\370=cn\255=\251[\\\275w@E\276\227\004K=\256\225\255=\234\361\375<\024jS\275\2452v;\241Q\301\275\005\302\021;\235\243%>\207\327I\275$\004\017\275\242\232,\276\034\270\242=\022\252$\276\245\335\030>\351yv\275F\026\032\275\204\347\305\275\334p\277\275\233k\233\275dQ\367\272\363\010\007=G\212A\276\274\355\034>\340IO<\035,\317<y\3534\275\214}\241\274@1\233\275\340\317\332=\221\252\026\276\250\324\010=\003\336\332<{\200+>\030\302%\276\272l\372\273\245\000\334\274\341E|=\200\373F\275\247!$\276&\240\320\275\023 \350\2750\002\217\275\267\027\312\273\364i\275\275hl\014=\014L\203<\273V\360\274\3755g\274\232\002P\275D~\241\274EO\325=&\177\346\275n\336\007\276c\315\311=^\216\204\275\362\315y:uM\036=\001N\270\275\0326\223\274\303\321\022\276\030\223\001=\240\365\007;u\305J\276\031\257%\273\216\377\022\276\013\243\t<F\023\007>!.\235\275*\023\324<>\255]\275\035Gk\274X\352,\275\365\344}\274\305VJ;\017\212\234\275r\026\010<\021O\234\275\373\034\231=0\325==Y\211p=\274\203W=\320\364\037>P\274\027\275\300\344\025\275^8?\276\254\241\247\2753R]\275\245\t\001>\247<\315<\241\200\353\273\377\001}\274\333\326\255=\010\252\244="
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "Const_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_4"
      op: "ReadVariableOp"
      input: "network/weights_2"
      input: "^AssignVariableOp_4"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_5"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
            }
            tensor_content: "#.\317<\n\327#<\324\354{;\036\264g<\3461\236<h\251\236\272X\317\203\274\234l\255;\202SA<0\363\347<\200\302O<\n\327#<\026\221\253\274\024f\266<\221\240\016<\034x\034\272\352ek;T\225\266<\331\222\350<\345\331\017;\177\316\207<[\032\372\2731U\326\273\206{\315;\'1\254<v\214\256<\366\267Z<\324\272\214<V\031\242<n\226\007<\345\354`94\2737<\\`\303<\003\021\330<\266\247\032<\345\033\201<\322k\377<1\313-<3\321R\273?Ac<\231c\324;e\345\250;\301\202\347;\265\221\331;s\004\2249Y\260 <\247\320\202<3\345\370;\316!\006<\342\245\263<#\226\t<\217\317I<\000w\267<3\033\206<\210\375\306<.\245\3509\371y2<\201$\204<\376E,<\352\227=<\304\t4<-\220\016<\2636\014\272j\325^;\n\327#<$\253\254<\354\203X<G\347\302<yH\025<\256\341a<Sb\326;\032\233\320<\n\327#<\237\207L\273T\253L<8\203\002\271\233|K<V=\376<\\;\210<}\241q<\030\016H<lV\022<(\314\035\274\353\326f;\273\354\005;{L\306<T\366U;\331\332\324\273\270s\265\273\n\213\267;:\024\374<[N!=\210h\332;\345\275\024<\305\227\340;\331#\311<\033X\304<\021\021\243:\n\327#<\177\"\270<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "Const_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_5"
      op: "ReadVariableOp"
      input: "network/biases_2"
      input: "^AssignVariableOp_5"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_6"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
            tensor_content: "=rk\277\304{2\277\002F\367>\366(\235\275\247\001\233\275\222\310\372\276\315\257\310>\210\273\207>Y\351q>\304k\313>\334\250\r\277\354\224\013>\313\031\003?~\223\351>\030\026\355\272\314\254\350\275Nz4\277\036F\336\276\232M\217;\213\233_\277\261\274\024\277\267\345f\274\201R\303>\223\372F? \000\363\276\273\360D\277/0;\275@`1\277\001Qa?\245\375\245\276\013\002\351\275\201;\035\277\347\255\177>\030\2603\276F\014\366\275\031\036:?TL\220\276\240\0014?j\2775\277\323\206\306>\215\240\017?\245\201\021\275C^\303>\327\355H\277\260\2115>\005\321\333\276\373\037R\277\317n\324\276\364\002\331>\351g\206\274o\344\366=O\366\202=\255=\016\277\227\325\023\275\177N\207\276_Z\311>\224\204\333=\200\310\222\276\033\022\013>\001\315\026\277\006\252C?hG|>QY_>P\250x=\317q\267\275LK\005\277U\365\266\276n\345Y?\302\203\003\276\354k5>\213\315\267>8\373&=\225\037C\277\252U\t>\264\214\\?\027\264%>\323z\301=l\257\325\275\263\261\013\277\036Q-?H\017\027\277pN6?\251\305\252\276\033h\017\277\032\r\327=\031\221\003>6N\303\276\367\257\036\2765\345H?/\017=>O\000\375=\273yg>\033\314\035>\205Q{\275\034\300#;[\023\356\274\021\014\013\277\350m[>8\220\220\275A\327%>\210xG>\254\230\346=0\014\206=u\377Y?\006\361*?\t/\334\276\205\365 ?\357\"\343\275\333i\027\276\273?\213>H\t\214>\017\2247>\341\252\364\2762\205\254>\0222[\276O.L>3TA\277Y\230\221>\205,\020\277\"\363l\276-J\227>\360\363\020\277\323l\022\277\211\274\333\2750L\323\276\002\215\236\276\242=\206\276:\343(\274S\217\324\276v\206\353\274\257\"\021?c,(\276\210\001\301\276 \227\374\274\221j:\276\235\227A\277\024\330,>\025\316\233\274|X\307\275\212\302\032?B\340\372=dka\276l\265\376>\211\212\273\275]ve\276-K\327<\264\314f>)\262P>)\237d>1\230\214=\017\217\352\275L\337\341>\006\'v>\235\370\214>\333E.\275N\357\002\275\275\360\251\276;\310\330\276u0z\277\021H0?P\246\030?\271\356\013\277B\026\230\276\336C\347>\203\370\214=.\345\225=\214L\340\276\n\313\207\276\321!\355>*\3656<\347\357\n\277\276\020\247>v\214\251=c_\226\276\342y#>\241\227\277\275\367\273\273>Z\222\371>3G\024\277?\356\236>\304\\d>5\000\253>\035\252\034\277\353\361\254>\274\3150\277\216\374\006=4\026\252=\016\2444?\373\370\017?\031A\357>\316\037v?\350\035\016\277\331\025v>\361\234d\275=9\023\277\264\366\323>\255s4\277\300J\347\276\204\347|\275\365\227F\277\304\003\017?)(\353\276w\327!>\000\034#?\344rf?C\336\271>\013\001>\277L\033:>UjX<\211\305\324\276\034\250\215\275\276J\025?\273\245S\277\035H2\277>\207\363\276\247\257\353>\316\3352>+\n\223\276\361A\n\276\224\367\024?Rw\030\277U\303\334=A[!\2779\321\220>\255&1?\223\345\'\275\201 9?\\\244\374\276\364~\223>H\216\215>a\007\305\275p.]\277!\301\t>\263\321\t?\244\234\217\276\036\354)\276a\245\347\273\327WB?\275=\017\277\212\261\023\275\237\216\216=\321\312i>\351\374\327>\327\363J\275\377n\257>\343\255\035?\223R]>fn\245>\n\343\t?\330\206\034>\t\226+\277\365\222\243\276\255\3724\275 \320\334\276\211\336Y\276\300\3017?\250\206\231\274\271\223X\276\3610N\277bJ\377>\024|4>\302\001\304\276q\031E?\2119\216>\323\356\374>\233b\r\2777\214\324\276\266iE=^\233\202>X`\274>V\313\200?\373\377\346>\276\200\343\275SG\003?\032\245\001?\2477!\277p\314\277\274\330k\017\277xCi\276\330\337\'?\332\373\247\276~O\334=V\213(\277\364\032\010\277m\346\347\276\256\000J\276_\376\267\276\276I\306=\325\315\265<GZ\327\273\r\3749\277\237z\033>\312\227L?Px\321>\337\037\254\276\035\2419>2s\373\275\336\363&\277\'=\r\275W\260|\277\237\201\306>\233\017Y>\004\'S\2765x\004\277\363\2663=,\020\t=\275\265\303\276\217\234\220\276\024\260:\276\n$\203\277\311\251\265\275\254\332\016\276\250\346\275\276\275\221\"\277\236\253\276\2761\354\205>I\2655>\356\326\276\276\215\246\360>\030\212\016\277\022\001.>NUa\277}\260\264\275\250\312e\277\260Y\372\276\376\225s>\216rH\277\234\r\r\2771\273\n\276\220]u\276\352)P?\261\213\277=a\314\214=\277\214K\277\246\nz?\\\034 \276\353V7>o\334\311\2767\242\220\276u&\237\276\003\306\307\276\327i\203\276\317\236\226=E\335`\276\303\217\030?|\324\373\276H!&\277e[_?\226\223\016>\2077\346\276\301\353\251>\275\251\240\276\361gH?]k\257\275\233\274\200>U\373\356\276\251Y\344>\265\213\230\276(\250\313=C\252n?\350\033e\277D{]\277\010_)?\271\361L=.\306\370\276(\357\344\275\272y\023\277Wuu\275\266\271V?L%\021>\211\266A?\023\367f\277p\026\372>\344u\323>\361Y\002\274\250mF\276\205\375\312=1\301K\275D\347\213\275\031\254B>\301\205;?\307a>\276\315\240\007?.\314\321>\0254P\277\242\335*\277\343\304\321>\353r\345\276]\034\243\275\232\010\020?R\350)\276+-\017>m\362\017?/pl\277\\p\267>\217\204\006\2771\344U??\346N>\321\002k\277w\303+>"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "Const_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_6"
      op: "ReadVariableOp"
      input: "network/output_weights"
      input: "^AssignVariableOp_6"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "Const_7"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "T\354x\273\226L3<8\224\254<H\233d<"
          }
        }
      }
    }
    node {
      name: "AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "Const_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "ReadVariableOp_7"
      op: "ReadVariableOp"
      input: "network/output_bias"
      input: "^AssignVariableOp_7"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 4
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/filename/input"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/filename"
      op: "PlaceholderWithDefault"
      input: "save/filename/input"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/Const"
      op: "PlaceholderWithDefault"
      input: "save/filename"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "save/StaticRegexFullMatch"
      op: "StaticRegexFullMatch"
      input: "save/Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "pattern"
        value {
          s: "^s3://.*"
        }
      }
    }
    node {
      name: "save/Const_1"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ".part"
          }
        }
      }
    }
    node {
      name: "save/Const_2"
      op: "Const"
      device: "/device:CPU:*"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_1ea7be1d11a244a3ace4e6dc71f47260/part"
          }
        }
      }
    }
    node {
      name: "save/Select"
      op: "Select"
      input: "save/StaticRegexFullMatch"
      input: "save/Const_1"
      input: "save/Const_2"
      device: "/device:CPU:*"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/Select"
      device: "/device:CPU:*"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "beta1_power/Read/ReadVariableOp"
      input: "beta2_power/Read/ReadVariableOp"
      input: "network/biases/Read/ReadVariableOp"
      input: "network/biases/Adam/Read/ReadVariableOp"
      input: "network/biases/Adam_1/Read/ReadVariableOp"
      input: "network/biases_1/Read/ReadVariableOp"
      input: "network/biases_1/Adam/Read/ReadVariableOp"
      input: "network/biases_1/Adam_1/Read/ReadVariableOp"
      input: "network/biases_2/Read/ReadVariableOp"
      input: "network/biases_2/Adam/Read/ReadVariableOp"
      input: "network/biases_2/Adam_1/Read/ReadVariableOp"
      input: "network/output_bias/Read/ReadVariableOp"
      input: "network/output_bias/Adam/Read/ReadVariableOp"
      input: "network/output_bias/Adam_1/Read/ReadVariableOp"
      input: "network/output_weights/Read/ReadVariableOp"
      input: "network/output_weights/Adam/Read/ReadVariableOp"
      input: "network/output_weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights/Read/ReadVariableOp"
      input: "network/weights/Adam/Read/ReadVariableOp"
      input: "network/weights/Adam_1/Read/ReadVariableOp"
      input: "network/weights_1/Read/ReadVariableOp"
      input: "network/weights_1/Adam/Read/ReadVariableOp"
      input: "network/weights_1/Adam_1/Read/ReadVariableOp"
      input: "network/weights_2/Read/ReadVariableOp"
      input: "network/weights_2/Adam/Read/ReadVariableOp"
      input: "network/weights_2/Adam_1/Read/ReadVariableOp"
      device: "/device:CPU:0"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      device: "/device:CPU:0"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/MergeV2Checkpoints"
      input: "^save/control_dependency"
      device: "/device:CPU:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: "beta1_power"
            string_val: "beta2_power"
            string_val: "network/biases"
            string_val: "network/biases/Adam"
            string_val: "network/biases/Adam_1"
            string_val: "network/biases_1"
            string_val: "network/biases_1/Adam"
            string_val: "network/biases_1/Adam_1"
            string_val: "network/biases_2"
            string_val: "network/biases_2/Adam"
            string_val: "network/biases_2/Adam_1"
            string_val: "network/output_bias"
            string_val: "network/output_bias/Adam"
            string_val: "network/output_bias/Adam_1"
            string_val: "network/output_weights"
            string_val: "network/output_weights/Adam"
            string_val: "network/output_weights/Adam_1"
            string_val: "network/weights"
            string_val: "network/weights/Adam"
            string_val: "network/weights/Adam_1"
            string_val: "network/weights_1"
            string_val: "network/weights_1/Adam"
            string_val: "network/weights_1/Adam_1"
            string_val: "network/weights_2"
            string_val: "network/weights_2/Adam"
            string_val: "network/weights_2/Adam_1"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 26
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 26
              }
            }
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Identity_1"
      op: "Identity"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp"
      op: "AssignVariableOp"
      input: "beta1_power"
      input: "save/Identity_1"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_2"
      op: "Identity"
      input: "save/RestoreV2:1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_1"
      op: "AssignVariableOp"
      input: "beta2_power"
      input: "save/Identity_2"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_3"
      op: "Identity"
      input: "save/RestoreV2:2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_2"
      op: "AssignVariableOp"
      input: "network/biases"
      input: "save/Identity_3"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_4"
      op: "Identity"
      input: "save/RestoreV2:3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_3"
      op: "AssignVariableOp"
      input: "network/biases/Adam"
      input: "save/Identity_4"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_5"
      op: "Identity"
      input: "save/RestoreV2:4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_4"
      op: "AssignVariableOp"
      input: "network/biases/Adam_1"
      input: "save/Identity_5"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_6"
      op: "Identity"
      input: "save/RestoreV2:5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_5"
      op: "AssignVariableOp"
      input: "network/biases_1"
      input: "save/Identity_6"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_7"
      op: "Identity"
      input: "save/RestoreV2:6"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_6"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam"
      input: "save/Identity_7"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_8"
      op: "Identity"
      input: "save/RestoreV2:7"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_7"
      op: "AssignVariableOp"
      input: "network/biases_1/Adam_1"
      input: "save/Identity_8"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_9"
      op: "Identity"
      input: "save/RestoreV2:8"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_8"
      op: "AssignVariableOp"
      input: "network/biases_2"
      input: "save/Identity_9"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_10"
      op: "Identity"
      input: "save/RestoreV2:9"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_9"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam"
      input: "save/Identity_10"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_11"
      op: "Identity"
      input: "save/RestoreV2:10"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_10"
      op: "AssignVariableOp"
      input: "network/biases_2/Adam_1"
      input: "save/Identity_11"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_12"
      op: "Identity"
      input: "save/RestoreV2:11"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_11"
      op: "AssignVariableOp"
      input: "network/output_bias"
      input: "save/Identity_12"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_13"
      op: "Identity"
      input: "save/RestoreV2:12"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_12"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam"
      input: "save/Identity_13"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_14"
      op: "Identity"
      input: "save/RestoreV2:13"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_13"
      op: "AssignVariableOp"
      input: "network/output_bias/Adam_1"
      input: "save/Identity_14"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_15"
      op: "Identity"
      input: "save/RestoreV2:14"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_14"
      op: "AssignVariableOp"
      input: "network/output_weights"
      input: "save/Identity_15"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_16"
      op: "Identity"
      input: "save/RestoreV2:15"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_15"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam"
      input: "save/Identity_16"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_17"
      op: "Identity"
      input: "save/RestoreV2:16"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_16"
      op: "AssignVariableOp"
      input: "network/output_weights/Adam_1"
      input: "save/Identity_17"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_18"
      op: "Identity"
      input: "save/RestoreV2:17"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_17"
      op: "AssignVariableOp"
      input: "network/weights"
      input: "save/Identity_18"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_19"
      op: "Identity"
      input: "save/RestoreV2:18"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_18"
      op: "AssignVariableOp"
      input: "network/weights/Adam"
      input: "save/Identity_19"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_20"
      op: "Identity"
      input: "save/RestoreV2:19"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_19"
      op: "AssignVariableOp"
      input: "network/weights/Adam_1"
      input: "save/Identity_20"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_21"
      op: "Identity"
      input: "save/RestoreV2:20"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_20"
      op: "AssignVariableOp"
      input: "network/weights_1"
      input: "save/Identity_21"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_22"
      op: "Identity"
      input: "save/RestoreV2:21"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_21"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam"
      input: "save/Identity_22"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_23"
      op: "Identity"
      input: "save/RestoreV2:22"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_22"
      op: "AssignVariableOp"
      input: "network/weights_1/Adam_1"
      input: "save/Identity_23"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_24"
      op: "Identity"
      input: "save/RestoreV2:23"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_23"
      op: "AssignVariableOp"
      input: "network/weights_2"
      input: "save/Identity_24"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_25"
      op: "Identity"
      input: "save/RestoreV2:24"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_24"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam"
      input: "save/Identity_25"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/Identity_26"
      op: "Identity"
      input: "save/RestoreV2:25"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
    }
    node {
      name: "save/AssignVariableOp_25"
      op: "AssignVariableOp"
      input: "network/weights_2/Adam_1"
      input: "save/Identity_26"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/AssignVariableOp"
      input: "^save/AssignVariableOp_1"
      input: "^save/AssignVariableOp_10"
      input: "^save/AssignVariableOp_11"
      input: "^save/AssignVariableOp_12"
      input: "^save/AssignVariableOp_13"
      input: "^save/AssignVariableOp_14"
      input: "^save/AssignVariableOp_15"
      input: "^save/AssignVariableOp_16"
      input: "^save/AssignVariableOp_17"
      input: "^save/AssignVariableOp_18"
      input: "^save/AssignVariableOp_19"
      input: "^save/AssignVariableOp_2"
      input: "^save/AssignVariableOp_20"
      input: "^save/AssignVariableOp_21"
      input: "^save/AssignVariableOp_22"
      input: "^save/AssignVariableOp_23"
      input: "^save/AssignVariableOp_24"
      input: "^save/AssignVariableOp_25"
      input: "^save/AssignVariableOp_3"
      input: "^save/AssignVariableOp_4"
      input: "^save/AssignVariableOp_5"
      input: "^save/AssignVariableOp_6"
      input: "^save/AssignVariableOp_7"
      input: "^save/AssignVariableOp_8"
      input: "^save/AssignVariableOp_9"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    versions {
      producer: 175
    }
  }
  saver_def {
    filename_tensor_name: "save/Const:0"
    save_tensor_name: "save/Identity:0"
    restore_op_name: "save/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "train_op"
    value {
      node_list {
        value: "minimize"
      }
    }
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\021network/weights:0\022\026network/weights/Assign\032%network/weights/Read/ReadVariableOp:0(\0012\032network/truncated_normal:08\001"
        value: "\n\020network/biases:0\022\025network/biases/Assign\032$network/biases/Read/ReadVariableOp:0(\0012\017network/Const:08\001"
        value: "\n\023network/weights_1:0\022\030network/weights_1/Assign\032\'network/weights_1/Read/ReadVariableOp:0(\0012\034network/truncated_normal_1:08\001"
        value: "\n\022network/biases_1:0\022\027network/biases_1/Assign\032&network/biases_1/Read/ReadVariableOp:0(\0012\021network/Const_1:08\001"
        value: "\n\023network/weights_2:0\022\030network/weights_2/Assign\032\'network/weights_2/Read/ReadVariableOp:0(\0012\034network/truncated_normal_2:08\001"
        value: "\n\022network/biases_2:0\022\027network/biases_2/Assign\032&network/biases_2/Read/ReadVariableOp:0(\0012\021network/Const_2:08\001"
        value: "\n\030network/output_weights:0\022\035network/output_weights/Assign\032,network/output_weights/Read/ReadVariableOp:0(\0012\034network/truncated_normal_3:08\001"
        value: "\n\025network/output_bias:0\022\032network/output_bias/Assign\032)network/output_bias/Read/ReadVariableOp:0(\0012\021network/Const_3:08\001"
        value: "\n\rbeta1_power:0\022\022beta1_power/Assign\032!beta1_power/Read/ReadVariableOp:0(\0012\'beta1_power/Initializer/initial_value:0"
        value: "\n\rbeta2_power:0\022\022beta2_power/Assign\032!beta2_power/Read/ReadVariableOp:0(\0012\'beta2_power/Initializer/initial_value:0"
        value: "\n\026network/weights/Adam:0\022\033network/weights/Adam/Assign\032*network/weights/Adam/Read/ReadVariableOp:0(\0012(network/weights/Adam/Initializer/zeros:0"
        value: "\n\030network/weights/Adam_1:0\022\035network/weights/Adam_1/Assign\032,network/weights/Adam_1/Read/ReadVariableOp:0(\0012*network/weights/Adam_1/Initializer/zeros:0"
        value: "\n\025network/biases/Adam:0\022\032network/biases/Adam/Assign\032)network/biases/Adam/Read/ReadVariableOp:0(\0012\'network/biases/Adam/Initializer/zeros:0"
        value: "\n\027network/biases/Adam_1:0\022\034network/biases/Adam_1/Assign\032+network/biases/Adam_1/Read/ReadVariableOp:0(\0012)network/biases/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_1/Adam:0\022\035network/weights_1/Adam/Assign\032,network/weights_1/Adam/Read/ReadVariableOp:0(\0012*network/weights_1/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_1/Adam_1:0\022\037network/weights_1/Adam_1/Assign\032.network/weights_1/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_1/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_1/Adam:0\022\034network/biases_1/Adam/Assign\032+network/biases_1/Adam/Read/ReadVariableOp:0(\0012)network/biases_1/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_1/Adam_1:0\022\036network/biases_1/Adam_1/Assign\032-network/biases_1/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_1/Adam_1/Initializer/zeros:0"
        value: "\n\030network/weights_2/Adam:0\022\035network/weights_2/Adam/Assign\032,network/weights_2/Adam/Read/ReadVariableOp:0(\0012*network/weights_2/Adam/Initializer/zeros:0"
        value: "\n\032network/weights_2/Adam_1:0\022\037network/weights_2/Adam_1/Assign\032.network/weights_2/Adam_1/Read/ReadVariableOp:0(\0012,network/weights_2/Adam_1/Initializer/zeros:0"
        value: "\n\027network/biases_2/Adam:0\022\034network/biases_2/Adam/Assign\032+network/biases_2/Adam/Read/ReadVariableOp:0(\0012)network/biases_2/Adam/Initializer/zeros:0"
        value: "\n\031network/biases_2/Adam_1:0\022\036network/biases_2/Adam_1/Assign\032-network/biases_2/Adam_1/Read/ReadVariableOp:0(\0012+network/biases_2/Adam_1/Initializer/zeros:0"
        value: "\n\035network/output_weights/Adam:0\022\"network/output_weights/Adam/Assign\0321network/output_weights/Adam/Read/ReadVariableOp:0(\0012/network/output_weights/Adam/Initializer/zeros:0"
        value: "\n\037network/output_weights/Adam_1:0\022$network/output_weights/Adam_1/Assign\0323network/output_weights/Adam_1/Read/ReadVariableOp:0(\00121network/output_weights/Adam_1/Initializer/zeros:0"
        value: "\n\032network/output_bias/Adam:0\022\037network/output_bias/Adam/Assign\032.network/output_bias/Adam/Read/ReadVariableOp:0(\0012,network/output_bias/Adam/Initializer/zeros:0"
        value: "\n\034network/output_bias/Adam_1:0\022!network/output_bias/Adam_1/Assign\0320network/output_bias/Adam_1/Read/ReadVariableOp:0(\0012.network/output_bias/Adam_1/Initializer/zeros:0"
      }
    }
  }
}
